
build-lm3s6965evb-test/lk.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <vectab>:
/*
 * clean (writeback) data on the range and then throw away the instruction cache,
 * ensuring that new instructions fetched from the range are not stale.
 */
void arch_sync_cache_range(addr_t start, size_t len)
{
       0:	20 05 00 20 79 09 00 00 29 09 00 00 3d 09 00 00      .. y...)...=...

#else
/* Cortex-M0 & Cortex-M0+    */
void spin_cycles(uint32_t cycles)
{
    asm (
      10:	47 09 00 00 51 09 00 00 5b 09 00 00 00 00 00 00     G...Q...[.......
	...

    GET_HIGH_WORD(hx,x);
    ix = hx & 0x7fffffff;           /* high word of |x| */
    if (ix >= 0x3FE59428) { /* |x| >= 0.6744 */
        if (hx < 0) {
            x = -x;
      2c:	5f 0a 00 00 65 09 00 00 00 00 00 00 51 0a 00 00     _...e.......Q...
            y = -y;
      3c:	55 3e 00 00                                         U>..

00000040 <vectab2>:
        }
        z = pio4 - x;
      40:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
        w = pio4lo - y;
      50:	35 06 00 00 6d 02 00 00 35 06 00 00 35 06 00 00     5...m...5...5...
        x = z + w;
        y = 0.0;
      60:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
    }
    z = x * x;
      70:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     */
    r = T[1] + w * (T[3] + w * (T[5] + w * (T[7] + w * (T[9] +
                                            w * T[11]))));
    v = z * (T[2] + w * (T[4] + w * (T[6] + w * (T[8] + w * (T[10] +
                                     w * T[12])))));
    s = z * x;
      80:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     * Break x^5*(T[1]+x^2*T[2]+...) into
     * x^5(T[1]+x^4*T[3]+...+x^20*T[11]) +
     * x^5(x^2*(T[2]+x^4*T[4]+...+x^22*[T12]))
     */
    r = T[1] + w * (T[3] + w * (T[5] + w * (T[7] + w * (T[9] +
                                            w * T[11]))));
      90:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
      a0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
    /*
     * Break x^5*(T[1]+x^2*T[2]+...) into
     * x^5(T[1]+x^4*T[3]+...+x^20*T[11]) +
     * x^5(x^2*(T[2]+x^4*T[4]+...+x^22*[T12]))
     */
    r = T[1] + w * (T[3] + w * (T[5] + w * (T[7] + w * (T[9] +
      b0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
      c0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
      d0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
      e0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
      f0:	39 05 00 00 35 06 00 00 35 06 00 00 35 06 00 00     9...5...5...5...
     100:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
                                            w * T[11]))));
    v = z * (T[2] + w * (T[4] + w * (T[6] + w * (T[8] + w * (T[10] +
                                     w * T[12])))));
     110:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     * x^5(T[1]+x^4*T[3]+...+x^20*T[11]) +
     * x^5(x^2*(T[2]+x^4*T[4]+...+x^22*[T12]))
     */
    r = T[1] + w * (T[3] + w * (T[5] + w * (T[7] + w * (T[9] +
                                            w * T[11]))));
    v = z * (T[2] + w * (T[4] + w * (T[6] + w * (T[8] + w * (T[10] +
     120:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     130:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     140:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     150:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     160:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     170:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     180:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
                                     w * T[12])))));
    s = z * x;
    r = y + z * (s * (r + v) + y);
     190:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     1a0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     1b0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
    r += T[0] * s;
     1c0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     1d0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
    w = x + r;
     1e0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
    if (ix >= 0x3FE59428) {
     1f0:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     200:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     210:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     220:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     230:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     240:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     250:	35 06 00 00 35 06 00 00 35 06 00 00 35 06 00 00     5...5...5...5...
     260:	35 06 00 00 35 06 00 00 35 06 00 00                 5...5...5...

0000026c <stellaris_uart0_irq>:
     26c:	b510      	push	{r4, r14}
     26e:	f000 fa5b 	bl	728 <arm_cm_irq_entry>
     272:	2101      	movs	r1, #1
        v = (double) iy;
     274:	480d      	ldr	r0, [pc, #52]	; (2ac <stellaris_uart0_irq+0x40>)
     276:	f009 ffc3 	bl	a200 <UARTIntStatus>
        return (double) (1 - ((hx >> 30) & 2)) *
     27a:	4601      	mov	r1, r0
    s = z * x;
    r = y + z * (s * (r + v) + y);
    r += T[0] * s;
    w = x + r;
    if (ix >= 0x3FE59428) {
        v = (double) iy;
     27c:	480b      	ldr	r0, [pc, #44]	; (2ac <stellaris_uart0_irq+0x40>)
        return (double) (1 - ((hx >> 30) & 2)) *
     27e:	f009 ffdb 	bl	a238 <UARTIntClear>
     282:	2400      	movs	r4, #0
     284:	4809      	ldr	r0, [pc, #36]	; (2ac <stellaris_uart0_irq+0x40>)
     286:	f009 ff49 	bl	a11c <UARTCharsAvail>
     28a:	b148      	cbz	r0, 2a0 <stellaris_uart0_irq+0x34>
     28c:	4807      	ldr	r0, [pc, #28]	; (2ac <stellaris_uart0_irq+0x40>)
               (v - 2.0 * (x - (w * w / (w + v) - r)));
     28e:	f009 ff61 	bl	a154 <UARTCharGetNonBlocking>
    r = y + z * (s * (r + v) + y);
    r += T[0] * s;
    w = x + r;
    if (ix >= 0x3FE59428) {
        v = (double) iy;
        return (double) (1 - ((hx >> 30) & 2)) *
     292:	2200      	movs	r2, #0
               (v - 2.0 * (x - (w * w / (w + v) - r)));
     294:	b2c1      	uxtb	r1, r0
     296:	4806      	ldr	r0, [pc, #24]	; (2b0 <stellaris_uart0_irq+0x44>)
     298:	f006 fd36 	bl	6d08 <cbuf_write_char>
     29c:	2401      	movs	r4, #1
     29e:	e7f1      	b.n	284 <stellaris_uart0_irq+0x18>
     2a0:	4620      	mov	r0, r4
     2a2:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
     2a6:	f000 ba49 	b.w	73c <arm_cm_irq_exit>
     2aa:	bf00      	nop
     2ac:	4000c000 	.word	0x4000c000
     2b0:	20000520 	.word	0x20000520

000002b4 <stellaris_debug_early_init>:
     2b4:	b510      	push	{r4, r14}
     2b6:	4809      	ldr	r0, [pc, #36]	; (2dc <stellaris_debug_early_init+0x28>)
     2b8:	f009 fc72 	bl	9ba0 <SysCtlPeripheralEnable>
     2bc:	f009 fd5c 	bl	9d78 <SysCtlClockGet>
     2c0:	4c07      	ldr	r4, [pc, #28]	; (2e0 <stellaris_debug_early_init+0x2c>)
     2c2:	4601      	mov	r1, r0
     2c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
     2c8:	4620      	mov	r0, r4
     2ca:	2360      	movs	r3, #96	; 0x60
     2cc:	f009 fea8 	bl	a020 <UARTConfigSetExpClk>
     2d0:	4620      	mov	r0, r4
     2d2:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
     2d6:	f009 be5d 	b.w	9f94 <UARTEnable>
     2da:	bf00      	nop
     2dc:	10000001 	.word	0x10000001
     2e0:	4000c000 	.word	0x4000c000

000002e4 <stellaris_debug_init>:
     2e4:	b508      	push	{r3, r14}
    r = y + z * (s * (r + v) + y);
    r += T[0] * s;
    w = x + r;
    if (ix >= 0x3FE59428) {
        v = (double) iy;
        return (double) (1 - ((hx >> 30) & 2)) *
     2e6:	4806      	ldr	r0, [pc, #24]	; (300 <stellaris_debug_init+0x1c>)
     2e8:	2110      	movs	r1, #16
     2ea:	f006 fc03 	bl	6af4 <cbuf_initialize>
     2ee:	4805      	ldr	r0, [pc, #20]	; (304 <stellaris_debug_init+0x20>)
               (v - 2.0 * (x - (w * w / (w + v) - r)));
    }
    if (iy == 1)
     2f0:	2150      	movs	r1, #80	; 0x50
     2f2:	f009 ff69 	bl	a1c8 <UARTIntEnable>
         * -1.0 / (x+r) here
         */
        /* compute -1.0 / (x+r) accurately */
        double a, t;
        z = w;
        SET_LOW_WORD(z,0);
     2f6:	4b04      	ldr	r3, [pc, #16]	; (308 <stellaris_debug_init+0x24>)
     2f8:	2220      	movs	r2, #32
     2fa:	601a      	str	r2, [r3, #0]
        v = r - (z - x);    /* z+v = r+x */
        t = a = -1.0 / w;   /* a = -1.0/w */
     2fc:	bd08      	pop	{r3, r15}
     2fe:	bf00      	nop
     300:	20000520 	.word	0x20000520
         * -1.0 / (x+r) here
         */
        /* compute -1.0 / (x+r) accurately */
        double a, t;
        z = w;
        SET_LOW_WORD(z,0);
     304:	4000c000 	.word	0x4000c000
        v = r - (z - x);    /* z+v = r+x */
        t = a = -1.0 / w;   /* a = -1.0/w */
     308:	e000e100 	.word	0xe000e100

0000030c <platform_dputc>:
        SET_LOW_WORD(t,0);
        s = 1.0 + t * z;
     30c:	280a      	cmp	r0, #10
     30e:	b510      	push	{r4, r14}
        /* compute -1.0 / (x+r) accurately */
        double a, t;
        z = w;
        SET_LOW_WORD(z,0);
        v = r - (z - x);    /* z+v = r+x */
        t = a = -1.0 / w;   /* a = -1.0/w */
     310:	4604      	mov	r4, r0
        SET_LOW_WORD(t,0);
        s = 1.0 + t * z;
     312:	d102      	bne.n	31a <platform_dputc+0xe>
        /* compute -1.0 / (x+r) accurately */
        double a, t;
        z = w;
        SET_LOW_WORD(z,0);
        v = r - (z - x);    /* z+v = r+x */
        t = a = -1.0 / w;   /* a = -1.0/w */
     314:	200d      	movs	r0, #13
        SET_LOW_WORD(t,0);
        s = 1.0 + t * z;
     316:	f7ff fff9 	bl	30c <platform_dputc>
     31a:	4621      	mov	r1, r4
     31c:	4802      	ldr	r0, [pc, #8]	; (328 <platform_dputc+0x1c>)
     31e:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
        double a, t;
        z = w;
        SET_LOW_WORD(z,0);
        v = r - (z - x);    /* z+v = r+x */
        t = a = -1.0 / w;   /* a = -1.0/w */
        SET_LOW_WORD(t,0);
     322:	f009 bf35 	b.w	a190 <UARTCharPut>
        s = 1.0 + t * z;
     326:	bf00      	nop
         */
        /* compute -1.0 / (x+r) accurately */
        double a, t;
        z = w;
        SET_LOW_WORD(z,0);
        v = r - (z - x);    /* z+v = r+x */
     328:	4000c000 	.word	0x4000c000

0000032c <platform_dgetc>:
     32c:	4603      	mov	r3, r0
     32e:	460a      	mov	r2, r1
     330:	4801      	ldr	r0, [pc, #4]	; (338 <platform_dgetc+0xc>)
     332:	4619      	mov	r1, r3
     334:	f006 bd22 	b.w	6d7c <cbuf_read_char>
     338:	20000520 	.word	0x20000520

0000033c <stellaris_gpio_early_init>:
     33c:	b508      	push	{r3, r14}
     33e:	480e      	ldr	r0, [pc, #56]	; (378 <stellaris_gpio_early_init+0x3c>)
     340:	f009 fc2e 	bl	9ba0 <SysCtlPeripheralEnable>
        t = a = -1.0 / w;   /* a = -1.0/w */
        SET_LOW_WORD(t,0);
        s = 1.0 + t * z;
        return t + a * (s + t * v);
     344:	480d      	ldr	r0, [pc, #52]	; (37c <stellaris_gpio_early_init+0x40>)
     346:	f009 fc2b 	bl	9ba0 <SysCtlPeripheralEnable>
     34a:	480d      	ldr	r0, [pc, #52]	; (380 <stellaris_gpio_early_init+0x44>)
     34c:	f009 fc28 	bl	9ba0 <SysCtlPeripheralEnable>
     350:	480c      	ldr	r0, [pc, #48]	; (384 <stellaris_gpio_early_init+0x48>)
     352:	f009 fc25 	bl	9ba0 <SysCtlPeripheralEnable>
     356:	480c      	ldr	r0, [pc, #48]	; (388 <stellaris_gpio_early_init+0x4c>)
     358:	f009 fc22 	bl	9ba0 <SysCtlPeripheralEnable>
     35c:	480b      	ldr	r0, [pc, #44]	; (38c <stellaris_gpio_early_init+0x50>)
     35e:	f009 fc1f 	bl	9ba0 <SysCtlPeripheralEnable>
     362:	480b      	ldr	r0, [pc, #44]	; (390 <stellaris_gpio_early_init+0x54>)
     364:	f009 fc1c 	bl	9ba0 <SysCtlPeripheralEnable>
     368:	480a      	ldr	r0, [pc, #40]	; (394 <stellaris_gpio_early_init+0x58>)
     36a:	f009 fc19 	bl	9ba0 <SysCtlPeripheralEnable>
     36e:	e8bd 4008 	ldmia.w	r13!, {r3, r14}
    }
}
     372:	4809      	ldr	r0, [pc, #36]	; (398 <stellaris_gpio_early_init+0x5c>)
     374:	f009 bc14 	b.w	9ba0 <SysCtlPeripheralEnable>
     378:	20000001 	.word	0x20000001
     37c:	20000002 	.word	0x20000002
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOG);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOH);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOJ);
     380:	20000004 	.word	0x20000004
     384:	20000008 	.word	0x20000008
     388:	20000010 	.word	0x20000010
     38c:	20000020 	.word	0x20000020
     390:	20000040 	.word	0x20000040
     394:	20000080 	.word	0x20000080
     398:	20000100 	.word	0x20000100

0000039c <stellaris_gpio_init>:
}

void stellaris_gpio_init(void)
{
     39c:	4770      	bx	r14
	...

000003a0 <platform_early_init>:

void stellaris_usbc_early_init(void);
void stellaris_usbc_init(void);

void platform_early_init(void)
{
     3a0:	b508      	push	{r3, r14}
    config |= SYSCTL_XTAL_8MHZ;
#else
#error add more cases for additional frequencies
#endif

    SysCtlClockSet(config);
     3a2:	4807      	ldr	r0, [pc, #28]	; (3c0 <platform_early_init+0x20>)
     3a4:	f009 fc3c 	bl	9c20 <SysCtlClockSet>

    // start the generic systick timer
    arm_cm_systick_init(SysCtlClockGet());
     3a8:	f009 fce6 	bl	9d78 <SysCtlClockGet>
     3ac:	f003 fda4 	bl	3ef8 <arm_cm_systick_init>

    stellaris_gpio_early_init();
     3b0:	f7ff ffc4 	bl	33c <stellaris_gpio_early_init>

    stellaris_debug_early_init();
     3b4:	f7ff ff7e 	bl	2b4 <stellaris_debug_early_init>

    stellaris_usbc_early_init();
}
     3b8:	e8bd 4008 	ldmia.w	r13!, {r3, r14}

    stellaris_gpio_early_init();

    stellaris_debug_early_init();

    stellaris_usbc_early_init();
     3bc:	f000 b892 	b.w	4e4 <stellaris_usbc_early_init>
     3c0:	01c00380 	.word	0x01c00380

000003c4 <platform_init>:
}

void platform_init(void)
{
     3c4:	b510      	push	{r4, r14}
    stellaris_gpio_init();
     3c6:	f7ff ffe9 	bl	39c <stellaris_gpio_init>
    stellaris_debug_init();
    stellaris_usbc_init();

    // print device information
    printf("raw revision registers: 0x%lx 0x%lx\n", HWREG(SYSCTL_DID0), HWREG(SYSCTL_DID1));
     3ca:	4c32      	ldr	r4, [pc, #200]	; (494 <platform_init+0xd0>)
}

void platform_init(void)
{
    stellaris_gpio_init();
    stellaris_debug_init();
     3cc:	f7ff ff8a 	bl	2e4 <stellaris_debug_init>
    stellaris_usbc_init();
     3d0:	f000 f88a 	bl	4e8 <stellaris_usbc_init>

    // print device information
    printf("raw revision registers: 0x%lx 0x%lx\n", HWREG(SYSCTL_DID0), HWREG(SYSCTL_DID1));
     3d4:	4b30      	ldr	r3, [pc, #192]	; (498 <platform_init+0xd4>)
     3d6:	6821      	ldr	r1, [r4, #0]
     3d8:	4830      	ldr	r0, [pc, #192]	; (49c <platform_init+0xd8>)
     3da:	681a      	ldr	r2, [r3, #0]
     3dc:	f00c fa54 	bl	c888 <_printf>

    printf("stellaris device class: ");
     3e0:	482f      	ldr	r0, [pc, #188]	; (4a0 <platform_init+0xdc>)
     3e2:	f00c fa51 	bl	c888 <_printf>
    if (CLASS_IS_SANDSTORM) printf("sandstorm");
     3e6:	6823      	ldr	r3, [r4, #0]
     3e8:	f013 4fe0 	tst.w	r3, #1879048192	; 0x70000000
     3ec:	d005      	beq.n	3fa <platform_init+0x36>
     3ee:	6822      	ldr	r2, [r4, #0]
     3f0:	4b2c      	ldr	r3, [pc, #176]	; (4a4 <platform_init+0xe0>)
     3f2:	4013      	ands	r3, r2
     3f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
     3f8:	d102      	bne.n	400 <platform_init+0x3c>
     3fa:	482b      	ldr	r0, [pc, #172]	; (4a8 <platform_init+0xe4>)
     3fc:	f00c fa44 	bl	c888 <_printf>
    if (CLASS_IS_FURY) printf("fury");
     400:	6822      	ldr	r2, [r4, #0]
     402:	4b28      	ldr	r3, [pc, #160]	; (4a4 <platform_init+0xe0>)
     404:	4013      	ands	r3, r2
     406:	4a29      	ldr	r2, [pc, #164]	; (4ac <platform_init+0xe8>)
     408:	4293      	cmp	r3, r2
     40a:	d102      	bne.n	412 <platform_init+0x4e>
     40c:	4828      	ldr	r0, [pc, #160]	; (4b0 <platform_init+0xec>)
     40e:	f00c fa3b 	bl	c888 <_printf>
    if (CLASS_IS_DUSTDEVIL) printf("dustdevil");
     412:	4a20      	ldr	r2, [pc, #128]	; (494 <platform_init+0xd0>)
     414:	4b23      	ldr	r3, [pc, #140]	; (4a4 <platform_init+0xe0>)
     416:	6811      	ldr	r1, [r2, #0]
     418:	4614      	mov	r4, r2
     41a:	400b      	ands	r3, r1
     41c:	4925      	ldr	r1, [pc, #148]	; (4b4 <platform_init+0xf0>)
     41e:	428b      	cmp	r3, r1
     420:	d102      	bne.n	428 <platform_init+0x64>
     422:	4825      	ldr	r0, [pc, #148]	; (4b8 <platform_init+0xf4>)
     424:	f00c fa30 	bl	c888 <_printf>
    if (CLASS_IS_TEMPEST) printf("tempst");
     428:	6822      	ldr	r2, [r4, #0]
     42a:	4b1e      	ldr	r3, [pc, #120]	; (4a4 <platform_init+0xe0>)
     42c:	4013      	ands	r3, r2
     42e:	4a23      	ldr	r2, [pc, #140]	; (4bc <platform_init+0xf8>)
     430:	4293      	cmp	r3, r2
     432:	d102      	bne.n	43a <platform_init+0x76>
     434:	4822      	ldr	r0, [pc, #136]	; (4c0 <platform_init+0xfc>)
     436:	f00c fa27 	bl	c888 <_printf>
    if (CLASS_IS_FIRESTORM) printf("firestorm");
     43a:	4a16      	ldr	r2, [pc, #88]	; (494 <platform_init+0xd0>)
     43c:	4b19      	ldr	r3, [pc, #100]	; (4a4 <platform_init+0xe0>)
     43e:	6811      	ldr	r1, [r2, #0]
     440:	4614      	mov	r4, r2
     442:	400b      	ands	r3, r1
     444:	491f      	ldr	r1, [pc, #124]	; (4c4 <platform_init+0x100>)
     446:	428b      	cmp	r3, r1
     448:	d102      	bne.n	450 <platform_init+0x8c>
     44a:	481f      	ldr	r0, [pc, #124]	; (4c8 <platform_init+0x104>)
     44c:	f00c fa1c 	bl	c888 <_printf>
    if (CLASS_IS_BLIZZARD) printf("blizzard");
     450:	6822      	ldr	r2, [r4, #0]
     452:	4b14      	ldr	r3, [pc, #80]	; (4a4 <platform_init+0xe0>)
     454:	4013      	ands	r3, r2
     456:	4a1d      	ldr	r2, [pc, #116]	; (4cc <platform_init+0x108>)
     458:	4293      	cmp	r3, r2
     45a:	d102      	bne.n	462 <platform_init+0x9e>
     45c:	481c      	ldr	r0, [pc, #112]	; (4d0 <platform_init+0x10c>)
     45e:	f00c fa13 	bl	c888 <_printf>
    printf("\n");

    printf("revision register: ");
    uint rev = (HWREG(SYSCTL_DID0) & SYSCTL_DID0_MAJ_M) >> 8;
     462:	4c0c      	ldr	r4, [pc, #48]	; (494 <platform_init+0xd0>)
    if (CLASS_IS_FURY) printf("fury");
    if (CLASS_IS_DUSTDEVIL) printf("dustdevil");
    if (CLASS_IS_TEMPEST) printf("tempst");
    if (CLASS_IS_FIRESTORM) printf("firestorm");
    if (CLASS_IS_BLIZZARD) printf("blizzard");
    printf("\n");
     464:	481b      	ldr	r0, [pc, #108]	; (4d4 <platform_init+0x110>)
     466:	f00c fa0f 	bl	c888 <_printf>

    printf("revision register: ");
     46a:	481b      	ldr	r0, [pc, #108]	; (4d8 <platform_init+0x114>)
     46c:	f00c fa0c 	bl	c888 <_printf>
    uint rev = (HWREG(SYSCTL_DID0) & SYSCTL_DID0_MAJ_M) >> 8;
     470:	6821      	ldr	r1, [r4, #0]
    printf("%c", rev + 'A');
     472:	481a      	ldr	r0, [pc, #104]	; (4dc <platform_init+0x118>)
    if (CLASS_IS_FIRESTORM) printf("firestorm");
    if (CLASS_IS_BLIZZARD) printf("blizzard");
    printf("\n");

    printf("revision register: ");
    uint rev = (HWREG(SYSCTL_DID0) & SYSCTL_DID0_MAJ_M) >> 8;
     474:	f3c1 2107 	ubfx	r1, r1, #8, #8
    printf("%c", rev + 'A');
     478:	3141      	adds	r1, #65	; 0x41
     47a:	f00c fa05 	bl	c888 <_printf>
    printf("%ld", HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MIN_M));
     47e:	6821      	ldr	r1, [r4, #0]
     480:	4817      	ldr	r0, [pc, #92]	; (4e0 <platform_init+0x11c>)
     482:	b2c9      	uxtb	r1, r1
     484:	f00c fa00 	bl	c888 <_printf>
    printf("\n");

}
     488:	e8bd 4010 	ldmia.w	r13!, {r4, r14}

    printf("revision register: ");
    uint rev = (HWREG(SYSCTL_DID0) & SYSCTL_DID0_MAJ_M) >> 8;
    printf("%c", rev + 'A');
    printf("%ld", HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MIN_M));
    printf("\n");
     48c:	4811      	ldr	r0, [pc, #68]	; (4d4 <platform_init+0x110>)
     48e:	f00c b9fb 	b.w	c888 <_printf>
     492:	bf00      	nop
     494:	400fe000 	.word	0x400fe000
     498:	400fe004 	.word	0x400fe004
     49c:	0000e3e0 	.word	0x0000e3e0
     4a0:	0000e405 	.word	0x0000e405
     4a4:	70ff0000 	.word	0x70ff0000
     4a8:	0000e41e 	.word	0x0000e41e
     4ac:	10010000 	.word	0x10010000
     4b0:	0000e428 	.word	0x0000e428
     4b4:	10030000 	.word	0x10030000
     4b8:	0000e42d 	.word	0x0000e42d
     4bc:	10040000 	.word	0x10040000
     4c0:	0000e437 	.word	0x0000e437
     4c4:	10060000 	.word	0x10060000
     4c8:	0000e43e 	.word	0x0000e43e
     4cc:	10050000 	.word	0x10050000
     4d0:	0000e448 	.word	0x0000e448
     4d4:	0000e7b4 	.word	0x0000e7b4
     4d8:	0000e451 	.word	0x0000e451
     4dc:	0000e465 	.word	0x0000e465
     4e0:	0000e468 	.word	0x0000e468

000004e4 <stellaris_usbc_early_init>:
#undef DUMPREG16
#undef DUMPREG32
}

void stellaris_usbc_early_init(void)
{
     4e4:	4770      	bx	r14
	...

000004e8 <stellaris_usbc_init>:
    LTRACE_ENTRY;
    LTRACE_EXIT;
}

void stellaris_usbc_init(void)
{
     4e8:	b510      	push	{r4, r14}
    LTRACE_ENTRY;

    SysCtlPeripheralEnable(SYSCTL_PERIPH_USB0);
     4ea:	4c0f      	ldr	r4, [pc, #60]	; (528 <stellaris_usbc_init+0x40>)
     4ec:	4620      	mov	r0, r4
     4ee:	f009 fb57 	bl	9ba0 <SysCtlPeripheralEnable>
    SysCtlPeripheralReset(SYSCTL_PERIPH_USB0);
     4f2:	4620      	mov	r0, r4

    SysCtlUSBPLLEnable();

    GPIOPinTypeUSBAnalog(GPIO_PORTD_AHB_BASE, GPIO_PIN_4 | GPIO_PIN_5);

    USBDevMode(USB0_BASE);
     4f4:	4c0d      	ldr	r4, [pc, #52]	; (52c <stellaris_usbc_init+0x44>)
void stellaris_usbc_init(void)
{
    LTRACE_ENTRY;

    SysCtlPeripheralEnable(SYSCTL_PERIPH_USB0);
    SysCtlPeripheralReset(SYSCTL_PERIPH_USB0);
     4f6:	f009 fb01 	bl	9afc <SysCtlPeripheralReset>

    SysCtlUSBPLLEnable();
     4fa:	f009 fd33 	bl	9f64 <SysCtlUSBPLLEnable>

    GPIOPinTypeUSBAnalog(GPIO_PORTD_AHB_BASE, GPIO_PIN_4 | GPIO_PIN_5);
     4fe:	2130      	movs	r1, #48	; 0x30
     500:	480b      	ldr	r0, [pc, #44]	; (530 <stellaris_usbc_init+0x48>)
     502:	f009 fa2d 	bl	9960 <GPIOPinTypeUSBAnalog>

    USBDevMode(USB0_BASE);
     506:	4620      	mov	r0, r4
     508:	f00a f99e 	bl	a848 <USBDevMode>
    USBPHYPowerOn(USB0_BASE);
     50c:	4620      	mov	r0, r4
     50e:	f00a f9b9 	bl	a884 <USBPHYPowerOn>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     512:	4b08      	ldr	r3, [pc, #32]	; (534 <stellaris_usbc_init+0x4c>)
     514:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    printf("addr %lu\n", USBDevAddrGet(USB0_BASE));
    printf("ep0 status 0x%lx\n", USBEndpointStatus(USB0_BASE, USB_EP_0));
#endif

    NVIC_EnableIRQ(INT_USB0 - 16);
    USBIntDisableControl(USB0_BASE, USB_INTCTRL_ALL);
     518:	4620      	mov	r0, r4
     51a:	605a      	str	r2, [r3, #4]
     51c:	f240 31ff 	movw	r1, #1023	; 0x3ff

    LTRACE_EXIT;
}
     520:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
    printf("addr %lu\n", USBDevAddrGet(USB0_BASE));
    printf("ep0 status 0x%lx\n", USBEndpointStatus(USB0_BASE, USB_EP_0));
#endif

    NVIC_EnableIRQ(INT_USB0 - 16);
    USBIntDisableControl(USB0_BASE, USB_INTCTRL_ALL);
     524:	f009 bea2 	b.w	a26c <USBIntDisableControl>
     528:	20100001 	.word	0x20100001
     52c:	40050000 	.word	0x40050000
     530:	4005b000 	.word	0x4005b000
     534:	e000e100 	.word	0xe000e100

00000538 <stellaris_usb0_irq>:
        USBDevEndpointStallClear(USB0_BASE, USB_EP_0, 0);
    }
}

void stellaris_usb0_irq(void)
{
     538:	b530      	push	{r4, r5, r14}
     53a:	b085      	sub	sp, #20
    arm_cm_irq_entry();
     53c:	f000 f8f4 	bl	728 <arm_cm_irq_entry>

    uint status = USBIntStatusControl(USB0_BASE);
     540:	4820      	ldr	r0, [pc, #128]	; (5c4 <stellaris_usb0_irq+0x8c>)
     542:	f009 fed3 	bl	a2ec <USBIntStatusControl>

    //LTRACEF("usb irq, status 0x%x\n", status);

    if (status & USB_INTCTRL_RESET) {
     546:	0740      	lsls	r0, r0, #29
     548:	d505      	bpl.n	556 <stellaris_usb0_irq+0x1e>
        // reset
        LTRACEF("reset\n");
        pending_addr_change = false;
     54a:	2000      	movs	r0, #0
     54c:	4b1e      	ldr	r3, [pc, #120]	; (5c8 <stellaris_usb0_irq+0x90>)
        usbc_callback(USB_CB_RESET, NULL);
     54e:	4601      	mov	r1, r0
    //LTRACEF("usb irq, status 0x%x\n", status);

    if (status & USB_INTCTRL_RESET) {
        // reset
        LTRACEF("reset\n");
        pending_addr_change = false;
     550:	7018      	strb	r0, [r3, #0]
        usbc_callback(USB_CB_RESET, NULL);
     552:	f003 fcfb 	bl	3f4c <usbc_callback>
    if (status & USB_INTCTRL_CONNECT) {
        // reset
        LTRACEF("connect\n");
    }

    status = USBIntStatusEndpoint(USB0_BASE);
     556:	481b      	ldr	r0, [pc, #108]	; (5c4 <stellaris_usb0_irq+0x8c>)
     558:	f009 fefe 	bl	a358 <USBIntStatusEndpoint>

    if (status & USB_INTEP_0) {
     55c:	07c1      	lsls	r1, r0, #31
     55e:	d52c      	bpl.n	5ba <stellaris_usb0_irq+0x82>
    LTRACE_EXIT;
}

static void ep0_irq(void)
{
    uint status = USBEndpointStatus(USB0_BASE, USB_EP_0);
     560:	4818      	ldr	r0, [pc, #96]	; (5c4 <stellaris_usb0_irq+0x8c>)
     562:	2100      	movs	r1, #0
     564:	f009 ff1c 	bl	a3a0 <USBEndpointStatus>

    LTRACEF("ep0 status 0x%x\n", status);

    /* delay setting the address until the ack as completed */
    if (pending_addr_change) {
     568:	4d17      	ldr	r5, [pc, #92]	; (5c8 <stellaris_usb0_irq+0x90>)
    LTRACE_EXIT;
}

static void ep0_irq(void)
{
    uint status = USBEndpointStatus(USB0_BASE, USB_EP_0);
     56a:	4604      	mov	r4, r0

    LTRACEF("ep0 status 0x%x\n", status);

    /* delay setting the address until the ack as completed */
    if (pending_addr_change) {
     56c:	782b      	ldrb	r3, [r5, #0]
     56e:	b133      	cbz	r3, 57e <stellaris_usb0_irq+0x46>
        LTRACEF("pending addr change\n");
        USBDevAddrSet(USB0_BASE, addr);
     570:	4b16      	ldr	r3, [pc, #88]	; (5cc <stellaris_usb0_irq+0x94>)
     572:	4814      	ldr	r0, [pc, #80]	; (5c4 <stellaris_usb0_irq+0x8c>)
     574:	7819      	ldrb	r1, [r3, #0]
     576:	f00a f801 	bl	a57c <USBDevAddrSet>
        pending_addr_change = false;
     57a:	2300      	movs	r3, #0
     57c:	702b      	strb	r3, [r5, #0]
    }

    if (status & USB_DEV_EP0_OUT_PKTRDY) {
     57e:	07e2      	lsls	r2, r4, #31
     580:	d514      	bpl.n	5ac <stellaris_usb0_irq+0x74>
        LTRACEF("pktrdy\n");

        uchar buf[sizeof(struct usb_setup)];
        ulong avail = sizeof(buf);
     582:	2308      	movs	r3, #8

        if (USBEndpointDataGet(USB0_BASE, USB_EP_0, buf, &avail) < 0 || avail != sizeof(buf)) {
     584:	eb0d 0503 	add.w	r5, r13, r3

    if (status & USB_DEV_EP0_OUT_PKTRDY) {
        LTRACEF("pktrdy\n");

        uchar buf[sizeof(struct usb_setup)];
        ulong avail = sizeof(buf);
     588:	9300      	str	r3, [sp, #0]

        if (USBEndpointDataGet(USB0_BASE, USB_EP_0, buf, &avail) < 0 || avail != sizeof(buf)) {
     58a:	480e      	ldr	r0, [pc, #56]	; (5c4 <stellaris_usb0_irq+0x8c>)
     58c:	2100      	movs	r1, #0
     58e:	462a      	mov	r2, r5
     590:	466b      	mov	r3, r13
     592:	f00a f80f 	bl	a5b4 <USBEndpointDataGet>
     596:	2800      	cmp	r0, #0
     598:	db08      	blt.n	5ac <stellaris_usb0_irq+0x74>
     59a:	9b00      	ldr	r3, [sp, #0]
     59c:	2b08      	cmp	r3, #8
     59e:	d105      	bne.n	5ac <stellaris_usb0_irq+0x74>
            LTRACEF("short setup packet, size %lu\n", avail);
        } else {
            union usb_callback_args args;
            args.setup = (void *)buf;
     5a0:	a904      	add	r1, sp, #16
     5a2:	f841 5d0c 	str.w	r5, [r1, #-12]!
            usbc_callback(USB_CB_SETUP_MSG, &args);
     5a6:	2006      	movs	r0, #6
     5a8:	f003 fcd0 	bl	3f4c <usbc_callback>
        }
    }
    if (status & USB_DEV_EP0_SENT_STALL) {
     5ac:	0763      	lsls	r3, r4, #29
     5ae:	d504      	bpl.n	5ba <stellaris_usb0_irq+0x82>
        LTRACEF("stall complete\n");
        USBDevEndpointStallClear(USB0_BASE, USB_EP_0, 0);
     5b0:	2100      	movs	r1, #0
     5b2:	4804      	ldr	r0, [pc, #16]	; (5c4 <stellaris_usb0_irq+0x8c>)
     5b4:	460a      	mov	r2, r1
     5b6:	f009 ff89 	bl	a4cc <USBDevEndpointStallClear>
        // ep0
        //LTRACEF("ep0\n");
        ep0_irq();
    }

    arm_cm_irq_exit(true);
     5ba:	2001      	movs	r0, #1
     5bc:	f000 f8be 	bl	73c <arm_cm_irq_exit>
}
     5c0:	b005      	add	sp, #20
     5c2:	bd30      	pop	{r4, r5, r15}
     5c4:	40050000 	.word	0x40050000
     5c8:	20000550 	.word	0x20000550
     5cc:	20000551 	.word	0x20000551

000005d0 <usbc_ep0_ack>:

void usbc_ep0_ack(void)
{
    LTRACE_ENTRY;

    USBDevEndpointDataAck(USB0_BASE, USB_EP_0, true);
     5d0:	4802      	ldr	r0, [pc, #8]	; (5dc <usbc_ep0_ack+0xc>)
     5d2:	2100      	movs	r1, #0
     5d4:	2201      	movs	r2, #1
     5d6:	f00a b84d 	b.w	a674 <USBDevEndpointDataAck>
     5da:	bf00      	nop
     5dc:	40050000 	.word	0x40050000

000005e0 <usbc_ep0_stall>:

void usbc_ep0_stall(void)
{
    LTRACE_ENTRY;

    USBDevEndpointStall(USB0_BASE, USB_EP_0, 0);
     5e0:	2100      	movs	r1, #0
     5e2:	4802      	ldr	r0, [pc, #8]	; (5ec <usbc_ep0_stall+0xc>)
     5e4:	460a      	mov	r2, r1
     5e6:	f009 bf11 	b.w	a40c <USBDevEndpointStall>
     5ea:	bf00      	nop
     5ec:	40050000 	.word	0x40050000

000005f0 <usbc_ep0_send>:
}

void usbc_ep0_send(const void *buf, size_t len, size_t maxlen)
{
     5f0:	b538      	push	{r3, r4, r5, r14}
    LTRACEF("buf %p, len %zu, maxlen %zu\n", buf, len, maxlen);

    USBEndpointDataPut(USB0_BASE, USB_EP_0, (void *)buf, MIN(len, maxlen));
     5f2:	4c09      	ldr	r4, [pc, #36]	; (618 <usbc_ep0_send+0x28>)

    USBDevEndpointStall(USB0_BASE, USB_EP_0, 0);
}

void usbc_ep0_send(const void *buf, size_t len, size_t maxlen)
{
     5f4:	4605      	mov	r5, r0
    LTRACEF("buf %p, len %zu, maxlen %zu\n", buf, len, maxlen);

    USBEndpointDataPut(USB0_BASE, USB_EP_0, (void *)buf, MIN(len, maxlen));
     5f6:	428a      	cmp	r2, r1
     5f8:	bf34      	ite	cc
     5fa:	4613      	movcc	r3, r2
     5fc:	460b      	movcs	r3, r1
     5fe:	4620      	mov	r0, r4
     600:	462a      	mov	r2, r5
     602:	2100      	movs	r1, #0
     604:	f00a f880 	bl	a708 <USBEndpointDataPut>

    USBEndpointDataSend(USB0_BASE, USB_EP_0, USB_TRANS_SETUP);
     608:	4620      	mov	r0, r4
     60a:	2100      	movs	r1, #0
     60c:	f241 120a 	movw	r2, #4362	; 0x110a
}
     610:	e8bd 4038 	ldmia.w	r13!, {r3, r4, r5, r14}
{
    LTRACEF("buf %p, len %zu, maxlen %zu\n", buf, len, maxlen);

    USBEndpointDataPut(USB0_BASE, USB_EP_0, (void *)buf, MIN(len, maxlen));

    USBEndpointDataSend(USB0_BASE, USB_EP_0, USB_TRANS_SETUP);
     614:	f00a b8ca 	b.w	a7ac <USBEndpointDataSend>
     618:	40050000 	.word	0x40050000

0000061c <usbc_set_address>:

void usbc_set_address(uint8_t address)
{
    LTRACEF("address 0x%hhx\n", address);

    addr = address;
     61c:	4b02      	ldr	r3, [pc, #8]	; (628 <usbc_set_address+0xc>)
    pending_addr_change = true;
     61e:	2201      	movs	r2, #1

void usbc_set_address(uint8_t address)
{
    LTRACEF("address 0x%hhx\n", address);

    addr = address;
     620:	7018      	strb	r0, [r3, #0]
    pending_addr_change = true;
     622:	4b02      	ldr	r3, [pc, #8]	; (62c <usbc_set_address+0x10>)
     624:	701a      	strb	r2, [r3, #0]
     626:	4770      	bx	r14
     628:	20000551 	.word	0x20000551
     62c:	20000550 	.word	0x20000550

00000630 <usbc_is_highspeed>:
}

bool usbc_is_highspeed(void)
{
    return false;
}
     630:	2000      	movs	r0, #0
     632:	4770      	bx	r14

00000634 <stellaris_dummy_irq>:
#include <compiler.h>
#include <arch/arm/cm.h>

/* un-overridden irq handler */
void stellaris_dummy_irq(void)
{
     634:	4674      	mov	r4, r14
     636:	b508      	push	{r3, r14}
    arm_cm_irq_entry();
     638:	f000 f876 	bl	728 <arm_cm_irq_entry>

    panic("unhandled irq\n");
     63c:	4620      	mov	r0, r4
     63e:	4901      	ldr	r1, [pc, #4]	; (644 <stellaris_dummy_irq+0x10>)
     640:	f00a ff38 	bl	b4b4 <_panic>
     644:	0000e47e 	.word	0x0000e47e

00000648 <arch_early_init>:
unsigned int arm_cm_num_irq_pri_bits;
unsigned int arm_cm_irq_pri_mask;
#endif

void arch_early_init(void)
{
     648:	b530      	push	{r4, r5, r14}
    __asm__ volatile("cpsie i");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
     64a:	b672      	cpsid	i
    arch_disable_ints();

#if (__CORTEX_M >= 0x03) || (CORTEX_SC >= 300)
    uint i;
    /* set the vector table base */
    SCB->VTOR = (uint32_t)&vectab;
     64c:	4b25      	ldr	r3, [pc, #148]	; (6e4 <arch_early_init+0x9c>)
     64e:	4a26      	ldr	r2, [pc, #152]	; (6e8 <arch_early_init+0xa0>)
     650:	609a      	str	r2, [r3, #8]
    arm_cm_num_irq_pri_bits = 8 - i;
    arm_cm_irq_pri_mask = ~((1 << i) - 1) & 0xff;
#endif

    /* clear any pending interrupts and set all the vectors to medium priority */
    uint groups = (SCnSCB->ICTR & 0xf) + 1;
     652:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     656:	685c      	ldr	r4, [r3, #4]
    for (i = 0; i < groups; i++) {
     658:	2300      	movs	r3, #0
    arm_cm_num_irq_pri_bits = 8 - i;
    arm_cm_irq_pri_mask = ~((1 << i) - 1) & 0xff;
#endif

    /* clear any pending interrupts and set all the vectors to medium priority */
    uint groups = (SCnSCB->ICTR & 0xf) + 1;
     65a:	f004 040f 	and.w	r4, r4, #15
     65e:	3401      	adds	r4, #1
     660:	009a      	lsls	r2, r3, #2
     662:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
     666:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
    for (i = 0; i < groups; i++) {
        NVIC->ICER[i] = 0xffffffff;
     66a:	f04f 31ff 	mov.w	r1, #4294967295
     66e:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
        NVIC->ICPR[i] = 0xffffffff;
     672:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
     676:	015a      	lsls	r2, r3, #5
     678:	b2d2      	uxtb	r2, r2
        for (uint j = 0; j < 32; j++) {
     67a:	2100      	movs	r1, #0
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
     67c:	b250      	sxtb	r0, r2
     67e:	2800      	cmp	r0, #0
     680:	da06      	bge.n	690 <arch_early_init+0x48>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     682:	481a      	ldr	r0, [pc, #104]	; (6ec <arch_early_init+0xa4>)
     684:	f002 050f 	and.w	r5, r2, #15
     688:	4428      	add	r0, r5
     68a:	2580      	movs	r5, #128	; 0x80
     68c:	7605      	strb	r5, [r0, #24]
     68e:	e006      	b.n	69e <arch_early_init+0x56>
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     690:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
     694:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
     698:	2580      	movs	r5, #128	; 0x80
     69a:	f880 5300 	strb.w	r5, [r0, #768]	; 0x300
     69e:	3101      	adds	r1, #1
     6a0:	3201      	adds	r2, #1
     6a2:	2920      	cmp	r1, #32
     6a4:	b2d2      	uxtb	r2, r2
     6a6:	d1e9      	bne.n	67c <arch_early_init+0x34>
    arm_cm_irq_pri_mask = ~((1 << i) - 1) & 0xff;
#endif

    /* clear any pending interrupts and set all the vectors to medium priority */
    uint groups = (SCnSCB->ICTR & 0xf) + 1;
    for (i = 0; i < groups; i++) {
     6a8:	3301      	adds	r3, #1
     6aa:	42a3      	cmp	r3, r4
     6ac:	d3d8      	bcc.n	660 <arch_early_init+0x18>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
     6ae:	2300      	movs	r3, #0
     6b0:	f383 8811 	msr	BASEPRI, r3
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
     6b4:	4b0b      	ldr	r3, [pc, #44]	; (6e4 <arch_early_init+0x9c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
     6b6:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
     6ba:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
     6bc:	400a      	ands	r2, r1
  reg_value  =  (reg_value                                   |
     6be:	f042 62bf 	orr.w	r2, r2, #100139008	; 0x5f80000
     6c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
     6c6:	60da      	str	r2, [r3, #12]

    /* set priority grouping to 0 */
    NVIC_SetPriorityGrouping(0);

    /* enable certain faults */
    SCB->SHCSR |= (SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk);
     6c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     6ca:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
     6ce:	625a      	str	r2, [r3, #36]	; 0x24
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     6d0:	22e0      	movs	r2, #224	; 0xe0
     6d2:	77da      	strb	r2, [r3, #31]
     6d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
     6d8:	2280      	movs	r2, #128	; 0x80
     6da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
     6de:	f883 2020 	strb.w	r2, [r3, #32]
     6e2:	bd30      	pop	{r4, r5, r15}
     6e4:	e000ed00 	.word	0xe000ed00
     6e8:	00000000 	.word	0x00000000
     6ec:	e000ecfc 	.word	0xe000ecfc

000006f0 <arch_init>:
}

void arch_init(void)
{
#if ENABLE_CYCLE_COUNTER
    *REG32(SCB_DEMCR) |= 0x01000000; // global trace enable
     6f0:	4b09      	ldr	r3, [pc, #36]	; (718 <arch_init+0x28>)
     6f2:	681a      	ldr	r2, [r3, #0]
     6f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     6f8:	601a      	str	r2, [r3, #0]
    *REG32(DWT_CYCCNT) = 0;
     6fa:	4b08      	ldr	r3, [pc, #32]	; (71c <arch_init+0x2c>)
     6fc:	2200      	movs	r2, #0
     6fe:	601a      	str	r2, [r3, #0]
    *REG32(DWT_CTRL) |= 1; // enable cycle counter
     700:	f853 2c04 	ldr.w	r2, [r3, #-4]
     704:	f042 0201 	orr.w	r2, r2, #1
     708:	f843 2c04 	str.w	r2, [r3, #-4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     70c:	f3ef 8114 	mrs	r1, CONTROL
#endif
    printf("CONTROL 0x%x\n", __get_CONTROL());
     710:	4803      	ldr	r0, [pc, #12]	; (720 <arch_init+0x30>)
     712:	f00c b8b9 	b.w	c888 <_printf>
     716:	bf00      	nop
     718:	e000edfc 	.word	0xe000edfc
     71c:	e0001004 	.word	0xe0001004
     720:	0000e48d 	.word	0x0000e48d

00000724 <arch_idle>:
#endif
}

void arch_idle(void)
{
    __asm__ volatile("wfi");
     724:	bf30      	wfi
     726:	4770      	bx	r14

00000728 <arm_cm_irq_entry>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     728:	b672      	cpsid	i
    // This is so that later calls to arch_ints_disabled() returns true while we're inside the int handler
    // Note: this will probably screw up future efforts to stack higher priority interrupts since we're setting
    // the cpu to essentially max interrupt priority here. Will have to rethink it then.
    __disable_irq();

    THREAD_STATS_INC(interrupts);
     72a:	4b03      	ldr	r3, [pc, #12]	; (738 <arm_cm_irq_entry+0x10>)
     72c:	6a1a      	ldr	r2, [r3, #32]
     72e:	3201      	adds	r2, #1
     730:	621a      	str	r2, [r3, #32]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
     732:	f3ef 8305 	mrs	r3, IPSR
     736:	4770      	bx	r14
     738:	20000728 	.word	0x20000728

0000073c <arm_cm_irq_exit>:

void arm_cm_irq_exit(bool reschedule)
{
    target_set_debug_led(1, false);

    if (reschedule)
     73c:	b120      	cbz	r0, 748 <arm_cm_irq_exit+0xc>
#endif


static inline void arm_cm_trigger_preempt(void)
{
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     73e:	4b04      	ldr	r3, [pc, #16]	; (750 <arm_cm_irq_exit+0x14>)
     740:	685a      	ldr	r2, [r3, #4]
     742:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
     746:	605a      	str	r2, [r3, #4]
     748:	f3ef 8305 	mrs	r3, IPSR
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     74c:	b662      	cpsie	i
     74e:	4770      	bx	r14
     750:	e000ed00 	.word	0xe000ed00

00000754 <arch_chain_load>:

    __enable_irq(); // clear PRIMASK
}

void arch_chain_load(void *entry, ulong arg0, ulong arg1, ulong arg2, ulong arg3)
{
     754:	b580      	push	{r7, r14}
     756:	460d      	mov	r5, r1
     758:	4616      	mov	r6, r2
     75a:	461f      	mov	r7, r3
#if (__CORTEX_M >= 0x03)

    uint32_t *vectab = (uint32_t *)entry;

    __asm__ volatile(
     75c:	f8d0 e000 	ldr.w	r14, [r0]
     760:	f8d0 c004 	ldr.w	r12, [r0, #4]
     764:	9c02      	ldr	r4, [sp, #8]
     766:	4628      	mov	r0, r5
     768:	4631      	mov	r1, r6
     76a:	463a      	mov	r2, r7
     76c:	4623      	mov	r3, r4
     76e:	46f5      	mov	r13, r14
     770:	4760      	bx	r12
	...

00000774 <dump_frame>:
#include <kernel/thread.h>
#include <arch/arm/cm.h>
#include <platform.h>

static void dump_frame(const struct arm_cm_exception_frame *frame)
{
     774:	b513      	push	{r0, r1, r4, r14}
     776:	4604      	mov	r4, r0

    printf("exception frame at %p\n", frame);
     778:	4621      	mov	r1, r4
     77a:	4812      	ldr	r0, [pc, #72]	; (7c4 <dump_frame+0x50>)
     77c:	f00c f884 	bl	c888 <_printf>
    printf("\tr0  0x%08x r1  0x%08x r2  0x%08x r3 0x%08x r4 0x%08x\n",
     780:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     782:	f104 0120 	add.w	r1, r4, #32
     786:	9300      	str	r3, [sp, #0]
     788:	6823      	ldr	r3, [r4, #0]
     78a:	480f      	ldr	r0, [pc, #60]	; (7c8 <dump_frame+0x54>)
     78c:	9301      	str	r3, [sp, #4]
     78e:	c90e      	ldmia	r1, {r1, r2, r3}
     790:	f00c f87a 	bl	c888 <_printf>
           frame->r0, frame->r1, frame->r2, frame->r3, frame->r4);
    printf("\tr5  0x%08x r6  0x%08x r7  0x%08x r8 0x%08x r9 0x%08x\n",
     794:	6923      	ldr	r3, [r4, #16]
     796:	1d21      	adds	r1, r4, #4
     798:	9300      	str	r3, [sp, #0]
     79a:	6963      	ldr	r3, [r4, #20]
     79c:	480b      	ldr	r0, [pc, #44]	; (7cc <dump_frame+0x58>)
     79e:	9301      	str	r3, [sp, #4]
     7a0:	c90e      	ldmia	r1, {r1, r2, r3}
     7a2:	f00c f871 	bl	c888 <_printf>
           frame->r5, frame->r6, frame->r7, frame->r8, frame->r9);
    printf("\tr10 0x%08x r11 0x%08x r12 0x%08x\n",
     7a6:	69a1      	ldr	r1, [r4, #24]
     7a8:	69e2      	ldr	r2, [r4, #28]
     7aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
     7ac:	4808      	ldr	r0, [pc, #32]	; (7d0 <dump_frame+0x5c>)
     7ae:	f00c f86b 	bl	c888 <_printf>
           frame->r10, frame->r11, frame->r12);
    printf("\tlr  0x%08x pc  0x%08x psr 0x%08x\n",
     7b2:	4808      	ldr	r0, [pc, #32]	; (7d4 <dump_frame+0x60>)
     7b4:	f104 0134 	add.w	r1, r4, #52	; 0x34
     7b8:	c90e      	ldmia	r1, {r1, r2, r3}
           frame->lr, frame->pc, frame->psr);
}
     7ba:	b002      	add	sp, #8
     7bc:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
           frame->r0, frame->r1, frame->r2, frame->r3, frame->r4);
    printf("\tr5  0x%08x r6  0x%08x r7  0x%08x r8 0x%08x r9 0x%08x\n",
           frame->r5, frame->r6, frame->r7, frame->r8, frame->r9);
    printf("\tr10 0x%08x r11 0x%08x r12 0x%08x\n",
           frame->r10, frame->r11, frame->r12);
    printf("\tlr  0x%08x pc  0x%08x psr 0x%08x\n",
     7c0:	f00c b862 	b.w	c888 <_printf>
     7c4:	0000e49b 	.word	0x0000e49b
     7c8:	0000e4b2 	.word	0x0000e4b2
     7cc:	0000e4e9 	.word	0x0000e4e9
     7d0:	0000e520 	.word	0x0000e520
     7d4:	0000e543 	.word	0x0000e543

000007d8 <hardfault>:
           frame->lr, frame->pc, frame->psr);
}

static void hardfault(struct arm_cm_exception_frame *frame)
{
     7d8:	b508      	push	{r3, r14}
     7da:	4604      	mov	r4, r0
    printf("hardfault: ");
     7dc:	4807      	ldr	r0, [pc, #28]	; (7fc <hardfault+0x24>)
     7de:	f00c f853 	bl	c888 <_printf>
    dump_frame(frame);
     7e2:	4620      	mov	r0, r4
     7e4:	f7ff ffc6 	bl	774 <dump_frame>

#if     (__CORTEX_M >= 0X03) || (__CORTEX_SC >= 300)
    printf("HFSR 0x%x\n", SCB->HFSR);
     7e8:	4b05      	ldr	r3, [pc, #20]	; (800 <hardfault+0x28>)
     7ea:	4806      	ldr	r0, [pc, #24]	; (804 <hardfault+0x2c>)
     7ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
     7ee:	f00c f84b 	bl	c888 <_printf>
#endif

    platform_halt(HALT_ACTION_HALT, HALT_REASON_SW_PANIC);
     7f2:	2000      	movs	r0, #0
     7f4:	2109      	movs	r1, #9
     7f6:	f008 ffa5 	bl	9744 <platform_halt>
     7fa:	bf00      	nop
     7fc:	0000e566 	.word	0x0000e566
     800:	e000ed00 	.word	0xe000ed00
     804:	0000e572 	.word	0x0000e572

00000808 <memmanage>:
}

static void memmanage(struct arm_cm_exception_frame *frame)
{
     808:	b510      	push	{r4, r14}
     80a:	4604      	mov	r4, r0
    printf("memmanage: ");
     80c:	4815      	ldr	r0, [pc, #84]	; (864 <memmanage+0x5c>)
     80e:	f00c f83b 	bl	c888 <_printf>
    dump_frame(frame);
     812:	4620      	mov	r0, r4
     814:	f7ff ffae 	bl	774 <dump_frame>

#if     (__CORTEX_M >= 0X03) || (__CORTEX_SC >= 300)
    uint32_t mmfsr = SCB->CFSR & 0xff;
     818:	4b13      	ldr	r3, [pc, #76]	; (868 <memmanage+0x60>)
     81a:	6a9c      	ldr	r4, [r3, #40]	; 0x28

    if (mmfsr & (1<<0)) { // IACCVIOL
     81c:	07e2      	lsls	r2, r4, #31
     81e:	d502      	bpl.n	826 <memmanage+0x1e>
        printf("instruction fault\n");
     820:	4812      	ldr	r0, [pc, #72]	; (86c <memmanage+0x64>)
     822:	f00c f831 	bl	c888 <_printf>
    }
    if (mmfsr & (1<<1)) { // DACCVIOL
     826:	07a3      	lsls	r3, r4, #30
     828:	d502      	bpl.n	830 <memmanage+0x28>
        printf("data fault\n");
     82a:	4811      	ldr	r0, [pc, #68]	; (870 <memmanage+0x68>)
     82c:	f00c f82c 	bl	c888 <_printf>
    }
    if (mmfsr & (1<<3)) { // MUNSTKERR
     830:	0720      	lsls	r0, r4, #28
     832:	d502      	bpl.n	83a <memmanage+0x32>
        printf("fault on exception return\n");
     834:	480f      	ldr	r0, [pc, #60]	; (874 <memmanage+0x6c>)
     836:	f00c f827 	bl	c888 <_printf>
    }
    if (mmfsr & (1<<4)) { // MSTKERR
     83a:	06e1      	lsls	r1, r4, #27
     83c:	d502      	bpl.n	844 <memmanage+0x3c>
        printf("fault on exception entry\n");
     83e:	480e      	ldr	r0, [pc, #56]	; (878 <memmanage+0x70>)
     840:	f00c f822 	bl	c888 <_printf>
    }
    if (mmfsr & (1<<5)) { // MLSPERR
     844:	06a2      	lsls	r2, r4, #26
     846:	d502      	bpl.n	84e <memmanage+0x46>
        printf("fault on lazy fpu preserve\n");
     848:	480c      	ldr	r0, [pc, #48]	; (87c <memmanage+0x74>)
     84a:	f00c f81d 	bl	c888 <_printf>
    }
    if (mmfsr & (1<<7)) { // MMARVALID
     84e:	0623      	lsls	r3, r4, #24
     850:	d504      	bpl.n	85c <memmanage+0x54>
        printf("fault address 0x%x\n", SCB->MMFAR);
     852:	4b05      	ldr	r3, [pc, #20]	; (868 <memmanage+0x60>)
     854:	480a      	ldr	r0, [pc, #40]	; (880 <memmanage+0x78>)
     856:	6b59      	ldr	r1, [r3, #52]	; 0x34
     858:	f00c f816 	bl	c888 <_printf>
    }
#endif
    platform_halt(HALT_ACTION_HALT, HALT_REASON_SW_PANIC);
     85c:	2000      	movs	r0, #0
     85e:	2109      	movs	r1, #9
     860:	f008 ff70 	bl	9744 <platform_halt>
     864:	0000e57d 	.word	0x0000e57d
     868:	e000ed00 	.word	0xe000ed00
     86c:	0000e589 	.word	0x0000e589
     870:	0000e59c 	.word	0x0000e59c
     874:	0000e5a8 	.word	0x0000e5a8
     878:	0000e5c3 	.word	0x0000e5c3
     87c:	0000e5dd 	.word	0x0000e5dd
     880:	0000e5f9 	.word	0x0000e5f9

00000884 <busfault>:

    platform_halt(HALT_ACTION_HALT, HALT_REASON_SW_PANIC);
}

static void busfault(struct arm_cm_exception_frame *frame)
{
     884:	b508      	push	{r3, r14}
     886:	4604      	mov	r4, r0
    printf("busfault: ");
     888:	4804      	ldr	r0, [pc, #16]	; (89c <busfault+0x18>)
     88a:	f00b fffd 	bl	c888 <_printf>
    dump_frame(frame);
     88e:	4620      	mov	r0, r4
     890:	f7ff ff70 	bl	774 <dump_frame>

    platform_halt(HALT_ACTION_HALT, HALT_REASON_SW_PANIC);
     894:	2000      	movs	r0, #0
     896:	2109      	movs	r1, #9
     898:	f008 ff54 	bl	9744 <platform_halt>
     89c:	0000e60d 	.word	0x0000e60d

000008a0 <usagefault>:
    platform_halt(HALT_ACTION_HALT, HALT_REASON_SW_PANIC);
}


static void usagefault(struct arm_cm_exception_frame *frame)
{
     8a0:	b510      	push	{r4, r14}
     8a2:	4604      	mov	r4, r0
    printf("usagefault: ");
     8a4:	4817      	ldr	r0, [pc, #92]	; (904 <usagefault+0x64>)
     8a6:	f00b ffef 	bl	c888 <_printf>
    dump_frame(frame);
     8aa:	4620      	mov	r0, r4
     8ac:	f7ff ff62 	bl	774 <dump_frame>

#if  (__CORTEX_M >= 0x03)
    uint32_t ufsr = BITS_SHIFT(SCB->CFSR, 31, 16);
     8b0:	4b15      	ldr	r3, [pc, #84]	; (908 <usagefault+0x68>)
    printf("UFSR 0x%x: ", ufsr);
     8b2:	4816      	ldr	r0, [pc, #88]	; (90c <usagefault+0x6c>)
{
    printf("usagefault: ");
    dump_frame(frame);

#if  (__CORTEX_M >= 0x03)
    uint32_t ufsr = BITS_SHIFT(SCB->CFSR, 31, 16);
     8b4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
     8b6:	0c24      	lsrs	r4, r4, #16
    printf("UFSR 0x%x: ", ufsr);
     8b8:	4621      	mov	r1, r4
     8ba:	f00b ffe5 	bl	c888 <_printf>

    if (ufsr & (1<<0))
     8be:	07e0      	lsls	r0, r4, #31
     8c0:	d502      	bpl.n	8c8 <usagefault+0x28>
        printf("undefined instruction\n");
     8c2:	4813      	ldr	r0, [pc, #76]	; (910 <usagefault+0x70>)
     8c4:	f00b ffe0 	bl	c888 <_printf>
    if (ufsr & (1<<1))
     8c8:	07a1      	lsls	r1, r4, #30
     8ca:	d502      	bpl.n	8d2 <usagefault+0x32>
        printf("ESPR invalid\n");
     8cc:	4811      	ldr	r0, [pc, #68]	; (914 <usagefault+0x74>)
     8ce:	f00b ffdb 	bl	c888 <_printf>
    if (ufsr & (1<<2))
     8d2:	0762      	lsls	r2, r4, #29
     8d4:	d502      	bpl.n	8dc <usagefault+0x3c>
        printf("integrity check failed on EXC_RETURN\n");
     8d6:	4810      	ldr	r0, [pc, #64]	; (918 <usagefault+0x78>)
     8d8:	f00b ffd6 	bl	c888 <_printf>
    if (ufsr & (1<<3))
     8dc:	0723      	lsls	r3, r4, #28
     8de:	d502      	bpl.n	8e6 <usagefault+0x46>
        printf("coprocessor access error\n");
     8e0:	480e      	ldr	r0, [pc, #56]	; (91c <usagefault+0x7c>)
     8e2:	f00b ffd1 	bl	c888 <_printf>
    if (ufsr & (1<<8))
     8e6:	05e0      	lsls	r0, r4, #23
     8e8:	d502      	bpl.n	8f0 <usagefault+0x50>
        printf("unaligned error\n");
     8ea:	480d      	ldr	r0, [pc, #52]	; (920 <usagefault+0x80>)
     8ec:	f00b ffcc 	bl	c888 <_printf>
    if (ufsr & (1<<9))
     8f0:	05a1      	lsls	r1, r4, #22
     8f2:	d502      	bpl.n	8fa <usagefault+0x5a>
        printf("division by zero\n");
     8f4:	480b      	ldr	r0, [pc, #44]	; (924 <usagefault+0x84>)
     8f6:	f00b ffc7 	bl	c888 <_printf>
#endif

    platform_halt(HALT_ACTION_HALT, HALT_REASON_SW_PANIC);
     8fa:	2000      	movs	r0, #0
     8fc:	2109      	movs	r1, #9
     8fe:	f008 ff21 	bl	9744 <platform_halt>
     902:	bf00      	nop
     904:	0000e618 	.word	0x0000e618
     908:	e000ed00 	.word	0xe000ed00
     90c:	0000e625 	.word	0x0000e625
     910:	0000e631 	.word	0x0000e631
     914:	0000e648 	.word	0x0000e648
     918:	0000e656 	.word	0x0000e656
     91c:	0000e67c 	.word	0x0000e67c
     920:	0000e696 	.word	0x0000e696
     924:	0000e6a7 	.word	0x0000e6a7

00000928 <_nmi>:
}

/* raw exception vectors */

void _nmi(void)
{
     928:	b508      	push	{r3, r14}
    printf("nmi\n");
     92a:	4803      	ldr	r0, [pc, #12]	; (938 <_nmi+0x10>)
     92c:	f00b ffac 	bl	c888 <_printf>
    platform_halt(HALT_ACTION_HALT, HALT_REASON_SW_PANIC);
     930:	2000      	movs	r0, #0
     932:	2109      	movs	r1, #9
     934:	f008 ff06 	bl	9744 <platform_halt>
     938:	0000e6b9 	.word	0x0000e6b9

0000093c <_hardfault>:
}
#if     (__CORTEX_M >= 0X03) || (__CORTEX_SC >= 300)

__NAKED void _hardfault(void)
{
    __asm__ volatile(
     93c:	e92d 0ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11}
     940:	4668      	mov	r0, r13
     942:	f7ff bf49 	b.w	7d8 <hardfault>

00000946 <_memmanage>:
    __UNREACHABLE;
}

void _memmanage(void)
{
    __asm__ volatile(
     946:	e92d 0ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11}
     94a:	4668      	mov	r0, r13
     94c:	f7ff bf5c 	b.w	808 <memmanage>

00000950 <_busfault>:
    __UNREACHABLE;
}

void _busfault(void)
{
    __asm__ volatile(
     950:	e92d 0ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11}
     954:	4668      	mov	r0, r13
     956:	f7ff bf95 	b.w	884 <busfault>

0000095a <_usagefault>:
    __UNREACHABLE;
}

void _usagefault(void)
{
    __asm__ volatile(
     95a:	e92d 0ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11}
     95e:	4668      	mov	r0, r13
     960:	f7ff bf9e 	b.w	8a0 <usagefault>

00000964 <_debugmonitor>:
    printf("systick\n");
    platform_halt(HALT_ACTION_HALT, HALT_REASON_SW_PANIC);
}

void __WEAK _debugmonitor(void)
{
     964:	b508      	push	{r3, r14}
    printf("debugmonitor\n");
     966:	4803      	ldr	r0, [pc, #12]	; (974 <_debugmonitor+0x10>)
     968:	f00b ff8e 	bl	c888 <_printf>
    platform_halt(HALT_ACTION_HALT, HALT_REASON_SW_PANIC);
     96c:	2000      	movs	r0, #0
     96e:	2109      	movs	r1, #9
     970:	f008 fee8 	bl	9744 <platform_halt>
     974:	0000e6c7 	.word	0x0000e6c7

00000978 <_start>:
extern void lk_main(void) __NO_RETURN __EXTERNALLY_VISIBLE;

void _start(void)
{
    /* copy data from rom */
    if (&__data_start != &__data_start_rom) {
     978:	4b0d      	ldr	r3, [pc, #52]	; (9b0 <_start+0x38>)
     97a:	4a0e      	ldr	r2, [pc, #56]	; (9b4 <_start+0x3c>)
extern unsigned int __bss_start, __bss_end;

extern void lk_main(void) __NO_RETURN __EXTERNALLY_VISIBLE;

void _start(void)
{
     97c:	b510      	push	{r4, r14}
    /* copy data from rom */
    if (&__data_start != &__data_start_rom) {
     97e:	429a      	cmp	r2, r3
     980:	461c      	mov	r4, r3
     982:	d001      	beq.n	988 <_start+0x10>
     984:	2300      	movs	r3, #0
     986:	e001      	b.n	98c <_start+0x14>
     988:	4b0b      	ldr	r3, [pc, #44]	; (9b8 <_start+0x40>)
     98a:	e007      	b.n	99c <_start+0x24>
        unsigned int *src = &__data_start_rom;
        unsigned int *dest = &__data_start;

        while (dest != &__data_end)
     98c:	490b      	ldr	r1, [pc, #44]	; (9bc <_start+0x44>)
     98e:	18d0      	adds	r0, r2, r3
     990:	4288      	cmp	r0, r1
     992:	d0f9      	beq.n	988 <_start+0x10>
            *dest++ = *src++;
     994:	58e1      	ldr	r1, [r4, r3]
     996:	50d1      	str	r1, [r2, r3]
     998:	3304      	adds	r3, #4
     99a:	e7f7      	b.n	98c <_start+0x14>
    }

    /* zero out bss */
    unsigned int *bss = &__bss_start;
    while (bss != &__bss_end)
     99c:	4a08      	ldr	r2, [pc, #32]	; (9c0 <_start+0x48>)
     99e:	4293      	cmp	r3, r2
     9a0:	d003      	beq.n	9aa <_start+0x32>
        *bss++ = 0;
     9a2:	2200      	movs	r2, #0
     9a4:	f843 2b04 	str.w	r2, [r3], #4
     9a8:	e7f8      	b.n	99c <_start+0x24>

    lk_main();
     9aa:	f000 f955 	bl	c58 <lk_main>
     9ae:	bf00      	nop
     9b0:	000180d8 	.word	0x000180d8
     9b4:	20000000 	.word	0x20000000
     9b8:	20000520 	.word	0x20000520
     9bc:	20000120 	.word	0x20000120
     9c0:	200009b8 	.word	0x200009b8

000009c4 <_half_save_and_svc>:
__NAKED static void _half_save_and_svc(struct thread *oldthread, struct thread *newthread, bool fpu_save, bool restore_fpu)
#else
__NAKED static void _half_save_and_svc(struct thread *oldthread, struct thread *newthread)
#endif
{
    __asm__ volatile(
     9c4:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
     9c8:	f8c0 d02c 	str.w	r13, [r0, #44]	; 0x2c
     9cc:	f8d1 d02c 	ldr.w	r13, [r1, #44]	; 0x2c
     9d0:	f3bf 8f2f 	clrex
     9d4:	b662      	cpsie	i
     9d6:	466c      	mov	r4, r13
     9d8:	df00      	svc	0

000009da <_arch_non_preempt_context_switch>:
__NAKED static void _arch_non_preempt_context_switch(struct thread *oldthread, struct thread *newthread, bool save_fpu, bool restore_fpu)
#else
__NAKED static void _arch_non_preempt_context_switch(struct thread *oldthread, struct thread *newthread)
#endif
{
    __asm__ volatile(
     9da:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
     9de:	f8c0 d02c 	str.w	r13, [r0, #44]	; 0x2c
     9e2:	f8d1 d02c 	ldr.w	r13, [r1, #44]	; 0x2c
     9e6:	e8bd 4ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
     9ea:	f3bf 8f2f 	clrex
     9ee:	4770      	bx	r14

000009f0 <initial_thread_func>:
/* since we're implicitly uniprocessor, store a pointer to the current thread here */
thread_t *_current_thread;

static void initial_thread_func(void) __NO_RETURN;
static void initial_thread_func(void)
{
     9f0:	b508      	push	{r3, r14}
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
     9f2:	4b05      	ldr	r3, [pc, #20]	; (a08 <initial_thread_func+0x18>)
     9f4:	2200      	movs	r2, #0
     9f6:	601a      	str	r2, [r3, #0]

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
     9f8:	b662      	cpsie	i

    /* release the thread lock that was implicitly held across the reschedule */
    spin_unlock(&thread_lock);
    arch_enable_ints();

    ret = _current_thread->entry(_current_thread->arg);
     9fa:	4b04      	ldr	r3, [pc, #16]	; (a0c <initial_thread_func+0x1c>)
     9fc:	681b      	ldr	r3, [r3, #0]
     9fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
     a00:	6c18      	ldr	r0, [r3, #64]	; 0x40
     a02:	4790      	blx	r2

    LTRACEF("thread %p exiting with %d\n", _current_thread, ret);

    thread_exit(ret);
     a04:	f004 fd72 	bl	54ec <thread_exit>
     a08:	200008d4 	.word	0x200008d4
     a0c:	20000554 	.word	0x20000554

00000a10 <_thread_mode_bounce>:
    );
}

__NAKED static void _thread_mode_bounce(bool fpused)
{
    __asm__ volatile(
     a10:	e8bd 4ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
     a14:	4770      	bx	r14
	...

00000a18 <pendsv>:
}

static volatile struct arm_cm_exception_frame_long *preempt_frame;

static void pendsv(struct arm_cm_exception_frame_long *frame)
{
     a18:	b510      	push	{r4, r14}
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
     a1a:	b672      	cpsid	i
    arch_disable_ints();

    LTRACEF("preempting thread %p (%s)\n", _current_thread, _current_thread->name);

    /* save the iframe the pendsv fired on and hit the preemption code */
    preempt_frame = frame;
     a1c:	4c03      	ldr	r4, [pc, #12]	; (a2c <pendsv+0x14>)
     a1e:	6020      	str	r0, [r4, #0]
    thread_preempt();
     a20:	f004 f97a 	bl	4d18 <thread_preempt>

    LTRACEF("fell through\n");

    /* if we got here, there wasn't anything to switch to, so just fall through and exit */
    preempt_frame = NULL;
     a24:	2300      	movs	r3, #0
     a26:	6023      	str	r3, [r4, #0]

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
     a28:	b662      	cpsie	i
     a2a:	bd10      	pop	{r4, r15}
     a2c:	20000558 	.word	0x20000558

00000a30 <arch_thread_initialize>:
void arch_thread_initialize(struct thread *t)
{
    LTRACEF("thread %p, stack %p\n", t, t->stack);

    /* find the top of the stack and align it on an 8 byte boundary */
    uint32_t *sp = (void *)ROUNDDOWN((vaddr_t)t->stack + t->stack_size, 8);
     a30:	6b42      	ldr	r2, [r0, #52]	; 0x34
     a32:	6b83      	ldr	r3, [r0, #56]	; 0x38
     a34:	4413      	add	r3, r2

    struct arm_cm_context_switch_frame *frame = (void *)sp;
    frame--;

    /* arrange for lr to point to our starting routine */
    frame->lr = (uint32_t)&initial_thread_func;
     a36:	4a05      	ldr	r2, [pc, #20]	; (a4c <arch_thread_initialize+0x1c>)
void arch_thread_initialize(struct thread *t)
{
    LTRACEF("thread %p, stack %p\n", t, t->stack);

    /* find the top of the stack and align it on an 8 byte boundary */
    uint32_t *sp = (void *)ROUNDDOWN((vaddr_t)t->stack + t->stack_size, 8);
     a38:	f023 0307 	bic.w	r3, r3, #7

    struct arm_cm_context_switch_frame *frame = (void *)sp;
    frame--;

    /* arrange for lr to point to our starting routine */
    frame->lr = (uint32_t)&initial_thread_func;
     a3c:	f843 2c04 	str.w	r2, [r3, #-4]

    /* find the top of the stack and align it on an 8 byte boundary */
    uint32_t *sp = (void *)ROUNDDOWN((vaddr_t)t->stack + t->stack_size, 8);

    struct arm_cm_context_switch_frame *frame = (void *)sp;
    frame--;
     a40:	3b24      	subs	r3, #36	; 0x24

    /* arrange for lr to point to our starting routine */
    frame->lr = (uint32_t)&initial_thread_func;

    t->arch.sp = (addr_t)frame;
     a42:	62c3      	str	r3, [r0, #44]	; 0x2c
    t->arch.was_preempted = false;
     a44:	2300      	movs	r3, #0
     a46:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
     a4a:	4770      	bx	r14
     a4c:	000009f1 	.word	0x000009f1

00000a50 <_pendsv>:
 * raw pendsv exception handler, triggered by interrupt glue to schedule
 * a preemption check.
 */
__NAKED void _pendsv(void)
{
    __asm__ volatile(
     a50:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
     a54:	4668      	mov	r0, r13
     a56:	f7ff ffdf 	bl	a18 <pendsv>
     a5a:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}

00000a5e <_svc>:
 * svc handler, used to hard switch the cpu into exception mode to return
 * to preempted thread.
 */
__NAKED void _svc(void)
{
    __asm__ volatile(
     a5e:	46a5      	mov	r13, r4
     a60:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}

00000a64 <arch_context_switch>:
 * on the system stack), or inside the pendsv handler on a thread that is being preempted
 * (interrupts disabled, in handler mode). If preempt_frame is set the thread
 * is being preempted.
 */
void arch_context_switch(struct thread *oldthread, struct thread *newthread)
{
     a64:	b530      	push	{r4, r5, r14}
    LTRACEF("FPCCR.LSPACT %lu, FPCAR 0x%x, CONTROL.FPCA %lu\n",
            FPU->FPCCR & FPU_FPCCR_LSPACT_Msk, FPU->FPCAR, __get_CONTROL() & CONTROL_FPCA_Msk);
#endif

    /* if preempt_frame is set, we are being preempted */
    if (preempt_frame) {
     a66:	4d1d      	ldr	r5, [pc, #116]	; (adc <arch_context_switch+0x78>)
 * on the system stack), or inside the pendsv handler on a thread that is being preempted
 * (interrupts disabled, in handler mode). If preempt_frame is set the thread
 * is being preempted.
 */
void arch_context_switch(struct thread *oldthread, struct thread *newthread)
{
     a68:	460b      	mov	r3, r1
    LTRACEF("FPCCR.LSPACT %lu, FPCAR 0x%x, CONTROL.FPCA %lu\n",
            FPU->FPCCR & FPU_FPCCR_LSPACT_Msk, FPU->FPCAR, __get_CONTROL() & CONTROL_FPCA_Msk);
#endif

    /* if preempt_frame is set, we are being preempted */
    if (preempt_frame) {
     a6a:	682c      	ldr	r4, [r5, #0]
     a6c:	b344      	cbz	r4, ac0 <arch_context_switch+0x5c>
        } else {
            DEBUG_ASSERT(oldthread->arch.fpused == false);
        }
#endif

        oldthread->arch.was_preempted = true;
     a6e:	2101      	movs	r1, #1
        oldthread->arch.sp = (addr_t)preempt_frame;
        preempt_frame = NULL;
     a70:	2200      	movs	r2, #0
        } else {
            DEBUG_ASSERT(oldthread->arch.fpused == false);
        }
#endif

        oldthread->arch.was_preempted = true;
     a72:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
        oldthread->arch.sp = (addr_t)preempt_frame;
        preempt_frame = NULL;
     a76:	602a      	str	r2, [r5, #0]
            /* restore the top of the fpu state, the rest will happen below */
            asm volatile("vldm %0, { s16-s31 }" :: "r" (&newthread->arch.fpregs[0]));
        }
#endif

        if (newthread->arch.was_preempted) {
     a78:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
            DEBUG_ASSERT(oldthread->arch.fpused == false);
        }
#endif

        oldthread->arch.was_preempted = true;
        oldthread->arch.sp = (addr_t)preempt_frame;
     a7c:	62c4      	str	r4, [r0, #44]	; 0x2c
     a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            /* restore the top of the fpu state, the rest will happen below */
            asm volatile("vldm %0, { s16-s31 }" :: "r" (&newthread->arch.fpregs[0]));
        }
#endif

        if (newthread->arch.was_preempted) {
     a80:	b12a      	cbz	r2, a8e <arch_context_switch+0x2a>
            /* return directly to the preempted thread's iframe */
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
            LTRACEF("newthread2 FPCCR.LSPACT %lu, FPCAR 0x%x, CONTROL.FPCA %lu\n",
                    FPU->FPCCR & FPU_FPCCR_LSPACT_Msk, FPU->FPCAR, __get_CONTROL() & CONTROL_FPCA_Msk);
#endif
            __asm__ volatile(
     a82:	469d      	mov	r13, r3
     a84:	b662      	cpsie	i
     a86:	f3bf 8f2f 	clrex
     a8a:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
            /* we're inside a pendsv, switching to a user mode thread */
            /* set up a fake frame to exception return to */
            struct arm_cm_exception_frame_short *frame = (void *)newthread->arch.sp;
            frame--;

            frame->pc = (uint32_t)&_thread_mode_bounce;
     a8e:	4914      	ldr	r1, [pc, #80]	; (ae0 <arch_context_switch+0x7c>)
            frame->psr = (1 << 24); /* thread bit set, IPSR 0 */
            frame->r0 = frame->r1 = frame->r2 = frame->r3 = frame->r12 = frame->lr = 0;
     a90:	f843 2c0c 	str.w	r2, [r3, #-12]
            /* we're inside a pendsv, switching to a user mode thread */
            /* set up a fake frame to exception return to */
            struct arm_cm_exception_frame_short *frame = (void *)newthread->arch.sp;
            frame--;

            frame->pc = (uint32_t)&_thread_mode_bounce;
     a94:	f843 1c08 	str.w	r1, [r3, #-8]
            frame->psr = (1 << 24); /* thread bit set, IPSR 0 */
     a98:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
            frame->r0 = frame->r1 = frame->r2 = frame->r3 = frame->r12 = frame->lr = 0;
     a9c:	f843 2c10 	str.w	r2, [r3, #-16]
     aa0:	f843 2c14 	str.w	r2, [r3, #-20]
     aa4:	f843 2c18 	str.w	r2, [r3, #-24]
     aa8:	f843 2c1c 	str.w	r2, [r3, #-28]
            /* set up a fake frame to exception return to */
            struct arm_cm_exception_frame_short *frame = (void *)newthread->arch.sp;
            frame--;

            frame->pc = (uint32_t)&_thread_mode_bounce;
            frame->psr = (1 << 24); /* thread bit set, IPSR 0 */
     aac:	f843 1c04 	str.w	r1, [r3, #-4]
            frame->r0 = frame->r1 = frame->r2 = frame->r3 = frame->r12 = frame->lr = 0;
     ab0:	f843 2d20 	str.w	r2, [r3, #-32]!
            LTRACEF("iretting to user space, fpused %u\n", newthread->arch.fpused);
#else
            LTRACEF("iretting to user space\n");
#endif

            __asm__ volatile(
     ab4:	f06f 0206 	mvn.w	r2, #6
     ab8:	f3bf 8f2f 	clrex
     abc:	469d      	mov	r13, r3
     abe:	4710      	bx	r2
                :: "r"(frame), "r"(0xfffffff9)
            );
            __UNREACHABLE;
        }
    } else {
        oldthread->arch.was_preempted = false;
     ac0:	f880 4030 	strb.w	r4, [r0, #48]	; 0x30
            LTRACEF("thread %s uses float\n", oldthread->name);
            oldthread->arch.fpused = true;
        }
#endif

        if (newthread->arch.was_preempted) {
     ac4:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
     ac8:	b11b      	cbz	r3, ad2 <arch_context_switch+0x6e>
            _arch_non_preempt_context_switch(oldthread, newthread);
#endif
        }
    }

}
     aca:	e8bd 4030 	ldmia.w	r13!, {r4, r5, r14}
        if (newthread->arch.was_preempted) {
            LTRACEF("not being preempted, but switching to preempted thread\n");
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
            _half_save_and_svc(oldthread, newthread, oldthread->arch.fpused, newthread->arch.fpused);
#else
            _half_save_and_svc(oldthread, newthread);
     ace:	f7ff bf79 	b.w	9c4 <_half_save_and_svc>
            _arch_non_preempt_context_switch(oldthread, newthread);
#endif
        }
    }

}
     ad2:	e8bd 4030 	ldmia.w	r13!, {r4, r5, r14}
            /* fast path, both sides did not preempt */
            LTRACEF("both sides are not preempted newsp 0x%lx\n", newthread->arch.sp);
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
            _arch_non_preempt_context_switch(oldthread, newthread, oldthread->arch.fpused, newthread->arch.fpused);
#else
            _arch_non_preempt_context_switch(oldthread, newthread);
     ad6:	f7ff bf80 	b.w	9da <_arch_non_preempt_context_switch>
     ada:	bf00      	nop
     adc:	20000558 	.word	0x20000558
     ae0:	00000a11 	.word	0x00000a11

00000ae4 <arch_dump_thread>:

}

void arch_dump_thread(thread_t *t)
{
    if (t->state != THREAD_RUNNING) {
     ae4:	7e03      	ldrb	r3, [r0, #24]
    }

}

void arch_dump_thread(thread_t *t)
{
     ae6:	b510      	push	{r4, r14}
    if (t->state != THREAD_RUNNING) {
     ae8:	2b02      	cmp	r3, #2
    }

}

void arch_dump_thread(thread_t *t)
{
     aea:	4604      	mov	r4, r0
    if (t->state != THREAD_RUNNING) {
     aec:	d00d      	beq.n	b0a <arch_dump_thread+0x26>
        dprintf(INFO, "\tarch: ");
     aee:	4807      	ldr	r0, [pc, #28]	; (b0c <arch_dump_thread+0x28>)
     af0:	f00b feca 	bl	c888 <_printf>
        dprintf(INFO, "sp 0x%lx, was preempted %u", t->arch.sp, t->arch.was_preempted);
     af4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     af6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
     afa:	4805      	ldr	r0, [pc, #20]	; (b10 <arch_dump_thread+0x2c>)
     afc:	f00b fec4 	bl	c888 <_printf>
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
        dprintf(INFO, ", fpused %u", t->arch.fpused);
#endif
        dprintf(INFO, "\n");
    }
}
     b00:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
        dprintf(INFO, "\tarch: ");
        dprintf(INFO, "sp 0x%lx, was preempted %u", t->arch.sp, t->arch.was_preempted);
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
        dprintf(INFO, ", fpused %u", t->arch.fpused);
#endif
        dprintf(INFO, "\n");
     b04:	4803      	ldr	r0, [pc, #12]	; (b14 <arch_dump_thread+0x30>)
     b06:	f00b bebf 	b.w	c888 <_printf>
     b0a:	bd10      	pop	{r4, r15}
     b0c:	0000e6d5 	.word	0x0000e6d5
     b10:	0000e6dd 	.word	0x0000e6dd
     b14:	0000e7b4 	.word	0x0000e7b4

00000b18 <lk_init_level>:

extern const struct lk_init_struct __lk_init[];
extern const struct lk_init_struct __lk_init_end[];

void lk_init_level(enum lk_init_flags required_flag, uint start_level, uint stop_level)
{
     b18:	e92d 43f7 	stmdb	r13!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r14}
     b1c:	4680      	mov	r8, r0
     b1e:	4691      	mov	r9, r2
    LTRACEF("flags %#x, start_level %#x, stop_level %#x\n",
            required_flag, start_level, stop_level);

    ASSERT(start_level > 0);
     b20:	460f      	mov	r7, r1
     b22:	b939      	cbnz	r1, b34 <lk_init_level+0x1c>
     b24:	4a22      	ldr	r2, [pc, #136]	; (bb0 <lk_init_level+0x98>)
     b26:	4670      	mov	r0, r14
     b28:	9200      	str	r2, [sp, #0]
     b2a:	4922      	ldr	r1, [pc, #136]	; (bb4 <lk_init_level+0x9c>)
     b2c:	4a22      	ldr	r2, [pc, #136]	; (bb8 <lk_init_level+0xa0>)
     b2e:	2333      	movs	r3, #51	; 0x33
     b30:	f00a fcc0 	bl	b4b4 <_panic>
    uint last_called_level = start_level - 1;
     b34:	1e4e      	subs	r6, r1, #1
    const struct lk_init_struct *last = NULL;
     b36:	2000      	movs	r0, #0
    for (;;) {
        /* search for the lowest uncalled hook to call */
        LTRACEF("last %p, last_called_level %#x\n", last, last_called_level);

        const struct lk_init_struct *found = NULL;
        bool seen_last = false;
     b38:	2100      	movs	r1, #0
        for (const struct lk_init_struct *ptr = __lk_init; ptr != __lk_init_end; ptr++) {
     b3a:	4b20      	ldr	r3, [pc, #128]	; (bbc <lk_init_level+0xa4>)
    const struct lk_init_struct *last = NULL;
    for (;;) {
        /* search for the lowest uncalled hook to call */
        LTRACEF("last %p, last_called_level %#x\n", last, last_called_level);

        const struct lk_init_struct *found = NULL;
     b3c:	460c      	mov	r4, r1
        bool seen_last = false;
        for (const struct lk_init_struct *ptr = __lk_init; ptr != __lk_init_end; ptr++) {
     b3e:	4a20      	ldr	r2, [pc, #128]	; (bc0 <lk_init_level+0xa8>)
     b40:	4293      	cmp	r3, r2
     b42:	d01c      	beq.n	b7e <lk_init_level+0x66>

            if (ptr == last)
                seen_last = true;

            /* reject the easy ones */
            if (!(ptr->flags & required_flag))
     b44:	685a      	ldr	r2, [r3, #4]
        bool seen_last = false;
        for (const struct lk_init_struct *ptr = __lk_init; ptr != __lk_init_end; ptr++) {
            LTRACEF("looking at %p (%s) level %#x, flags %#x, seen_last %d\n", ptr, ptr->name, ptr->level, ptr->flags, seen_last);

            if (ptr == last)
                seen_last = true;
     b46:	4283      	cmp	r3, r0
     b48:	bf08      	it	eq
     b4a:	2101      	moveq	r1, #1

            /* reject the easy ones */
            if (!(ptr->flags & required_flag))
     b4c:	ea18 0f02 	tst.w	r8, r2
     b50:	d013      	beq.n	b7a <lk_init_level+0x62>
                continue;
            if (ptr->level > stop_level)
     b52:	681d      	ldr	r5, [r3, #0]
     b54:	454d      	cmp	r5, r9
     b56:	d810      	bhi.n	b7a <lk_init_level+0x62>
                continue;
            if (ptr->level < last_called_level)
     b58:	42b5      	cmp	r5, r6
     b5a:	d30e      	bcc.n	b7a <lk_init_level+0x62>
                continue;
            if (found && found->level <= ptr->level)
     b5c:	b114      	cbz	r4, b64 <lk_init_level+0x4c>
     b5e:	6822      	ldr	r2, [r4, #0]
     b60:	42aa      	cmp	r2, r5
     b62:	d90a      	bls.n	b7a <lk_init_level+0x62>
                continue;

            /* keep the lowest one we haven't called yet */
            if (ptr->level >= start_level && ptr->level > last_called_level) {
     b64:	42bd      	cmp	r5, r7
     b66:	d301      	bcc.n	b6c <lk_init_level+0x54>
     b68:	42b5      	cmp	r5, r6
     b6a:	d805      	bhi.n	b78 <lk_init_level+0x60>

            /* if we're at the same level as the last one we called and we've
             * already passed over it this time around, we can mark this one
             * and early terminate the loop.
             */
            if (ptr->level == last_called_level && ptr != last && seen_last) {
     b6c:	42b5      	cmp	r5, r6
     b6e:	d104      	bne.n	b7a <lk_init_level+0x62>
     b70:	4283      	cmp	r3, r0
     b72:	d002      	beq.n	b7a <lk_init_level+0x62>
     b74:	b109      	cbz	r1, b7a <lk_init_level+0x62>
     b76:	e004      	b.n	b82 <lk_init_level+0x6a>
     b78:	461c      	mov	r4, r3
        /* search for the lowest uncalled hook to call */
        LTRACEF("last %p, last_called_level %#x\n", last, last_called_level);

        const struct lk_init_struct *found = NULL;
        bool seen_last = false;
        for (const struct lk_init_struct *ptr = __lk_init; ptr != __lk_init_end; ptr++) {
     b7a:	3310      	adds	r3, #16
     b7c:	e7df      	b.n	b3e <lk_init_level+0x26>
                found = ptr;
                break;
            }
        }

        if (!found)
     b7e:	b90c      	cbnz	r4, b84 <lk_init_level+0x6c>
     b80:	e013      	b.n	baa <lk_init_level+0x92>
     b82:	461c      	mov	r4, r3
            break;

#if TRACE_INIT
        if (found->level >= EARLIEST_TRACE_LEVEL) {
     b84:	6823      	ldr	r3, [r4, #0]
     b86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
     b8a:	d308      	bcc.n	b9e <lk_init_level+0x86>
            printf("INIT: cpu %d, calling hook %p (%s) at level %#x, flags %#x\n",
     b8c:	9300      	str	r3, [sp, #0]
     b8e:	6863      	ldr	r3, [r4, #4]
     b90:	480c      	ldr	r0, [pc, #48]	; (bc4 <lk_init_level+0xac>)
     b92:	9301      	str	r3, [sp, #4]
     b94:	2100      	movs	r1, #0
     b96:	68a2      	ldr	r2, [r4, #8]
     b98:	68e3      	ldr	r3, [r4, #12]
     b9a:	f00b fe75 	bl	c888 <_printf>
                   arch_curr_cpu_num(), found->hook, found->name, found->level, found->flags);
        }
#endif
        found->hook(found->level);
     b9e:	6820      	ldr	r0, [r4, #0]
     ba0:	68a3      	ldr	r3, [r4, #8]
     ba2:	4798      	blx	r3
        last_called_level = found->level;
     ba4:	6826      	ldr	r6, [r4, #0]
        last = found;
    }
     ba6:	4620      	mov	r0, r4
     ba8:	e7c6      	b.n	b38 <lk_init_level+0x20>
}
     baa:	b003      	add	sp, #12
     bac:	e8bd 83f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r15}
     bb0:	0000e703 	.word	0x0000e703
     bb4:	00010774 	.word	0x00010774
     bb8:	0000e6f8 	.word	0x0000e6f8
     bbc:	000180a8 	.word	0x000180a8
     bc0:	000180d8 	.word	0x000180d8
     bc4:	0000e713 	.word	0x0000e713

00000bc8 <lk_primary_cpu_init_level>:
};

void lk_init_level(enum lk_init_flags flags, uint start_level, uint stop_level);

static inline void lk_primary_cpu_init_level(uint start_level, uint stop_level)
{
     bc8:	4603      	mov	r3, r0
     bca:	460a      	mov	r2, r1
    lk_init_level(LK_INIT_FLAG_PRIMARY_CPU, start_level, stop_level);
     bcc:	2001      	movs	r0, #1
     bce:	4619      	mov	r1, r3
     bd0:	f7ff bfa2 	b.w	b18 <lk_init_level>

00000bd4 <bootstrap2>:
    // become the idle thread and enable interrupts to start the scheduler
    thread_become_idle();
}

static int bootstrap2(void *arg)
{
     bd4:	b508      	push	{r3, r14}
    dprintf(SPEW, "top of bootstrap2()\n");
     bd6:	4818      	ldr	r0, [pc, #96]	; (c38 <bootstrap2+0x64>)
     bd8:	f00b fe56 	bl	c888 <_printf>

    lk_primary_cpu_init_level(LK_INIT_LEVEL_THREADING, LK_INIT_LEVEL_ARCH - 1);
     bdc:	4917      	ldr	r1, [pc, #92]	; (c3c <bootstrap2+0x68>)
     bde:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
     be2:	f7ff fff1 	bl	bc8 <lk_primary_cpu_init_level>
    arch_init();
     be6:	f7ff fd83 	bl	6f0 <arch_init>

    // initialize the rest of the platform
    dprintf(SPEW, "initializing platform\n");
     bea:	4815      	ldr	r0, [pc, #84]	; (c40 <bootstrap2+0x6c>)
     bec:	f00b fe4c 	bl	c888 <_printf>
    lk_primary_cpu_init_level(LK_INIT_LEVEL_ARCH, LK_INIT_LEVEL_PLATFORM - 1);
     bf0:	4914      	ldr	r1, [pc, #80]	; (c44 <bootstrap2+0x70>)
     bf2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     bf6:	f7ff ffe7 	bl	bc8 <lk_primary_cpu_init_level>
    platform_init();
     bfa:	f7ff fbe3 	bl	3c4 <platform_init>

    // initialize the target
    dprintf(SPEW, "initializing target\n");
     bfe:	4812      	ldr	r0, [pc, #72]	; (c48 <bootstrap2+0x74>)
     c00:	f00b fe42 	bl	c888 <_printf>
    lk_primary_cpu_init_level(LK_INIT_LEVEL_PLATFORM, LK_INIT_LEVEL_TARGET - 1);
     c04:	4911      	ldr	r1, [pc, #68]	; (c4c <bootstrap2+0x78>)
     c06:	f44f 2010 	mov.w	r0, #589824	; 0x90000
     c0a:	f7ff ffdd 	bl	bc8 <lk_primary_cpu_init_level>
    target_init();
     c0e:	f009 fe3f 	bl	a890 <target_init>

    dprintf(SPEW, "calling apps_init()\n");
     c12:	480f      	ldr	r0, [pc, #60]	; (c50 <bootstrap2+0x7c>)
     c14:	f00b fe38 	bl	c888 <_printf>
    lk_primary_cpu_init_level(LK_INIT_LEVEL_TARGET, LK_INIT_LEVEL_APPS - 1);
     c18:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
     c1c:	490d      	ldr	r1, [pc, #52]	; (c54 <bootstrap2+0x80>)
     c1e:	f7ff ffd3 	bl	bc8 <lk_primary_cpu_init_level>
    apps_init();
     c22:	f000 f897 	bl	d54 <apps_init>

    lk_primary_cpu_init_level(LK_INIT_LEVEL_APPS, LK_INIT_LEVEL_LAST);
     c26:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
     c2a:	f04f 31ff 	mov.w	r1, #4294967295
     c2e:	f7ff ffcb 	bl	bc8 <lk_primary_cpu_init_level>

    return 0;
}
     c32:	2000      	movs	r0, #0
     c34:	bd08      	pop	{r3, r15}
     c36:	bf00      	nop
     c38:	0000e74f 	.word	0x0000e74f
     c3c:	0007ffff 	.word	0x0007ffff
     c40:	0000e764 	.word	0x0000e764
     c44:	0008ffff 	.word	0x0008ffff
     c48:	0000e77b 	.word	0x0000e77b
     c4c:	0009ffff 	.word	0x0009ffff
     c50:	0000e790 	.word	0x0000e790
     c54:	000affff 	.word	0x000affff

00000c58 <lk_main>:

/* called from arch code */
void lk_main(ulong arg0, ulong arg1, ulong arg2, ulong arg3)
{
    // save the boot args
    lk_boot_args[0] = arg0;
     c58:	4c2c      	ldr	r4, [pc, #176]	; (d0c <lk_main+0xb4>)
    }
}

/* called from arch code */
void lk_main(ulong arg0, ulong arg1, ulong arg2, ulong arg3)
{
     c5a:	b507      	push	{r0, r1, r2, r14}
    // save the boot args
    lk_boot_args[0] = arg0;
    lk_boot_args[1] = arg1;
    lk_boot_args[2] = arg2;
    lk_boot_args[3] = arg3;
     c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // get us into some sort of thread context
    thread_init_early();
     c60:	f004 f910 	bl	4e84 <thread_init_early>

    // early arch stuff
    lk_primary_cpu_init_level(LK_INIT_LEVEL_EARLIEST, LK_INIT_LEVEL_ARCH_EARLY - 1);
     c64:	2001      	movs	r0, #1
     c66:	f64f 71ff 	movw	r1, #65535	; 0xffff
     c6a:	f7ff ffad 	bl	bc8 <lk_primary_cpu_init_level>
    arch_early_init();
     c6e:	f7ff fceb 	bl	648 <arch_early_init>

    // do any super early platform initialization
    lk_primary_cpu_init_level(LK_INIT_LEVEL_ARCH_EARLY, LK_INIT_LEVEL_PLATFORM_EARLY - 1);
     c72:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     c76:	4926      	ldr	r1, [pc, #152]	; (d10 <lk_main+0xb8>)
     c78:	f7ff ffa6 	bl	bc8 <lk_primary_cpu_init_level>
    platform_early_init();
     c7c:	f7ff fb90 	bl	3a0 <platform_early_init>

    // do any super early target initialization
    lk_primary_cpu_init_level(LK_INIT_LEVEL_PLATFORM_EARLY, LK_INIT_LEVEL_TARGET_EARLY - 1);
     c80:	4924      	ldr	r1, [pc, #144]	; (d14 <lk_main+0xbc>)
     c82:	f44f 3000 	mov.w	r0, #131072	; 0x20000
     c86:	f7ff ff9f 	bl	bc8 <lk_primary_cpu_init_level>
    target_early_init();
     c8a:	f009 fe00 	bl	a88e <target_early_init>

#if WITH_SMP
    dprintf(INFO, "\nwelcome to lk/MP\n\n");
#else
    dprintf(INFO, "\nwelcome to lk\n\n");
     c8e:	4822      	ldr	r0, [pc, #136]	; (d18 <lk_main+0xc0>)
     c90:	f00b fdfa 	bl	c888 <_printf>
#endif
    dprintf(INFO, "boot args 0x%lx 0x%lx 0x%lx 0x%lx\n",
     c94:	68e3      	ldr	r3, [r4, #12]
     c96:	4821      	ldr	r0, [pc, #132]	; (d1c <lk_main+0xc4>)
     c98:	9300      	str	r3, [sp, #0]
     c9a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
     c9e:	f00b fdf3 	bl	c888 <_printf>
            lk_boot_args[0], lk_boot_args[1], lk_boot_args[2], lk_boot_args[3]);

    // bring up the kernel heap
    lk_primary_cpu_init_level(LK_INIT_LEVEL_TARGET_EARLY, LK_INIT_LEVEL_HEAP - 1);
     ca2:	491f      	ldr	r1, [pc, #124]	; (d20 <lk_main+0xc8>)
     ca4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
     ca8:	f7ff ff8e 	bl	bc8 <lk_primary_cpu_init_level>
    dprintf(SPEW, "initializing heap\n");
     cac:	481d      	ldr	r0, [pc, #116]	; (d24 <lk_main+0xcc>)
     cae:	f00b fdeb 	bl	c888 <_printf>
    heap_init();
     cb2:	f00a fd1f 	bl	b6f4 <heap_init>

    // deal with any static constructors
    dprintf(SPEW, "calling constructors\n");
     cb6:	481c      	ldr	r0, [pc, #112]	; (d28 <lk_main+0xd0>)
     cb8:	f00b fde6 	bl	c888 <_printf>

static void call_constructors(void)
{
    void **ctor;

    ctor = &__ctor_list;
     cbc:	4c1b      	ldr	r4, [pc, #108]	; (d2c <lk_main+0xd4>)
    while (ctor != &__ctor_end) {
     cbe:	4b1c      	ldr	r3, [pc, #112]	; (d30 <lk_main+0xd8>)
     cc0:	429c      	cmp	r4, r3
     cc2:	d003      	beq.n	ccc <lk_main+0x74>
        void (*func)(void);

        func = (void ( *)(void))*ctor;

        func();
     cc4:	f854 3b04 	ldr.w	r3, [r4], #4
     cc8:	4798      	blx	r3
     cca:	e7f8      	b.n	cbe <lk_main+0x66>
    // deal with any static constructors
    dprintf(SPEW, "calling constructors\n");
    call_constructors();

    // initialize the kernel
    lk_primary_cpu_init_level(LK_INIT_LEVEL_HEAP, LK_INIT_LEVEL_KERNEL - 1);
     ccc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
     cd0:	4918      	ldr	r1, [pc, #96]	; (d34 <lk_main+0xdc>)
     cd2:	f7ff ff79 	bl	bc8 <lk_primary_cpu_init_level>
    kernel_init();
     cd6:	f003 fbd5 	bl	4484 <kernel_init>

    lk_primary_cpu_init_level(LK_INIT_LEVEL_KERNEL, LK_INIT_LEVEL_THREADING - 1);
     cda:	4917      	ldr	r1, [pc, #92]	; (d38 <lk_main+0xe0>)
     cdc:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
     ce0:	f7ff ff72 	bl	bc8 <lk_primary_cpu_init_level>

    // create a thread to complete system initialization
    dprintf(SPEW, "creating bootstrap completion thread\n");
     ce4:	4815      	ldr	r0, [pc, #84]	; (d3c <lk_main+0xe4>)
     ce6:	f00b fdcf 	bl	c888 <_printf>
    thread_t *t = thread_create("bootstrap2", &bootstrap2, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
     cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
     cee:	4914      	ldr	r1, [pc, #80]	; (d40 <lk_main+0xe8>)
     cf0:	2200      	movs	r2, #0
     cf2:	9300      	str	r3, [sp, #0]
     cf4:	4813      	ldr	r0, [pc, #76]	; (d44 <lk_main+0xec>)
     cf6:	2310      	movs	r3, #16
     cf8:	f003 ff40 	bl	4b7c <thread_create>
     cfc:	4604      	mov	r4, r0
    thread_set_pinned_cpu(t, 0);
    thread_detach(t);
     cfe:	f004 fba7 	bl	5450 <thread_detach>
    thread_resume(t);
     d02:	4620      	mov	r0, r4
     d04:	f003 ffc2 	bl	4c8c <thread_resume>

    // become the idle thread and enable interrupts to start the scheduler
    thread_become_idle();
     d08:	f004 f8fe 	bl	4f08 <thread_become_idle>
     d0c:	2000055c 	.word	0x2000055c
     d10:	0001ffff 	.word	0x0001ffff
     d14:	0002ffff 	.word	0x0002ffff
     d18:	0000e7a5 	.word	0x0000e7a5
     d1c:	0000e7b6 	.word	0x0000e7b6
     d20:	0003ffff 	.word	0x0003ffff
     d24:	0000e7d9 	.word	0x0000e7d9
     d28:	0000e7ec 	.word	0x0000e7ec
     d2c:	20000120 	.word	0x20000120
     d30:	20000120 	.word	0x20000120
     d34:	0005ffff 	.word	0x0005ffff
     d38:	0006ffff 	.word	0x0006ffff
     d3c:	0000e802 	.word	0x0000e802
     d40:	00000bd5 	.word	0x00000bd5
     d44:	0000e828 	.word	0x0000e828

00000d48 <app_thread_entry>:
        }
    }
}

static int app_thread_entry(void *arg)
{
     d48:	b508      	push	{r3, r14}
    const struct app_descriptor *app = (const struct app_descriptor *)arg;

    app->entry(app, NULL);
     d4a:	2100      	movs	r1, #0
     d4c:	6883      	ldr	r3, [r0, #8]
     d4e:	4798      	blx	r3

    return 0;
}
     d50:	2000      	movs	r0, #0
     d52:	bd08      	pop	{r3, r15}

00000d54 <apps_init>:

static void start_app(const struct app_descriptor *app);

/* one time setup */
void apps_init(void)
{
     d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    const struct app_descriptor *app;

    /* call all the init routines */
    for (app = &__apps_start; app != &__apps_end; app++) {
     d56:	4c1a      	ldr	r4, [pc, #104]	; (dc0 <apps_init+0x6c>)
     d58:	4b1a      	ldr	r3, [pc, #104]	; (dc4 <apps_init+0x70>)
     d5a:	429c      	cmp	r4, r3
     d5c:	461f      	mov	r7, r3
     d5e:	d005      	beq.n	d6c <apps_init+0x18>
        if (app->init)
     d60:	6863      	ldr	r3, [r4, #4]
     d62:	b10b      	cbz	r3, d68 <apps_init+0x14>
            app->init(app);
     d64:	4620      	mov	r0, r4
     d66:	4798      	blx	r3
void apps_init(void)
{
    const struct app_descriptor *app;

    /* call all the init routines */
    for (app = &__apps_start; app != &__apps_end; app++) {
     d68:	3414      	adds	r4, #20
     d6a:	e7f5      	b.n	d58 <apps_init+0x4>
     d6c:	4c16      	ldr	r4, [pc, #88]	; (dc8 <apps_init+0x74>)
     d6e:	f1a4 0514 	sub.w	r5, r4, #20
        if (app->init)
            app->init(app);
    }

    /* start any that want to start on boot */
    for (app = &__apps_start; app != &__apps_end; app++) {
     d72:	42bd      	cmp	r5, r7
     d74:	d021      	beq.n	dba <apps_init+0x66>
        if (app->entry && (app->flags & APP_FLAG_DONT_START_ON_BOOT) == 0) {
     d76:	f854 2c0c 	ldr.w	r2, [r4, #-12]
     d7a:	b1e2      	cbz	r2, db6 <apps_init+0x62>
     d7c:	f854 3c08 	ldr.w	r3, [r4, #-8]
     d80:	07da      	lsls	r2, r3, #31
     d82:	d418      	bmi.n	db6 <apps_init+0x62>
    return 0;
}

static void start_app(const struct app_descriptor *app)
{
    uint32_t stack_size = (app->flags & APP_FLAG_CUSTOM_STACK_SIZE) ? app->stack_size : DEFAULT_STACK_SIZE;
     d84:	079b      	lsls	r3, r3, #30
     d86:	bf4c      	ite	mi
     d88:	f854 6c04 	ldrmi.w	r6, [r4, #-4]
     d8c:	f44f 6680 	movpl.w	r6, #1024	; 0x400

    printf("starting app %s\n", app->name);
     d90:	f854 1c14 	ldr.w	r1, [r4, #-20]
     d94:	480d      	ldr	r0, [pc, #52]	; (dcc <apps_init+0x78>)
     d96:	f00b fd77 	bl	c888 <_printf>
    thread_t *t = thread_create(app->name, &app_thread_entry, (void *)app, DEFAULT_PRIORITY, stack_size);
     d9a:	462a      	mov	r2, r5
     d9c:	490c      	ldr	r1, [pc, #48]	; (dd0 <apps_init+0x7c>)
     d9e:	2310      	movs	r3, #16
     da0:	9600      	str	r6, [sp, #0]
     da2:	f854 0c14 	ldr.w	r0, [r4, #-20]
     da6:	f003 fee9 	bl	4b7c <thread_create>
     daa:	4605      	mov	r5, r0
    thread_detach(t);
     dac:	f004 fb50 	bl	5450 <thread_detach>
    thread_resume(t);
     db0:	4628      	mov	r0, r5
     db2:	f003 ff6b 	bl	4c8c <thread_resume>
     db6:	3414      	adds	r4, #20
     db8:	e7d9      	b.n	d6e <apps_init+0x1a>
    for (app = &__apps_start; app != &__apps_end; app++) {
        if (app->entry && (app->flags & APP_FLAG_DONT_START_ON_BOOT) == 0) {
            start_app(app);
        }
    }
}
     dba:	b003      	add	sp, #12
     dbc:	bdf0      	pop	{r4, r5, r6, r7, r15}
     dbe:	bf00      	nop
     dc0:	0001806c 	.word	0x0001806c
     dc4:	000180a8 	.word	0x000180a8
     dc8:	00018080 	.word	0x00018080
     dcc:	0000e833 	.word	0x0000e833
     dd0:	00000d49 	.word	0x00000d49

00000dd4 <shell_entry>:
    console_init();
}

static void shell_entry(const struct app_descriptor *app, void *args)
{
    console_start();
     dd4:	f00a ba86 	b.w	b2e4 <console_start>

00000dd8 <shell_init>:
#include <debug.h>
#include <lib/console.h>

static void shell_init(const struct app_descriptor *app)
{
    console_init();
     dd8:	f00a bb30 	b.w	b43c <console_init>

00000ddc <c_memset>:
}

static void *c_memset(void *s, int c, size_t count)
{
    char *xs = (char *) s;
    size_t len = (-(size_t)s) & lmask;
     ddc:	4243      	negs	r3, r0
     dde:	f003 0303 	and.w	r3, r3, #3
    word cc = c & 0xff;

    if ( count > len ) {
     de2:	429a      	cmp	r2, r3

    return dest;
}

static void *c_memset(void *s, int c, size_t count)
{
     de4:	b5f0      	push	{r4, r5, r6, r7, r14}
    char *xs = (char *) s;
    size_t len = (-(size_t)s) & lmask;
    word cc = c & 0xff;

    if ( count > len ) {
     de6:	d919      	bls.n	e1c <c_memset+0x40>

static void *c_memset(void *s, int c, size_t count)
{
    char *xs = (char *) s;
    size_t len = (-(size_t)s) & lmask;
    word cc = c & 0xff;
     de8:	b2cc      	uxtb	r4, r1

    if ( count > len ) {
        count -= len;
        cc |= cc << 8;
     dea:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
    char *xs = (char *) s;
    size_t len = (-(size_t)s) & lmask;
    word cc = c & 0xff;

    if ( count > len ) {
        count -= len;
     dee:	1ad2      	subs	r2, r2, r3
        cc |= cc << 8;
        cc |= cc << 16;
     df0:	ea44 4704 	orr.w	r7, r4, r4, lsl #16
     df4:	4403      	add	r3, r0
    return dest;
}

static void *c_memset(void *s, int c, size_t count)
{
    char *xs = (char *) s;
     df6:	4604      	mov	r4, r0
        cc |= cc << 16;
        if (sizeof(word) == 8)
            cc |= (uint64_t)cc << 32; // should be optimized out on 32 bit machines

        // write to non-aligned memory byte-wise
        for ( ; len > 0; len-- )
     df8:	429c      	cmp	r4, r3
     dfa:	d002      	beq.n	e02 <c_memset+0x26>
            *xs++ = c;
     dfc:	f804 1b01 	strb.w	r1, [r4], #1
     e00:	e7fa      	b.n	df8 <c_memset+0x1c>

        // write to aligned memory dword-wise
        for ( len = count / lsize; len > 0; len-- ) {
     e02:	0895      	lsrs	r5, r2, #2
     e04:	462c      	mov	r4, r5
     e06:	461e      	mov	r6, r3
     e08:	b11c      	cbz	r4, e12 <c_memset+0x36>
            *((word *)xs) = (word)cc;
     e0a:	f846 7b04 	str.w	r7, [r6], #4
        // write to non-aligned memory byte-wise
        for ( ; len > 0; len-- )
            *xs++ = c;

        // write to aligned memory dword-wise
        for ( len = count / lsize; len > 0; len-- ) {
     e0e:	3c01      	subs	r4, #1
     e10:	e7fa      	b.n	e08 <c_memset+0x2c>
     e12:	eb03 0385 	add.w	r3, r3, r5, lsl #2
            *((word *)xs) = (word)cc;
            xs += lsize;
        }

        count &= lmask;
     e16:	f002 0203 	and.w	r2, r2, #3
     e1a:	e000      	b.n	e1e <c_memset+0x42>
    return dest;
}

static void *c_memset(void *s, int c, size_t count)
{
    char *xs = (char *) s;
     e1c:	4603      	mov	r3, r0
     e1e:	441a      	add	r2, r3

        count &= lmask;
    }

    // write remaining bytes
    for ( ; count > 0; count-- )
     e20:	4293      	cmp	r3, r2
     e22:	d002      	beq.n	e2a <c_memset+0x4e>
        *xs++ = c;
     e24:	f803 1b01 	strb.w	r1, [r3], #1
     e28:	e7fa      	b.n	e20 <c_memset+0x44>

    return s;
}
     e2a:	bdf0      	pop	{r4, r5, r6, r7, r15}

00000e2c <null_memcpy>:

static void *null_memcpy(void *dst, const void *src, size_t len)
{
    return dst;
}
     e2c:	4770      	bx	r14

00000e2e <mymemcpy>:

#define BUFFER_SIZE (2*1024*1024)
#define ITERATIONS (256*1024*1024 / BUFFER_SIZE) // enough iterations to have to copy/set 256MB of memory

#if 1
static inline void *mymemcpy(void *dst, const void *src, size_t len) { return memcpy(dst, src, len); }
     e2e:	f00a becc 	b.w	bbca <memcpy>

00000e32 <mymemset>:
static inline void *mymemset(void *dst, int c, size_t len) { return memset(dst, c, len); }
     e32:	f00a bf11 	b.w	bc58 <memset>
	...

00000e38 <bench_memcpy_routine>:
{
    return dst;
}

static lk_time_t bench_memcpy_routine(void *memcpy_routine(void *, const void *, size_t), size_t srcalign, size_t dstalign)
{
     e38:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}
     e3c:	4606      	mov	r6, r0
     e3e:	460f      	mov	r7, r1
     e40:	4690      	mov	r8, r2
    int i;
    lk_time_t t0;

    t0 = current_time();
     e42:	f002 ffdf 	bl	3e04 <current_time>
     e46:	2480      	movs	r4, #128	; 0x80
     e48:	4605      	mov	r5, r0
    for (i=0; i < ITERATIONS; i++) {
        memcpy_routine(dst + dstalign, src + srcalign, BUFFER_SIZE);
     e4a:	4b08      	ldr	r3, [pc, #32]	; (e6c <bench_memcpy_routine+0x34>)
     e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     e50:	6818      	ldr	r0, [r3, #0]
     e52:	4b07      	ldr	r3, [pc, #28]	; (e70 <bench_memcpy_routine+0x38>)
     e54:	4440      	add	r0, r8
     e56:	6819      	ldr	r1, [r3, #0]
     e58:	4439      	add	r1, r7
     e5a:	47b0      	blx	r6
{
    int i;
    lk_time_t t0;

    t0 = current_time();
    for (i=0; i < ITERATIONS; i++) {
     e5c:	3c01      	subs	r4, #1
     e5e:	d1f4      	bne.n	e4a <bench_memcpy_routine+0x12>
        memcpy_routine(dst + dstalign, src + srcalign, BUFFER_SIZE);
    }
    return current_time() - t0;
     e60:	f002 ffd0 	bl	3e04 <current_time>
}
     e64:	1b40      	subs	r0, r0, r5
     e66:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
     e6a:	bf00      	nop
     e6c:	2000056c 	.word	0x2000056c
     e70:	20000578 	.word	0x20000578

00000e74 <c_memmove>:

#define lsize sizeof(word)
#define lmask (lsize - 1)

static void *c_memmove(void *dest, void const *src, size_t count)
{
     e74:	b5f0      	push	{r4, r5, r6, r7, r14}
    char *d = (char *)dest;
    const char *s = (const char *)src;
    int len;

    if (count == 0 || dest == src)
     e76:	2a00      	cmp	r2, #0
     e78:	d079      	beq.n	f6e <c_memmove+0xfa>
     e7a:	4288      	cmp	r0, r1
     e7c:	d077      	beq.n	f6e <c_memmove+0xfa>
        return dest;

    if ((long)d < (long)s) {
     e7e:	da36      	bge.n	eee <c_memmove+0x7a>
        if (((long)d | (long)s) & lmask) {
     e80:	ea40 0301 	orr.w	r3, r0, r1
     e84:	079f      	lsls	r7, r3, #30
     e86:	d019      	beq.n	ebc <c_memmove+0x48>
            // src and/or dest do not align on word boundary
            if ((((long)d ^ (long)s) & lmask) || (count < lsize))
     e88:	ea80 0301 	eor.w	r3, r0, r1
     e8c:	079e      	lsls	r6, r3, #30
     e8e:	d101      	bne.n	e94 <c_memmove+0x20>
     e90:	2a03      	cmp	r2, #3
     e92:	d801      	bhi.n	e98 <c_memmove+0x24>
                len = count; // copy the rest of the buffer with the byte mover
     e94:	4614      	mov	r4, r2
     e96:	e003      	b.n	ea0 <c_memmove+0x2c>
            else
                len = lsize - ((long)d & lmask); // move the ptrs up to a word boundary
     e98:	f000 0403 	and.w	r4, r0, #3
     e9c:	f1c4 0404 	rsb	r4, r4, #4

            count -= len;
     ea0:	1b12      	subs	r2, r2, r4
     ea2:	2300      	movs	r3, #0
     ea4:	1ae5      	subs	r5, r4, r3
            for (; len > 0; len--)
     ea6:	2d00      	cmp	r5, #0
     ea8:	dd03      	ble.n	eb2 <c_memmove+0x3e>
                *d++ = *s++;
     eaa:	5ccd      	ldrb	r5, [r1, r3]
     eac:	54c5      	strb	r5, [r0, r3]
     eae:	3301      	adds	r3, #1
     eb0:	e7f8      	b.n	ea4 <c_memmove+0x30>
     eb2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
     eb6:	1905      	adds	r5, r0, r4
     eb8:	4421      	add	r1, r4
     eba:	e000      	b.n	ebe <c_memmove+0x4a>

    if (count == 0 || dest == src)
        return dest;

    if ((long)d < (long)s) {
        if (((long)d | (long)s) & lmask) {
     ebc:	4605      	mov	r5, r0

            count -= len;
            for (; len > 0; len--)
                *d++ = *s++;
        }
        for (len = count / lsize; len > 0; len--) {
     ebe:	0896      	lsrs	r6, r2, #2
     ec0:	2300      	movs	r3, #0
     ec2:	42b3      	cmp	r3, r6
     ec4:	ea4f 0483 	mov.w	r4, r3, lsl #2
     ec8:	d005      	beq.n	ed6 <c_memmove+0x62>
            *(word *)d = *(word *)s;
     eca:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
     ece:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
     ed2:	3301      	adds	r3, #1
     ed4:	e7f5      	b.n	ec2 <c_memmove+0x4e>
     ed6:	4421      	add	r1, r4
     ed8:	4425      	add	r5, r4
            d += lsize;
            s += lsize;
        }
        for (len = count & lmask; len > 0; len--)
     eda:	f002 0203 	and.w	r2, r2, #3
     ede:	2300      	movs	r3, #0
     ee0:	4293      	cmp	r3, r2
     ee2:	d003      	beq.n	eec <c_memmove+0x78>
            *d++ = *s++;
     ee4:	5ccc      	ldrb	r4, [r1, r3]
     ee6:	54ec      	strb	r4, [r5, r3]
     ee8:	3301      	adds	r3, #1
     eea:	e7f9      	b.n	ee0 <c_memmove+0x6c>
     eec:	bdf0      	pop	{r4, r5, r6, r7, r15}
    } else {
        d += count;
     eee:	1883      	adds	r3, r0, r2
        s += count;
     ef0:	4411      	add	r1, r2
        if (((long)d | (long)s) & lmask) {
     ef2:	ea43 0401 	orr.w	r4, r3, r1
     ef6:	07a5      	lsls	r5, r4, #30
     ef8:	d01d      	beq.n	f36 <c_memmove+0xc2>
            // src and/or dest do not align on word boundary
            if ((((long)d ^ (long)s) & lmask) || (count <= lsize))
     efa:	ea83 0401 	eor.w	r4, r3, r1
     efe:	07a4      	lsls	r4, r4, #30
     f00:	d101      	bne.n	f06 <c_memmove+0x92>
     f02:	2a04      	cmp	r2, #4
     f04:	d801      	bhi.n	f0a <c_memmove+0x96>
                len = count;
     f06:	4614      	mov	r4, r2
     f08:	e001      	b.n	f0e <c_memmove+0x9a>
            else
                len = ((long)d & lmask);
     f0a:	f003 0403 	and.w	r4, r3, #3

            count -= len;
     f0e:	1b12      	subs	r2, r2, r4
     f10:	4625      	mov	r5, r4
            for (; len > 0; len--)
     f12:	2d00      	cmp	r5, #0
     f14:	dd0a      	ble.n	f2c <c_memmove+0xb8>
     f16:	4266      	negs	r6, r4
     f18:	198f      	adds	r7, r1, r6
     f1a:	442f      	add	r7, r5
                *--d = *--s;
     f1c:	f817 7c01 	ldrb.w	r7, [r7, #-1]
     f20:	441e      	add	r6, r3
     f22:	442e      	add	r6, r5
     f24:	f806 7c01 	strb.w	r7, [r6, #-1]
                len = count;
            else
                len = ((long)d & lmask);

            count -= len;
            for (; len > 0; len--)
     f28:	3d01      	subs	r5, #1
     f2a:	e7f2      	b.n	f12 <c_memmove+0x9e>
     f2c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
     f30:	4264      	negs	r4, r4
     f32:	4423      	add	r3, r4
     f34:	4421      	add	r1, r4
                *--d = *--s;
        }
        for (len = count / lsize; len > 0; len--) {
     f36:	0895      	lsrs	r5, r2, #2
     f38:	462c      	mov	r4, r5
     f3a:	460e      	mov	r6, r1
     f3c:	461f      	mov	r7, r3
     f3e:	b12c      	cbz	r4, f4c <c_memmove+0xd8>
            d -= lsize;
            s -= lsize;
            *(word *)d = *(word *)s;
     f40:	f856 cd04 	ldr.w	r12, [r6, #-4]!

            count -= len;
            for (; len > 0; len--)
                *--d = *--s;
        }
        for (len = count / lsize; len > 0; len--) {
     f44:	3c01      	subs	r4, #1
            d -= lsize;
            s -= lsize;
            *(word *)d = *(word *)s;
     f46:	f847 cd04 	str.w	r12, [r7, #-4]!
     f4a:	e7f8      	b.n	f3e <c_memmove+0xca>
     f4c:	f06f 0403 	mvn.w	r4, #3
     f50:	436c      	muls	r4, r5
        }
        for (len = count & lmask; len > 0; len--)
     f52:	f002 0203 	and.w	r2, r2, #3
     f56:	4423      	add	r3, r4
     f58:	4421      	add	r1, r4
     f5a:	4614      	mov	r4, r2
     f5c:	f114 34ff 	adds.w	r4, r4, #4294967295
     f60:	d305      	bcc.n	f6e <c_memmove+0xfa>
     f62:	4255      	negs	r5, r2
     f64:	194e      	adds	r6, r1, r5
            *--d = *--s;
     f66:	5d36      	ldrb	r6, [r6, r4]
     f68:	441d      	add	r5, r3
     f6a:	552e      	strb	r6, [r5, r4]
     f6c:	e7f6      	b.n	f5c <c_memmove+0xe8>
    }

    return dest;
}
     f6e:	bdf0      	pop	{r4, r5, r6, r7, r15}

00000f70 <bench_memset_routine.constprop.1>:
            }
        }
    }
}

static lk_time_t bench_memset_routine(void *memset_routine(void *, int, size_t), size_t dstalign, size_t len)
     f70:	b5f8      	push	{r3, r4, r5, r6, r7, r14}
     f72:	4606      	mov	r6, r0
     f74:	460f      	mov	r7, r1
{
    int i;
    lk_time_t t0;

    t0 = current_time();
     f76:	f002 ff45 	bl	3e04 <current_time>
     f7a:	2480      	movs	r4, #128	; 0x80
     f7c:	4605      	mov	r5, r0
    for (i=0; i < ITERATIONS; i++) {
        memset_routine(dst + dstalign, 0, len);
     f7e:	4b06      	ldr	r3, [pc, #24]	; (f98 <bench_memset_routine.constprop.1+0x28>)
     f80:	2100      	movs	r1, #0
     f82:	6818      	ldr	r0, [r3, #0]
     f84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     f88:	4438      	add	r0, r7
     f8a:	47b0      	blx	r6
{
    int i;
    lk_time_t t0;

    t0 = current_time();
    for (i=0; i < ITERATIONS; i++) {
     f8c:	3c01      	subs	r4, #1
     f8e:	d1f6      	bne.n	f7e <bench_memset_routine.constprop.1+0xe>
        memset_routine(dst + dstalign, 0, len);
    }
    return current_time() - t0;
     f90:	f002 ff38 	bl	3e04 <current_time>
}
     f94:	1b40      	subs	r0, r0, r5
     f96:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
     f98:	2000056c 	.word	0x2000056c

00000f9c <fillbuf.constprop.2>:

static void fillbuf(void *ptr, size_t len, uint32_t seed)
{
    size_t i;

    for (i = 0; i < len; i++) {
     f9c:	2300      	movs	r3, #0
        ((char *)ptr)[i] = seed;
     f9e:	54c1      	strb	r1, [r0, r3]
        seed *= 0x1234567;
     fa0:	4a03      	ldr	r2, [pc, #12]	; (fb0 <fillbuf.constprop.2+0x14>)

static void fillbuf(void *ptr, size_t len, uint32_t seed)
{
    size_t i;

    for (i = 0; i < len; i++) {
     fa2:	3301      	adds	r3, #1
     fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
        ((char *)ptr)[i] = seed;
        seed *= 0x1234567;
     fa8:	fb02 f101 	mul.w	r1, r2, r1

static void fillbuf(void *ptr, size_t len, uint32_t seed)
{
    size_t i;

    for (i = 0; i < len; i++) {
     fac:	d1f7      	bne.n	f9e <fillbuf.constprop.2+0x2>
        ((char *)ptr)[i] = seed;
        seed *= 0x1234567;
    }
}
     fae:	4770      	bx	r14
     fb0:	01234567 	.word	0x01234567

00000fb4 <string_tests>:

#if defined(WITH_LIB_CONSOLE)
#include <lib/console.h>

static int string_tests(int argc, const cmd_args *argv)
{
     fb4:	e92d 4ff7 	stmdb	r13!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, r11, r14}
     fb8:	4682      	mov	r10, r0
     fba:	460c      	mov	r4, r1
    src = memalign(64, BUFFER_SIZE + 256);
     fbc:	2040      	movs	r0, #64	; 0x40
     fbe:	49a8      	ldr	r1, [pc, #672]	; (1260 <string_tests+0x2ac>)
     fc0:	f00a fbd0 	bl	b764 <memalign>
     fc4:	4da7      	ldr	r5, [pc, #668]	; (1264 <string_tests+0x2b0>)
    dst = memalign(64, BUFFER_SIZE + 256);
     fc6:	49a6      	ldr	r1, [pc, #664]	; (1260 <string_tests+0x2ac>)
#if defined(WITH_LIB_CONSOLE)
#include <lib/console.h>

static int string_tests(int argc, const cmd_args *argv)
{
    src = memalign(64, BUFFER_SIZE + 256);
     fc8:	6028      	str	r0, [r5, #0]
    dst = memalign(64, BUFFER_SIZE + 256);
     fca:	2040      	movs	r0, #64	; 0x40
     fcc:	f00a fbca 	bl	b764 <memalign>
     fd0:	4ea5      	ldr	r6, [pc, #660]	; (1268 <string_tests+0x2b4>)
    src2 = memalign(64, BUFFER_SIZE + 256);
     fd2:	49a3      	ldr	r1, [pc, #652]	; (1260 <string_tests+0x2ac>)
#include <lib/console.h>

static int string_tests(int argc, const cmd_args *argv)
{
    src = memalign(64, BUFFER_SIZE + 256);
    dst = memalign(64, BUFFER_SIZE + 256);
     fd4:	6030      	str	r0, [r6, #0]
    src2 = memalign(64, BUFFER_SIZE + 256);
     fd6:	2040      	movs	r0, #64	; 0x40
     fd8:	f00a fbc4 	bl	b764 <memalign>
     fdc:	4fa3      	ldr	r7, [pc, #652]	; (126c <string_tests+0x2b8>)
    dst2 = memalign(64, BUFFER_SIZE + 256);
     fde:	49a0      	ldr	r1, [pc, #640]	; (1260 <string_tests+0x2ac>)

static int string_tests(int argc, const cmd_args *argv)
{
    src = memalign(64, BUFFER_SIZE + 256);
    dst = memalign(64, BUFFER_SIZE + 256);
    src2 = memalign(64, BUFFER_SIZE + 256);
     fe0:	6038      	str	r0, [r7, #0]
    dst2 = memalign(64, BUFFER_SIZE + 256);
     fe2:	2040      	movs	r0, #64	; 0x40
     fe4:	f00a fbbe 	bl	b764 <memalign>
     fe8:	f8df 92f4 	ldr.w	r9, [r15, #756]	; 12e0 <string_tests+0x32c>

    printf("src %p, dst %p\n", src, dst);
     fec:	6829      	ldr	r1, [r5, #0]
static int string_tests(int argc, const cmd_args *argv)
{
    src = memalign(64, BUFFER_SIZE + 256);
    dst = memalign(64, BUFFER_SIZE + 256);
    src2 = memalign(64, BUFFER_SIZE + 256);
    dst2 = memalign(64, BUFFER_SIZE + 256);
     fee:	f8c9 0000 	str.w	r0, [r9]

    printf("src %p, dst %p\n", src, dst);
     ff2:	6832      	ldr	r2, [r6, #0]
     ff4:	489e      	ldr	r0, [pc, #632]	; (1270 <string_tests+0x2bc>)
     ff6:	f00b fc47 	bl	c888 <_printf>
    printf("src2 %p, dst2 %p\n", src2, dst2);
     ffa:	489e      	ldr	r0, [pc, #632]	; (1274 <string_tests+0x2c0>)
     ffc:	6839      	ldr	r1, [r7, #0]
     ffe:	f8d9 2000 	ldr.w	r2, [r9]
    1002:	f00b fc41 	bl	c888 <_printf>

    if (!src || !dst || !src2 || !dst2) {
    1006:	682b      	ldr	r3, [r5, #0]
    1008:	464d      	mov	r5, r9
    100a:	b12b      	cbz	r3, 1018 <string_tests+0x64>
    100c:	6833      	ldr	r3, [r6, #0]
    100e:	b11b      	cbz	r3, 1018 <string_tests+0x64>
    1010:	683b      	ldr	r3, [r7, #0]
    1012:	b10b      	cbz	r3, 1018 <string_tests+0x64>
    1014:	682b      	ldr	r3, [r5, #0]
    1016:	b91b      	cbnz	r3, 1020 <string_tests+0x6c>
        printf("failed to allocate all the buffers\n");
    1018:	4897      	ldr	r0, [pc, #604]	; (1278 <string_tests+0x2c4>)
    101a:	f00b fc35 	bl	c888 <_printf>
        goto out;
    101e:	e1bf      	b.n	13a0 <string_tests+0x3ec>
    }

    if (argc < 3) {
    1020:	f1ba 0f02 	cmp.w	r10, #2
    1024:	dc0b      	bgt.n	103e <string_tests+0x8a>
        printf("not enough arguments:\n");
    1026:	4895      	ldr	r0, [pc, #596]	; (127c <string_tests+0x2c8>)
    1028:	f00b fc2e 	bl	c888 <_printf>
usage:
        printf("%s validate <routine>\n", argv[0].str);
    102c:	6821      	ldr	r1, [r4, #0]
    102e:	4894      	ldr	r0, [pc, #592]	; (1280 <string_tests+0x2cc>)
    1030:	f00b fc2a 	bl	c888 <_printf>
        printf("%s bench <routine>\n", argv[0].str);
    1034:	6821      	ldr	r1, [r4, #0]
    1036:	4893      	ldr	r0, [pc, #588]	; (1284 <string_tests+0x2d0>)
    1038:	f00b fc26 	bl	c888 <_printf>
        goto out;
    103c:	e1b0      	b.n	13a0 <string_tests+0x3ec>
    }

    if (!strcmp(argv[1].str, "validate")) {
    103e:	f8d4 9014 	ldr.w	r9, [r4, #20]
    1042:	4991      	ldr	r1, [pc, #580]	; (1288 <string_tests+0x2d4>)
    1044:	4648      	mov	r0, r9
    1046:	f00b fc46 	bl	c8d6 <strcmp>
    104a:	2800      	cmp	r0, #0
    104c:	f040 809f 	bne.w	118e <string_tests+0x1da>
        if (!strcmp(argv[2].str, "memcpy")) {
    1050:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    1052:	498e      	ldr	r1, [pc, #568]	; (128c <string_tests+0x2d8>)
    1054:	4620      	mov	r0, r4
    1056:	f00b fc3e 	bl	c8d6 <strcmp>
    105a:	4681      	mov	r9, r0
    105c:	2800      	cmp	r0, #0
    105e:	d14f      	bne.n	1100 <string_tests+0x14c>
static void validate_memcpy(void)
{
    size_t srcalign, dstalign, size;
    const size_t maxsize = 256;

    printf("testing memcpy for correctness\n");
    1060:	488b      	ldr	r0, [pc, #556]	; (1290 <string_tests+0x2dc>)
    1062:	f00b fc11 	bl	c888 <_printf>

    /*
     * do the simple tests to make sure that memcpy doesn't color outside
     * the lines for all alignment cases
     */
    for (srcalign = 0; srcalign < 64; srcalign++) {
    1066:	464c      	mov	r4, r9
        printf("srcalign %zu\n", srcalign);
    1068:	488a      	ldr	r0, [pc, #552]	; (1294 <string_tests+0x2e0>)
    106a:	4621      	mov	r1, r4
    106c:	f00b fc0c 	bl	c888 <_printf>
        for (dstalign = 0; dstalign < 64; dstalign++) {
    1070:	f04f 0a00 	mov.w	r10, #0

    /*
     * do the simple tests to make sure that memcpy doesn't color outside
     * the lines for all alignment cases
     */
    for (srcalign = 0; srcalign < 64; srcalign++) {
    1074:	f04f 0900 	mov.w	r9, #0
            //printf("\tdstalign %zu\n", dstalign);
            for (size = 0; size < maxsize; size++) {

                //printf("srcalign %zu, dstalign %zu, size %zu\n", srcalign, dstalign, size);

                fillbuf(src, maxsize * 2, 567);
    1078:	4b7a      	ldr	r3, [pc, #488]	; (1264 <string_tests+0x2b0>)
    107a:	f240 2137 	movw	r1, #567	; 0x237
    107e:	681a      	ldr	r2, [r3, #0]
    1080:	4610      	mov	r0, r2
    1082:	9201      	str	r2, [sp, #4]
    1084:	f7ff ff8a 	bl	f9c <fillbuf.constprop.2>
                fillbuf(src2, maxsize * 2, 567);
    1088:	683b      	ldr	r3, [r7, #0]
    108a:	f240 2137 	movw	r1, #567	; 0x237
    108e:	4618      	mov	r0, r3
    1090:	9300      	str	r3, [sp, #0]
    1092:	f7ff ff83 	bl	f9c <fillbuf.constprop.2>
                fillbuf(dst, maxsize * 2, 123514);
    1096:	f8d6 8000 	ldr.w	r8, [r6]
    109a:	497f      	ldr	r1, [pc, #508]	; (1298 <string_tests+0x2e4>)
    109c:	4640      	mov	r0, r8
    109e:	f7ff ff7d 	bl	f9c <fillbuf.constprop.2>
                fillbuf(dst2, maxsize * 2, 123514);
    10a2:	f8d5 b000 	ldr.w	r11, [r5]
    10a6:	497c      	ldr	r1, [pc, #496]	; (1298 <string_tests+0x2e4>)
    10a8:	4658      	mov	r0, r11
    10aa:	f7ff ff77 	bl	f9c <fillbuf.constprop.2>

                c_memmove(dst + dstalign, src + srcalign, size);
    10ae:	9a01      	ldr	r2, [sp, #4]
    10b0:	eb08 000a 	add.w	r0, r8, r10
    10b4:	1911      	adds	r1, r2, r4
    10b6:	464a      	mov	r2, r9
    10b8:	f7ff fedc 	bl	e74 <c_memmove>
                memcpy(dst2 + dstalign, src2 + srcalign, size);
    10bc:	9b00      	ldr	r3, [sp, #0]
    10be:	464a      	mov	r2, r9
    10c0:	1919      	adds	r1, r3, r4
    10c2:	eb0b 000a 	add.w	r0, r11, r10
    10c6:	f00a fd80 	bl	bbca <memcpy>

                int comp = memcmp(dst, dst2, maxsize * 2);
    10ca:	4640      	mov	r0, r8
    10cc:	4659      	mov	r1, r11
    10ce:	f44f 7200 	mov.w	r2, #512	; 0x200
    10d2:	f00b fbf1 	bl	c8b8 <memcmp>
                if (comp != 0) {
    10d6:	b128      	cbz	r0, 10e4 <string_tests+0x130>
                    printf("error! srcalign %zu, dstalign %zu, size %zu\n", srcalign, dstalign, size);
    10d8:	4870      	ldr	r0, [pc, #448]	; (129c <string_tests+0x2e8>)
    10da:	4621      	mov	r1, r4
    10dc:	4652      	mov	r2, r10
    10de:	464b      	mov	r3, r9
    10e0:	f00b fbd2 	bl	c888 <_printf>
     */
    for (srcalign = 0; srcalign < 64; srcalign++) {
        printf("srcalign %zu\n", srcalign);
        for (dstalign = 0; dstalign < 64; dstalign++) {
            //printf("\tdstalign %zu\n", dstalign);
            for (size = 0; size < maxsize; size++) {
    10e4:	f109 0901 	add.w	r9, r9, #1
    10e8:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
    10ec:	d1c4      	bne.n	1078 <string_tests+0xc4>
     * do the simple tests to make sure that memcpy doesn't color outside
     * the lines for all alignment cases
     */
    for (srcalign = 0; srcalign < 64; srcalign++) {
        printf("srcalign %zu\n", srcalign);
        for (dstalign = 0; dstalign < 64; dstalign++) {
    10ee:	f10a 0a01 	add.w	r10, r10, #1
    10f2:	f1ba 0f40 	cmp.w	r10, #64	; 0x40
    10f6:	d1bd      	bne.n	1074 <string_tests+0xc0>

    /*
     * do the simple tests to make sure that memcpy doesn't color outside
     * the lines for all alignment cases
     */
    for (srcalign = 0; srcalign < 64; srcalign++) {
    10f8:	3401      	adds	r4, #1
    10fa:	2c40      	cmp	r4, #64	; 0x40
    10fc:	d1b4      	bne.n	1068 <string_tests+0xb4>
    10fe:	e14f      	b.n	13a0 <string_tests+0x3ec>
    }

    if (!strcmp(argv[1].str, "validate")) {
        if (!strcmp(argv[2].str, "memcpy")) {
            validate_memcpy();
        } else if (!strcmp(argv[2].str, "memset")) {
    1100:	4620      	mov	r0, r4
    1102:	4967      	ldr	r1, [pc, #412]	; (12a0 <string_tests+0x2ec>)
    1104:	f00b fbe7 	bl	c8d6 <strcmp>
    1108:	4604      	mov	r4, r0
    110a:	2800      	cmp	r0, #0
    110c:	f040 8148 	bne.w	13a0 <string_tests+0x3ec>
{
    size_t dstalign, size;
    int c;
    const size_t maxsize = 256;

    printf("testing memset for correctness\n");
    1110:	4864      	ldr	r0, [pc, #400]	; (12a4 <string_tests+0x2f0>)
    1112:	f00b fbb9 	bl	c888 <_printf>

    for (dstalign = 0; dstalign < 64; dstalign++) {
        printf("align %zd\n", dstalign);
    1116:	4864      	ldr	r0, [pc, #400]	; (12a8 <string_tests+0x2f4>)
    1118:	4621      	mov	r1, r4
    111a:	f00b fbb5 	bl	c888 <_printf>
        for (size = 0; size < maxsize; size++) {
    111e:	f04f 0a00 	mov.w	r10, #0
    int c;
    const size_t maxsize = 256;

    printf("testing memset for correctness\n");

    for (dstalign = 0; dstalign < 64; dstalign++) {
    1122:	f04f 39ff 	mov.w	r9, #4294967295
        printf("align %zd\n", dstalign);
        for (size = 0; size < maxsize; size++) {
            for (c = -1; c < 257; c++) {

                fillbuf(dst, maxsize * 2, 123514);
    1126:	f8d6 8000 	ldr.w	r8, [r6]
    112a:	495b      	ldr	r1, [pc, #364]	; (1298 <string_tests+0x2e4>)
    112c:	4640      	mov	r0, r8
    112e:	f7ff ff35 	bl	f9c <fillbuf.constprop.2>
                fillbuf(dst2, maxsize * 2, 123514);
    1132:	f8d5 b000 	ldr.w	r11, [r5]
    1136:	4958      	ldr	r1, [pc, #352]	; (1298 <string_tests+0x2e4>)
    1138:	4658      	mov	r0, r11
    113a:	f7ff ff2f 	bl	f9c <fillbuf.constprop.2>

                c_memset(dst + dstalign, c, size);
    113e:	4649      	mov	r1, r9
    1140:	4652      	mov	r2, r10
    1142:	eb08 0004 	add.w	r0, r8, r4
    1146:	f7ff fe49 	bl	ddc <c_memset>
                memset(dst2 + dstalign, c, size);
    114a:	4649      	mov	r1, r9
    114c:	4652      	mov	r2, r10
    114e:	eb0b 0004 	add.w	r0, r11, r4
    1152:	f00a fd81 	bl	bc58 <memset>

                int comp = memcmp(dst, dst2, maxsize * 2);
    1156:	4640      	mov	r0, r8
    1158:	4659      	mov	r1, r11
    115a:	f44f 7200 	mov.w	r2, #512	; 0x200
    115e:	f00b fbab 	bl	c8b8 <memcmp>
                if (comp != 0) {
    1162:	b128      	cbz	r0, 1170 <string_tests+0x1bc>
                    printf("error! align %zu, c 0x%hhx, size %zu\n", dstalign, c, size);
    1164:	4851      	ldr	r0, [pc, #324]	; (12ac <string_tests+0x2f8>)
    1166:	4621      	mov	r1, r4
    1168:	464a      	mov	r2, r9
    116a:	4653      	mov	r3, r10
    116c:	f00b fb8c 	bl	c888 <_printf>
    printf("testing memset for correctness\n");

    for (dstalign = 0; dstalign < 64; dstalign++) {
        printf("align %zd\n", dstalign);
        for (size = 0; size < maxsize; size++) {
            for (c = -1; c < 257; c++) {
    1170:	f109 0901 	add.w	r9, r9, #1
    1174:	f240 1301 	movw	r3, #257	; 0x101
    1178:	4599      	cmp	r9, r3
    117a:	d1d4      	bne.n	1126 <string_tests+0x172>

    printf("testing memset for correctness\n");

    for (dstalign = 0; dstalign < 64; dstalign++) {
        printf("align %zd\n", dstalign);
        for (size = 0; size < maxsize; size++) {
    117c:	f10a 0a01 	add.w	r10, r10, #1
    1180:	f5ba 7f80 	cmp.w	r10, #256	; 0x100
    1184:	d1cd      	bne.n	1122 <string_tests+0x16e>
    int c;
    const size_t maxsize = 256;

    printf("testing memset for correctness\n");

    for (dstalign = 0; dstalign < 64; dstalign++) {
    1186:	3401      	adds	r4, #1
    1188:	2c40      	cmp	r4, #64	; 0x40
    118a:	d1c4      	bne.n	1116 <string_tests+0x162>
    118c:	e108      	b.n	13a0 <string_tests+0x3ec>
        if (!strcmp(argv[2].str, "memcpy")) {
            validate_memcpy();
        } else if (!strcmp(argv[2].str, "memset")) {
            validate_memset();
        }
    } else if (!strcmp(argv[1].str, "bench")) {
    118e:	4648      	mov	r0, r9
    1190:	4947      	ldr	r1, [pc, #284]	; (12b0 <string_tests+0x2fc>)
    1192:	f00b fba0 	bl	c8d6 <strcmp>
    1196:	2800      	cmp	r0, #0
    1198:	f47f af48 	bne.w	102c <string_tests+0x78>
        if (!strcmp(argv[2].str, "memcpy")) {
    119c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    119e:	493b      	ldr	r1, [pc, #236]	; (128c <string_tests+0x2d8>)
    11a0:	4620      	mov	r0, r4
    11a2:	f00b fb98 	bl	c8d6 <strcmp>
    11a6:	4681      	mov	r9, r0
    11a8:	2800      	cmp	r0, #0
    11aa:	f040 80ac 	bne.w	1306 <string_tests+0x352>
static void bench_memcpy(void)
{
    lk_time_t null, c, libc, mine;
    size_t srcalign, dstalign;

    printf("memcpy speed test\n");
    11ae:	4841      	ldr	r0, [pc, #260]	; (12b4 <string_tests+0x300>)
    11b0:	f00b fb6a 	bl	c888 <_printf>
    thread_sleep(200); // let the debug string clear the serial port
    11b4:	20c8      	movs	r0, #200	; 0xc8
    11b6:	f003 fe11 	bl	4ddc <thread_sleep>

    for (srcalign = 0; srcalign < 64; ) {
    11ba:	46c8      	mov	r8, r9

    printf("testing memset for correctness\n");

    for (dstalign = 0; dstalign < 64; dstalign++) {
        printf("align %zd\n", dstalign);
        for (size = 0; size < maxsize; size++) {
    11bc:	2400      	movs	r4, #0
    thread_sleep(200); // let the debug string clear the serial port

    for (srcalign = 0; srcalign < 64; ) {
        for (dstalign = 0; dstalign < 64; ) {

            null = bench_memcpy_routine(&null_memcpy, srcalign, dstalign);
    11be:	4641      	mov	r1, r8
    11c0:	4622      	mov	r2, r4
    11c2:	483d      	ldr	r0, [pc, #244]	; (12b8 <string_tests+0x304>)
    11c4:	f7ff fe38 	bl	e38 <bench_memcpy_routine>
            c = bench_memcpy_routine(&c_memmove, srcalign, dstalign);
    11c8:	4641      	mov	r1, r8
    thread_sleep(200); // let the debug string clear the serial port

    for (srcalign = 0; srcalign < 64; ) {
        for (dstalign = 0; dstalign < 64; ) {

            null = bench_memcpy_routine(&null_memcpy, srcalign, dstalign);
    11ca:	4603      	mov	r3, r0
            c = bench_memcpy_routine(&c_memmove, srcalign, dstalign);
    11cc:	4622      	mov	r2, r4
    11ce:	483b      	ldr	r0, [pc, #236]	; (12bc <string_tests+0x308>)
    11d0:	9300      	str	r3, [sp, #0]
    11d2:	f7ff fe31 	bl	e38 <bench_memcpy_routine>
            libc = bench_memcpy_routine(&memcpy, srcalign, dstalign);
    11d6:	4641      	mov	r1, r8

    for (srcalign = 0; srcalign < 64; ) {
        for (dstalign = 0; dstalign < 64; ) {

            null = bench_memcpy_routine(&null_memcpy, srcalign, dstalign);
            c = bench_memcpy_routine(&c_memmove, srcalign, dstalign);
    11d8:	4683      	mov	r11, r0
            libc = bench_memcpy_routine(&memcpy, srcalign, dstalign);
    11da:	4622      	mov	r2, r4
    11dc:	4838      	ldr	r0, [pc, #224]	; (12c0 <string_tests+0x30c>)
    11de:	f7ff fe2b 	bl	e38 <bench_memcpy_routine>
            mine = bench_memcpy_routine(&mymemcpy, srcalign, dstalign);
    11e2:	4641      	mov	r1, r8
    for (srcalign = 0; srcalign < 64; ) {
        for (dstalign = 0; dstalign < 64; ) {

            null = bench_memcpy_routine(&null_memcpy, srcalign, dstalign);
            c = bench_memcpy_routine(&c_memmove, srcalign, dstalign);
            libc = bench_memcpy_routine(&memcpy, srcalign, dstalign);
    11e4:	4682      	mov	r10, r0
            mine = bench_memcpy_routine(&mymemcpy, srcalign, dstalign);
    11e6:	4622      	mov	r2, r4
    11e8:	4836      	ldr	r0, [pc, #216]	; (12c4 <string_tests+0x310>)
    11ea:	f7ff fe25 	bl	e38 <bench_memcpy_routine>

            printf("srcalign %zu, dstalign %zu: ", srcalign, dstalign);
    11ee:	4622      	mov	r2, r4
        for (dstalign = 0; dstalign < 64; ) {

            null = bench_memcpy_routine(&null_memcpy, srcalign, dstalign);
            c = bench_memcpy_routine(&c_memmove, srcalign, dstalign);
            libc = bench_memcpy_routine(&memcpy, srcalign, dstalign);
            mine = bench_memcpy_routine(&mymemcpy, srcalign, dstalign);
    11f0:	4681      	mov	r9, r0

            printf("srcalign %zu, dstalign %zu: ", srcalign, dstalign);
    11f2:	4641      	mov	r1, r8
    11f4:	4834      	ldr	r0, [pc, #208]	; (12c8 <string_tests+0x314>)
    11f6:	f00b fb47 	bl	c888 <_printf>
            printf("   null memcpy %u msecs\n", null);
    11fa:	9b00      	ldr	r3, [sp, #0]
    11fc:	4833      	ldr	r0, [pc, #204]	; (12cc <string_tests+0x318>)
    11fe:	4619      	mov	r1, r3
    1200:	f00b fb42 	bl	c888 <_printf>
            printf("c memcpy %u msecs, %llu bytes/sec; ", c, (uint64_t)BUFFER_SIZE * ITERATIONS * 1000ULL / c);
    1204:	465a      	mov	r2, r11
    1206:	2300      	movs	r3, #0
    1208:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    120c:	213e      	movs	r1, #62	; 0x3e
    120e:	f00c fdf9 	bl	de04 <__aeabi_uldivmod>
    1212:	4602      	mov	r2, r0
    1214:	460b      	mov	r3, r1
    1216:	482e      	ldr	r0, [pc, #184]	; (12d0 <string_tests+0x31c>)
    1218:	4659      	mov	r1, r11
    121a:	f00b fb35 	bl	c888 <_printf>
            printf("libc memcpy %u msecs, %llu bytes/sec; ", libc, (uint64_t)BUFFER_SIZE * ITERATIONS * 1000ULL / libc);
    121e:	4652      	mov	r2, r10
    1220:	2300      	movs	r3, #0
    1222:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    1226:	213e      	movs	r1, #62	; 0x3e
    1228:	f00c fdec 	bl	de04 <__aeabi_uldivmod>
    122c:	4602      	mov	r2, r0
    122e:	460b      	mov	r3, r1
    1230:	4828      	ldr	r0, [pc, #160]	; (12d4 <string_tests+0x320>)
    1232:	4651      	mov	r1, r10
    1234:	f00b fb28 	bl	c888 <_printf>
            printf("my memcpy %u msecs, %llu bytes/sec; ", mine, (uint64_t)BUFFER_SIZE * ITERATIONS * 1000ULL / mine);
    1238:	464a      	mov	r2, r9
    123a:	2300      	movs	r3, #0
    123c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    1240:	213e      	movs	r1, #62	; 0x3e
    1242:	f00c fddf 	bl	de04 <__aeabi_uldivmod>
    1246:	4602      	mov	r2, r0
    1248:	460b      	mov	r3, r1
    124a:	4823      	ldr	r0, [pc, #140]	; (12d8 <string_tests+0x324>)
    124c:	4649      	mov	r1, r9
    124e:	f00b fb1b 	bl	c888 <_printf>
            printf("\n");
    1252:	4822      	ldr	r0, [pc, #136]	; (12dc <string_tests+0x328>)
    1254:	f00b fb18 	bl	c888 <_printf>

            if (dstalign < 8)
    1258:	2c07      	cmp	r4, #7
    125a:	d843      	bhi.n	12e4 <string_tests+0x330>
                dstalign++;
    125c:	3401      	adds	r4, #1
    125e:	e7ae      	b.n	11be <string_tests+0x20a>
    1260:	00200100 	.word	0x00200100
    1264:	20000578 	.word	0x20000578
    1268:	2000056c 	.word	0x2000056c
    126c:	20000570 	.word	0x20000570
    1270:	0000e84a 	.word	0x0000e84a
    1274:	0000e85a 	.word	0x0000e85a
    1278:	0000e86c 	.word	0x0000e86c
    127c:	0000e890 	.word	0x0000e890
    1280:	0000e8a7 	.word	0x0000e8a7
    1284:	0000e8be 	.word	0x0000e8be
    1288:	0000e8d2 	.word	0x0000e8d2
    128c:	0000e8db 	.word	0x0000e8db
    1290:	0000e8e2 	.word	0x0000e8e2
    1294:	0000e902 	.word	0x0000e902
    1298:	0001e27a 	.word	0x0001e27a
    129c:	0000e910 	.word	0x0000e910
    12a0:	0000e93d 	.word	0x0000e93d
    12a4:	0000e944 	.word	0x0000e944
    12a8:	0000e964 	.word	0x0000e964
    12ac:	0000e96f 	.word	0x0000e96f
    12b0:	0001255b 	.word	0x0001255b
    12b4:	0000e995 	.word	0x0000e995
    12b8:	00000e2d 	.word	0x00000e2d
    12bc:	00000e75 	.word	0x00000e75
    12c0:	0000bbcb 	.word	0x0000bbcb
    12c4:	00000e2f 	.word	0x00000e2f
    12c8:	0000e9a8 	.word	0x0000e9a8
    12cc:	0000e9c5 	.word	0x0000e9c5
    12d0:	0000e9e1 	.word	0x0000e9e1
    12d4:	0000e9de 	.word	0x0000e9de
    12d8:	0000ea05 	.word	0x0000ea05
    12dc:	0000e7b4 	.word	0x0000e7b4
    12e0:	20000574 	.word	0x20000574
            else
                dstalign <<= 1;
    12e4:	0064      	lsls	r4, r4, #1

    printf("memcpy speed test\n");
    thread_sleep(200); // let the debug string clear the serial port

    for (srcalign = 0; srcalign < 64; ) {
        for (dstalign = 0; dstalign < 64; ) {
    12e6:	2c3f      	cmp	r4, #63	; 0x3f
    12e8:	f67f af69 	bls.w	11be <string_tests+0x20a>
            if (dstalign < 8)
                dstalign++;
            else
                dstalign <<= 1;
        }
        if (srcalign < 8)
    12ec:	f1b8 0f07 	cmp.w	r8, #7
    12f0:	d802      	bhi.n	12f8 <string_tests+0x344>
            srcalign++;
    12f2:	f108 0801 	add.w	r8, r8, #1
    12f6:	e761      	b.n	11bc <string_tests+0x208>
        else
            srcalign <<= 1;
    12f8:	ea4f 0848 	mov.w	r8, r8, lsl #1
    size_t srcalign, dstalign;

    printf("memcpy speed test\n");
    thread_sleep(200); // let the debug string clear the serial port

    for (srcalign = 0; srcalign < 64; ) {
    12fc:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    1300:	f67f af5c 	bls.w	11bc <string_tests+0x208>
    1304:	e04c      	b.n	13a0 <string_tests+0x3ec>
            validate_memset();
        }
    } else if (!strcmp(argv[1].str, "bench")) {
        if (!strcmp(argv[2].str, "memcpy")) {
            bench_memcpy();
        } else if (!strcmp(argv[2].str, "memset")) {
    1306:	4620      	mov	r0, r4
    1308:	492e      	ldr	r1, [pc, #184]	; (13c4 <string_tests+0x410>)
    130a:	f00b fae4 	bl	c8d6 <strcmp>
    130e:	4604      	mov	r4, r0
    1310:	2800      	cmp	r0, #0
    1312:	d145      	bne.n	13a0 <string_tests+0x3ec>
static void bench_memset(void)
{
    lk_time_t c, libc, mine;
    size_t dstalign;

    printf("memset speed test\n");
    1314:	482c      	ldr	r0, [pc, #176]	; (13c8 <string_tests+0x414>)
    1316:	f00b fab7 	bl	c888 <_printf>
    thread_sleep(200); // let the debug string clear the serial port
    131a:	20c8      	movs	r0, #200	; 0xc8
    131c:	f003 fd5e 	bl	4ddc <thread_sleep>

    for (dstalign = 0; dstalign < 64; dstalign++) {

        c = bench_memset_routine(&c_memset, dstalign, BUFFER_SIZE);
    1320:	4621      	mov	r1, r4
    1322:	482a      	ldr	r0, [pc, #168]	; (13cc <string_tests+0x418>)
    1324:	f7ff fe24 	bl	f70 <bench_memset_routine.constprop.1>
        libc = bench_memset_routine(&memset, dstalign, BUFFER_SIZE);
    1328:	4621      	mov	r1, r4
    printf("memset speed test\n");
    thread_sleep(200); // let the debug string clear the serial port

    for (dstalign = 0; dstalign < 64; dstalign++) {

        c = bench_memset_routine(&c_memset, dstalign, BUFFER_SIZE);
    132a:	4683      	mov	r11, r0
        libc = bench_memset_routine(&memset, dstalign, BUFFER_SIZE);
    132c:	4828      	ldr	r0, [pc, #160]	; (13d0 <string_tests+0x41c>)
    132e:	f7ff fe1f 	bl	f70 <bench_memset_routine.constprop.1>
        mine = bench_memset_routine(&mymemset, dstalign, BUFFER_SIZE);
    1332:	4621      	mov	r1, r4
    thread_sleep(200); // let the debug string clear the serial port

    for (dstalign = 0; dstalign < 64; dstalign++) {

        c = bench_memset_routine(&c_memset, dstalign, BUFFER_SIZE);
        libc = bench_memset_routine(&memset, dstalign, BUFFER_SIZE);
    1334:	4682      	mov	r10, r0
        mine = bench_memset_routine(&mymemset, dstalign, BUFFER_SIZE);
    1336:	4827      	ldr	r0, [pc, #156]	; (13d4 <string_tests+0x420>)
    1338:	f7ff fe1a 	bl	f70 <bench_memset_routine.constprop.1>

        printf("dstalign %zu: ", dstalign);
    133c:	4621      	mov	r1, r4

    for (dstalign = 0; dstalign < 64; dstalign++) {

        c = bench_memset_routine(&c_memset, dstalign, BUFFER_SIZE);
        libc = bench_memset_routine(&memset, dstalign, BUFFER_SIZE);
        mine = bench_memset_routine(&mymemset, dstalign, BUFFER_SIZE);
    133e:	4681      	mov	r9, r0

        printf("dstalign %zu: ", dstalign);
    1340:	4825      	ldr	r0, [pc, #148]	; (13d8 <string_tests+0x424>)
    1342:	f00b faa1 	bl	c888 <_printf>
        printf("c memset %u msecs, %llu bytes/sec; ", c, (uint64_t)BUFFER_SIZE * ITERATIONS * 1000ULL / c);
    1346:	465a      	mov	r2, r11
    1348:	2300      	movs	r3, #0
    134a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    134e:	213e      	movs	r1, #62	; 0x3e
    1350:	f00c fd58 	bl	de04 <__aeabi_uldivmod>
    1354:	4602      	mov	r2, r0
    1356:	460b      	mov	r3, r1
    1358:	4820      	ldr	r0, [pc, #128]	; (13dc <string_tests+0x428>)
    135a:	4659      	mov	r1, r11
    135c:	f00b fa94 	bl	c888 <_printf>
        printf("libc memset %u msecs, %llu bytes/sec; ", libc, (uint64_t)BUFFER_SIZE * ITERATIONS * 1000ULL / libc);
    1360:	4652      	mov	r2, r10
    1362:	2300      	movs	r3, #0
    1364:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    1368:	213e      	movs	r1, #62	; 0x3e
    136a:	f00c fd4b 	bl	de04 <__aeabi_uldivmod>
    136e:	4602      	mov	r2, r0
    1370:	460b      	mov	r3, r1
    1372:	481b      	ldr	r0, [pc, #108]	; (13e0 <string_tests+0x42c>)
    1374:	4651      	mov	r1, r10
    1376:	f00b fa87 	bl	c888 <_printf>
        printf("my memset %u msecs, %llu bytes/sec; ", mine, (uint64_t)BUFFER_SIZE * ITERATIONS * 1000ULL / mine);
    137a:	464a      	mov	r2, r9
    137c:	2300      	movs	r3, #0
    137e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    1382:	213e      	movs	r1, #62	; 0x3e
    1384:	f00c fd3e 	bl	de04 <__aeabi_uldivmod>
    1388:	4602      	mov	r2, r0
    138a:	460b      	mov	r3, r1
    138c:	4815      	ldr	r0, [pc, #84]	; (13e4 <string_tests+0x430>)
    138e:	4649      	mov	r1, r9
    1390:	f00b fa7a 	bl	c888 <_printf>
    size_t dstalign;

    printf("memset speed test\n");
    thread_sleep(200); // let the debug string clear the serial port

    for (dstalign = 0; dstalign < 64; dstalign++) {
    1394:	3401      	adds	r4, #1

        printf("dstalign %zu: ", dstalign);
        printf("c memset %u msecs, %llu bytes/sec; ", c, (uint64_t)BUFFER_SIZE * ITERATIONS * 1000ULL / c);
        printf("libc memset %u msecs, %llu bytes/sec; ", libc, (uint64_t)BUFFER_SIZE * ITERATIONS * 1000ULL / libc);
        printf("my memset %u msecs, %llu bytes/sec; ", mine, (uint64_t)BUFFER_SIZE * ITERATIONS * 1000ULL / mine);
        printf("\n");
    1396:	4814      	ldr	r0, [pc, #80]	; (13e8 <string_tests+0x434>)
    1398:	f00b fa76 	bl	c888 <_printf>
    size_t dstalign;

    printf("memset speed test\n");
    thread_sleep(200); // let the debug string clear the serial port

    for (dstalign = 0; dstalign < 64; dstalign++) {
    139c:	2c40      	cmp	r4, #64	; 0x40
    139e:	d1bf      	bne.n	1320 <string_tests+0x36c>
    } else {
        goto usage;
    }

out:
    free(src);
    13a0:	4b12      	ldr	r3, [pc, #72]	; (13ec <string_tests+0x438>)
    13a2:	6818      	ldr	r0, [r3, #0]
    13a4:	f00a fa4e 	bl	b844 <free>
    free(dst);
    13a8:	6830      	ldr	r0, [r6, #0]
    13aa:	f00a fa4b 	bl	b844 <free>
    free(src2);
    13ae:	6838      	ldr	r0, [r7, #0]
    13b0:	f00a fa48 	bl	b844 <free>
    free(dst2);
    13b4:	6828      	ldr	r0, [r5, #0]
    13b6:	f00a fa45 	bl	b844 <free>

    return 0;
}
    13ba:	2000      	movs	r0, #0
    13bc:	b003      	add	sp, #12
    13be:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    13c2:	bf00      	nop
    13c4:	0000e93d 	.word	0x0000e93d
    13c8:	0000ea2a 	.word	0x0000ea2a
    13cc:	00000ddd 	.word	0x00000ddd
    13d0:	0000bc59 	.word	0x0000bc59
    13d4:	00000e33 	.word	0x00000e33
    13d8:	0000e9b6 	.word	0x0000e9b6
    13dc:	0000ea40 	.word	0x0000ea40
    13e0:	0000ea3d 	.word	0x0000ea3d
    13e4:	0000ea64 	.word	0x0000ea64
    13e8:	0000e7b4 	.word	0x0000e7b4
    13ec:	20000578 	.word	0x20000578

000013f0 <arm_bench_multi_issue>:
static inline uint32_t arch_cycle_count(void)
{
#if ARM_ISA_ARMV7M
#if ENABLE_CYCLE_COUNTER
#define DWT_CYCCNT (0xE0001004)
    return *REG32(DWT_CYCCNT);
    13f0:	4b16      	ldr	r3, [pc, #88]	; (144c <arm_bench_multi_issue+0x5c>)
    free(buf);
}

#if       (__CORTEX_M >= 0x03)
__NO_INLINE static void arm_bench_multi_issue(void)
{
    13f2:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}
    uint32_t cycles;
    uint32_t a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0;
#define ITER 1000000
    uint count = ITER;
    cycles = arch_cycle_count();
    while (count--) {
    13f6:	4a16      	ldr	r2, [pc, #88]	; (1450 <arm_bench_multi_issue+0x60>)
    13f8:	681c      	ldr	r4, [r3, #0]

#if       (__CORTEX_M >= 0x03)
__NO_INLINE static void arm_bench_multi_issue(void)
{
    uint32_t cycles;
    uint32_t a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0;
    13fa:	2300      	movs	r3, #0
    13fc:	469c      	mov	r12, r3
    13fe:	469e      	mov	r14, r3
    1400:	461f      	mov	r7, r3
    1402:	461e      	mov	r6, r3
    1404:	461d      	mov	r5, r3
    1406:	4618      	mov	r0, r3
    1408:	4619      	mov	r1, r3
#define ITER 1000000
    uint count = ITER;
    cycles = arch_cycle_count();
    while (count--) {
    140a:	3a01      	subs	r2, #1
    140c:	d00b      	beq.n	1426 <arm_bench_multi_issue+0x36>
        asm volatile ("");
        asm volatile ("add %0, %0, %0" : "=r" (a) : "r" (a));
    140e:	4409      	add	r1, r1
        asm volatile ("add %0, %0, %0" : "=r" (b) : "r" (b));
    1410:	4400      	add	r0, r0
        asm volatile ("and %0, %0, %0" : "=r" (c) : "r" (c));
    1412:	ea05 0505 	and.w	r5, r5, r5
        asm volatile ("mov %0, %0" : "=r" (d) : "r" (d));
    1416:	4636      	mov	r6, r6
        asm volatile ("orr %0, %0, %0" : "=r" (e) : "r" (e));
    1418:	ea47 0707 	orr.w	r7, r7, r7
        asm volatile ("add %0, %0, %0" : "=r" (f) : "r" (f));
    141c:	44f6      	add	r14, r14
        asm volatile ("and %0, %0, %0" : "=r" (g) : "r" (g));
    141e:	ea0c 0c0c 	and.w	r12, r12, r12
        asm volatile ("mov %0, %0" : "=r" (h) : "r" (h));
    1422:	461b      	mov	r3, r3
    1424:	e7f1      	b.n	140a <arm_bench_multi_issue+0x1a>
    1426:	4b09      	ldr	r3, [pc, #36]	; (144c <arm_bench_multi_issue+0x5c>)
    1428:	681b      	ldr	r3, [r3, #0]
    }
    cycles = arch_cycle_count() - cycles;
    142a:	1b1c      	subs	r4, r3, r4

    printf("took %u cycles to issue 8 integer ops (%f cycles/iteration)\n", cycles, (float)cycles / ITER);
    142c:	4620      	mov	r0, r4
    142e:	f00c fb1b 	bl	da68 <__aeabi_ui2f>
    1432:	4908      	ldr	r1, [pc, #32]	; (1454 <arm_bench_multi_issue+0x64>)
    1434:	f00c fc24 	bl	dc80 <__aeabi_fdiv>
    1438:	f00b feda 	bl	d1f0 <__aeabi_f2d>
    143c:	4602      	mov	r2, r0
    143e:	460b      	mov	r3, r1
    1440:	4805      	ldr	r0, [pc, #20]	; (1458 <arm_bench_multi_issue+0x68>)
    1442:	4621      	mov	r1, r4
#undef ITER
}
    1444:	e8bd 41f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r14}
        asm volatile ("and %0, %0, %0" : "=r" (g) : "r" (g));
        asm volatile ("mov %0, %0" : "=r" (h) : "r" (h));
    }
    cycles = arch_cycle_count() - cycles;

    printf("took %u cycles to issue 8 integer ops (%f cycles/iteration)\n", cycles, (float)cycles / ITER);
    1448:	f00b ba1e 	b.w	c888 <_printf>
    144c:	e0001004 	.word	0xe0001004
    1450:	000f4241 	.word	0x000f4241
    1454:	49742400 	.word	0x49742400
    1458:	0000eadc 	.word	0x0000eadc

0000145c <bench_set_overhead>:

const size_t BUFSIZE = (1024*1024);
const uint ITER = 1024;

__NO_INLINE static void bench_set_overhead(void)
{
    145c:	b510      	push	{r4, r14}
    uint32_t *buf = malloc(BUFSIZE);
    145e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1462:	f00a f95f 	bl	b724 <malloc>
    if (!buf) {
    1466:	4604      	mov	r4, r0
    1468:	b920      	cbnz	r0, 1474 <bench_set_overhead+0x18>
        printf("failed to allocate buffer\n");
    146a:	480b      	ldr	r0, [pc, #44]	; (1498 <bench_set_overhead+0x3c>)

    printf("took %u cycles overhead to loop %u times\n",
           count, ITER);

    free(buf);
}
    146c:	e8bd 4010 	ldmia.w	r13!, {r4, r14}

__NO_INLINE static void bench_set_overhead(void)
{
    uint32_t *buf = malloc(BUFSIZE);
    if (!buf) {
        printf("failed to allocate buffer\n");
    1470:	f00b ba0a 	b.w	c888 <_printf>
    1474:	4a09      	ldr	r2, [pc, #36]	; (149c <bench_set_overhead+0x40>)
    1476:	f44f 6380 	mov.w	r3, #1024	; 0x400
    147a:	6811      	ldr	r1, [r2, #0]
        return;
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
    147c:	3b01      	subs	r3, #1
    147e:	d1fd      	bne.n	147c <bench_set_overhead+0x20>
    1480:	6813      	ldr	r3, [r2, #0]
        __asm__ volatile("");
    }
    count = arch_cycle_count() - count;

    printf("took %u cycles overhead to loop %u times\n",
    1482:	4807      	ldr	r0, [pc, #28]	; (14a0 <bench_set_overhead+0x44>)
    1484:	1a59      	subs	r1, r3, r1
    1486:	f44f 6280 	mov.w	r2, #1024	; 0x400
    148a:	f00b f9fd 	bl	c888 <_printf>
           count, ITER);

    free(buf);
    148e:	4620      	mov	r0, r4
}
    1490:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
    count = arch_cycle_count() - count;

    printf("took %u cycles overhead to loop %u times\n",
           count, ITER);

    free(buf);
    1494:	f00a b9d6 	b.w	b844 <free>
    1498:	0000eb19 	.word	0x0000eb19
    149c:	e0001004 	.word	0xe0001004
    14a0:	0000eb34 	.word	0x0000eb34

000014a4 <bench_cset_uint8_t>:
           count, sizeof(*buf), BUFSIZE, ITER, BUFSIZE * ITER, (BUFSIZE * ITER) / (float)count); \
 \
    free(buf); \
}

bench_cset(uint8_t)
    14a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    14a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    14aa:	f00a f93b 	bl	b724 <malloc>
    14ae:	4605      	mov	r5, r0
    14b0:	b928      	cbnz	r0, 14be <bench_cset_uint8_t+0x1a>
    14b2:	481a      	ldr	r0, [pc, #104]	; (151c <bench_cset_uint8_t+0x78>)
    14b4:	b004      	add	sp, #16
    14b6:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    14ba:	f00b b9e5 	b.w	c888 <_printf>
    14be:	4b18      	ldr	r3, [pc, #96]	; (1520 <bench_cset_uint8_t+0x7c>)
    14c0:	681a      	ldr	r2, [r3, #0]
    14c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    14c6:	2400      	movs	r4, #0
    14c8:	2100      	movs	r1, #0
    14ca:	5529      	strb	r1, [r5, r4]
    14cc:	3401      	adds	r4, #1
    14ce:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    14d2:	d1f9      	bne.n	14c8 <bench_cset_uint8_t+0x24>
    14d4:	3b01      	subs	r3, #1
    14d6:	d1f6      	bne.n	14c6 <bench_cset_uint8_t+0x22>
    14d8:	4b11      	ldr	r3, [pc, #68]	; (1520 <bench_cset_uint8_t+0x7c>)
    14da:	681e      	ldr	r6, [r3, #0]
    14dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    14e0:	1ab6      	subs	r6, r6, r2
    14e2:	4630      	mov	r0, r6
    14e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    14e8:	e88d 000c 	stmia.w	r13, {r2, r3}
    14ec:	f00c fabc 	bl	da68 <__aeabi_ui2f>
    14f0:	4601      	mov	r1, r0
    14f2:	f04f 409d 	mov.w	r0, #1317011456	; 0x4e800000
    14f6:	f00c fbc3 	bl	dc80 <__aeabi_fdiv>
    14fa:	f00b fe79 	bl	d1f0 <__aeabi_f2d>
    14fe:	2201      	movs	r2, #1
    1500:	e9cd 0102 	strd	r0, r1, [r13, #8]
    1504:	4623      	mov	r3, r4
    1506:	4631      	mov	r1, r6
    1508:	4806      	ldr	r0, [pc, #24]	; (1524 <bench_cset_uint8_t+0x80>)
    150a:	f00b f9bd 	bl	c888 <_printf>
    150e:	4628      	mov	r0, r5
    1510:	b004      	add	sp, #16
    1512:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    1516:	f00a b995 	b.w	b844 <free>
    151a:	bf00      	nop
    151c:	0000eb19 	.word	0x0000eb19
    1520:	e0001004 	.word	0xe0001004
    1524:	0000eb5e 	.word	0x0000eb5e

00001528 <bench_cset_uint16_t>:
bench_cset(uint16_t)
    1528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    152a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    152e:	f00a f8f9 	bl	b724 <malloc>
    1532:	4605      	mov	r5, r0
    1534:	b928      	cbnz	r0, 1542 <bench_cset_uint16_t+0x1a>
    1536:	481a      	ldr	r0, [pc, #104]	; (15a0 <bench_cset_uint16_t+0x78>)
    1538:	b004      	add	sp, #16
    153a:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    153e:	f00b b9a3 	b.w	c888 <_printf>
    1542:	4b18      	ldr	r3, [pc, #96]	; (15a4 <bench_cset_uint16_t+0x7c>)
    1544:	681a      	ldr	r2, [r3, #0]
    1546:	f44f 6380 	mov.w	r3, #1024	; 0x400
    154a:	2400      	movs	r4, #0
    154c:	2100      	movs	r1, #0
    154e:	5329      	strh	r1, [r5, r4]
    1550:	3402      	adds	r4, #2
    1552:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    1556:	d1f9      	bne.n	154c <bench_cset_uint16_t+0x24>
    1558:	3b01      	subs	r3, #1
    155a:	d1f6      	bne.n	154a <bench_cset_uint16_t+0x22>
    155c:	4b11      	ldr	r3, [pc, #68]	; (15a4 <bench_cset_uint16_t+0x7c>)
    155e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    1562:	681e      	ldr	r6, [r3, #0]
    1564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1568:	1ab6      	subs	r6, r6, r2
    156a:	4630      	mov	r0, r6
    156c:	e88d 000a 	stmia.w	r13, {r1, r3}
    1570:	f00c fa7a 	bl	da68 <__aeabi_ui2f>
    1574:	4601      	mov	r1, r0
    1576:	f04f 409d 	mov.w	r0, #1317011456	; 0x4e800000
    157a:	f00c fb81 	bl	dc80 <__aeabi_fdiv>
    157e:	f00b fe37 	bl	d1f0 <__aeabi_f2d>
    1582:	2202      	movs	r2, #2
    1584:	e9cd 0102 	strd	r0, r1, [r13, #8]
    1588:	4623      	mov	r3, r4
    158a:	4631      	mov	r1, r6
    158c:	4806      	ldr	r0, [pc, #24]	; (15a8 <bench_cset_uint16_t+0x80>)
    158e:	f00b f97b 	bl	c888 <_printf>
    1592:	4628      	mov	r0, r5
    1594:	b004      	add	sp, #16
    1596:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    159a:	f00a b953 	b.w	b844 <free>
    159e:	bf00      	nop
    15a0:	0000eb19 	.word	0x0000eb19
    15a4:	e0001004 	.word	0xe0001004
    15a8:	0000eb5e 	.word	0x0000eb5e

000015ac <bench_cset_uint32_t>:
bench_cset(uint32_t)
    15ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    15ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    15b2:	f00a f8b7 	bl	b724 <malloc>
    15b6:	4605      	mov	r5, r0
    15b8:	b928      	cbnz	r0, 15c6 <bench_cset_uint32_t+0x1a>
    15ba:	481a      	ldr	r0, [pc, #104]	; (1624 <bench_cset_uint32_t+0x78>)
    15bc:	b004      	add	sp, #16
    15be:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    15c2:	f00b b961 	b.w	c888 <_printf>
    15c6:	4b18      	ldr	r3, [pc, #96]	; (1628 <bench_cset_uint32_t+0x7c>)
    15c8:	681a      	ldr	r2, [r3, #0]
    15ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
    15ce:	2400      	movs	r4, #0
    15d0:	2100      	movs	r1, #0
    15d2:	5129      	str	r1, [r5, r4]
    15d4:	3404      	adds	r4, #4
    15d6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    15da:	d1f9      	bne.n	15d0 <bench_cset_uint32_t+0x24>
    15dc:	3b01      	subs	r3, #1
    15de:	d1f6      	bne.n	15ce <bench_cset_uint32_t+0x22>
    15e0:	4b11      	ldr	r3, [pc, #68]	; (1628 <bench_cset_uint32_t+0x7c>)
    15e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    15e6:	681e      	ldr	r6, [r3, #0]
    15e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    15ec:	1ab6      	subs	r6, r6, r2
    15ee:	e88d 0009 	stmia.w	r13, {r0, r3}
    15f2:	4630      	mov	r0, r6
    15f4:	f00c fa38 	bl	da68 <__aeabi_ui2f>
    15f8:	4601      	mov	r1, r0
    15fa:	f04f 409d 	mov.w	r0, #1317011456	; 0x4e800000
    15fe:	f00c fb3f 	bl	dc80 <__aeabi_fdiv>
    1602:	f00b fdf5 	bl	d1f0 <__aeabi_f2d>
    1606:	2204      	movs	r2, #4
    1608:	e9cd 0102 	strd	r0, r1, [r13, #8]
    160c:	4623      	mov	r3, r4
    160e:	4631      	mov	r1, r6
    1610:	4806      	ldr	r0, [pc, #24]	; (162c <bench_cset_uint32_t+0x80>)
    1612:	f00b f939 	bl	c888 <_printf>
    1616:	4628      	mov	r0, r5
    1618:	b004      	add	sp, #16
    161a:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    161e:	f00a b911 	b.w	b844 <free>
    1622:	bf00      	nop
    1624:	0000eb19 	.word	0x0000eb19
    1628:	e0001004 	.word	0xe0001004
    162c:	0000eb5e 	.word	0x0000eb5e

00001630 <bench_cset_uint64_t>:
bench_cset(uint64_t)
    1630:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    1632:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1636:	f00a f875 	bl	b724 <malloc>
    163a:	4605      	mov	r5, r0
    163c:	b928      	cbnz	r0, 164a <bench_cset_uint64_t+0x1a>
    163e:	481b      	ldr	r0, [pc, #108]	; (16ac <bench_cset_uint64_t+0x7c>)
    1640:	b004      	add	sp, #16
    1642:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    1646:	f00b b91f 	b.w	c888 <_printf>
    164a:	4b19      	ldr	r3, [pc, #100]	; (16b0 <bench_cset_uint64_t+0x80>)
    164c:	f44f 6680 	mov.w	r6, #1024	; 0x400
    1650:	6819      	ldr	r1, [r3, #0]
    1652:	2400      	movs	r4, #0
    1654:	1928      	adds	r0, r5, r4
    1656:	3408      	adds	r4, #8
    1658:	2200      	movs	r2, #0
    165a:	2300      	movs	r3, #0
    165c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    1660:	e9c0 2300 	strd	r2, r3, [r0]
    1664:	d1f6      	bne.n	1654 <bench_cset_uint64_t+0x24>
    1666:	3e01      	subs	r6, #1
    1668:	d1f3      	bne.n	1652 <bench_cset_uint64_t+0x22>
    166a:	4b11      	ldr	r3, [pc, #68]	; (16b0 <bench_cset_uint64_t+0x80>)
    166c:	f04f 4e80 	mov.w	r14, #1073741824	; 0x40000000
    1670:	681e      	ldr	r6, [r3, #0]
    1672:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1676:	1a76      	subs	r6, r6, r1
    1678:	4630      	mov	r0, r6
    167a:	e88d 4008 	stmia.w	r13, {r3, r14}
    167e:	f00c f9f3 	bl	da68 <__aeabi_ui2f>
    1682:	4601      	mov	r1, r0
    1684:	f04f 409d 	mov.w	r0, #1317011456	; 0x4e800000
    1688:	f00c fafa 	bl	dc80 <__aeabi_fdiv>
    168c:	f00b fdb0 	bl	d1f0 <__aeabi_f2d>
    1690:	2208      	movs	r2, #8
    1692:	e9cd 0102 	strd	r0, r1, [r13, #8]
    1696:	4623      	mov	r3, r4
    1698:	4631      	mov	r1, r6
    169a:	4806      	ldr	r0, [pc, #24]	; (16b4 <bench_cset_uint64_t+0x84>)
    169c:	f00b f8f4 	bl	c888 <_printf>
    16a0:	4628      	mov	r0, r5
    16a2:	b004      	add	sp, #16
    16a4:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    16a8:	f00a b8cc 	b.w	b844 <free>
    16ac:	0000eb19 	.word	0x0000eb19
    16b0:	e0001004 	.word	0xe0001004
    16b4:	0000eb5e 	.word	0x0000eb5e

000016b8 <bench_cset_wide>:

__NO_INLINE static void bench_cset_wide(void)
{
    16b8:	b530      	push	{r4, r5, r14}
    uint32_t *buf = malloc(BUFSIZE);
    16ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
bench_cset(uint16_t)
bench_cset(uint32_t)
bench_cset(uint64_t)

__NO_INLINE static void bench_cset_wide(void)
{
    16be:	b085      	sub	sp, #20
    uint32_t *buf = malloc(BUFSIZE);
    16c0:	f00a f830 	bl	b724 <malloc>
    if (!buf) {
    16c4:	4604      	mov	r4, r0
    16c6:	b928      	cbnz	r0, 16d4 <bench_cset_wide+0x1c>
        printf("failed to allocate buffer\n");
    16c8:	481d      	ldr	r0, [pc, #116]	; (1740 <bench_cset_wide+0x88>)

    printf("took %u cycles to manually clear a buffer of size %u %d times 8 words at a time (%u bytes), %f bytes/cycle\n",
           count, BUFSIZE, ITER, BUFSIZE * ITER, (BUFSIZE * ITER) / (float)count);

    free(buf);
}
    16ca:	b005      	add	sp, #20
    16cc:	e8bd 4030 	ldmia.w	r13!, {r4, r5, r14}

__NO_INLINE static void bench_cset_wide(void)
{
    uint32_t *buf = malloc(BUFSIZE);
    if (!buf) {
        printf("failed to allocate buffer\n");
    16d0:	f00b b8da 	b.w	c888 <_printf>
    16d4:	4b1b      	ldr	r3, [pc, #108]	; (1744 <bench_cset_wide+0x8c>)
    16d6:	f44f 6580 	mov.w	r5, #1024	; 0x400
    16da:	6819      	ldr	r1, [r3, #0]
    16dc:	4623      	mov	r3, r4
    16de:	f504 1080 	add.w	r0, r4, #1048576	; 0x100000
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
        for (uint j = 0; j < BUFSIZE / sizeof(*buf) / 8; j++) {
            buf[j*8] = 0;
    16e2:	2200      	movs	r2, #0
    16e4:	601a      	str	r2, [r3, #0]
            buf[j*8+1] = 0;
    16e6:	605a      	str	r2, [r3, #4]
            buf[j*8+2] = 0;
    16e8:	609a      	str	r2, [r3, #8]
            buf[j*8+3] = 0;
    16ea:	60da      	str	r2, [r3, #12]
            buf[j*8+4] = 0;
    16ec:	611a      	str	r2, [r3, #16]
            buf[j*8+5] = 0;
    16ee:	615a      	str	r2, [r3, #20]
            buf[j*8+6] = 0;
    16f0:	619a      	str	r2, [r3, #24]
            buf[j*8+7] = 0;
    16f2:	61da      	str	r2, [r3, #28]
    16f4:	3320      	adds	r3, #32
        return;
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
        for (uint j = 0; j < BUFSIZE / sizeof(*buf) / 8; j++) {
    16f6:	4283      	cmp	r3, r0
    16f8:	d1f3      	bne.n	16e2 <bench_cset_wide+0x2a>
        printf("failed to allocate buffer\n");
        return;
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
    16fa:	3d01      	subs	r5, #1
    16fc:	d1ee      	bne.n	16dc <bench_cset_wide+0x24>
    16fe:	4b11      	ldr	r3, [pc, #68]	; (1744 <bench_cset_wide+0x8c>)
    1700:	681d      	ldr	r5, [r3, #0]
            buf[j*8+7] = 0;
        }
    }
    count = arch_cycle_count() - count;

    printf("took %u cycles to manually clear a buffer of size %u %d times 8 words at a time (%u bytes), %f bytes/cycle\n",
    1702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            buf[j*8+5] = 0;
            buf[j*8+6] = 0;
            buf[j*8+7] = 0;
        }
    }
    count = arch_cycle_count() - count;
    1706:	1a6d      	subs	r5, r5, r1

    printf("took %u cycles to manually clear a buffer of size %u %d times 8 words at a time (%u bytes), %f bytes/cycle\n",
    1708:	4628      	mov	r0, r5
    170a:	9300      	str	r3, [sp, #0]
    170c:	f00c f9ac 	bl	da68 <__aeabi_ui2f>
    1710:	4601      	mov	r1, r0
    1712:	f04f 409d 	mov.w	r0, #1317011456	; 0x4e800000
    1716:	f00c fab3 	bl	dc80 <__aeabi_fdiv>
    171a:	f00b fd69 	bl	d1f0 <__aeabi_f2d>
    171e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    1722:	e9cd 0102 	strd	r0, r1, [r13, #8]
    1726:	f44f 6380 	mov.w	r3, #1024	; 0x400
    172a:	4629      	mov	r1, r5
    172c:	4806      	ldr	r0, [pc, #24]	; (1748 <bench_cset_wide+0x90>)
    172e:	f00b f8ab 	bl	c888 <_printf>
           count, BUFSIZE, ITER, BUFSIZE * ITER, (BUFSIZE * ITER) / (float)count);

    free(buf);
    1732:	4620      	mov	r0, r4
}
    1734:	b005      	add	sp, #20
    1736:	e8bd 4030 	ldmia.w	r13!, {r4, r5, r14}
    count = arch_cycle_count() - count;

    printf("took %u cycles to manually clear a buffer of size %u %d times 8 words at a time (%u bytes), %f bytes/cycle\n",
           count, BUFSIZE, ITER, BUFSIZE * ITER, (BUFSIZE * ITER) / (float)count);

    free(buf);
    173a:	f00a b883 	b.w	b844 <free>
    173e:	bf00      	nop
    1740:	0000eb19 	.word	0x0000eb19
    1744:	e0001004 	.word	0xe0001004
    1748:	0000ebca 	.word	0x0000ebca

0000174c <arm_bench_cset_stm>:
    free(buf);
}

#if ARCH_ARM
__NO_INLINE static void arm_bench_cset_stm(void)
{
    174c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    uint32_t *buf = malloc(BUFSIZE);
    174e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1752:	f009 ffe7 	bl	b724 <malloc>
    if (!buf) {
    1756:	4605      	mov	r5, r0
    1758:	b928      	cbnz	r0, 1766 <arm_bench_cset_stm+0x1a>
        printf("failed to allocate buffer\n");
    175a:	4819      	ldr	r0, [pc, #100]	; (17c0 <arm_bench_cset_stm+0x74>)

    printf("took %u cycles to manually clear a buffer of size %u %d times 8 words at a time using stm (%u bytes), %f bytes/cycle\n",
           count, BUFSIZE, ITER, BUFSIZE * ITER, (BUFSIZE * ITER) / (float)count);

    free(buf);
}
    175c:	b004      	add	sp, #16
    175e:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
#if ARCH_ARM
__NO_INLINE static void arm_bench_cset_stm(void)
{
    uint32_t *buf = malloc(BUFSIZE);
    if (!buf) {
        printf("failed to allocate buffer\n");
    1762:	f00b b891 	b.w	c888 <_printf>
    1766:	4b17      	ldr	r3, [pc, #92]	; (17c4 <arm_bench_cset_stm+0x78>)
    1768:	681a      	ldr	r2, [r3, #0]
    176a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    free(buf);
}

#if ARCH_ARM
__NO_INLINE static void arm_bench_cset_stm(void)
{
    176e:	2400      	movs	r4, #0
    1770:	1929      	adds	r1, r5, r4
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
        for (uint j = 0; j < BUFSIZE / sizeof(*buf) / 8; j++) {
            __asm__ volatile(
    1772:	e881 00ff 	stmia.w	r1, {r0, r1, r2, r3, r4, r5, r6, r7}
    1776:	3420      	adds	r4, #32
        return;
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
        for (uint j = 0; j < BUFSIZE / sizeof(*buf) / 8; j++) {
    1778:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    177c:	d1f8      	bne.n	1770 <arm_bench_cset_stm+0x24>
        printf("failed to allocate buffer\n");
        return;
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
    177e:	3b01      	subs	r3, #1
    1780:	d1f5      	bne.n	176e <arm_bench_cset_stm+0x22>
    1782:	4b10      	ldr	r3, [pc, #64]	; (17c4 <arm_bench_cset_stm+0x78>)
    1784:	681e      	ldr	r6, [r3, #0]
            );
        }
    }
    count = arch_cycle_count() - count;

    printf("took %u cycles to manually clear a buffer of size %u %d times 8 words at a time using stm (%u bytes), %f bytes/cycle\n",
    1786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
                "stm    %0, {r0-r7};"
                :: "r" (&buf[j*8])
            );
        }
    }
    count = arch_cycle_count() - count;
    178a:	1ab6      	subs	r6, r6, r2

    printf("took %u cycles to manually clear a buffer of size %u %d times 8 words at a time using stm (%u bytes), %f bytes/cycle\n",
    178c:	4630      	mov	r0, r6
    178e:	9300      	str	r3, [sp, #0]
    1790:	f00c f96a 	bl	da68 <__aeabi_ui2f>
    1794:	4601      	mov	r1, r0
    1796:	f04f 409d 	mov.w	r0, #1317011456	; 0x4e800000
    179a:	f00c fa71 	bl	dc80 <__aeabi_fdiv>
    179e:	f00b fd27 	bl	d1f0 <__aeabi_f2d>
    17a2:	4622      	mov	r2, r4
    17a4:	e9cd 0102 	strd	r0, r1, [r13, #8]
    17a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    17ac:	4631      	mov	r1, r6
    17ae:	4806      	ldr	r0, [pc, #24]	; (17c8 <arm_bench_cset_stm+0x7c>)
    17b0:	f00b f86a 	bl	c888 <_printf>
           count, BUFSIZE, ITER, BUFSIZE * ITER, (BUFSIZE * ITER) / (float)count);

    free(buf);
    17b4:	4628      	mov	r0, r5
}
    17b6:	b004      	add	sp, #16
    17b8:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    count = arch_cycle_count() - count;

    printf("took %u cycles to manually clear a buffer of size %u %d times 8 words at a time using stm (%u bytes), %f bytes/cycle\n",
           count, BUFSIZE, ITER, BUFSIZE * ITER, (BUFSIZE * ITER) / (float)count);

    free(buf);
    17bc:	f00a b842 	b.w	b844 <free>
    17c0:	0000eb19 	.word	0x0000eb19
    17c4:	e0001004 	.word	0xe0001004
    17c8:	0000ec36 	.word	0x0000ec36

000017cc <bench_memset>:

    free(buf);
}

__NO_INLINE static void bench_memset(void)
{
    17cc:	b5f0      	push	{r4, r5, r6, r7, r14}
    void *buf = malloc(BUFSIZE);
    17ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000

    free(buf);
}

__NO_INLINE static void bench_memset(void)
{
    17d2:	b085      	sub	sp, #20
    void *buf = malloc(BUFSIZE);
    17d4:	f009 ffa6 	bl	b724 <malloc>
    if (!buf) {
    17d8:	4604      	mov	r4, r0
    17da:	b928      	cbnz	r0, 17e8 <bench_memset+0x1c>
        printf("failed to allocate buffer\n");
    17dc:	4818      	ldr	r0, [pc, #96]	; (1840 <bench_memset+0x74>)

    printf("took %u cycles to memset a buffer of size %u %d times (%u bytes), %f bytes/cycle\n",
           count, BUFSIZE, ITER, BUFSIZE * ITER, (BUFSIZE * ITER) / (float)count);

    free(buf);
}
    17de:	b005      	add	sp, #20
    17e0:	e8bd 40f0 	ldmia.w	r13!, {r4, r5, r6, r7, r14}

__NO_INLINE static void bench_memset(void)
{
    void *buf = malloc(BUFSIZE);
    if (!buf) {
        printf("failed to allocate buffer\n");
    17e4:	f00b b850 	b.w	c888 <_printf>
    17e8:	4b16      	ldr	r3, [pc, #88]	; (1844 <bench_memset+0x78>)
    17ea:	f44f 6580 	mov.w	r5, #1024	; 0x400
    17ee:	681e      	ldr	r6, [r3, #0]
    17f0:	461f      	mov	r7, r3
        return;
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
        memset(buf, 0, BUFSIZE);
    17f2:	4620      	mov	r0, r4
    17f4:	2100      	movs	r1, #0
    17f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    17fa:	f00a fa2d 	bl	bc58 <memset>
        printf("failed to allocate buffer\n");
        return;
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
    17fe:	3d01      	subs	r5, #1
    1800:	d1f7      	bne.n	17f2 <bench_memset+0x26>
    1802:	683d      	ldr	r5, [r7, #0]
        memset(buf, 0, BUFSIZE);
    }
    count = arch_cycle_count() - count;

    printf("took %u cycles to memset a buffer of size %u %d times (%u bytes), %f bytes/cycle\n",
    1804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
        memset(buf, 0, BUFSIZE);
    }
    count = arch_cycle_count() - count;
    1808:	1bad      	subs	r5, r5, r6

    printf("took %u cycles to memset a buffer of size %u %d times (%u bytes), %f bytes/cycle\n",
    180a:	4628      	mov	r0, r5
    180c:	9300      	str	r3, [sp, #0]
    180e:	f00c f92b 	bl	da68 <__aeabi_ui2f>
    1812:	4601      	mov	r1, r0
    1814:	f04f 409d 	mov.w	r0, #1317011456	; 0x4e800000
    1818:	f00c fa32 	bl	dc80 <__aeabi_fdiv>
    181c:	f00b fce8 	bl	d1f0 <__aeabi_f2d>
    1820:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    1824:	e9cd 0102 	strd	r0, r1, [r13, #8]
    1828:	f44f 6380 	mov.w	r3, #1024	; 0x400
    182c:	4629      	mov	r1, r5
    182e:	4806      	ldr	r0, [pc, #24]	; (1848 <bench_memset+0x7c>)
    1830:	f00b f82a 	bl	c888 <_printf>
           count, BUFSIZE, ITER, BUFSIZE * ITER, (BUFSIZE * ITER) / (float)count);

    free(buf);
    1834:	4620      	mov	r0, r4
}
    1836:	b005      	add	sp, #20
    1838:	e8bd 40f0 	ldmia.w	r13!, {r4, r5, r6, r7, r14}
    count = arch_cycle_count() - count;

    printf("took %u cycles to memset a buffer of size %u %d times (%u bytes), %f bytes/cycle\n",
           count, BUFSIZE, ITER, BUFSIZE * ITER, (BUFSIZE * ITER) / (float)count);

    free(buf);
    183c:	f00a b802 	b.w	b844 <free>
    1840:	0000eb19 	.word	0x0000eb19
    1844:	e0001004 	.word	0xe0001004
    1848:	0000ecac 	.word	0x0000ecac

0000184c <bench_memcpy>:

    free(buf);
}

__NO_INLINE static void bench_memcpy(void)
{
    184c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    uint8_t *buf = malloc(BUFSIZE);
    184e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1852:	f009 ff67 	bl	b724 <malloc>
    if (!buf) {
    1856:	4604      	mov	r4, r0
    1858:	b928      	cbnz	r0, 1866 <bench_memcpy+0x1a>
        printf("failed to allocate buffer\n");
    185a:	4819      	ldr	r0, [pc, #100]	; (18c0 <bench_memcpy+0x74>)

    printf("took %u cycles to memcpy a buffer of size %u %d times (%u source bytes), %f source bytes/cycle\n",
           count, BUFSIZE / 2, ITER, BUFSIZE / 2 * ITER, (BUFSIZE / 2 * ITER) / (float)count);

    free(buf);
}
    185c:	b004      	add	sp, #16
    185e:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}

__NO_INLINE static void bench_memcpy(void)
{
    uint8_t *buf = malloc(BUFSIZE);
    if (!buf) {
        printf("failed to allocate buffer\n");
    1862:	f00b b811 	b.w	c888 <_printf>
    1866:	4b17      	ldr	r3, [pc, #92]	; (18c4 <bench_memcpy+0x78>)
    1868:	f44f 6580 	mov.w	r5, #1024	; 0x400
    186c:	681e      	ldr	r6, [r3, #0]
        return;
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
        memcpy(buf, buf + BUFSIZE / 2, BUFSIZE / 2);
    186e:	4620      	mov	r0, r4
    1870:	f504 2100 	add.w	r1, r4, #524288	; 0x80000
    1874:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1878:	f00a f9a7 	bl	bbca <memcpy>
        printf("failed to allocate buffer\n");
        return;
    }

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
    187c:	3d01      	subs	r5, #1
    187e:	d1f6      	bne.n	186e <bench_memcpy+0x22>
    1880:	4b10      	ldr	r3, [pc, #64]	; (18c4 <bench_memcpy+0x78>)
    1882:	681d      	ldr	r5, [r3, #0]
        memcpy(buf, buf + BUFSIZE / 2, BUFSIZE / 2);
    }
    count = arch_cycle_count() - count;

    printf("took %u cycles to memcpy a buffer of size %u %d times (%u source bytes), %f source bytes/cycle\n",
    1884:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000

    uint count = arch_cycle_count();
    for (uint i = 0; i < ITER; i++) {
        memcpy(buf, buf + BUFSIZE / 2, BUFSIZE / 2);
    }
    count = arch_cycle_count() - count;
    1888:	1bad      	subs	r5, r5, r6

    printf("took %u cycles to memcpy a buffer of size %u %d times (%u source bytes), %f source bytes/cycle\n",
    188a:	4628      	mov	r0, r5
    188c:	9300      	str	r3, [sp, #0]
    188e:	f00c f8eb 	bl	da68 <__aeabi_ui2f>
    1892:	4601      	mov	r1, r0
    1894:	f04f 409c 	mov.w	r0, #1308622848	; 0x4e000000
    1898:	f00c f9f2 	bl	dc80 <__aeabi_fdiv>
    189c:	f00b fca8 	bl	d1f0 <__aeabi_f2d>
    18a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    18a4:	e9cd 0102 	strd	r0, r1, [r13, #8]
    18a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    18ac:	4629      	mov	r1, r5
    18ae:	4806      	ldr	r0, [pc, #24]	; (18c8 <bench_memcpy+0x7c>)
    18b0:	f00a ffea 	bl	c888 <_printf>
           count, BUFSIZE / 2, ITER, BUFSIZE / 2 * ITER, (BUFSIZE / 2 * ITER) / (float)count);

    free(buf);
    18b4:	4620      	mov	r0, r4
}
    18b6:	b004      	add	sp, #16
    18b8:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    count = arch_cycle_count() - count;

    printf("took %u cycles to memcpy a buffer of size %u %d times (%u source bytes), %f source bytes/cycle\n",
           count, BUFSIZE / 2, ITER, BUFSIZE / 2 * ITER, (BUFSIZE / 2 * ITER) / (float)count);

    free(buf);
    18bc:	f009 bfc2 	b.w	b844 <free>
    18c0:	0000eb19 	.word	0x0000eb19
    18c4:	e0001004 	.word	0xe0001004
    18c8:	0000ecfe 	.word	0x0000ecfe
    18cc:	00000000 	.word	0x00000000

000018d0 <bench_sincos>:

#if WITH_LIB_LIBM
#include <math.h>

__NO_INLINE static void bench_sincos(void)
{
    18d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    printf("touching the floating point unit\n");
    18d2:	4827      	ldr	r0, [pc, #156]	; (1970 <bench_sincos+0xa0>)
    18d4:	f00a ffd8 	bl	c888 <_printf>
    __UNUSED volatile double _hole = sin(0);
    18d8:	2000      	movs	r0, #0
    18da:	2100      	movs	r1, #0
    18dc:	f005 ff94 	bl	7808 <sin>
    18e0:	e9cd 0100 	strd	r0, r1, [r13]
    18e4:	4e23      	ldr	r6, [pc, #140]	; (1974 <bench_sincos+0xa4>)

    uint count = arch_cycle_count();
    __UNUSED double a = sin(2.0);
    18e6:	2400      	movs	r4, #0
    18e8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    18ec:	4620      	mov	r0, r4
    18ee:	4629      	mov	r1, r5
    18f0:	6837      	ldr	r7, [r6, #0]
    18f2:	f005 ff89 	bl	7808 <sin>
    18f6:	6831      	ldr	r1, [r6, #0]
    count = arch_cycle_count() - count;
    printf("took %u cycles for sin()\n", count);
    18f8:	481f      	ldr	r0, [pc, #124]	; (1978 <bench_sincos+0xa8>)
    18fa:	1bc9      	subs	r1, r1, r7
    18fc:	f00a ffc4 	bl	c888 <_printf>

    count = arch_cycle_count();
    a = cos(2.0);
    1900:	4620      	mov	r0, r4
    1902:	4629      	mov	r1, r5
    1904:	6837      	ldr	r7, [r6, #0]
    1906:	f006 fdaf 	bl	8468 <cos>
    190a:	6831      	ldr	r1, [r6, #0]
    count = arch_cycle_count() - count;
    printf("took %u cycles for cos()\n", count);

    count = arch_cycle_count();
    a = sinf(2.0);
    190c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    printf("took %u cycles for sin()\n", count);

    count = arch_cycle_count();
    a = cos(2.0);
    count = arch_cycle_count() - count;
    printf("took %u cycles for cos()\n", count);
    1910:	1bc9      	subs	r1, r1, r7
    1912:	481a      	ldr	r0, [pc, #104]	; (197c <bench_sincos+0xac>)
    1914:	f00a ffb8 	bl	c888 <_printf>

    count = arch_cycle_count();
    a = sinf(2.0);
    1918:	4620      	mov	r0, r4
    191a:	6835      	ldr	r5, [r6, #0]
    191c:	f006 fbd4 	bl	80c8 <sinf>
    1920:	6831      	ldr	r1, [r6, #0]
    count = arch_cycle_count() - count;
    printf("took %u cycles for sinf()\n", count);
    1922:	4817      	ldr	r0, [pc, #92]	; (1980 <bench_sincos+0xb0>)
    1924:	1b49      	subs	r1, r1, r5
    1926:	f00a ffaf 	bl	c888 <_printf>

    count = arch_cycle_count();
    a = cosf(2.0);
    192a:	4620      	mov	r0, r4
    192c:	6835      	ldr	r5, [r6, #0]
    192e:	f007 f867 	bl	8a00 <cosf>
    1932:	6831      	ldr	r1, [r6, #0]
    count = arch_cycle_count() - count;
    printf("took %u cycles for cosf()\n", count);
    1934:	4813      	ldr	r0, [pc, #76]	; (1984 <bench_sincos+0xb4>)
    1936:	1b49      	subs	r1, r1, r5
    1938:	f00a ffa6 	bl	c888 <_printf>

    count = arch_cycle_count();
    a = sqrt(1234567.0);
    193c:	a10a      	add	r1, pc, #40	; (adr r1, 1968 <bench_sincos+0x98>)
    193e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1942:	6834      	ldr	r4, [r6, #0]
    1944:	f007 f974 	bl	8c30 <sqrt>
    1948:	6831      	ldr	r1, [r6, #0]
    count = arch_cycle_count() - count;
    printf("took %u cycles for sqrt()\n", count);
    194a:	480f      	ldr	r0, [pc, #60]	; (1988 <bench_sincos+0xb8>)
    194c:	1b09      	subs	r1, r1, r4
    194e:	f00a ff9b 	bl	c888 <_printf>

    count = arch_cycle_count();
    a = sqrtf(1234567.0f);
    1952:	480e      	ldr	r0, [pc, #56]	; (198c <bench_sincos+0xbc>)
    1954:	6834      	ldr	r4, [r6, #0]
    1956:	f007 fa1d 	bl	8d94 <sqrtf>
    195a:	6831      	ldr	r1, [r6, #0]
    count = arch_cycle_count() - count;
    printf("took %u cycles for sqrtf()\n", count);
    195c:	480c      	ldr	r0, [pc, #48]	; (1990 <bench_sincos+0xc0>)
    195e:	1b09      	subs	r1, r1, r4
    1960:	f00a ff92 	bl	c888 <_printf>
}
    1964:	b003      	add	sp, #12
    1966:	bdf0      	pop	{r4, r5, r6, r7, r15}
    1968:	00000000 	.word	0x00000000
    196c:	4132d687 	.word	0x4132d687
    1970:	0000ed5e 	.word	0x0000ed5e
    1974:	e0001004 	.word	0xe0001004
    1978:	0000ed80 	.word	0x0000ed80
    197c:	0000ed9a 	.word	0x0000ed9a
    1980:	0000edb4 	.word	0x0000edb4
    1984:	0000edcf 	.word	0x0000edcf
    1988:	0000edea 	.word	0x0000edea
    198c:	4996b438 	.word	0x4996b438
    1990:	0000ee05 	.word	0x0000ee05
    1994:	f3af 8000 	nop.w

00001998 <benchmarks>:

#endif // WITH_LIB_LIBM

void benchmarks(void)
{
    1998:	b508      	push	{r3, r14}
    bench_set_overhead();
    199a:	f7ff fd5f 	bl	145c <bench_set_overhead>
    bench_memset();
    199e:	f7ff ff15 	bl	17cc <bench_memset>
    bench_memcpy();
    19a2:	f7ff ff53 	bl	184c <bench_memcpy>

    bench_cset_uint8_t();
    19a6:	f7ff fd7d 	bl	14a4 <bench_cset_uint8_t>
    bench_cset_uint16_t();
    19aa:	f7ff fdbd 	bl	1528 <bench_cset_uint16_t>
    bench_cset_uint32_t();
    19ae:	f7ff fdfd 	bl	15ac <bench_cset_uint32_t>
    bench_cset_uint64_t();
    19b2:	f7ff fe3d 	bl	1630 <bench_cset_uint64_t>
    bench_cset_wide();
    19b6:	f7ff fe7f 	bl	16b8 <bench_cset_wide>

#if ARCH_ARM
    arm_bench_cset_stm();
    19ba:	f7ff fec7 	bl	174c <arm_bench_cset_stm>

#if       (__CORTEX_M >= 0x03)
    arm_bench_multi_issue();
    19be:	f7ff fd17 	bl	13f0 <arm_bench_multi_issue>
#endif
#endif
#if WITH_LIB_LIBM
    bench_sincos();
#endif
}
    19c2:	e8bd 4008 	ldmia.w	r13!, {r3, r14}
#if       (__CORTEX_M >= 0x03)
    arm_bench_multi_issue();
#endif
#endif
#if WITH_LIB_LIBM
    bench_sincos();
    19c6:	f7ff bf83 	b.w	18d0 <bench_sincos>
	...

000019cc <cbuf_tests>:
            panic("%d not <= %d (%s:%d)\n", a, b, __FILE__, __LINE__); \
        }                                                              \
    } while (0);

int cbuf_tests(int argc, const cmd_args *argv)
{
    19cc:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}
    cbuf_t cbuf;

    printf("running basic tests...\n");
    19d0:	48a1      	ldr	r0, [pc, #644]	; (1c58 <cbuf_tests+0x28c>)
            panic("%d not <= %d (%s:%d)\n", a, b, __FILE__, __LINE__); \
        }                                                              \
    } while (0);

int cbuf_tests(int argc, const cmd_args *argv)
{
    19d2:	b096      	sub	sp, #88	; 0x58
    19d4:	4674      	mov	r4, r14
    cbuf_t cbuf;

    printf("running basic tests...\n");
    19d6:	f00a ff57 	bl	c888 <_printf>

    cbuf_initialize(&cbuf, 16);
    19da:	a80a      	add	r0, sp, #40	; 0x28
    19dc:	2110      	movs	r1, #16
    19de:	f005 f889 	bl	6af4 <cbuf_initialize>

    ASSERT_EQ(15, cbuf_space_avail(&cbuf));
    19e2:	a80a      	add	r0, sp, #40	; 0x28
    19e4:	f005 f893 	bl	6b0e <cbuf_space_avail>
    19e8:	280f      	cmp	r0, #15
    19ea:	a80a      	add	r0, sp, #40	; 0x28
    19ec:	d006      	beq.n	19fc <cbuf_tests+0x30>
    19ee:	f005 f88e 	bl	6b0e <cbuf_space_avail>
    19f2:	4a9a      	ldr	r2, [pc, #616]	; (1c5c <cbuf_tests+0x290>)
    19f4:	4603      	mov	r3, r0
    19f6:	9200      	str	r2, [sp, #0]
    19f8:	2224      	movs	r2, #36	; 0x24
    19fa:	e0e0      	b.n	1bbe <cbuf_tests+0x1f2>

    ASSERT_EQ(8, cbuf_write(&cbuf, "abcdefgh", 8, false));
    19fc:	4998      	ldr	r1, [pc, #608]	; (1c60 <cbuf_tests+0x294>)
    19fe:	2208      	movs	r2, #8
    1a00:	2300      	movs	r3, #0
    1a02:	f005 f88f 	bl	6b24 <cbuf_write>
    1a06:	4605      	mov	r5, r0
    1a08:	2d08      	cmp	r5, #8
    1a0a:	a80a      	add	r0, sp, #40	; 0x28
    1a0c:	d00e      	beq.n	1a2c <cbuf_tests+0x60>
    1a0e:	4994      	ldr	r1, [pc, #592]	; (1c60 <cbuf_tests+0x294>)
    1a10:	2208      	movs	r2, #8
    1a12:	2300      	movs	r3, #0
    1a14:	f005 f886 	bl	6b24 <cbuf_write>
    1a18:	4a90      	ldr	r2, [pc, #576]	; (1c5c <cbuf_tests+0x290>)
    1a1a:	4992      	ldr	r1, [pc, #584]	; (1c64 <cbuf_tests+0x298>)
    1a1c:	9200      	str	r2, [sp, #0]
    1a1e:	2226      	movs	r2, #38	; 0x26
    1a20:	4603      	mov	r3, r0
    1a22:	9201      	str	r2, [sp, #4]
    1a24:	4620      	mov	r0, r4
    1a26:	2208      	movs	r2, #8
    1a28:	f009 fd44 	bl	b4b4 <_panic>

    ASSERT_EQ(7, cbuf_space_avail(&cbuf));
    1a2c:	f005 f86f 	bl	6b0e <cbuf_space_avail>
    1a30:	4606      	mov	r6, r0
    1a32:	2e07      	cmp	r6, #7
    1a34:	a80a      	add	r0, sp, #40	; 0x28
    1a36:	d00a      	beq.n	1a4e <cbuf_tests+0x82>
    1a38:	f005 f869 	bl	6b0e <cbuf_space_avail>
    1a3c:	4a87      	ldr	r2, [pc, #540]	; (1c5c <cbuf_tests+0x290>)
    1a3e:	4603      	mov	r3, r0
    1a40:	9200      	str	r2, [sp, #0]
    1a42:	2228      	movs	r2, #40	; 0x28
    1a44:	9201      	str	r2, [sp, #4]
    1a46:	4620      	mov	r0, r4
    1a48:	4986      	ldr	r1, [pc, #536]	; (1c64 <cbuf_tests+0x298>)
    1a4a:	2207      	movs	r2, #7
    1a4c:	e7ec      	b.n	1a28 <cbuf_tests+0x5c>

    // Only 7 bytes should fit since if we write all 16 bytes,
    // head == tail and we can't distinguish it from the start case.
    ASSERT_EQ(7, cbuf_write(&cbuf, "ijklmnop", 8, false));
    1a4e:	4986      	ldr	r1, [pc, #536]	; (1c68 <cbuf_tests+0x29c>)
    1a50:	462a      	mov	r2, r5
    1a52:	2300      	movs	r3, #0
    1a54:	f005 f866 	bl	6b24 <cbuf_write>
    1a58:	2807      	cmp	r0, #7
    1a5a:	a80a      	add	r0, sp, #40	; 0x28
    1a5c:	d009      	beq.n	1a72 <cbuf_tests+0xa6>
    1a5e:	462a      	mov	r2, r5
    1a60:	2300      	movs	r3, #0
    1a62:	4981      	ldr	r1, [pc, #516]	; (1c68 <cbuf_tests+0x29c>)
    1a64:	f005 f85e 	bl	6b24 <cbuf_write>
    1a68:	4a7c      	ldr	r2, [pc, #496]	; (1c5c <cbuf_tests+0x290>)
    1a6a:	4603      	mov	r3, r0
    1a6c:	9200      	str	r2, [sp, #0]
    1a6e:	222c      	movs	r2, #44	; 0x2c
    1a70:	e020      	b.n	1ab4 <cbuf_tests+0xe8>

    ASSERT_EQ(0, cbuf_space_avail(&cbuf));
    1a72:	f005 f84c 	bl	6b0e <cbuf_space_avail>
    1a76:	4606      	mov	r6, r0
    1a78:	a80a      	add	r0, sp, #40	; 0x28
    1a7a:	b156      	cbz	r6, 1a92 <cbuf_tests+0xc6>
    1a7c:	f005 f847 	bl	6b0e <cbuf_space_avail>
    1a80:	4a76      	ldr	r2, [pc, #472]	; (1c5c <cbuf_tests+0x290>)
    1a82:	4603      	mov	r3, r0
    1a84:	9200      	str	r2, [sp, #0]
    1a86:	222e      	movs	r2, #46	; 0x2e
    1a88:	9201      	str	r2, [sp, #4]
    1a8a:	4620      	mov	r0, r4
    1a8c:	4975      	ldr	r1, [pc, #468]	; (1c64 <cbuf_tests+0x298>)
    1a8e:	2200      	movs	r2, #0
    1a90:	e7ca      	b.n	1a28 <cbuf_tests+0x5c>

    // Nothing should fit.
    ASSERT_EQ(0, cbuf_write(&cbuf, "XXXXXXXX", 8, false));
    1a92:	4976      	ldr	r1, [pc, #472]	; (1c6c <cbuf_tests+0x2a0>)
    1a94:	462a      	mov	r2, r5
    1a96:	4633      	mov	r3, r6
    1a98:	f005 f844 	bl	6b24 <cbuf_write>
    1a9c:	4607      	mov	r7, r0
    1a9e:	a80a      	add	r0, sp, #40	; 0x28
    1aa0:	b16f      	cbz	r7, 1abe <cbuf_tests+0xf2>
    1aa2:	462a      	mov	r2, r5
    1aa4:	4633      	mov	r3, r6
    1aa6:	4971      	ldr	r1, [pc, #452]	; (1c6c <cbuf_tests+0x2a0>)
    1aa8:	f005 f83c 	bl	6b24 <cbuf_write>
    1aac:	4a6b      	ldr	r2, [pc, #428]	; (1c5c <cbuf_tests+0x290>)
    1aae:	4603      	mov	r3, r0
    1ab0:	9200      	str	r2, [sp, #0]
    1ab2:	2231      	movs	r2, #49	; 0x31
    1ab4:	9201      	str	r2, [sp, #4]
    1ab6:	4620      	mov	r0, r4
    1ab8:	496a      	ldr	r1, [pc, #424]	; (1c64 <cbuf_tests+0x298>)
    1aba:	4632      	mov	r2, r6
    1abc:	e7b4      	b.n	1a28 <cbuf_tests+0x5c>

    ASSERT_EQ(0, cbuf_space_avail(&cbuf));
    1abe:	f005 f826 	bl	6b0e <cbuf_space_avail>
    1ac2:	4606      	mov	r6, r0
    1ac4:	b158      	cbz	r0, 1ade <cbuf_tests+0x112>
    1ac6:	a80a      	add	r0, sp, #40	; 0x28
    1ac8:	f005 f821 	bl	6b0e <cbuf_space_avail>
    1acc:	4a63      	ldr	r2, [pc, #396]	; (1c5c <cbuf_tests+0x290>)
    1ace:	4603      	mov	r3, r0
    1ad0:	9200      	str	r2, [sp, #0]
    1ad2:	2233      	movs	r2, #51	; 0x33
    1ad4:	9201      	str	r2, [sp, #4]
    1ad6:	4620      	mov	r0, r4
    1ad8:	4962      	ldr	r1, [pc, #392]	; (1c64 <cbuf_tests+0x298>)
    1ada:	463a      	mov	r2, r7
    1adc:	e7a4      	b.n	1a28 <cbuf_tests+0x5c>

    // Read a few bytes.
    {
        char buf[32];
        ASSERT_EQ(3, cbuf_read(&cbuf, buf, 3, false));
    1ade:	ad02      	add	r5, sp, #8
    1ae0:	a80a      	add	r0, sp, #40	; 0x28
    1ae2:	4629      	mov	r1, r5
    1ae4:	2203      	movs	r2, #3
    1ae6:	4633      	mov	r3, r6
    1ae8:	f005 f89a 	bl	6c20 <cbuf_read>
    1aec:	2803      	cmp	r0, #3
    1aee:	d124      	bne.n	1b3a <cbuf_tests+0x16e>
        for (int i = 0; i < 3; ++i) {
            ASSERT_EQ(buf[i], 'a' + i);
    1af0:	f89d 3008 	ldrb.w	r3, [r13, #8]
    1af4:	2b61      	cmp	r3, #97	; 0x61
    1af6:	d12f      	bne.n	1b58 <cbuf_tests+0x18c>
    1af8:	f89d 3009 	ldrb.w	r3, [r13, #9]
    1afc:	2b62      	cmp	r3, #98	; 0x62
    1afe:	d12d      	bne.n	1b5c <cbuf_tests+0x190>
    1b00:	f89d 300a 	ldrb.w	r3, [r13, #10]
    1b04:	2b63      	cmp	r3, #99	; 0x63
    1b06:	d12c      	bne.n	1b62 <cbuf_tests+0x196>
        }

        // Try reading 32 bytes.
        ASSERT_EQ(12, cbuf_read(&cbuf, buf, 32, false));
    1b08:	2220      	movs	r2, #32
    1b0a:	a80a      	add	r0, sp, #40	; 0x28
    1b0c:	4629      	mov	r1, r5
    1b0e:	2300      	movs	r3, #0
    1b10:	f005 f886 	bl	6c20 <cbuf_read>
    1b14:	280c      	cmp	r0, #12
    1b16:	bf08      	it	eq
    1b18:	2200      	moveq	r2, #0
    1b1a:	d02f      	beq.n	1b7c <cbuf_tests+0x1b0>
    1b1c:	4629      	mov	r1, r5
    1b1e:	2220      	movs	r2, #32
    1b20:	2300      	movs	r3, #0
    1b22:	a80a      	add	r0, sp, #40	; 0x28
    1b24:	f005 f87c 	bl	6c20 <cbuf_read>
    1b28:	4a4c      	ldr	r2, [pc, #304]	; (1c5c <cbuf_tests+0x290>)
    1b2a:	4603      	mov	r3, r0
    1b2c:	9200      	str	r2, [sp, #0]
    1b2e:	223e      	movs	r2, #62	; 0x3e
    1b30:	9201      	str	r2, [sp, #4]
    1b32:	4620      	mov	r0, r4
    1b34:	494b      	ldr	r1, [pc, #300]	; (1c64 <cbuf_tests+0x298>)
    1b36:	220c      	movs	r2, #12
    1b38:	e776      	b.n	1a28 <cbuf_tests+0x5c>
    ASSERT_EQ(0, cbuf_space_avail(&cbuf));

    // Read a few bytes.
    {
        char buf[32];
        ASSERT_EQ(3, cbuf_read(&cbuf, buf, 3, false));
    1b3a:	4629      	mov	r1, r5
    1b3c:	2203      	movs	r2, #3
    1b3e:	4633      	mov	r3, r6
    1b40:	a80a      	add	r0, sp, #40	; 0x28
    1b42:	f005 f86d 	bl	6c20 <cbuf_read>
    1b46:	4a45      	ldr	r2, [pc, #276]	; (1c5c <cbuf_tests+0x290>)
    1b48:	4603      	mov	r3, r0
    1b4a:	9200      	str	r2, [sp, #0]
    1b4c:	2238      	movs	r2, #56	; 0x38
    1b4e:	9201      	str	r2, [sp, #4]
    1b50:	4620      	mov	r0, r4
    1b52:	4944      	ldr	r1, [pc, #272]	; (1c64 <cbuf_tests+0x298>)
    1b54:	2203      	movs	r2, #3
    1b56:	e767      	b.n	1a28 <cbuf_tests+0x5c>
        for (int i = 0; i < 3; ++i) {
            ASSERT_EQ(buf[i], 'a' + i);
    1b58:	2361      	movs	r3, #97	; 0x61
    1b5a:	e004      	b.n	1b66 <cbuf_tests+0x19a>
    1b5c:	2362      	movs	r3, #98	; 0x62

    // Read a few bytes.
    {
        char buf[32];
        ASSERT_EQ(3, cbuf_read(&cbuf, buf, 3, false));
        for (int i = 0; i < 3; ++i) {
    1b5e:	2601      	movs	r6, #1
    1b60:	e001      	b.n	1b66 <cbuf_tests+0x19a>
            ASSERT_EQ(buf[i], 'a' + i);
    1b62:	2363      	movs	r3, #99	; 0x63

    // Read a few bytes.
    {
        char buf[32];
        ASSERT_EQ(3, cbuf_read(&cbuf, buf, 3, false));
        for (int i = 0; i < 3; ++i) {
    1b64:	2602      	movs	r6, #2
            ASSERT_EQ(buf[i], 'a' + i);
    1b66:	a916      	add	r1, sp, #88	; 0x58
    1b68:	440e      	add	r6, r1
    1b6a:	493c      	ldr	r1, [pc, #240]	; (1c5c <cbuf_tests+0x290>)
    1b6c:	f816 2c50 	ldrb.w	r2, [r6, #-80]
    1b70:	9100      	str	r1, [sp, #0]
    1b72:	213a      	movs	r1, #58	; 0x3a
    1b74:	e08e      	b.n	1c94 <cbuf_tests+0x2c8>
        }

        // Try reading 32 bytes.
        ASSERT_EQ(12, cbuf_read(&cbuf, buf, 32, false));
        for (int i = 0; i < 12; ++i) {
    1b76:	3201      	adds	r2, #1
    1b78:	2a0c      	cmp	r2, #12
    1b7a:	d00c      	beq.n	1b96 <cbuf_tests+0x1ca>
            ASSERT_EQ(buf[i], 'd' + i);
    1b7c:	5ca9      	ldrb	r1, [r5, r2]
    1b7e:	f102 0364 	add.w	r3, r2, #100	; 0x64
    1b82:	4299      	cmp	r1, r3
    1b84:	d0f7      	beq.n	1b76 <cbuf_tests+0x1aa>
    1b86:	a916      	add	r1, sp, #88	; 0x58
    1b88:	440a      	add	r2, r1
    1b8a:	4934      	ldr	r1, [pc, #208]	; (1c5c <cbuf_tests+0x290>)
    1b8c:	f812 2c50 	ldrb.w	r2, [r2, #-80]
    1b90:	9100      	str	r1, [sp, #0]
    1b92:	2140      	movs	r1, #64	; 0x40
    1b94:	e07e      	b.n	1c94 <cbuf_tests+0x2c8>
 *
 * @param[in] cbuf The cbuf instance to reset.
 */
static inline void cbuf_reset(cbuf_t *cbuf)
{
    cbuf_read(cbuf, NULL, cbuf_size(cbuf), false);
    1b96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1b98:	2100      	movs	r1, #0
    1b9a:	2201      	movs	r2, #1
    1b9c:	409a      	lsls	r2, r3
    1b9e:	a80a      	add	r0, sp, #40	; 0x28
    1ba0:	460b      	mov	r3, r1
    1ba2:	f005 f83d 	bl	6c20 <cbuf_read>
        }
    }

    cbuf_reset(&cbuf);

    ASSERT_EQ(15, cbuf_space_avail(&cbuf));
    1ba6:	a80a      	add	r0, sp, #40	; 0x28
    1ba8:	f004 ffb1 	bl	6b0e <cbuf_space_avail>
    1bac:	280f      	cmp	r0, #15
    1bae:	d00b      	beq.n	1bc8 <cbuf_tests+0x1fc>
    1bb0:	a80a      	add	r0, sp, #40	; 0x28
    1bb2:	f004 ffac 	bl	6b0e <cbuf_space_avail>
    1bb6:	4a29      	ldr	r2, [pc, #164]	; (1c5c <cbuf_tests+0x290>)
    1bb8:	4603      	mov	r3, r0
    1bba:	9200      	str	r2, [sp, #0]
    1bbc:	2246      	movs	r2, #70	; 0x46
    1bbe:	9201      	str	r2, [sp, #4]
    1bc0:	4620      	mov	r0, r4
    1bc2:	4928      	ldr	r1, [pc, #160]	; (1c64 <cbuf_tests+0x298>)
    1bc4:	220f      	movs	r2, #15
    1bc6:	e72f      	b.n	1a28 <cbuf_tests+0x5c>
    // Random tests. Keep writing in random chunks up to 8 bytes, then
    // reading in chunks up to 8 bytes. Verify values.

    int pos_out = 0;
    int pos_in = 0;
    printf("running random tests...\n");
    1bc8:	4829      	ldr	r0, [pc, #164]	; (1c70 <cbuf_tests+0x2a4>)
    1bca:	f00a fe5d 	bl	c888 <_printf>

    // Random tests. Keep writing in random chunks up to 8 bytes, then
    // reading in chunks up to 8 bytes. Verify values.

    int pos_out = 0;
    int pos_in = 0;
    1bce:	2600      	movs	r6, #0
    ASSERT_EQ(15, cbuf_space_avail(&cbuf));

    // Random tests. Keep writing in random chunks up to 8 bytes, then
    // reading in chunks up to 8 bytes. Verify values.

    int pos_out = 0;
    1bd0:	4637      	mov	r7, r6
    int pos_in = 0;
    printf("running random tests...\n");
    while (pos_in < 256) {
        if (pos_out < 256) {
    1bd2:	2fff      	cmp	r7, #255	; 0xff
    1bd4:	dc23      	bgt.n	1c1e <cbuf_tests+0x252>
            // Write up to 8 bytes.
            char buf_out[8];
            int to_write_random = rand() & 7;
    1bd6:	f00a fdff 	bl	c7d8 <rand>
            int to_write = MIN(to_write_random, 256 - pos_out);
    1bda:	f5c7 7380 	rsb	r3, r7, #256	; 0x100
    printf("running random tests...\n");
    while (pos_in < 256) {
        if (pos_out < 256) {
            // Write up to 8 bytes.
            char buf_out[8];
            int to_write_random = rand() & 7;
    1bde:	f000 0007 	and.w	r0, r0, #7
            int to_write = MIN(to_write_random, 256 - pos_out);
    1be2:	4298      	cmp	r0, r3
    1be4:	bfb4      	ite	lt
    1be6:	4680      	movlt	r8, r0
    1be8:	4698      	movge	r8, r3
            for (int i = 0; i < to_write; ++i) {
    1bea:	2100      	movs	r1, #0
    1bec:	4541      	cmp	r1, r8
    1bee:	da03      	bge.n	1bf8 <cbuf_tests+0x22c>
    1bf0:	19cb      	adds	r3, r1, r7
                buf_out[i] = pos_out + i;
    1bf2:	546b      	strb	r3, [r5, r1]
        if (pos_out < 256) {
            // Write up to 8 bytes.
            char buf_out[8];
            int to_write_random = rand() & 7;
            int to_write = MIN(to_write_random, 256 - pos_out);
            for (int i = 0; i < to_write; ++i) {
    1bf4:	3101      	adds	r1, #1
    1bf6:	e7f9      	b.n	1bec <cbuf_tests+0x220>
                buf_out[i] = pos_out + i;
            }
            // Advance the out pointer based on how many bytes fit.
            int wrote = cbuf_write(&cbuf, buf_out, to_write, false);
    1bf8:	4642      	mov	r2, r8
    1bfa:	a80a      	add	r0, sp, #40	; 0x28
    1bfc:	4629      	mov	r1, r5
    1bfe:	2300      	movs	r3, #0
    1c00:	f004 ff90 	bl	6b24 <cbuf_write>
            ASSERT_LEQ(wrote, to_write);
    1c04:	4540      	cmp	r0, r8
            int to_write = MIN(to_write_random, 256 - pos_out);
            for (int i = 0; i < to_write; ++i) {
                buf_out[i] = pos_out + i;
            }
            // Advance the out pointer based on how many bytes fit.
            int wrote = cbuf_write(&cbuf, buf_out, to_write, false);
    1c06:	4602      	mov	r2, r0
            ASSERT_LEQ(wrote, to_write);
    1c08:	dd06      	ble.n	1c18 <cbuf_tests+0x24c>
    1c0a:	4b14      	ldr	r3, [pc, #80]	; (1c5c <cbuf_tests+0x290>)
    1c0c:	4620      	mov	r0, r4
    1c0e:	9300      	str	r3, [sp, #0]
    1c10:	2359      	movs	r3, #89	; 0x59
    1c12:	9301      	str	r3, [sp, #4]
    1c14:	4917      	ldr	r1, [pc, #92]	; (1c74 <cbuf_tests+0x2a8>)
    1c16:	e01d      	b.n	1c54 <cbuf_tests+0x288>
            pos_out += wrote;
    1c18:	4407      	add	r7, r0
        }

        // Read up to 8 bytes, make sure they are right.
        if (pos_in < pos_out) {
    1c1a:	42be      	cmp	r6, r7
    1c1c:	da3f      	bge.n	1c9e <cbuf_tests+0x2d2>
            char buf_in[8];
            int to_read_random = rand() & 7;
    1c1e:	f00a fddb 	bl	c7d8 <rand>
            int to_read = MIN(to_read_random, pos_out - pos_in);
    1c22:	ebc6 0807 	rsb	r8, r6, r7
        }

        // Read up to 8 bytes, make sure they are right.
        if (pos_in < pos_out) {
            char buf_in[8];
            int to_read_random = rand() & 7;
    1c26:	f000 0007 	and.w	r0, r0, #7
            int to_read = MIN(to_read_random, pos_out - pos_in);
    1c2a:	4580      	cmp	r8, r0
    1c2c:	bfa8      	it	ge
    1c2e:	4680      	movge	r8, r0
            int read = cbuf_read(&cbuf, buf_in, to_read, false);
    1c30:	4629      	mov	r1, r5
    1c32:	a80a      	add	r0, sp, #40	; 0x28
    1c34:	4642      	mov	r2, r8
    1c36:	2300      	movs	r3, #0
    1c38:	f004 fff2 	bl	6c20 <cbuf_read>
            ASSERT_LEQ(read, to_read);
    1c3c:	4540      	cmp	r0, r8
        // Read up to 8 bytes, make sure they are right.
        if (pos_in < pos_out) {
            char buf_in[8];
            int to_read_random = rand() & 7;
            int to_read = MIN(to_read_random, pos_out - pos_in);
            int read = cbuf_read(&cbuf, buf_in, to_read, false);
    1c3e:	4686      	mov	r14, r0
            ASSERT_LEQ(read, to_read);
    1c40:	dc01      	bgt.n	1c46 <cbuf_tests+0x27a>
    1c42:	2300      	movs	r3, #0
    1c44:	e019      	b.n	1c7a <cbuf_tests+0x2ae>
    1c46:	4b05      	ldr	r3, [pc, #20]	; (1c5c <cbuf_tests+0x290>)
    1c48:	490a      	ldr	r1, [pc, #40]	; (1c74 <cbuf_tests+0x2a8>)
    1c4a:	9300      	str	r3, [sp, #0]
    1c4c:	2363      	movs	r3, #99	; 0x63
    1c4e:	9301      	str	r3, [sp, #4]
    1c50:	4620      	mov	r0, r4
    1c52:	4672      	mov	r2, r14
    1c54:	4643      	mov	r3, r8
    1c56:	e6e7      	b.n	1a28 <cbuf_tests+0x5c>
    1c58:	0000ee21 	.word	0x0000ee21
    1c5c:	0000ee4b 	.word	0x0000ee4b
    1c60:	0000ee62 	.word	0x0000ee62
    1c64:	0000ee39 	.word	0x0000ee39
    1c68:	0000ee6b 	.word	0x0000ee6b
    1c6c:	0000ee74 	.word	0x0000ee74
    1c70:	0000ee7d 	.word	0x0000ee7d
    1c74:	0000ee96 	.word	0x0000ee96

            for (int i = 0; i < read; ++i) {
    1c78:	3301      	adds	r3, #1
    1c7a:	4573      	cmp	r3, r14
    1c7c:	da0e      	bge.n	1c9c <cbuf_tests+0x2d0>
                ASSERT_EQ(pos_in + i, buf_in[i]);
    1c7e:	5ce9      	ldrb	r1, [r5, r3]
    1c80:	199a      	adds	r2, r3, r6
    1c82:	428a      	cmp	r2, r1
    1c84:	d0f8      	beq.n	1c78 <cbuf_tests+0x2ac>
    1c86:	a916      	add	r1, sp, #88	; 0x58
    1c88:	440b      	add	r3, r1
    1c8a:	4910      	ldr	r1, [pc, #64]	; (1ccc <cbuf_tests+0x300>)
    1c8c:	f813 3c50 	ldrb.w	r3, [r3, #-80]
    1c90:	9100      	str	r1, [sp, #0]
    1c92:	2166      	movs	r1, #102	; 0x66
    1c94:	9101      	str	r1, [sp, #4]
    1c96:	4620      	mov	r0, r4
    1c98:	490d      	ldr	r1, [pc, #52]	; (1cd0 <cbuf_tests+0x304>)
    1c9a:	e6c5      	b.n	1a28 <cbuf_tests+0x5c>
            }

            pos_in += read;
    1c9c:	4476      	add	r6, r14
        }

        ASSERT_LEQ(pos_in, pos_out);
    1c9e:	42be      	cmp	r6, r7
    1ca0:	dd08      	ble.n	1cb4 <cbuf_tests+0x2e8>
    1ca2:	4b0a      	ldr	r3, [pc, #40]	; (1ccc <cbuf_tests+0x300>)
    1ca4:	4620      	mov	r0, r4
    1ca6:	9300      	str	r3, [sp, #0]
    1ca8:	236c      	movs	r3, #108	; 0x6c
    1caa:	9301      	str	r3, [sp, #4]
    1cac:	4909      	ldr	r1, [pc, #36]	; (1cd4 <cbuf_tests+0x308>)
    1cae:	4632      	mov	r2, r6
    1cb0:	463b      	mov	r3, r7
    1cb2:	e6b9      	b.n	1a28 <cbuf_tests+0x5c>
    // reading in chunks up to 8 bytes. Verify values.

    int pos_out = 0;
    int pos_in = 0;
    printf("running random tests...\n");
    while (pos_in < 256) {
    1cb4:	2eff      	cmp	r6, #255	; 0xff
    1cb6:	dd8c      	ble.n	1bd2 <cbuf_tests+0x206>
        }

        ASSERT_LEQ(pos_in, pos_out);
    }

    free(cbuf.buf);
    1cb8:	980d      	ldr	r0, [sp, #52]	; 0x34
    1cba:	f009 fdc3 	bl	b844 <free>

    printf("cbuf tests passed\n");
    1cbe:	4806      	ldr	r0, [pc, #24]	; (1cd8 <cbuf_tests+0x30c>)
    1cc0:	f00a fde2 	bl	c888 <_printf>

    return NO_ERROR;
}
    1cc4:	2000      	movs	r0, #0
    1cc6:	b016      	add	sp, #88	; 0x58
    1cc8:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    1ccc:	0000ee4b 	.word	0x0000ee4b
    1cd0:	0000ee39 	.word	0x0000ee39
    1cd4:	0000ee96 	.word	0x0000ee96
    1cd8:	0000eeac 	.word	0x0000eeac
    1cdc:	00000000 	.word	0x00000000

00001ce0 <clock_tests>:
#include <kernel/semaphore.h>
#include <kernel/event.h>
#include <platform.h>

void clock_tests(void)
{
    1ce0:	e92d 43f7 	stmdb	r13!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r14}
    1ce4:	4c5a      	ldr	r4, [pc, #360]	; (1e50 <clock_tests+0x170>)
    uint32_t c;
    lk_time_t t;
    lk_bigtime_t t2;

    thread_sleep(100);
    1ce6:	2064      	movs	r0, #100	; 0x64
    1ce8:	f003 f878 	bl	4ddc <thread_sleep>
    1cec:	6825      	ldr	r5, [r4, #0]
    c = arch_cycle_count();
    t = current_time();
    1cee:	f002 f889 	bl	3e04 <current_time>
    1cf2:	6821      	ldr	r1, [r4, #0]
    c = arch_cycle_count() - c;
    printf("%u cycles per current_time()\n", c);
    1cf4:	4857      	ldr	r0, [pc, #348]	; (1e54 <clock_tests+0x174>)
    1cf6:	1b49      	subs	r1, r1, r5
    1cf8:	f00a fdc6 	bl	c888 <_printf>

    thread_sleep(100);
    1cfc:	2064      	movs	r0, #100	; 0x64
    1cfe:	f003 f86d 	bl	4ddc <thread_sleep>
    1d02:	6825      	ldr	r5, [r4, #0]
    c = arch_cycle_count();
    t2 = current_time_hires();
    1d04:	f002 f8ca 	bl	3e9c <current_time_hires>
    1d08:	6821      	ldr	r1, [r4, #0]
    c = arch_cycle_count() - c;
    printf("%u cycles per current_time_hires()\n", c);
    1d0a:	4853      	ldr	r0, [pc, #332]	; (1e58 <clock_tests+0x178>)
    1d0c:	1b49      	subs	r1, r1, r5
    1d0e:	f00a fdbb 	bl	c888 <_printf>

    printf("making sure time never goes backwards\n");
    1d12:	4852      	ldr	r0, [pc, #328]	; (1e5c <clock_tests+0x17c>)
    1d14:	f00a fdb8 	bl	c888 <_printf>
    {
        printf("testing current_time()\n");
    1d18:	4851      	ldr	r0, [pc, #324]	; (1e60 <clock_tests+0x180>)
    1d1a:	f00a fdb5 	bl	c888 <_printf>
        lk_time_t start = current_time();
    1d1e:	f002 f871 	bl	3e04 <current_time>
    1d22:	4606      	mov	r6, r0
        lk_time_t last = start;
    1d24:	4605      	mov	r5, r0
        for (;;) {
            t = current_time();
    1d26:	f002 f86d 	bl	3e04 <current_time>
            //printf("%lu %lu\n", last, t);
            if (TIME_LT(t, last)) {
    1d2a:	1b43      	subs	r3, r0, r5
    1d2c:	2b00      	cmp	r3, #0
    {
        printf("testing current_time()\n");
        lk_time_t start = current_time();
        lk_time_t last = start;
        for (;;) {
            t = current_time();
    1d2e:	4604      	mov	r4, r0
            //printf("%lu %lu\n", last, t);
            if (TIME_LT(t, last)) {
    1d30:	da06      	bge.n	1d40 <clock_tests+0x60>
                printf("WARNING: time ran backwards: %lu < %lu\n", t, last);
    1d32:	484c      	ldr	r0, [pc, #304]	; (1e64 <clock_tests+0x184>)
    1d34:	4621      	mov	r1, r4
    1d36:	462a      	mov	r2, r5
    1d38:	f00a fda6 	bl	c888 <_printf>
#include <kernel/semaphore.h>
#include <kernel/event.h>
#include <platform.h>

void clock_tests(void)
{
    1d3c:	4625      	mov	r5, r4
    1d3e:	e7f2      	b.n	1d26 <clock_tests+0x46>
                printf("WARNING: time ran backwards: %lu < %lu\n", t, last);
                last = t;
                continue;
            }
            last = t;
            if (last - start > 5000)
    1d40:	1b82      	subs	r2, r0, r6
    1d42:	f241 3388 	movw	r3, #5000	; 0x1388
    1d46:	429a      	cmp	r2, r3
    1d48:	d9f8      	bls.n	1d3c <clock_tests+0x5c>
                break;
        }
    }
    {
        printf("testing current_time_hires()\n");
    1d4a:	4847      	ldr	r0, [pc, #284]	; (1e68 <clock_tests+0x188>)
    1d4c:	f00a fd9c 	bl	c888 <_printf>
        lk_bigtime_t start = current_time_hires();
    1d50:	f002 f8a4 	bl	3e9c <current_time_hires>
    1d54:	4680      	mov	r8, r0
    1d56:	4689      	mov	r9, r1
        lk_bigtime_t last = start;
    1d58:	4606      	mov	r6, r0
    1d5a:	460f      	mov	r7, r1
        for (;;) {
            t2 = current_time_hires();
    1d5c:	f002 f89e 	bl	3e9c <current_time_hires>
    1d60:	4604      	mov	r4, r0
    1d62:	460d      	mov	r5, r1
            //printf("%llu %llu\n", last, t2);
            if (t2 < last) {
    1d64:	42bd      	cmp	r5, r7
    1d66:	bf08      	it	eq
    1d68:	42b4      	cmpeq	r4, r6
    1d6a:	d209      	bcs.n	1d80 <clock_tests+0xa0>
                printf("WARNING: time ran backwards: %llu < %llu\n", t2, last);
    1d6c:	e9cd 6700 	strd	r6, r7, [r13]
    1d70:	483e      	ldr	r0, [pc, #248]	; (1e6c <clock_tests+0x18c>)
    1d72:	4622      	mov	r2, r4
    1d74:	460b      	mov	r3, r1
    1d76:	f00a fd87 	bl	c888 <_printf>
    {
        printf("testing current_time_hires()\n");
        lk_bigtime_t start = current_time_hires();
        lk_bigtime_t last = start;
        for (;;) {
            t2 = current_time_hires();
    1d7a:	4626      	mov	r6, r4
    1d7c:	462f      	mov	r7, r5
    1d7e:	e7ed      	b.n	1d5c <clock_tests+0x7c>
                printf("WARNING: time ran backwards: %llu < %llu\n", t2, last);
                last = t2;
                continue;
            }
            last = t2;
            if (last - start > 5000000)
    1d80:	4602      	mov	r2, r0
    1d82:	460b      	mov	r3, r1
    1d84:	ebb2 0208 	subs.w	r2, r2, r8
    1d88:	eb63 0309 	sbc.w	r3, r3, r9
    1d8c:	a12e      	add	r1, pc, #184	; (adr r1, 1e48 <clock_tests+0x168>)
    1d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
    1d92:	4299      	cmp	r1, r3
    1d94:	bf08      	it	eq
    1d96:	4290      	cmpeq	r0, r2
    1d98:	d2ef      	bcs.n	1d7a <clock_tests+0x9a>
                break;
        }
    }

    printf("making sure current_time() and current_time_hires() are always the same base\n");
    1d9a:	4835      	ldr	r0, [pc, #212]	; (1e70 <clock_tests+0x190>)
    1d9c:	f00a fd74 	bl	c888 <_printf>
    {
        lk_time_t start = current_time();
    1da0:	f002 f830 	bl	3e04 <current_time>
    1da4:	4681      	mov	r9, r0
        for (;;) {
            t = current_time();
    1da6:	f002 f82d 	bl	3e04 <current_time>
    1daa:	4680      	mov	r8, r0
            t2 = current_time_hires();
    1dac:	f002 f876 	bl	3e9c <current_time_hires>
    1db0:	4604      	mov	r4, r0
            if (t > ((t2 + 500) / 1000)) {
    1db2:	f510 70fa 	adds.w	r0, r0, #500	; 0x1f4
    printf("making sure current_time() and current_time_hires() are always the same base\n");
    {
        lk_time_t start = current_time();
        for (;;) {
            t = current_time();
            t2 = current_time_hires();
    1db6:	460d      	mov	r5, r1
            if (t > ((t2 + 500) / 1000)) {
    1db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1dbc:	f141 0100 	adc.w	r1, r1, #0
    1dc0:	2300      	movs	r3, #0
    1dc2:	f00c f81f 	bl	de04 <__aeabi_uldivmod>
    1dc6:	4646      	mov	r6, r8
    1dc8:	2700      	movs	r7, #0
    1dca:	42b9      	cmp	r1, r7
    1dcc:	bf08      	it	eq
    1dce:	42b0      	cmpeq	r0, r6
    1dd0:	d205      	bcs.n	1dde <clock_tests+0xfe>
                printf("WARNING: current_time() ahead of current_time_hires() %lu %llu\n", t, t2);
    1dd2:	4828      	ldr	r0, [pc, #160]	; (1e74 <clock_tests+0x194>)
    1dd4:	4641      	mov	r1, r8
    1dd6:	4622      	mov	r2, r4
    1dd8:	462b      	mov	r3, r5
    1dda:	f00a fd55 	bl	c888 <_printf>
            }
            if (t - start > 5000)
    1dde:	ebc9 0808 	rsb	r8, r9, r8
    1de2:	f241 3388 	movw	r3, #5000	; 0x1388
    1de6:	4598      	cmp	r8, r3
    1de8:	d9dd      	bls.n	1da6 <clock_tests+0xc6>
                break;
        }
    }

    printf("counting to 5, in one second intervals\n");
    1dea:	4823      	ldr	r0, [pc, #140]	; (1e78 <clock_tests+0x198>)
    1dec:	f00a fd4c 	bl	c888 <_printf>
    for (int i = 0; i < 5; i++) {
    1df0:	2600      	movs	r6, #0
        thread_sleep(1000);
    1df2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        printf("%d\n", i + 1);
    1df6:	3601      	adds	r6, #1
        }
    }

    printf("counting to 5, in one second intervals\n");
    for (int i = 0; i < 5; i++) {
        thread_sleep(1000);
    1df8:	f002 fff0 	bl	4ddc <thread_sleep>
        printf("%d\n", i + 1);
    1dfc:	481f      	ldr	r0, [pc, #124]	; (1e7c <clock_tests+0x19c>)
    1dfe:	4631      	mov	r1, r6
    1e00:	f00a fd42 	bl	c888 <_printf>
                break;
        }
    }

    printf("counting to 5, in one second intervals\n");
    for (int i = 0; i < 5; i++) {
    1e04:	2e05      	cmp	r6, #5
    1e06:	d1f4      	bne.n	1df2 <clock_tests+0x112>
        thread_sleep(1000);
        printf("%d\n", i + 1);
    }

    printf("measuring cpu clock against current_time_hires()\n");
    1e08:	481d      	ldr	r0, [pc, #116]	; (1e80 <clock_tests+0x1a0>)
    1e0a:	f00a fd3d 	bl	c888 <_printf>
    1e0e:	4f10      	ldr	r7, [pc, #64]	; (1e50 <clock_tests+0x170>)
    1e10:	f8d7 8000 	ldr.w	r8, [r7]
    for (int i = 0; i < 5; i++) {
        uint cycles = arch_cycle_count();
        lk_bigtime_t start = current_time_hires();
    1e14:	f002 f842 	bl	3e9c <current_time_hires>
    1e18:	4604      	mov	r4, r0
    1e1a:	460d      	mov	r5, r1
        while ((current_time_hires() - start) < 1000000)
    1e1c:	f002 f83e 	bl	3e9c <current_time_hires>
    1e20:	4a18      	ldr	r2, [pc, #96]	; (1e84 <clock_tests+0x1a4>)
    1e22:	1b00      	subs	r0, r0, r4
    1e24:	eb61 0105 	sbc.w	r1, r1, r5
    1e28:	2300      	movs	r3, #0
    1e2a:	428b      	cmp	r3, r1
    1e2c:	bf08      	it	eq
    1e2e:	4282      	cmpeq	r2, r0
    1e30:	d2f4      	bcs.n	1e1c <clock_tests+0x13c>
    1e32:	6839      	ldr	r1, [r7, #0]
            ;
        cycles = arch_cycle_count() - cycles;
        printf("%u cycles per second\n", cycles);
    1e34:	4814      	ldr	r0, [pc, #80]	; (1e88 <clock_tests+0x1a8>)
    1e36:	ebc8 0101 	rsb	r1, r8, r1
    1e3a:	f00a fd25 	bl	c888 <_printf>
        thread_sleep(1000);
        printf("%d\n", i + 1);
    }

    printf("measuring cpu clock against current_time_hires()\n");
    for (int i = 0; i < 5; i++) {
    1e3e:	3e01      	subs	r6, #1
    1e40:	d1e5      	bne.n	1e0e <clock_tests+0x12e>
        while ((current_time_hires() - start) < 1000000)
            ;
        cycles = arch_cycle_count() - cycles;
        printf("%u cycles per second\n", cycles);
    }
}
    1e42:	b003      	add	sp, #12
    1e44:	e8bd 83f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r15}
    1e48:	004c4b40 	.word	0x004c4b40
    1e4c:	00000000 	.word	0x00000000
    1e50:	e0001004 	.word	0xe0001004
    1e54:	0000eebf 	.word	0x0000eebf
    1e58:	0000eedd 	.word	0x0000eedd
    1e5c:	0000ef01 	.word	0x0000ef01
    1e60:	0000ef28 	.word	0x0000ef28
    1e64:	0000ef40 	.word	0x0000ef40
    1e68:	0000ef68 	.word	0x0000ef68
    1e6c:	0000ef86 	.word	0x0000ef86
    1e70:	0000efb0 	.word	0x0000efb0
    1e74:	0000effe 	.word	0x0000effe
    1e78:	0000f03e 	.word	0x0000f03e
    1e7c:	00010225 	.word	0x00010225
    1e80:	0000f066 	.word	0x0000f066
    1e84:	000f423f 	.word	0x000f423f
    1e88:	0000f098 	.word	0x0000f098
    1e8c:	f3af 8000 	nop.w

00001e90 <fibo_thread>:
#include <kernel/semaphore.h>
#include <kernel/event.h>
#include <platform.h>

static int fibo_thread(void *argv)
{
    1e90:	b5f0      	push	{r4, r5, r6, r7, r14}
    long fibo = (intptr_t)argv;

    thread_t *t[2];

    if (fibo == 0)
    1e92:	4605      	mov	r5, r0
#include <kernel/semaphore.h>
#include <kernel/event.h>
#include <platform.h>

static int fibo_thread(void *argv)
{
    1e94:	b08d      	sub	sp, #52	; 0x34
    long fibo = (intptr_t)argv;

    thread_t *t[2];

    if (fibo == 0)
    1e96:	2800      	cmp	r0, #0
    1e98:	d04d      	beq.n	1f36 <fibo_thread+0xa6>
        return 0;
    if (fibo == 1)
    1e9a:	2801      	cmp	r0, #1
    1e9c:	d04b      	beq.n	1f36 <fibo_thread+0xa6>
        return 1;

    char name[32];
    snprintf(name, sizeof(name), "fibo %lu", fibo - 1);
    1e9e:	1e46      	subs	r6, r0, #1
    1ea0:	2120      	movs	r1, #32
    1ea2:	4a26      	ldr	r2, [pc, #152]	; (1f3c <fibo_thread+0xac>)
    1ea4:	4633      	mov	r3, r6
    1ea6:	a804      	add	r0, sp, #16
    t[0] = thread_create(name, &fibo_thread, (void *)(fibo - 1), DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    1ea8:	f44f 6780 	mov.w	r7, #1024	; 0x400
        return 0;
    if (fibo == 1)
        return 1;

    char name[32];
    snprintf(name, sizeof(name), "fibo %lu", fibo - 1);
    1eac:	f00a fc70 	bl	c790 <snprintf>
    t[0] = thread_create(name, &fibo_thread, (void *)(fibo - 1), DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    1eb0:	9700      	str	r7, [sp, #0]
    1eb2:	a804      	add	r0, sp, #16
    1eb4:	4922      	ldr	r1, [pc, #136]	; (1f40 <fibo_thread+0xb0>)
    1eb6:	4632      	mov	r2, r6
    1eb8:	2310      	movs	r3, #16
    1eba:	f002 fe5f 	bl	4b7c <thread_create>
    if (!t[0]) {
    1ebe:	4604      	mov	r4, r0
    1ec0:	b928      	cbnz	r0, 1ece <fibo_thread+0x3e>
        printf("error creating thread for fibo %d\n", fibo-1);
    1ec2:	4820      	ldr	r0, [pc, #128]	; (1f44 <fibo_thread+0xb4>)
    1ec4:	4631      	mov	r1, r6
    1ec6:	f00a fcdf 	bl	c888 <_printf>
        return 0;
    1eca:	4620      	mov	r0, r4
    1ecc:	e034      	b.n	1f38 <fibo_thread+0xa8>
    }
    snprintf(name, sizeof(name), "fibo %lu", fibo - 2);
    1ece:	1eae      	subs	r6, r5, #2
    1ed0:	2120      	movs	r1, #32
    1ed2:	4a1a      	ldr	r2, [pc, #104]	; (1f3c <fibo_thread+0xac>)
    1ed4:	4633      	mov	r3, r6
    1ed6:	a804      	add	r0, sp, #16
    1ed8:	f00a fc5a 	bl	c790 <snprintf>
    t[1] = thread_create(name, &fibo_thread, (void *)(fibo - 2), DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    1edc:	9700      	str	r7, [sp, #0]
    1ede:	a804      	add	r0, sp, #16
    1ee0:	4917      	ldr	r1, [pc, #92]	; (1f40 <fibo_thread+0xb0>)
    1ee2:	4632      	mov	r2, r6
    1ee4:	2310      	movs	r3, #16
    1ee6:	f002 fe49 	bl	4b7c <thread_create>
    if (!t[1]) {
    1eea:	4605      	mov	r5, r0
    1eec:	b968      	cbnz	r0, 1f0a <fibo_thread+0x7a>
        printf("error creating thread for fibo %d\n", fibo-2);
    1eee:	4631      	mov	r1, r6
    1ef0:	4814      	ldr	r0, [pc, #80]	; (1f44 <fibo_thread+0xb4>)
    1ef2:	f00a fcc9 	bl	c888 <_printf>
        thread_resume(t[0]);
    1ef6:	4620      	mov	r0, r4
    1ef8:	f002 fec8 	bl	4c8c <thread_resume>
        thread_join(t[0], NULL, INFINITE_TIME);
    1efc:	4620      	mov	r0, r4
    1efe:	4629      	mov	r1, r5
    1f00:	f04f 32ff 	mov.w	r2, #4294967295
    1f04:	f003 f91c 	bl	5140 <thread_join>
    1f08:	e015      	b.n	1f36 <fibo_thread+0xa6>
        return 0;
    }

    thread_resume(t[0]);
    1f0a:	4620      	mov	r0, r4
    1f0c:	f002 febe 	bl	4c8c <thread_resume>
    thread_resume(t[1]);
    1f10:	4628      	mov	r0, r5
    1f12:	f002 febb 	bl	4c8c <thread_resume>

    int retcode0, retcode1;

    thread_join(t[0], &retcode0, INFINITE_TIME);
    1f16:	a902      	add	r1, sp, #8
    1f18:	f04f 32ff 	mov.w	r2, #4294967295
    1f1c:	4620      	mov	r0, r4
    1f1e:	f003 f90f 	bl	5140 <thread_join>
    thread_join(t[1], &retcode1, INFINITE_TIME);
    1f22:	4628      	mov	r0, r5
    1f24:	a903      	add	r1, sp, #12
    1f26:	f04f 32ff 	mov.w	r2, #4294967295
    1f2a:	f003 f909 	bl	5140 <thread_join>

    return retcode0 + retcode1;
    1f2e:	9b03      	ldr	r3, [sp, #12]
    1f30:	9d02      	ldr	r5, [sp, #8]
    1f32:	18e8      	adds	r0, r5, r3
    1f34:	e000      	b.n	1f38 <fibo_thread+0xa8>
    thread_t *t[2];

    if (fibo == 0)
        return 0;
    if (fibo == 1)
        return 1;
    1f36:	4628      	mov	r0, r5

    thread_join(t[0], &retcode0, INFINITE_TIME);
    thread_join(t[1], &retcode1, INFINITE_TIME);

    return retcode0 + retcode1;
}
    1f38:	b00d      	add	sp, #52	; 0x34
    1f3a:	bdf0      	pop	{r4, r5, r6, r7, r15}
    1f3c:	0000f0ae 	.word	0x0000f0ae
    1f40:	00001e91 	.word	0x00001e91
    1f44:	0000f0b7 	.word	0x0000f0b7

00001f48 <fibo>:

int fibo(int argc, const cmd_args *argv)
{
    1f48:	b530      	push	{r4, r5, r14}

    if (argc < 2) {
    1f4a:	2801      	cmp	r0, #1

    return retcode0 + retcode1;
}

int fibo(int argc, const cmd_args *argv)
{
    1f4c:	b085      	sub	sp, #20
    1f4e:	460d      	mov	r5, r1

    if (argc < 2) {
    1f50:	dc05      	bgt.n	1f5e <fibo+0x16>
        printf("not enough args\n");
    1f52:	4814      	ldr	r0, [pc, #80]	; (1fa4 <fibo+0x5c>)
    1f54:	f00a fc98 	bl	c888 <_printf>
        return -1;
    1f58:	f04f 30ff 	mov.w	r0, #4294967295
    1f5c:	e020      	b.n	1fa0 <fibo+0x58>
    }

    lk_time_t tim = current_time();
    1f5e:	f001 ff51 	bl	3e04 <current_time>

    thread_t *t = thread_create("fibo", &fibo_thread, (void *)(uintptr_t)argv[1].u, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    1f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1f66:	9300      	str	r3, [sp, #0]
    1f68:	69aa      	ldr	r2, [r5, #24]
    1f6a:	2310      	movs	r3, #16
    1f6c:	490e      	ldr	r1, [pc, #56]	; (1fa8 <fibo+0x60>)
    if (argc < 2) {
        printf("not enough args\n");
        return -1;
    }

    lk_time_t tim = current_time();
    1f6e:	4604      	mov	r4, r0

    thread_t *t = thread_create("fibo", &fibo_thread, (void *)(uintptr_t)argv[1].u, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    1f70:	480e      	ldr	r0, [pc, #56]	; (1fac <fibo+0x64>)
    1f72:	f002 fe03 	bl	4b7c <thread_create>
    1f76:	4605      	mov	r5, r0
    thread_resume(t);
    1f78:	f002 fe88 	bl	4c8c <thread_resume>

    int retcode;
    thread_join(t, &retcode, INFINITE_TIME);
    1f7c:	f04f 32ff 	mov.w	r2, #4294967295
    1f80:	a903      	add	r1, sp, #12
    1f82:	4628      	mov	r0, r5
    1f84:	f003 f8dc 	bl	5140 <thread_join>

    tim = current_time() - tim;
    1f88:	f001 ff3c 	bl	3e04 <current_time>

    printf("fibo %d\n", retcode);
    1f8c:	9903      	ldr	r1, [sp, #12]
    thread_resume(t);

    int retcode;
    thread_join(t, &retcode, INFINITE_TIME);

    tim = current_time() - tim;
    1f8e:	1b04      	subs	r4, r0, r4

    printf("fibo %d\n", retcode);
    1f90:	4807      	ldr	r0, [pc, #28]	; (1fb0 <fibo+0x68>)
    1f92:	f00a fc79 	bl	c888 <_printf>
    printf("took %u msecs to calculate\n", tim);
    1f96:	4807      	ldr	r0, [pc, #28]	; (1fb4 <fibo+0x6c>)
    1f98:	4621      	mov	r1, r4
    1f9a:	f00a fc75 	bl	c888 <_printf>

    return NO_ERROR;
    1f9e:	2000      	movs	r0, #0
}
    1fa0:	b005      	add	sp, #20
    1fa2:	bd30      	pop	{r4, r5, r15}
    1fa4:	0000f0da 	.word	0x0000f0da
    1fa8:	00001e91 	.word	0x00001e91
    1fac:	0000f0eb 	.word	0x0000f0eb
    1fb0:	0000f0d1 	.word	0x0000f0d1
    1fb4:	0000f0f0 	.word	0x0000f0f0

00001fb8 <mem_test_fail>:
#if WITH_KERNEL_VM
#include <kernel/vm.h>
#endif

static void mem_test_fail(void *ptr, uint32_t should, uint32_t is)
{
    1fb8:	b538      	push	{r3, r4, r5, r14}
    1fba:	4604      	mov	r4, r0
    1fbc:	460d      	mov	r5, r1
    1fbe:	4613      	mov	r3, r2
    printf("ERROR at %p: should be 0x%x, is 0x%x\n", ptr, should, is);
    1fc0:	4621      	mov	r1, r4
    1fc2:	462a      	mov	r2, r5
    1fc4:	4804      	ldr	r0, [pc, #16]	; (1fd8 <mem_test_fail+0x20>)
    1fc6:	f00a fc5f 	bl	c888 <_printf>

    ptr = (void *)ROUNDDOWN((uintptr_t)ptr, 64);
    hexdump(ptr, 128);
    1fca:	f024 003f 	bic.w	r0, r4, #63	; 0x3f
    1fce:	2180      	movs	r1, #128	; 0x80
}
    1fd0:	e8bd 4038 	ldmia.w	r13!, {r3, r4, r5, r14}
static void mem_test_fail(void *ptr, uint32_t should, uint32_t is)
{
    printf("ERROR at %p: should be 0x%x, is 0x%x\n", ptr, should, is);

    ptr = (void *)ROUNDDOWN((uintptr_t)ptr, 64);
    hexdump(ptr, 128);
    1fd4:	f009 ba82 	b.w	b4dc <hexdump>
    1fd8:	0000f10c 	.word	0x0000f10c

00001fdc <do_pattern_test>:
}

static status_t do_pattern_test(void *ptr, size_t len, uint32_t pat)
{
    1fdc:	b570      	push	{r4, r5, r6, r14}
    1fde:	460e      	mov	r6, r1
    1fe0:	4605      	mov	r5, r0
    volatile uint32_t *vbuf32 = ptr;
    size_t i;

    printf("\tpattern 0x%08x\n", pat);
    1fe2:	4611      	mov	r1, r2
    1fe4:	480f      	ldr	r0, [pc, #60]	; (2024 <do_pattern_test+0x48>)
    ptr = (void *)ROUNDDOWN((uintptr_t)ptr, 64);
    hexdump(ptr, 128);
}

static status_t do_pattern_test(void *ptr, size_t len, uint32_t pat)
{
    1fe6:	4614      	mov	r4, r2
    volatile uint32_t *vbuf32 = ptr;
    size_t i;

    printf("\tpattern 0x%08x\n", pat);
    1fe8:	f00a fc4e 	bl	c888 <_printf>
    for (i = 0; i < len / 4; i++) {
    1fec:	08b1      	lsrs	r1, r6, #2
    1fee:	2300      	movs	r3, #0
    1ff0:	428b      	cmp	r3, r1
    1ff2:	d003      	beq.n	1ffc <do_pattern_test+0x20>
        vbuf32[i] = pat;
    1ff4:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
{
    volatile uint32_t *vbuf32 = ptr;
    size_t i;

    printf("\tpattern 0x%08x\n", pat);
    for (i = 0; i < len / 4; i++) {
    1ff8:	3301      	adds	r3, #1
    1ffa:	e7f9      	b.n	1ff0 <do_pattern_test+0x14>
    1ffc:	2300      	movs	r3, #0
        vbuf32[i] = pat;
    }

    for (i = 0; i < len / 4; i++) {
    1ffe:	428b      	cmp	r3, r1
    2000:	d00e      	beq.n	2020 <do_pattern_test+0x44>
        if (vbuf32[i] != pat) {
    2002:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    2006:	eb05 0083 	add.w	r0, r5, r3, lsl #2
    200a:	42a2      	cmp	r2, r4
    200c:	d006      	beq.n	201c <do_pattern_test+0x40>
            mem_test_fail((void *)&vbuf32[i], pat, vbuf32[i]);
    200e:	6802      	ldr	r2, [r0, #0]
    2010:	4621      	mov	r1, r4
    2012:	f7ff ffd1 	bl	1fb8 <mem_test_fail>
            return ERR_GENERIC;
    2016:	f04f 30ff 	mov.w	r0, #4294967295
    201a:	bd70      	pop	{r4, r5, r6, r15}
    printf("\tpattern 0x%08x\n", pat);
    for (i = 0; i < len / 4; i++) {
        vbuf32[i] = pat;
    }

    for (i = 0; i < len / 4; i++) {
    201c:	3301      	adds	r3, #1
    201e:	e7ee      	b.n	1ffe <do_pattern_test+0x22>
            mem_test_fail((void *)&vbuf32[i], pat, vbuf32[i]);
            return ERR_GENERIC;
        }
    }

    return NO_ERROR;
    2020:	2000      	movs	r0, #0
}
    2022:	bd70      	pop	{r4, r5, r6, r15}
    2024:	0000f132 	.word	0x0000f132

00002028 <do_moving_inversion_test>:

static status_t do_moving_inversion_test(void *ptr, size_t len, uint32_t pat)
{
    2028:	b5f8      	push	{r3, r4, r5, r6, r7, r14}
    202a:	460e      	mov	r6, r1
    202c:	4605      	mov	r5, r0
    volatile uint32_t *vbuf32 = ptr;
    size_t i;

    printf("\tpattern 0x%08x\n", pat);
    202e:	4611      	mov	r1, r2
    2030:	481f      	ldr	r0, [pc, #124]	; (20b0 <do_moving_inversion_test+0x88>)

    return NO_ERROR;
}

static status_t do_moving_inversion_test(void *ptr, size_t len, uint32_t pat)
{
    2032:	4614      	mov	r4, r2
    volatile uint32_t *vbuf32 = ptr;
    size_t i;

    printf("\tpattern 0x%08x\n", pat);
    2034:	f00a fc28 	bl	c888 <_printf>

    /* fill memory */
    for (i = 0; i < len / 4; i++) {
    2038:	08b2      	lsrs	r2, r6, #2
    203a:	2300      	movs	r3, #0
    203c:	4293      	cmp	r3, r2
    203e:	d003      	beq.n	2048 <do_moving_inversion_test+0x20>
        vbuf32[i] = pat;
    2040:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
    size_t i;

    printf("\tpattern 0x%08x\n", pat);

    /* fill memory */
    for (i = 0; i < len / 4; i++) {
    2044:	3301      	adds	r3, #1
    2046:	e7f9      	b.n	203c <do_moving_inversion_test+0x14>
    2048:	2300      	movs	r3, #0
        vbuf32[i] = pat;
    }

    /* from the bottom, walk through each cell, inverting the value */
    //printf("\t\tbottom up invert\n");
    for (i = 0; i < len / 4; i++) {
    204a:	4293      	cmp	r3, r2
    204c:	d00a      	beq.n	2064 <do_moving_inversion_test+0x3c>
        if (vbuf32[i] != pat) {
    204e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    2052:	eb05 0083 	add.w	r0, r5, r3, lsl #2
    2056:	42a1      	cmp	r1, r4
    2058:	d11c      	bne.n	2094 <do_moving_inversion_test+0x6c>
            mem_test_fail((void *)&vbuf32[i], pat, vbuf32[i]);
            return ERR_GENERIC;
        }

        vbuf32[i] = ~pat;
    205a:	43e1      	mvns	r1, r4
    205c:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
        vbuf32[i] = pat;
    }

    /* from the bottom, walk through each cell, inverting the value */
    //printf("\t\tbottom up invert\n");
    for (i = 0; i < len / 4; i++) {
    2060:	3301      	adds	r3, #1
    2062:	e7f2      	b.n	204a <do_moving_inversion_test+0x22>
    2064:	eb05 0682 	add.w	r6, r5, r2, lsl #2
    2068:	2300      	movs	r3, #0
        vbuf32[i] = ~pat;
    }

    /* repeat, walking from top down */
    //printf("\t\ttop down invert\n");
    for (i = len / 4; i > 0; i--) {
    206a:	4293      	cmp	r3, r2
    206c:	d010      	beq.n	2090 <do_moving_inversion_test+0x68>
    206e:	0099      	lsls	r1, r3, #2
    2070:	1f30      	subs	r0, r6, #4
    2072:	1a40      	subs	r0, r0, r1
        if (vbuf32[i-1] != ~pat) {
    2074:	6807      	ldr	r7, [r0, #0]
    2076:	43e1      	mvns	r1, r4
    2078:	428f      	cmp	r7, r1
    207a:	f103 0301 	add.w	r3, r3, #1
    207e:	d005      	beq.n	208c <do_moving_inversion_test+0x64>
            mem_test_fail((void *)&vbuf32[i-1], ~pat, vbuf32[i-1]);
    2080:	6802      	ldr	r2, [r0, #0]
    2082:	f7ff ff99 	bl	1fb8 <mem_test_fail>
            return ERR_GENERIC;
    2086:	f04f 30ff 	mov.w	r0, #4294967295
    208a:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
        }

        vbuf32[i-1] = pat;
    208c:	6004      	str	r4, [r0, #0]
    208e:	e7ec      	b.n	206a <do_moving_inversion_test+0x42>
        vbuf32[i] = ~pat;
    }

    /* repeat, walking from top down */
    //printf("\t\ttop down invert\n");
    for (i = len / 4; i > 0; i--) {
    2090:	2300      	movs	r3, #0
    2092:	e009      	b.n	20a8 <do_moving_inversion_test+0x80>

    /* verify that we have the original pattern */
    //printf("\t\tfinal test\n");
    for (i = 0; i < len / 4; i++) {
        if (vbuf32[i] != pat) {
            mem_test_fail((void *)&vbuf32[i], pat, vbuf32[i]);
    2094:	6802      	ldr	r2, [r0, #0]
    2096:	4621      	mov	r1, r4
    2098:	e7f3      	b.n	2082 <do_moving_inversion_test+0x5a>
    }

    /* verify that we have the original pattern */
    //printf("\t\tfinal test\n");
    for (i = 0; i < len / 4; i++) {
        if (vbuf32[i] != pat) {
    209a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
    209e:	eb05 0083 	add.w	r0, r5, r3, lsl #2
    20a2:	42a1      	cmp	r1, r4
    20a4:	d1f6      	bne.n	2094 <do_moving_inversion_test+0x6c>
        vbuf32[i-1] = pat;
    }

    /* verify that we have the original pattern */
    //printf("\t\tfinal test\n");
    for (i = 0; i < len / 4; i++) {
    20a6:	3301      	adds	r3, #1
    20a8:	4293      	cmp	r3, r2
    20aa:	d1f6      	bne.n	209a <do_moving_inversion_test+0x72>
            mem_test_fail((void *)&vbuf32[i], pat, vbuf32[i]);
            return ERR_GENERIC;
        }
    }

    return NO_ERROR;
    20ac:	2000      	movs	r0, #0
}
    20ae:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
    20b0:	0000f132 	.word	0x0000f132

000020b4 <do_mem_tests>:

static void do_mem_tests(void *ptr, size_t len)
{
    20b4:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}
    20b8:	460d      	mov	r5, r1
    20ba:	4604      	mov	r4, r0
    size_t i;

    /* test 1: simple write address to memory, read back */
    printf("test 1: simple address write, read back\n");
    20bc:	483a      	ldr	r0, [pc, #232]	; (21a8 <do_mem_tests+0xf4>)
    20be:	f00a fbe3 	bl	c888 <_printf>
    volatile uint32_t *vbuf32 = ptr;
    for (i = 0; i < len / 4; i++) {
    20c2:	08aa      	lsrs	r2, r5, #2
    20c4:	2300      	movs	r3, #0
    20c6:	4293      	cmp	r3, r2
    20c8:	d003      	beq.n	20d2 <do_mem_tests+0x1e>
        vbuf32[i] = i;
    20ca:	f844 3023 	str.w	r3, [r4, r3, lsl #2]
    size_t i;

    /* test 1: simple write address to memory, read back */
    printf("test 1: simple address write, read back\n");
    volatile uint32_t *vbuf32 = ptr;
    for (i = 0; i < len / 4; i++) {
    20ce:	3301      	adds	r3, #1
    20d0:	e7f9      	b.n	20c6 <do_mem_tests+0x12>
    20d2:	2100      	movs	r1, #0
        vbuf32[i] = i;
    }

    for (i = 0; i < len / 4; i++) {
    20d4:	4291      	cmp	r1, r2
    20d6:	d00b      	beq.n	20f0 <do_mem_tests+0x3c>
        if (vbuf32[i] != i) {
    20d8:	f854 3021 	ldr.w	r3, [r4, r1, lsl #2]
    20dc:	eb04 0081 	add.w	r0, r4, r1, lsl #2
    20e0:	428b      	cmp	r3, r1
    20e2:	d003      	beq.n	20ec <do_mem_tests+0x38>
            mem_test_fail((void *)&vbuf32[i], i, vbuf32[i]);
    20e4:	6802      	ldr	r2, [r0, #0]
    20e6:	f7ff ff67 	bl	1fb8 <mem_test_fail>
            goto out;
    20ea:	e057      	b.n	219c <do_mem_tests+0xe8>
    volatile uint32_t *vbuf32 = ptr;
    for (i = 0; i < len / 4; i++) {
        vbuf32[i] = i;
    }

    for (i = 0; i < len / 4; i++) {
    20ec:	3101      	adds	r1, #1
    20ee:	e7f1      	b.n	20d4 <do_mem_tests+0x20>
            goto out;
        }
    }

    /* test 2: write various patterns, read back */
    printf("test 2: write patterns, read back\n");
    20f0:	482e      	ldr	r0, [pc, #184]	; (21ac <do_mem_tests+0xf8>)
    20f2:	f00a fbc9 	bl	c888 <_printf>
    20f6:	2600      	movs	r6, #0
        0x0, 0xffffffff,
        0xaaaaaaaa, 0x55555555,
    };

    for (size_t p = 0; p < countof(pat); p++) {
        if (do_pattern_test(ptr, len, pat[p]) < 0)
    20f8:	4f2d      	ldr	r7, [pc, #180]	; (21b0 <do_mem_tests+0xfc>)
    20fa:	4620      	mov	r0, r4
    20fc:	4629      	mov	r1, r5
    20fe:	59f2      	ldr	r2, [r6, r7]
    2100:	f7ff ff6c 	bl	1fdc <do_pattern_test>
    2104:	2800      	cmp	r0, #0
    2106:	46b8      	mov	r8, r7
    2108:	db48      	blt.n	219c <do_mem_tests+0xe8>
    210a:	3604      	adds	r6, #4
    static const uint32_t pat[] = {
        0x0, 0xffffffff,
        0xaaaaaaaa, 0x55555555,
    };

    for (size_t p = 0; p < countof(pat); p++) {
    210c:	2e10      	cmp	r6, #16
    210e:	d1f3      	bne.n	20f8 <do_mem_tests+0x44>
    2110:	2620      	movs	r6, #32
    2112:	2701      	movs	r7, #1
        if (do_pattern_test(ptr, len, pat[p]) < 0)
            goto out;
    }
    // shift bits through 32bit word
    for (uint32_t p = 1; p != 0; p <<= 1) {
        if (do_pattern_test(ptr, len, p) < 0)
    2114:	4620      	mov	r0, r4
    2116:	4629      	mov	r1, r5
    2118:	463a      	mov	r2, r7
    211a:	f7ff ff5f 	bl	1fdc <do_pattern_test>
    211e:	2800      	cmp	r0, #0
    2120:	db3c      	blt.n	219c <do_mem_tests+0xe8>
    for (size_t p = 0; p < countof(pat); p++) {
        if (do_pattern_test(ptr, len, pat[p]) < 0)
            goto out;
    }
    // shift bits through 32bit word
    for (uint32_t p = 1; p != 0; p <<= 1) {
    2122:	3e01      	subs	r6, #1
    2124:	ea4f 0747 	mov.w	r7, r7, lsl #1
    2128:	d1f4      	bne.n	2114 <do_mem_tests+0x60>
    212a:	2610      	movs	r6, #16
    212c:	2701      	movs	r7, #1
        if (do_pattern_test(ptr, len, p) < 0)
            goto out;
    }
    // shift bits through 16bit word, invert top of 32bit
    for (uint16_t p = 1; p != 0; p <<= 1) {
        if (do_pattern_test(ptr, len, ((~p) << 16) | p) < 0)
    212e:	43fa      	mvns	r2, r7
    2130:	4620      	mov	r0, r4
    2132:	4629      	mov	r1, r5
    2134:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
    2138:	f7ff ff50 	bl	1fdc <do_pattern_test>
    213c:	2800      	cmp	r0, #0
    213e:	db2d      	blt.n	219c <do_mem_tests+0xe8>
    for (uint32_t p = 1; p != 0; p <<= 1) {
        if (do_pattern_test(ptr, len, p) < 0)
            goto out;
    }
    // shift bits through 16bit word, invert top of 32bit
    for (uint16_t p = 1; p != 0; p <<= 1) {
    2140:	007f      	lsls	r7, r7, #1
    2142:	3e01      	subs	r6, #1
    2144:	b2bf      	uxth	r7, r7
    2146:	d1f2      	bne.n	212e <do_mem_tests+0x7a>
        if (do_pattern_test(ptr, len, ((~p) << 16) | p) < 0)
            goto out;
    }

    /* test 3: moving inversion, patterns */
    printf("test 3: moving inversions with patterns\n");
    2148:	481a      	ldr	r0, [pc, #104]	; (21b4 <do_mem_tests+0x100>)
    214a:	f00a fb9d 	bl	c888 <_printf>
    for (size_t p = 0; p < countof(pat); p++) {
        if (do_moving_inversion_test(ptr, len, pat[p]) < 0)
    214e:	4620      	mov	r0, r4
    2150:	4629      	mov	r1, r5
    2152:	f858 2006 	ldr.w	r2, [r8, r6]
    2156:	f7ff ff67 	bl	2028 <do_moving_inversion_test>
    215a:	2800      	cmp	r0, #0
    215c:	db1e      	blt.n	219c <do_mem_tests+0xe8>
    215e:	3604      	adds	r6, #4
            goto out;
    }

    /* test 3: moving inversion, patterns */
    printf("test 3: moving inversions with patterns\n");
    for (size_t p = 0; p < countof(pat); p++) {
    2160:	2e10      	cmp	r6, #16
    2162:	d1f4      	bne.n	214e <do_mem_tests+0x9a>
    2164:	2620      	movs	r6, #32
    2166:	2701      	movs	r7, #1
            goto out;

    }
    // shift bits through 32bit word
    for (uint32_t p = 1; p != 0; p <<= 1) {
        if (do_moving_inversion_test(ptr, len, p) < 0)
    2168:	4620      	mov	r0, r4
    216a:	4629      	mov	r1, r5
    216c:	463a      	mov	r2, r7
    216e:	f7ff ff5b 	bl	2028 <do_moving_inversion_test>
    2172:	2800      	cmp	r0, #0
    2174:	db12      	blt.n	219c <do_mem_tests+0xe8>
        if (do_moving_inversion_test(ptr, len, pat[p]) < 0)
            goto out;

    }
    // shift bits through 32bit word
    for (uint32_t p = 1; p != 0; p <<= 1) {
    2176:	3e01      	subs	r6, #1
    2178:	ea4f 0747 	mov.w	r7, r7, lsl #1
    217c:	d1f4      	bne.n	2168 <do_mem_tests+0xb4>
    217e:	2710      	movs	r7, #16
    2180:	2601      	movs	r6, #1
        if (do_moving_inversion_test(ptr, len, p) < 0)
            goto out;
    }
    // shift bits through 16bit word, invert top of 32bit
    for (uint16_t p = 1; p != 0; p <<= 1) {
        if (do_moving_inversion_test(ptr, len, ((~p) << 16) | p) < 0)
    2182:	43f2      	mvns	r2, r6
    2184:	4620      	mov	r0, r4
    2186:	4629      	mov	r1, r5
    2188:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
    218c:	f7ff ff4c 	bl	2028 <do_moving_inversion_test>
    2190:	2800      	cmp	r0, #0
    2192:	db03      	blt.n	219c <do_mem_tests+0xe8>
    for (uint32_t p = 1; p != 0; p <<= 1) {
        if (do_moving_inversion_test(ptr, len, p) < 0)
            goto out;
    }
    // shift bits through 16bit word, invert top of 32bit
    for (uint16_t p = 1; p != 0; p <<= 1) {
    2194:	0076      	lsls	r6, r6, #1
    2196:	3f01      	subs	r7, #1
    2198:	b2b6      	uxth	r6, r6
    219a:	d1f2      	bne.n	2182 <do_mem_tests+0xce>
        if (do_moving_inversion_test(ptr, len, ((~p) << 16) | p) < 0)
            goto out;
    }

out:
    printf("done with tests\n");
    219c:	4806      	ldr	r0, [pc, #24]	; (21b8 <do_mem_tests+0x104>)
}
    219e:	e8bd 41f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r14}
        if (do_moving_inversion_test(ptr, len, ((~p) << 16) | p) < 0)
            goto out;
    }

out:
    printf("done with tests\n");
    21a2:	f00a bb71 	b.w	c888 <_printf>
    21a6:	bf00      	nop
    21a8:	0000f143 	.word	0x0000f143
    21ac:	0000f16c 	.word	0x0000f16c
    21b0:	00010588 	.word	0x00010588
    21b4:	0000f18f 	.word	0x0000f18f
    21b8:	0000f1b8 	.word	0x0000f1b8

000021bc <mem_test>:
}

static int mem_test(int argc, const cmd_args *argv)
{
    if (argc < 2) {
    21bc:	2801      	cmp	r0, #1
out:
    printf("done with tests\n");
}

static int mem_test(int argc, const cmd_args *argv)
{
    21be:	b538      	push	{r3, r4, r5, r14}
    21c0:	460c      	mov	r4, r1
    if (argc < 2) {
    21c2:	dc0b      	bgt.n	21dc <mem_test+0x20>
        printf("not enough arguments\n");
    21c4:	4817      	ldr	r0, [pc, #92]	; (2224 <mem_test+0x68>)
    21c6:	f00a fb5f 	bl	c888 <_printf>
usage:
        printf("usage: %s <length>\n", argv[0].str);
    21ca:	6821      	ldr	r1, [r4, #0]
    21cc:	4816      	ldr	r0, [pc, #88]	; (2228 <mem_test+0x6c>)
    21ce:	f00a fb5b 	bl	c888 <_printf>
        printf("usage: %s <base> <length>\n", argv[0].str);
    21d2:	6821      	ldr	r1, [r4, #0]
    21d4:	4815      	ldr	r0, [pc, #84]	; (222c <mem_test+0x70>)
    21d6:	f00a fb57 	bl	c888 <_printf>
    21da:	e00a      	b.n	21f2 <mem_test+0x36>
        return -1;
    }

    if (argc == 2) {
    21dc:	2802      	cmp	r0, #2
    21de:	d118      	bne.n	2212 <mem_test+0x56>
        void *ptr;
        size_t len = argv[1].u;
    21e0:	698d      	ldr	r5, [r1, #24]
        paddr_t pa;
        pa = vaddr_to_paddr(ptr);
        printf("physical address 0x%lx\n", pa);
#else
        /* allocate from the heap */
        ptr = malloc(len);
    21e2:	4628      	mov	r0, r5
    21e4:	f009 fa9e 	bl	b724 <malloc>
        if (!ptr ) {
    21e8:	4604      	mov	r4, r0
    21ea:	b928      	cbnz	r0, 21f8 <mem_test+0x3c>
            printf("error allocating test area from heap\n");
    21ec:	4810      	ldr	r0, [pc, #64]	; (2230 <mem_test+0x74>)
    21ee:	f00a fb4b 	bl	c888 <_printf>
            return -1;
    21f2:	f04f 30ff 	mov.w	r0, #4294967295
    21f6:	bd38      	pop	{r3, r4, r5, r15}
        }

#endif

        printf("got buffer at %p of length 0x%lx\n", ptr, len);
    21f8:	4621      	mov	r1, r4
    21fa:	462a      	mov	r2, r5
    21fc:	480d      	ldr	r0, [pc, #52]	; (2234 <mem_test+0x78>)
    21fe:	f00a fb43 	bl	c888 <_printf>

        /* run the tests */
        do_mem_tests(ptr, len);
    2202:	4620      	mov	r0, r4
    2204:	4629      	mov	r1, r5
    2206:	f7ff ff55 	bl	20b4 <do_mem_tests>

#if WITH_KERNEL_VM
        // XXX free memory region here
        printf("NOTE: leaked memory\n");
#else
        free(ptr);
    220a:	4620      	mov	r0, r4
    220c:	f009 fb1a 	bl	b844 <free>
    2210:	e005      	b.n	221e <mem_test+0x62>
#endif
    } else if (argc == 3) {
    2212:	2803      	cmp	r0, #3
    2214:	d1d9      	bne.n	21ca <mem_test+0xe>
        void *ptr = argv[1].p;
        size_t len = argv[2].u;

        /* run the tests */
        do_mem_tests(ptr, len);
    2216:	69c8      	ldr	r0, [r1, #28]
    2218:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    221a:	f7ff ff4b 	bl	20b4 <do_mem_tests>
    } else {
        goto usage;
    }

    return 0;
    221e:	2000      	movs	r0, #0
}
    2220:	bd38      	pop	{r3, r4, r5, r15}
    2222:	bf00      	nop
    2224:	0000f1c9 	.word	0x0000f1c9
    2228:	0000f1df 	.word	0x0000f1df
    222c:	0000f1f3 	.word	0x0000f1f3
    2230:	0000f20e 	.word	0x0000f20e
    2234:	0000f234 	.word	0x0000f234

00002238 <printf_tests>:
#include <stdio.h>
#include <string.h>
#include <debug.h>

void printf_tests(void)
{
    2238:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    printf("int:   %d %d %d\n", -12345678, 0, 12345678);
    printf("uint:  %u %u %u\n", -12345678, 0, 12345678);
    printf("long:  %ld %ld %ld\n", -12345678L, 0L, 12345678L);
    printf("ulong: %lu %lu %lu\n", -12345678UL, 0UL, 12345678UL);

    printf("longlong: %lli %lli %lli\n", -12345678LL, 0LL, 12345678LL);
    223c:	a5eb      	add	r5, pc, #940	; (adr r5, 25ec <printf_tests+0x3b4>)
    223e:	e9d5 4500 	ldrd	r4, r5, [r5]
#include <stdio.h>
#include <string.h>
#include <debug.h>

void printf_tests(void)
{
    2242:	b08d      	sub	sp, #52	; 0x34
    printf("printf tests\n");
    2244:	48ac      	ldr	r0, [pc, #688]	; (24f8 <printf_tests+0x2c0>)
    2246:	f00a fb1f 	bl	c888 <_printf>

    printf("numbers:\n");
    224a:	48ac      	ldr	r0, [pc, #688]	; (24fc <printf_tests+0x2c4>)
    224c:	f00a fb1c 	bl	c888 <_printf>
    printf("int8:  %hhd %hhd %hhd\n", -12, 0, 254);
    printf("uint8: %hhu %hhu %hhu\n", -12, 0, 254);
    printf("int16: %hd %hd %hd\n", -1234, 0, 1234);
    2250:	f8df a3a0 	ldr.w	r10, [r15, #928]	; 25f4 <printf_tests+0x3bc>
void printf_tests(void)
{
    printf("printf tests\n");

    printf("numbers:\n");
    printf("int8:  %hhd %hhd %hhd\n", -12, 0, 254);
    2254:	f06f 010b 	mvn.w	r1, #11
    2258:	2200      	movs	r2, #0
    225a:	23fe      	movs	r3, #254	; 0xfe
    225c:	48a8      	ldr	r0, [pc, #672]	; (2500 <printf_tests+0x2c8>)
    225e:	f00a fb13 	bl	c888 <_printf>
    printf("uint8: %hhu %hhu %hhu\n", -12, 0, 254);
    printf("int16: %hd %hd %hd\n", -1234, 0, 1234);
    2262:	f240 4bd2 	movw	r11, #1234	; 0x4d2
{
    printf("printf tests\n");

    printf("numbers:\n");
    printf("int8:  %hhd %hhd %hhd\n", -12, 0, 254);
    printf("uint8: %hhu %hhu %hhu\n", -12, 0, 254);
    2266:	f06f 010b 	mvn.w	r1, #11
    226a:	2200      	movs	r2, #0
    226c:	23fe      	movs	r3, #254	; 0xfe
    226e:	48a5      	ldr	r0, [pc, #660]	; (2504 <printf_tests+0x2cc>)
    printf("int16: %hd %hd %hd\n", -1234, 0, 1234);
    printf("uint16:%hu %hu %hu\n", -1234, 0, 1234);
    printf("int:   %d %d %d\n", -12345678, 0, 12345678);
    2270:	f8df 8384 	ldr.w	r8, [r15, #900]	; 25f8 <printf_tests+0x3c0>
    2274:	f8df 9384 	ldr.w	r9, [r15, #900]	; 25fc <printf_tests+0x3c4>
{
    printf("printf tests\n");

    printf("numbers:\n");
    printf("int8:  %hhd %hhd %hhd\n", -12, 0, 254);
    printf("uint8: %hhu %hhu %hhu\n", -12, 0, 254);
    2278:	f00a fb06 	bl	c888 <_printf>
    printf("int16: %hd %hd %hd\n", -1234, 0, 1234);
    227c:	4651      	mov	r1, r10
    227e:	465b      	mov	r3, r11
    2280:	2200      	movs	r2, #0
    2282:	48a1      	ldr	r0, [pc, #644]	; (2508 <printf_tests+0x2d0>)
    2284:	f00a fb00 	bl	c888 <_printf>
    printf("uint16:%hu %hu %hu\n", -1234, 0, 1234);
    2288:	4651      	mov	r1, r10
    228a:	465b      	mov	r3, r11
    228c:	2200      	movs	r2, #0
    228e:	489f      	ldr	r0, [pc, #636]	; (250c <printf_tests+0x2d4>)
    2290:	f00a fafa 	bl	c888 <_printf>
    printf("int:   %d %d %d\n", -12345678, 0, 12345678);
    2294:	4649      	mov	r1, r9
    2296:	4643      	mov	r3, r8
    2298:	2200      	movs	r2, #0
    229a:	489d      	ldr	r0, [pc, #628]	; (2510 <printf_tests+0x2d8>)
    229c:	f00a faf4 	bl	c888 <_printf>
    printf("uint:  %u %u %u\n", -12345678, 0, 12345678);
    22a0:	4649      	mov	r1, r9
    22a2:	4643      	mov	r3, r8
    22a4:	2200      	movs	r2, #0
    22a6:	489b      	ldr	r0, [pc, #620]	; (2514 <printf_tests+0x2dc>)
    22a8:	f00a faee 	bl	c888 <_printf>
    printf("long:  %ld %ld %ld\n", -12345678L, 0L, 12345678L);
    22ac:	4649      	mov	r1, r9
    22ae:	4643      	mov	r3, r8
    22b0:	2200      	movs	r2, #0
    22b2:	4899      	ldr	r0, [pc, #612]	; (2518 <printf_tests+0x2e0>)
    22b4:	f00a fae8 	bl	c888 <_printf>
    printf("ulong: %lu %lu %lu\n", -12345678UL, 0UL, 12345678UL);

    printf("longlong: %lli %lli %lli\n", -12345678LL, 0LL, 12345678LL);
    22b8:	2600      	movs	r6, #0
    22ba:	2700      	movs	r7, #0
    printf("int16: %hd %hd %hd\n", -1234, 0, 1234);
    printf("uint16:%hu %hu %hu\n", -1234, 0, 1234);
    printf("int:   %d %d %d\n", -12345678, 0, 12345678);
    printf("uint:  %u %u %u\n", -12345678, 0, 12345678);
    printf("long:  %ld %ld %ld\n", -12345678L, 0L, 12345678L);
    printf("ulong: %lu %lu %lu\n", -12345678UL, 0UL, 12345678UL);
    22bc:	4649      	mov	r1, r9
    22be:	4643      	mov	r3, r8
    22c0:	2200      	movs	r2, #0
    22c2:	4896      	ldr	r0, [pc, #600]	; (251c <printf_tests+0x2e4>)
    22c4:	f00a fae0 	bl	c888 <_printf>

    printf("longlong: %lli %lli %lli\n", -12345678LL, 0LL, 12345678LL);
    22c8:	a389      	add	r3, pc, #548	; (adr r3, 24f0 <printf_tests+0x2b8>)
    22ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    22ce:	e9cd 6700 	strd	r6, r7, [r13]
    22d2:	e9cd 2302 	strd	r2, r3, [r13, #8]
    22d6:	4892      	ldr	r0, [pc, #584]	; (2520 <printf_tests+0x2e8>)
    22d8:	4622      	mov	r2, r4
    22da:	462b      	mov	r3, r5
    22dc:	f00a fad4 	bl	c888 <_printf>
    printf("ulonglong: %llu %llu %llu\n", -12345678LL, 0LL, 12345678LL);
    22e0:	a383      	add	r3, pc, #524	; (adr r3, 24f0 <printf_tests+0x2b8>)
    22e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    22e6:	e9cd 6700 	strd	r6, r7, [r13]
    22ea:	e9cd 2302 	strd	r2, r3, [r13, #8]
    22ee:	488d      	ldr	r0, [pc, #564]	; (2524 <printf_tests+0x2ec>)
    22f0:	4622      	mov	r2, r4
    22f2:	462b      	mov	r3, r5
    22f4:	f00a fac8 	bl	c888 <_printf>
    printf("ssize_t: %zd %zd %zd\n", (ssize_t)-12345678, (ssize_t)0, (ssize_t)12345678);
    22f8:	4649      	mov	r1, r9
    22fa:	4643      	mov	r3, r8
    22fc:	2200      	movs	r2, #0
    22fe:	488a      	ldr	r0, [pc, #552]	; (2528 <printf_tests+0x2f0>)
    2300:	f00a fac2 	bl	c888 <_printf>
    printf("usize_t: %zu %zu %zu\n", (size_t)-12345678, (size_t)0, (size_t)12345678);
    2304:	4649      	mov	r1, r9
    2306:	4643      	mov	r3, r8
    2308:	2200      	movs	r2, #0
    230a:	4888      	ldr	r0, [pc, #544]	; (252c <printf_tests+0x2f4>)
    230c:	f00a fabc 	bl	c888 <_printf>
    printf("intmax_t: %jd %jd %jd\n", (intmax_t)-12345678, (intmax_t)0, (intmax_t)12345678);
    2310:	a377      	add	r3, pc, #476	; (adr r3, 24f0 <printf_tests+0x2b8>)
    2312:	e9d3 2300 	ldrd	r2, r3, [r3]
    2316:	e9cd 6700 	strd	r6, r7, [r13]
    231a:	e9cd 2302 	strd	r2, r3, [r13, #8]
    231e:	4884      	ldr	r0, [pc, #528]	; (2530 <printf_tests+0x2f8>)
    2320:	4622      	mov	r2, r4
    2322:	462b      	mov	r3, r5
    2324:	f00a fab0 	bl	c888 <_printf>
    printf("uintmax_t: %ju %ju %ju\n", (uintmax_t)-12345678, (uintmax_t)0, (uintmax_t)12345678);
    2328:	a371      	add	r3, pc, #452	; (adr r3, 24f0 <printf_tests+0x2b8>)
    232a:	e9d3 2300 	ldrd	r2, r3, [r3]
    232e:	e9cd 6700 	strd	r6, r7, [r13]
    2332:	e9cd 2302 	strd	r2, r3, [r13, #8]
    2336:	487f      	ldr	r0, [pc, #508]	; (2534 <printf_tests+0x2fc>)
    2338:	4622      	mov	r2, r4
    233a:	462b      	mov	r3, r5
    233c:	f00a faa4 	bl	c888 <_printf>
    printf("ptrdiff_t: %td %td %td\n", (ptrdiff_t)-12345678, (ptrdiff_t)0, (ptrdiff_t)12345678);
    2340:	4649      	mov	r1, r9
    2342:	4643      	mov	r3, r8
    2344:	2200      	movs	r2, #0
    2346:	487c      	ldr	r0, [pc, #496]	; (2538 <printf_tests+0x300>)
    2348:	f00a fa9e 	bl	c888 <_printf>
    printf("ptrdiff_t (u): %tu %tu %tu\n", (ptrdiff_t)-12345678, (ptrdiff_t)0, (ptrdiff_t)12345678);
    234c:	4649      	mov	r1, r9
    234e:	4643      	mov	r3, r8
    2350:	2200      	movs	r2, #0
    2352:	487a      	ldr	r0, [pc, #488]	; (253c <printf_tests+0x304>)
    2354:	f00a fa98 	bl	c888 <_printf>

    printf("hex:\n");
    2358:	4879      	ldr	r0, [pc, #484]	; (2540 <printf_tests+0x308>)
    235a:	f00a fa95 	bl	c888 <_printf>
    printf("uint8: %hhx %hhx %hhx\n", -12, 0, 254);
    235e:	f06f 010b 	mvn.w	r1, #11
    2362:	2200      	movs	r2, #0
    2364:	23fe      	movs	r3, #254	; 0xfe
    2366:	4877      	ldr	r0, [pc, #476]	; (2544 <printf_tests+0x30c>)
    2368:	f00a fa8e 	bl	c888 <_printf>
    printf("uint16:%hx %hx %hx\n", -1234, 0, 1234);
    236c:	4651      	mov	r1, r10
    236e:	465b      	mov	r3, r11
    2370:	2200      	movs	r2, #0
    2372:	4875      	ldr	r0, [pc, #468]	; (2548 <printf_tests+0x310>)
    2374:	f00a fa88 	bl	c888 <_printf>
    printf("uint:  %x %x %x\n", -12345678, 0, 12345678);
    2378:	4649      	mov	r1, r9
    237a:	4643      	mov	r3, r8
    237c:	2200      	movs	r2, #0
    237e:	4873      	ldr	r0, [pc, #460]	; (254c <printf_tests+0x314>)
    2380:	f00a fa82 	bl	c888 <_printf>
    printf("ulong: %lx %lx %lx\n", -12345678UL, 0UL, 12345678UL);
    2384:	4649      	mov	r1, r9
    2386:	4643      	mov	r3, r8
    2388:	2200      	movs	r2, #0
    238a:	4871      	ldr	r0, [pc, #452]	; (2550 <printf_tests+0x318>)
    238c:	f00a fa7c 	bl	c888 <_printf>
    printf("ulong: %X %X %X\n", -12345678, 0, 12345678);
    2390:	4649      	mov	r1, r9
    2392:	4643      	mov	r3, r8
    2394:	2200      	movs	r2, #0
    2396:	486f      	ldr	r0, [pc, #444]	; (2554 <printf_tests+0x31c>)
    2398:	f00a fa76 	bl	c888 <_printf>
    printf("ulonglong: %llx %llx %llx\n", -12345678LL, 0LL, 12345678LL);
    239c:	a354      	add	r3, pc, #336	; (adr r3, 24f0 <printf_tests+0x2b8>)
    239e:	e9d3 2300 	ldrd	r2, r3, [r3]
    23a2:	e9cd 6700 	strd	r6, r7, [r13]
    23a6:	e9cd 2302 	strd	r2, r3, [r13, #8]
    23aa:	486b      	ldr	r0, [pc, #428]	; (2558 <printf_tests+0x320>)
    23ac:	4622      	mov	r2, r4
    23ae:	462b      	mov	r3, r5
    23b0:	f00a fa6a 	bl	c888 <_printf>
    printf("usize_t: %zx %zx %zx\n", (size_t)-12345678, (size_t)0, (size_t)12345678);
    23b4:	4643      	mov	r3, r8
    23b6:	4649      	mov	r1, r9
    23b8:	2200      	movs	r2, #0
    23ba:	4868      	ldr	r0, [pc, #416]	; (255c <printf_tests+0x324>)
    23bc:	f00a fa64 	bl	c888 <_printf>

    printf("alt/sign:\n");
    23c0:	4867      	ldr	r0, [pc, #412]	; (2560 <printf_tests+0x328>)
    23c2:	f00a fa61 	bl	c888 <_printf>
    printf("uint: %#x %#X\n", 0xabcdef, 0xabcdef);
    23c6:	4967      	ldr	r1, [pc, #412]	; (2564 <printf_tests+0x32c>)
    23c8:	4867      	ldr	r0, [pc, #412]	; (2568 <printf_tests+0x330>)
    23ca:	460a      	mov	r2, r1
    23cc:	f00a fa5c 	bl	c888 <_printf>
    printf("int: %+d %+d\n", 12345678, -12345678);
    23d0:	4641      	mov	r1, r8
    23d2:	464a      	mov	r2, r9
    23d4:	4865      	ldr	r0, [pc, #404]	; (256c <printf_tests+0x334>)
    23d6:	f00a fa57 	bl	c888 <_printf>
    printf("int: % d %+d\n", 12345678, 12345678);
    23da:	4642      	mov	r2, r8
    23dc:	4641      	mov	r1, r8
    23de:	4864      	ldr	r0, [pc, #400]	; (2570 <printf_tests+0x338>)
    23e0:	f00a fa52 	bl	c888 <_printf>

    printf("formatting\n");
    23e4:	4863      	ldr	r0, [pc, #396]	; (2574 <printf_tests+0x33c>)
    23e6:	f00a fa4f 	bl	c888 <_printf>
    printf("int: a%8da\n", 12345678);
    23ea:	4641      	mov	r1, r8
    23ec:	4862      	ldr	r0, [pc, #392]	; (2578 <printf_tests+0x340>)
    23ee:	f00a fa4b 	bl	c888 <_printf>
    printf("int: a%9da\n", 12345678);
    23f2:	4641      	mov	r1, r8
    23f4:	4861      	ldr	r0, [pc, #388]	; (257c <printf_tests+0x344>)
    23f6:	f00a fa47 	bl	c888 <_printf>
    printf("int: a%-9da\n", 12345678);
    23fa:	4641      	mov	r1, r8
    23fc:	4860      	ldr	r0, [pc, #384]	; (2580 <printf_tests+0x348>)
    23fe:	f00a fa43 	bl	c888 <_printf>
    printf("int: a%10da\n", 12345678);
    2402:	4641      	mov	r1, r8
    2404:	485f      	ldr	r0, [pc, #380]	; (2584 <printf_tests+0x34c>)
    2406:	f00a fa3f 	bl	c888 <_printf>
    printf("int: a%-10da\n", 12345678);
    240a:	4641      	mov	r1, r8
    240c:	485e      	ldr	r0, [pc, #376]	; (2588 <printf_tests+0x350>)
    240e:	f00a fa3b 	bl	c888 <_printf>
    printf("int: a%09da\n", 12345678);
    2412:	4641      	mov	r1, r8
    2414:	485d      	ldr	r0, [pc, #372]	; (258c <printf_tests+0x354>)
    2416:	f00a fa37 	bl	c888 <_printf>
    printf("int: a%010da\n", 12345678);
    printf("int: a%6da\n", 12345678);

    printf("a%1sa\n", "b");
    241a:	4c5d      	ldr	r4, [pc, #372]	; (2590 <printf_tests+0x358>)
    printf("int: a%9da\n", 12345678);
    printf("int: a%-9da\n", 12345678);
    printf("int: a%10da\n", 12345678);
    printf("int: a%-10da\n", 12345678);
    printf("int: a%09da\n", 12345678);
    printf("int: a%010da\n", 12345678);
    241c:	4641      	mov	r1, r8
    241e:	485d      	ldr	r0, [pc, #372]	; (2594 <printf_tests+0x35c>)
    2420:	f00a fa32 	bl	c888 <_printf>
    printf("int: a%6da\n", 12345678);
    2424:	4641      	mov	r1, r8
    2426:	485c      	ldr	r0, [pc, #368]	; (2598 <printf_tests+0x360>)
    2428:	f00a fa2e 	bl	c888 <_printf>

    printf("a%1sa\n", "b");
    242c:	4621      	mov	r1, r4
    242e:	485b      	ldr	r0, [pc, #364]	; (259c <printf_tests+0x364>)
    2430:	f00a fa2a 	bl	c888 <_printf>
    printf("a%9sa\n", "b");
    2434:	4621      	mov	r1, r4
    2436:	485a      	ldr	r0, [pc, #360]	; (25a0 <printf_tests+0x368>)
    2438:	f00a fa26 	bl	c888 <_printf>
    printf("a%-9sa\n", "b");
    243c:	4621      	mov	r1, r4
    243e:	4859      	ldr	r0, [pc, #356]	; (25a4 <printf_tests+0x36c>)
    2440:	f00a fa22 	bl	c888 <_printf>
    printf("a%5sa\n", "thisisatest");

    printf("%03d\n", -2);       /* '-02' */
    printf("%0+3d\n", -2);      /* '-02' */
    2444:	4c58      	ldr	r4, [pc, #352]	; (25a8 <printf_tests+0x370>)
    printf("int: a%6da\n", 12345678);

    printf("a%1sa\n", "b");
    printf("a%9sa\n", "b");
    printf("a%-9sa\n", "b");
    printf("a%5sa\n", "thisisatest");
    2446:	4959      	ldr	r1, [pc, #356]	; (25ac <printf_tests+0x374>)
    2448:	4859      	ldr	r0, [pc, #356]	; (25b0 <printf_tests+0x378>)
    244a:	f00a fa1d 	bl	c888 <_printf>

    printf("%03d\n", -2);       /* '-02' */
    244e:	f06f 0101 	mvn.w	r1, #1
    2452:	4858      	ldr	r0, [pc, #352]	; (25b4 <printf_tests+0x37c>)
    2454:	f00a fa18 	bl	c888 <_printf>
    printf("%0+3d\n", -2);      /* '-02' */
    2458:	4620      	mov	r0, r4
    245a:	f06f 0101 	mvn.w	r1, #1
    245e:	f00a fa13 	bl	c888 <_printf>
    printf("%0+3d\n", 2);       /* '+02' */
    2462:	4620      	mov	r0, r4
    printf("%+3d\n", 2);        /* ' +2' */
    2464:	4c54      	ldr	r4, [pc, #336]	; (25b8 <printf_tests+0x380>)
    printf("% 3d\n", -2000);    /* '-2000' */
    2466:	4d55      	ldr	r5, [pc, #340]	; (25bc <printf_tests+0x384>)
    printf("a%-9sa\n", "b");
    printf("a%5sa\n", "thisisatest");

    printf("%03d\n", -2);       /* '-02' */
    printf("%0+3d\n", -2);      /* '-02' */
    printf("%0+3d\n", 2);       /* '+02' */
    2468:	2102      	movs	r1, #2
    246a:	f00a fa0d 	bl	c888 <_printf>
    printf("%+3d\n", 2);        /* ' +2' */
    246e:	4620      	mov	r0, r4
    2470:	2102      	movs	r1, #2
    2472:	f00a fa09 	bl	c888 <_printf>
    printf("% 3d\n", -2000);    /* '-2000' */
    2476:	4628      	mov	r0, r5
    2478:	4951      	ldr	r1, [pc, #324]	; (25c0 <printf_tests+0x388>)
    247a:	f00a fa05 	bl	c888 <_printf>
    printf("% 3d\n", 2000);     /* ' 2000' */
    247e:	4628      	mov	r0, r5
    2480:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    2484:	f00a fa00 	bl	c888 <_printf>
    printf("%+3d\n", 2000);     /* '+2000' */
    2488:	4620      	mov	r0, r4
    printf("%10s\n", "test");   /* '      test' */
    248a:	4c4e      	ldr	r4, [pc, #312]	; (25c4 <printf_tests+0x38c>)
    printf("%0+3d\n", -2);      /* '-02' */
    printf("%0+3d\n", 2);       /* '+02' */
    printf("%+3d\n", 2);        /* ' +2' */
    printf("% 3d\n", -2000);    /* '-2000' */
    printf("% 3d\n", 2000);     /* ' 2000' */
    printf("%+3d\n", 2000);     /* '+2000' */
    248c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    2490:	f00a f9fa 	bl	c888 <_printf>
    printf("%10s\n", "test");   /* '      test' */
    2494:	4621      	mov	r1, r4
    2496:	484c      	ldr	r0, [pc, #304]	; (25c8 <printf_tests+0x390>)
    2498:	f00a f9f6 	bl	c888 <_printf>
    printf("%010s\n", "test");  /* '      test' */
    249c:	4621      	mov	r1, r4
    249e:	484b      	ldr	r0, [pc, #300]	; (25cc <printf_tests+0x394>)
    24a0:	f00a f9f2 	bl	c888 <_printf>
    printf("%-10s\n", "test");  /* 'test      ' */
    24a4:	4621      	mov	r1, r4
    24a6:	484a      	ldr	r0, [pc, #296]	; (25d0 <printf_tests+0x398>)
    24a8:	f00a f9ee 	bl	c888 <_printf>
    printf("%-010s\n", "test"); /* 'test      ' */
    24ac:	4621      	mov	r1, r4
    24ae:	4849      	ldr	r0, [pc, #292]	; (25d4 <printf_tests+0x39c>)
    24b0:	f00a f9ea 	bl	c888 <_printf>

    int err;

    err = printf("a");
    24b4:	4848      	ldr	r0, [pc, #288]	; (25d8 <printf_tests+0x3a0>)
    24b6:	f00a f9e7 	bl	c888 <_printf>
    printf(" returned %d\n", err);
    24ba:	4c48      	ldr	r4, [pc, #288]	; (25dc <printf_tests+0x3a4>)
    printf("%-10s\n", "test");  /* 'test      ' */
    printf("%-010s\n", "test"); /* 'test      ' */

    int err;

    err = printf("a");
    24bc:	4601      	mov	r1, r0
    printf(" returned %d\n", err);
    24be:	4620      	mov	r0, r4
    24c0:	f00a f9e2 	bl	c888 <_printf>
    err = printf("ab");
    24c4:	4846      	ldr	r0, [pc, #280]	; (25e0 <printf_tests+0x3a8>)
    24c6:	f00a f9df 	bl	c888 <_printf>
    24ca:	4601      	mov	r1, r0
    printf(" returned %d\n", err);
    24cc:	4620      	mov	r0, r4
    24ce:	f00a f9db 	bl	c888 <_printf>
    err = printf("abc");
    24d2:	4844      	ldr	r0, [pc, #272]	; (25e4 <printf_tests+0x3ac>)
    24d4:	f00a f9d8 	bl	c888 <_printf>
    24d8:	4601      	mov	r1, r0
    printf(" returned %d\n", err);
    24da:	4620      	mov	r0, r4
    24dc:	f00a f9d4 	bl	c888 <_printf>
    err = printf("abcd");
    24e0:	4841      	ldr	r0, [pc, #260]	; (25e8 <printf_tests+0x3b0>)
    24e2:	f00a f9d1 	bl	c888 <_printf>
    24e6:	4601      	mov	r1, r0
    printf(" returned %d\n", err);
    24e8:	4620      	mov	r0, r4
    24ea:	f00a f9cd 	bl	c888 <_printf>
    24ee:	e087      	b.n	2600 <printf_tests+0x3c8>
    24f0:	00bc614e 	.word	0x00bc614e
    24f4:	00000000 	.word	0x00000000
    24f8:	0000f5f1 	.word	0x0000f5f1
    24fc:	0000f26b 	.word	0x0000f26b
    2500:	0000f275 	.word	0x0000f275
    2504:	0000f28c 	.word	0x0000f28c
    2508:	0000f2a3 	.word	0x0000f2a3
    250c:	0000f2b7 	.word	0x0000f2b7
    2510:	0000f2cb 	.word	0x0000f2cb
    2514:	0000f2dc 	.word	0x0000f2dc
    2518:	0000f2ed 	.word	0x0000f2ed
    251c:	0000f301 	.word	0x0000f301
    2520:	0000f315 	.word	0x0000f315
    2524:	0000f32f 	.word	0x0000f32f
    2528:	0000f34a 	.word	0x0000f34a
    252c:	0000f360 	.word	0x0000f360
    2530:	0000f376 	.word	0x0000f376
    2534:	0000f38d 	.word	0x0000f38d
    2538:	0000f3a5 	.word	0x0000f3a5
    253c:	0000f3bd 	.word	0x0000f3bd
    2540:	0000f3d9 	.word	0x0000f3d9
    2544:	0000f3df 	.word	0x0000f3df
    2548:	0000f3f6 	.word	0x0000f3f6
    254c:	0000f40a 	.word	0x0000f40a
    2550:	0000f41b 	.word	0x0000f41b
    2554:	0000f42f 	.word	0x0000f42f
    2558:	0000f440 	.word	0x0000f440
    255c:	0000f45b 	.word	0x0000f45b
    2560:	0000f471 	.word	0x0000f471
    2564:	00abcdef 	.word	0x00abcdef
    2568:	0000f47c 	.word	0x0000f47c
    256c:	0000f48b 	.word	0x0000f48b
    2570:	0000f499 	.word	0x0000f499
    2574:	0000f4a7 	.word	0x0000f4a7
    2578:	0000f4b3 	.word	0x0000f4b3
    257c:	0000f4bf 	.word	0x0000f4bf
    2580:	0000f4cb 	.word	0x0000f4cb
    2584:	0000f4d8 	.word	0x0000f4d8
    2588:	0000f4e5 	.word	0x0000f4e5
    258c:	0000f4f3 	.word	0x0000f4f3
    2590:	00012bb3 	.word	0x00012bb3
    2594:	0000f500 	.word	0x0000f500
    2598:	0000f50e 	.word	0x0000f50e
    259c:	0000f51a 	.word	0x0000f51a
    25a0:	0000f521 	.word	0x0000f521
    25a4:	0000f528 	.word	0x0000f528
    25a8:	0000f549 	.word	0x0000f549
    25ac:	0000f537 	.word	0x0000f537
    25b0:	0000f530 	.word	0x0000f530
    25b4:	0000f543 	.word	0x0000f543
    25b8:	0000f550 	.word	0x0000f550
    25bc:	0000f556 	.word	0x0000f556
    25c0:	fffff830 	.word	0xfffff830
    25c4:	00012dfa 	.word	0x00012dfa
    25c8:	0000f55c 	.word	0x0000f55c
    25cc:	0000f562 	.word	0x0000f562
    25d0:	0000f569 	.word	0x0000f569
    25d4:	0000f570 	.word	0x0000f570
    25d8:	0000fdf6 	.word	0x0000fdf6
    25dc:	0000f578 	.word	0x0000f578
    25e0:	0000f586 	.word	0x0000f586
    25e4:	0000f589 	.word	0x0000f589
    25e8:	0000f58d 	.word	0x0000f58d
    25ec:	ff439eb2 	.word	0xff439eb2
    25f0:	ffffffff 	.word	0xffffffff
    25f4:	fffffb2e 	.word	0xfffffb2e
    25f8:	00bc614e 	.word	0x00bc614e
    25fc:	ff439eb2 	.word	0xff439eb2
    err = printf("abcde");
    2600:	481d      	ldr	r0, [pc, #116]	; (2678 <printf_tests+0x440>)
    2602:	f00a f941 	bl	c888 <_printf>
    2606:	4601      	mov	r1, r0
    printf(" returned %d\n", err);
    2608:	4620      	mov	r0, r4
    260a:	f00a f93d 	bl	c888 <_printf>
    err = printf("abcdef");
    260e:	481b      	ldr	r0, [pc, #108]	; (267c <printf_tests+0x444>)
    2610:	f00a f93a 	bl	c888 <_printf>
    printf(" returned %d\n", err);

    /* make sure snprintf terminates at the right spot */
    char buf[32];

    memset(buf, 0, sizeof(buf));
    2614:	ae04      	add	r6, sp, #16
    printf(" returned %d\n", err);
    err = printf("abcd");
    printf(" returned %d\n", err);
    err = printf("abcde");
    printf(" returned %d\n", err);
    err = printf("abcdef");
    2616:	4601      	mov	r1, r0

    /* make sure snprintf terminates at the right spot */
    char buf[32];

    memset(buf, 0, sizeof(buf));
    err = sprintf(buf, "0123456789abcdef012345678");
    2618:	4f19      	ldr	r7, [pc, #100]	; (2680 <printf_tests+0x448>)
    err = printf("abcd");
    printf(" returned %d\n", err);
    err = printf("abcde");
    printf(" returned %d\n", err);
    err = printf("abcdef");
    printf(" returned %d\n", err);
    261a:	4620      	mov	r0, r4
    261c:	f00a f934 	bl	c888 <_printf>

    /* make sure snprintf terminates at the right spot */
    char buf[32];

    memset(buf, 0, sizeof(buf));
    2620:	2220      	movs	r2, #32
    2622:	4630      	mov	r0, r6
    2624:	2100      	movs	r1, #0
    2626:	f009 fb17 	bl	bc58 <memset>
    err = sprintf(buf, "0123456789abcdef012345678");
    262a:	4639      	mov	r1, r7
    262c:	4630      	mov	r0, r6
    262e:	f00a f8c6 	bl	c7be <sprintf>

#endif /* DISABLE_DEBUG_OUTPUT */

static inline void hexdump8(const void *ptr, size_t len)
{
    hexdump8_ex(ptr, len, (uint64_t)((addr_t)ptr));
    2632:	2500      	movs	r5, #0
    2634:	4601      	mov	r1, r0
    printf("sprintf returns %d\n", err);
    2636:	4813      	ldr	r0, [pc, #76]	; (2684 <printf_tests+0x44c>)
    2638:	f00a f926 	bl	c888 <_printf>
    263c:	462b      	mov	r3, r5
    263e:	4630      	mov	r0, r6
    2640:	4632      	mov	r2, r6
    2642:	2120      	movs	r1, #32
    2644:	f008 ffac 	bl	b5a0 <hexdump8_ex>
    hexdump8(buf, sizeof(buf));

    memset(buf, 0, sizeof(buf));
    2648:	4630      	mov	r0, r6
    264a:	2100      	movs	r1, #0
    264c:	2220      	movs	r2, #32
    264e:	f009 fb03 	bl	bc58 <memset>
    err = snprintf(buf, 15, "0123456789abcdef012345678");
    2652:	463a      	mov	r2, r7
    2654:	4630      	mov	r0, r6
    2656:	210f      	movs	r1, #15
    2658:	f00a f89a 	bl	c790 <snprintf>
    265c:	4601      	mov	r1, r0
    printf("snprintf returns %d\n", err);
    265e:	480a      	ldr	r0, [pc, #40]	; (2688 <printf_tests+0x450>)
    2660:	f00a f912 	bl	c888 <_printf>
    2664:	4630      	mov	r0, r6
    2666:	2120      	movs	r1, #32
    2668:	4632      	mov	r2, r6
    266a:	462b      	mov	r3, r5
    266c:	f008 ff98 	bl	b5a0 <hexdump8_ex>
    hexdump8(buf, sizeof(buf));
}
    2670:	b00d      	add	sp, #52	; 0x34
    2672:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    2676:	bf00      	nop
    2678:	0000f592 	.word	0x0000f592
    267c:	0000f598 	.word	0x0000f598
    2680:	0000f59f 	.word	0x0000f59f
    2684:	0000f5b9 	.word	0x0000f5b9
    2688:	0000f5cd 	.word	0x0000f5cd
    268c:	f3af 8000 	nop.w

00002690 <printf_tests_float>:

#include "float_test_vec.c"

void printf_tests_float(void)
{
    2690:	b530      	push	{r4, r5, r14}
    printf("floating point printf tests\n");
    2692:	480e      	ldr	r0, [pc, #56]	; (26cc <printf_tests_float+0x3c>)
}

#include "float_test_vec.c"

void printf_tests_float(void)
{
    2694:	b089      	sub	sp, #36	; 0x24
    printf("floating point printf tests\n");
    2696:	f00a f8f7 	bl	c888 <_printf>
    269a:	4d0d      	ldr	r5, [pc, #52]	; (26d0 <printf_tests_float+0x40>)

    for (size_t i = 0; i < float_test_vec_size; i++) {
    269c:	2400      	movs	r4, #0
        PRINT_FLOAT;
    269e:	490d      	ldr	r1, [pc, #52]	; (26d4 <printf_tests_float+0x44>)
    26a0:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
    26a4:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    26a8:	e9cd 2300 	strd	r2, r3, [r13]
    26ac:	e9cd 2302 	strd	r2, r3, [r13, #8]
    26b0:	e9cd 2304 	strd	r2, r3, [r13, #16]
    26b4:	e9cd 2306 	strd	r2, r3, [r13, #24]
    26b8:	e9d1 2300 	ldrd	r2, r3, [r1]
    26bc:	4806      	ldr	r0, [pc, #24]	; (26d8 <printf_tests_float+0x48>)

void printf_tests_float(void)
{
    printf("floating point printf tests\n");

    for (size_t i = 0; i < float_test_vec_size; i++) {
    26be:	3401      	adds	r4, #1
        PRINT_FLOAT;
    26c0:	f00a f8e2 	bl	c888 <_printf>

void printf_tests_float(void)
{
    printf("floating point printf tests\n");

    for (size_t i = 0; i < float_test_vec_size; i++) {
    26c4:	2c25      	cmp	r4, #37	; 0x25
    26c6:	d1ea      	bne.n	269e <printf_tests_float+0xe>
        PRINT_FLOAT;
    }

}
    26c8:	b009      	add	sp, #36	; 0x24
    26ca:	bd30      	pop	{r4, r5, r15}
    26cc:	0000f5e2 	.word	0x0000f5e2
    26d0:	00010630 	.word	0x00010630
    26d4:	00010638 	.word	0x00010638
    26d8:	0000f5ff 	.word	0x0000f5ff

000026dc <tests_init>:
STATIC_COMMAND_END(tests);

#endif

static void tests_init(const struct app_descriptor *app)
{
    26dc:	4770      	bx	r14

000026de <atomic_add>:
    return __arm_in_handler;
#endif
}

static inline int atomic_add(volatile int *ptr, int val)
{
    26de:	b510      	push	{r4, r14}
    26e0:	4603      	mov	r3, r0
    int old;
    int temp;
    int test;

    do {
        __asm__ volatile(
    26e2:	e853 0f00 	ldrex	r0, [r3]
    26e6:	1844      	adds	r4, r0, r1
    26e8:	e843 4200 	strex	r2, r4, [r3]
            "strex	%[test], %[temp], [%[ptr]]\n"
            : [old]"=&r" (old), [temp]"=&r" (temp), [test]"=&r" (test)
            : [ptr]"r" (ptr), [val]"r" (val)
            : "memory", "cc");

    } while (test != 0);
    26ec:	2a00      	cmp	r2, #0
    26ee:	d1f8      	bne.n	26e2 <atomic_add+0x4>

    return old;
#endif
}
    26f0:	bd10      	pop	{r4, r15}

000026f2 <spinner_thread>:

    return 0;
}

static int spinner_thread(void *arg)
{
    26f2:	e7fe      	b.n	26f2 <spinner_thread>

000026f4 <atomic_tester>:

static volatile int atomic;
static volatile int atomic_count;

static int atomic_tester(void *arg)
{
    26f4:	b537      	push	{r0, r1, r2, r4, r5, r14}
    int add = (intptr_t)arg;
    int i;

    const int iter = 10000000;

    TRACEF("add %d, %d iterations\n", add, iter);
    26f6:	4c0f      	ldr	r4, [pc, #60]	; (2734 <atomic_tester+0x40>)

static volatile int atomic;
static volatile int atomic_count;

static int atomic_tester(void *arg)
{
    26f8:	4605      	mov	r5, r0
    int add = (intptr_t)arg;
    int i;

    const int iter = 10000000;

    TRACEF("add %d, %d iterations\n", add, iter);
    26fa:	9400      	str	r4, [sp, #0]
    26fc:	480e      	ldr	r0, [pc, #56]	; (2738 <atomic_tester+0x44>)
    26fe:	490f      	ldr	r1, [pc, #60]	; (273c <atomic_tester+0x48>)
    2700:	f44f 72ce 	mov.w	r2, #412	; 0x19c
    2704:	462b      	mov	r3, r5
    2706:	f00a f8bf 	bl	c888 <_printf>

    for (i=0; i < iter; i++) {
        atomic_add(&atomic, add);
    270a:	480d      	ldr	r0, [pc, #52]	; (2740 <atomic_tester+0x4c>)
    270c:	4629      	mov	r1, r5
    270e:	f7ff ffe6 	bl	26de <atomic_add>

    const int iter = 10000000;

    TRACEF("add %d, %d iterations\n", add, iter);

    for (i=0; i < iter; i++) {
    2712:	3c01      	subs	r4, #1
    2714:	d1f9      	bne.n	270a <atomic_tester+0x16>
        atomic_add(&atomic, add);
    }

    int old = atomic_add(&atomic_count, -1);
    2716:	f04f 31ff 	mov.w	r1, #4294967295
    271a:	480a      	ldr	r0, [pc, #40]	; (2744 <atomic_tester+0x50>)
    271c:	f7ff ffdf 	bl	26de <atomic_add>
    TRACEF("exiting, old count %d\n", old);
    2720:	4906      	ldr	r1, [pc, #24]	; (273c <atomic_tester+0x48>)

    for (i=0; i < iter; i++) {
        atomic_add(&atomic, add);
    }

    int old = atomic_add(&atomic_count, -1);
    2722:	4603      	mov	r3, r0
    TRACEF("exiting, old count %d\n", old);
    2724:	f240 12a3 	movw	r2, #419	; 0x1a3
    2728:	4807      	ldr	r0, [pc, #28]	; (2748 <atomic_tester+0x54>)
    272a:	f00a f8ad 	bl	c888 <_printf>

    return 0;
}
    272e:	4620      	mov	r0, r4
    2730:	b003      	add	sp, #12
    2732:	bd30      	pop	{r4, r5, r15}
    2734:	00989680 	.word	0x00989680
    2738:	0000f735 	.word	0x0000f735
    273c:	00010760 	.word	0x00010760
    2740:	200005dc 	.word	0x200005dc
    2744:	200005bc 	.word	0x200005bc
    2748:	0000f753 	.word	0x0000f753

0000274c <join_tester>:

    printf("done with real-time preempt test, above time stamps should be 1 second apart\n");
}

static int join_tester(void *arg)
{
    274c:	b510      	push	{r4, r14}
    274e:	4604      	mov	r4, r0
    long val = (long)arg;

    printf("\t\tjoin tester starting\n");
    2750:	4806      	ldr	r0, [pc, #24]	; (276c <join_tester+0x20>)
    2752:	f00a f899 	bl	c888 <_printf>
    thread_sleep(500);
    2756:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    275a:	f002 fb3f 	bl	4ddc <thread_sleep>
    printf("\t\tjoin tester exiting with result %ld\n", val);
    275e:	4621      	mov	r1, r4
    2760:	4803      	ldr	r0, [pc, #12]	; (2770 <join_tester+0x24>)
    2762:	f00a f891 	bl	c888 <_printf>

    return val;
}
    2766:	4620      	mov	r0, r4
    2768:	bd10      	pop	{r4, r15}
    276a:	bf00      	nop
    276c:	0000f77d 	.word	0x0000f77d
    2770:	0000f795 	.word	0x0000f795

00002774 <mutex_zerotimeout_thread>:

    return err;
}

static int mutex_zerotimeout_thread(void *arg)
{
    2774:	b510      	push	{r4, r14}
    2776:	4604      	mov	r4, r0
    mutex_t *timeout_mutex = (mutex_t *)arg;
    status_t err;

    printf("mutex_zerotimeout_thread acquiring mutex %p with zero second timeout\n", timeout_mutex);
    2778:	4621      	mov	r1, r4
    277a:	480a      	ldr	r0, [pc, #40]	; (27a4 <mutex_zerotimeout_thread+0x30>)
    277c:	f00a f884 	bl	c888 <_printf>
    err = mutex_acquire_timeout(timeout_mutex, 0);
    2780:	4620      	mov	r0, r4
    2782:	2100      	movs	r1, #0
    2784:	f001 feee 	bl	4564 <mutex_acquire_timeout>
    if (err == ERR_TIMED_OUT)
    2788:	f110 0f0d 	cmn.w	r0, #13
{
    mutex_t *timeout_mutex = (mutex_t *)arg;
    status_t err;

    printf("mutex_zerotimeout_thread acquiring mutex %p with zero second timeout\n", timeout_mutex);
    err = mutex_acquire_timeout(timeout_mutex, 0);
    278c:	4604      	mov	r4, r0
    if (err == ERR_TIMED_OUT)
    278e:	d103      	bne.n	2798 <mutex_zerotimeout_thread+0x24>
        printf("mutex_acquire_timeout returns with TIMEOUT\n");
    2790:	4805      	ldr	r0, [pc, #20]	; (27a8 <mutex_zerotimeout_thread+0x34>)
    2792:	f00a f879 	bl	c888 <_printf>
    2796:	e003      	b.n	27a0 <mutex_zerotimeout_thread+0x2c>
    else
        printf("mutex_acquire_timeout returns %d\n", err);
    2798:	4804      	ldr	r0, [pc, #16]	; (27ac <mutex_zerotimeout_thread+0x38>)
    279a:	4621      	mov	r1, r4
    279c:	f00a f874 	bl	c888 <_printf>

    return err;
}
    27a0:	4620      	mov	r0, r4
    27a2:	bd10      	pop	{r4, r15}
    27a4:	0000f7bc 	.word	0x0000f7bc
    27a8:	0000f802 	.word	0x0000f802
    27ac:	0000f82e 	.word	0x0000f82e

000027b0 <mutex_timeout_thread>:

    return 0;
}

static int mutex_timeout_thread(void *arg)
{
    27b0:	b510      	push	{r4, r14}
    27b2:	4604      	mov	r4, r0
    mutex_t *timeout_mutex = (mutex_t *)arg;
    status_t err;

    printf("mutex_timeout_thread acquiring mutex %p with 1 second timeout\n", timeout_mutex);
    27b4:	4621      	mov	r1, r4
    27b6:	480b      	ldr	r0, [pc, #44]	; (27e4 <mutex_timeout_thread+0x34>)
    27b8:	f00a f866 	bl	c888 <_printf>
    err = mutex_acquire_timeout(timeout_mutex, 1000);
    27bc:	4620      	mov	r0, r4
    27be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    27c2:	f001 fecf 	bl	4564 <mutex_acquire_timeout>
    if (err == ERR_TIMED_OUT)
    27c6:	f110 0f0d 	cmn.w	r0, #13
{
    mutex_t *timeout_mutex = (mutex_t *)arg;
    status_t err;

    printf("mutex_timeout_thread acquiring mutex %p with 1 second timeout\n", timeout_mutex);
    err = mutex_acquire_timeout(timeout_mutex, 1000);
    27ca:	4604      	mov	r4, r0
    if (err == ERR_TIMED_OUT)
    27cc:	d103      	bne.n	27d6 <mutex_timeout_thread+0x26>
        printf("mutex_acquire_timeout returns with TIMEOUT\n");
    27ce:	4806      	ldr	r0, [pc, #24]	; (27e8 <mutex_timeout_thread+0x38>)
    27d0:	f00a f85a 	bl	c888 <_printf>
    27d4:	e003      	b.n	27de <mutex_timeout_thread+0x2e>
    else
        printf("mutex_acquire_timeout returns %d\n", err);
    27d6:	4805      	ldr	r0, [pc, #20]	; (27ec <mutex_timeout_thread+0x3c>)
    27d8:	4621      	mov	r1, r4
    27da:	f00a f855 	bl	c888 <_printf>

    return err;
}
    27de:	4620      	mov	r0, r4
    27e0:	bd10      	pop	{r4, r15}
    27e2:	bf00      	nop
    27e4:	0000f850 	.word	0x0000f850
    27e8:	0000f802 	.word	0x0000f802
    27ec:	0000f82e 	.word	0x0000f82e

000027f0 <mutex_acquire>:
status_t mutex_acquire_timeout(mutex_t *, lk_time_t); /* try to acquire the mutex with a timeout value */
status_t mutex_release(mutex_t *);

static inline status_t mutex_acquire(mutex_t *m)
{
    return mutex_acquire_timeout(m, INFINITE_TIME);
    27f0:	f04f 31ff 	mov.w	r1, #4294967295
    27f4:	f001 beb6 	b.w	4564 <mutex_acquire_timeout>

000027f8 <event_wait>:
    return e->magic == EVENT_MAGIC;
}

static inline status_t event_wait(event_t *e)
{
    return event_wait_timeout(e, INFINITE_TIME);
    27f8:	f04f 31ff 	mov.w	r1, #4294967295
    27fc:	f001 bdb0 	b.w	4360 <event_wait_timeout>

00002800 <event_signaler>:
}

static event_t e;

static int event_signaler(void *arg)
{
    2800:	b508      	push	{r3, r14}
    printf("event signaler pausing\n");
    2802:	480a      	ldr	r0, [pc, #40]	; (282c <event_signaler+0x2c>)
    2804:	f00a f840 	bl	c888 <_printf>
    thread_sleep(1000);
    2808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    280c:	f002 fae6 	bl	4ddc <thread_sleep>

//  for (;;) {
    printf("signaling event\n");
    2810:	4807      	ldr	r0, [pc, #28]	; (2830 <event_signaler+0x30>)
    2812:	f00a f839 	bl	c888 <_printf>
    event_signal(&e, true);
    2816:	2101      	movs	r1, #1
    2818:	4806      	ldr	r0, [pc, #24]	; (2834 <event_signaler+0x34>)
    281a:	f001 fddb 	bl	43d4 <event_signal>
    printf("done signaling event\n");
    281e:	4806      	ldr	r0, [pc, #24]	; (2838 <event_signaler+0x38>)
    2820:	f00a f832 	bl	c888 <_printf>
    thread_yield();
    2824:	f002 f9e8 	bl	4bf8 <thread_yield>
//  }

    return 0;
}
    2828:	2000      	movs	r0, #0
    282a:	bd08      	pop	{r3, r15}
    282c:	0000f88f 	.word	0x0000f88f
    2830:	0000f8ac 	.word	0x0000f8ac
    2834:	20000600 	.word	0x20000600
    2838:	0000f8a7 	.word	0x0000f8a7

0000283c <context_switch_tester>:

static event_t context_switch_event;
static event_t context_switch_done_event;

static int context_switch_tester(void *arg)
{
    283c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    283e:	4606      	mov	r6, r0
    int i;
    uint total_count = 0;
    const int iter = 100000;
    int thread_count = (intptr_t)arg;

    event_wait(&context_switch_event);
    2840:	4810      	ldr	r0, [pc, #64]	; (2884 <context_switch_tester+0x48>)
    2842:	f7ff ffd9 	bl	27f8 <event_wait>
static inline uint32_t arch_cycle_count(void)
{
#if ARM_ISA_ARMV7M
#if ENABLE_CYCLE_COUNTER
#define DWT_CYCCNT (0xE0001004)
    return *REG32(DWT_CYCCNT);
    2846:	4b10      	ldr	r3, [pc, #64]	; (2888 <context_switch_tester+0x4c>)
    2848:	4c10      	ldr	r4, [pc, #64]	; (288c <context_switch_tester+0x50>)
    284a:	681d      	ldr	r5, [r3, #0]
    284c:	461f      	mov	r7, r3

    uint count = arch_cycle_count();
    for (i = 0; i < iter; i++) {
        thread_yield();
    284e:	f002 f9d3 	bl	4bf8 <thread_yield>
    int thread_count = (intptr_t)arg;

    event_wait(&context_switch_event);

    uint count = arch_cycle_count();
    for (i = 0; i < iter; i++) {
    2852:	3c01      	subs	r4, #1
    2854:	d1fb      	bne.n	284e <context_switch_tester+0x12>
    2856:	683b      	ldr	r3, [r7, #0]
        thread_yield();
    }
    total_count += arch_cycle_count() - count;
    thread_sleep(1000);
    2858:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

    uint count = arch_cycle_count();
    for (i = 0; i < iter; i++) {
        thread_yield();
    }
    total_count += arch_cycle_count() - count;
    285c:	1b5d      	subs	r5, r3, r5
    thread_sleep(1000);
    285e:	f002 fabd 	bl	4ddc <thread_sleep>
    printf("took %u cycles to yield %d times, %u per yield, %u per yield per thread\n",
    2862:	4a0a      	ldr	r2, [pc, #40]	; (288c <context_switch_tester+0x50>)
    2864:	4629      	mov	r1, r5
    2866:	fbb5 f3f2 	udiv	r3, r5, r2
    286a:	fbb3 f6f6 	udiv	r6, r3, r6
    286e:	9600      	str	r6, [sp, #0]
    2870:	4807      	ldr	r0, [pc, #28]	; (2890 <context_switch_tester+0x54>)
    2872:	f00a f809 	bl	c888 <_printf>
           total_count, iter, total_count / iter, total_count / iter / thread_count);

    event_signal(&context_switch_done_event, true);
    2876:	2101      	movs	r1, #1
    2878:	4806      	ldr	r0, [pc, #24]	; (2894 <context_switch_tester+0x58>)
    287a:	f001 fdab 	bl	43d4 <event_signal>

    return 0;
}
    287e:	4620      	mov	r0, r4
    2880:	b003      	add	sp, #12
    2882:	bdf0      	pop	{r4, r5, r6, r7, r15}
    2884:	2000057c 	.word	0x2000057c
    2888:	e0001004 	.word	0xe0001004
    288c:	000186a0 	.word	0x000186a0
    2890:	0000f8bd 	.word	0x0000f8bd
    2894:	2000059c 	.word	0x2000059c

00002898 <semaphore_producer>:
static int sem_threads = 0;
static mutex_t sem_test_mutex;

static int semaphore_producer(void *unused)
{
    printf("semaphore producer %p starting up, running for %d iterations\n", get_current_thread(), sem_total_its);
    2898:	4b08      	ldr	r3, [pc, #32]	; (28bc <semaphore_producer+0x24>)
static int sem_remaining_its = 0;
static int sem_threads = 0;
static mutex_t sem_test_mutex;

static int semaphore_producer(void *unused)
{
    289a:	b510      	push	{r4, r14}
    printf("semaphore producer %p starting up, running for %d iterations\n", get_current_thread(), sem_total_its);
    289c:	4808      	ldr	r0, [pc, #32]	; (28c0 <semaphore_producer+0x28>)
    289e:	6819      	ldr	r1, [r3, #0]
    28a0:	f242 7210 	movw	r2, #10000	; 0x2710
    28a4:	f009 fff0 	bl	c888 <_printf>
    28a8:	f242 7410 	movw	r4, #10000	; 0x2710

    for (int x = 0; x < sem_total_its; x++) {
        sem_post(&sem, true);
    28ac:	4805      	ldr	r0, [pc, #20]	; (28c4 <semaphore_producer+0x2c>)
    28ae:	2101      	movs	r1, #1
    28b0:	f003 f8ec 	bl	5a8c <sem_post>

static int semaphore_producer(void *unused)
{
    printf("semaphore producer %p starting up, running for %d iterations\n", get_current_thread(), sem_total_its);

    for (int x = 0; x < sem_total_its; x++) {
    28b4:	3c01      	subs	r4, #1
    28b6:	d1f9      	bne.n	28ac <semaphore_producer+0x14>
        sem_post(&sem, true);
    }

    return 0;
}
    28b8:	4620      	mov	r0, r4
    28ba:	bd10      	pop	{r4, r15}
    28bc:	20000554 	.word	0x20000554
    28c0:	0000f906 	.word	0x0000f906
    28c4:	200005e0 	.word	0x200005e0

000028c8 <semaphore_consumer>:

static int semaphore_consumer(void *unused)
{
    28c8:	b570      	push	{r4, r5, r6, r14}
    unsigned int iterations = 0;

    mutex_acquire(&sem_test_mutex);
    if (sem_remaining_its >= sem_thread_max_its) {
    28ca:	4d17      	ldr	r5, [pc, #92]	; (2928 <semaphore_consumer+0x60>)

static int semaphore_consumer(void *unused)
{
    unsigned int iterations = 0;

    mutex_acquire(&sem_test_mutex);
    28cc:	4817      	ldr	r0, [pc, #92]	; (292c <semaphore_consumer+0x64>)
    28ce:	f7ff ff8f 	bl	27f0 <mutex_acquire>
    if (sem_remaining_its >= sem_thread_max_its) {
    28d2:	682c      	ldr	r4, [r5, #0]
    28d4:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
    28d8:	db07      	blt.n	28ea <semaphore_consumer+0x22>
        iterations = rand();
    28da:	f009 ff7d 	bl	c7d8 <rand>
        iterations %= sem_thread_max_its;
    28de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    28e2:	fbb0 f4f3 	udiv	r4, r0, r3
    28e6:	fb04 0413 	mls	r4, r4, r3, r0
    } else {
        iterations = sem_remaining_its;
    }
    sem_remaining_its -= iterations;
    28ea:	682b      	ldr	r3, [r5, #0]
/* use a global pointer to store the current_thread */
extern struct thread *_current_thread;

static inline struct thread *get_current_thread(void)
{
    return _current_thread;
    28ec:	4e10      	ldr	r6, [pc, #64]	; (2930 <semaphore_consumer+0x68>)
    28ee:	1b1b      	subs	r3, r3, r4
    mutex_release(&sem_test_mutex);
    28f0:	480e      	ldr	r0, [pc, #56]	; (292c <semaphore_consumer+0x64>)
        iterations = rand();
        iterations %= sem_thread_max_its;
    } else {
        iterations = sem_remaining_its;
    }
    sem_remaining_its -= iterations;
    28f2:	602b      	str	r3, [r5, #0]
    mutex_release(&sem_test_mutex);
    28f4:	f001 fe86 	bl	4604 <mutex_release>

    printf("semaphore consumer %p starting up, running for %u iterations\n", get_current_thread(), iterations);
    28f8:	480e      	ldr	r0, [pc, #56]	; (2934 <semaphore_consumer+0x6c>)
    28fa:	6831      	ldr	r1, [r6, #0]
    28fc:	4622      	mov	r2, r4
    28fe:	f009 ffc3 	bl	c888 <_printf>
    for (unsigned int x = 0; x < iterations; x++)
    2902:	2500      	movs	r5, #0
    2904:	42a5      	cmp	r5, r4
    2906:	d004      	beq.n	2912 <semaphore_consumer+0x4a>
        sem_wait(&sem);
    2908:	480b      	ldr	r0, [pc, #44]	; (2938 <semaphore_consumer+0x70>)
    290a:	f003 f8e1 	bl	5ad0 <sem_wait>
    }
    sem_remaining_its -= iterations;
    mutex_release(&sem_test_mutex);

    printf("semaphore consumer %p starting up, running for %u iterations\n", get_current_thread(), iterations);
    for (unsigned int x = 0; x < iterations; x++)
    290e:	3501      	adds	r5, #1
    2910:	e7f8      	b.n	2904 <semaphore_consumer+0x3c>
        sem_wait(&sem);
    printf("semaphore consumer %p done\n", get_current_thread());
    2912:	6831      	ldr	r1, [r6, #0]
    2914:	4809      	ldr	r0, [pc, #36]	; (293c <semaphore_consumer+0x74>)
    2916:	f009 ffb7 	bl	c888 <_printf>
    atomic_add(&sem_threads, -1);
    291a:	f04f 31ff 	mov.w	r1, #4294967295
    291e:	4808      	ldr	r0, [pc, #32]	; (2940 <semaphore_consumer+0x78>)
    2920:	f7ff fedd 	bl	26de <atomic_add>
    return 0;
}
    2924:	2000      	movs	r0, #0
    2926:	bd70      	pop	{r4, r5, r6, r15}
    2928:	200005fc 	.word	0x200005fc
    292c:	200005c0 	.word	0x200005c0
    2930:	20000554 	.word	0x20000554
    2934:	0000f944 	.word	0x0000f944
    2938:	200005e0 	.word	0x200005e0
    293c:	0000f982 	.word	0x0000f982
    2940:	200005b8 	.word	0x200005b8

00002944 <preempt_tester>:
}

static volatile int preempt_count;

static int preempt_tester(void *arg)
{
    2944:	b508      	push	{r3, r14}
    spin(1000000);
    2946:	4808      	ldr	r0, [pc, #32]	; (2968 <preempt_tester+0x24>)
    2948:	f008 fda0 	bl	b48c <spin>

    printf("exiting ts %lld\n", current_time_hires());
    294c:	f001 faa6 	bl	3e9c <current_time_hires>
    2950:	4602      	mov	r2, r0
    2952:	460b      	mov	r3, r1
    2954:	4805      	ldr	r0, [pc, #20]	; (296c <preempt_tester+0x28>)
    2956:	f009 ff97 	bl	c888 <_printf>

    atomic_add(&preempt_count, -1);
    295a:	f04f 31ff 	mov.w	r1, #4294967295
    295e:	4804      	ldr	r0, [pc, #16]	; (2970 <preempt_tester+0x2c>)
    2960:	f7ff febd 	bl	26de <atomic_add>
#undef COUNT

    return 0;
}
    2964:	2000      	movs	r0, #0
    2966:	bd08      	pop	{r3, r15}
    2968:	000f4240 	.word	0x000f4240
    296c:	0000f99e 	.word	0x0000f99e
    2970:	20000598 	.word	0x20000598

00002974 <join_tester_server>:

    return val;
}

static int join_tester_server(void *arg)
{
    2974:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    int ret;
    status_t err;
    thread_t *t;

    printf("\ttesting thread_join/thread_detach\n");
    2978:	484f      	ldr	r0, [pc, #316]	; (2ab8 <join_tester_server+0x144>)

    return val;
}

static int join_tester_server(void *arg)
{
    297a:	b087      	sub	sp, #28
    thread_t *t;

    printf("\ttesting thread_join/thread_detach\n");

    printf("\tcreating and waiting on thread to exit with thread_join\n");
    t = thread_create("join tester", &join_tester, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    297c:	4d4f      	ldr	r5, [pc, #316]	; (2abc <join_tester_server+0x148>)
    297e:	4c50      	ldr	r4, [pc, #320]	; (2ac0 <join_tester_server+0x14c>)
{
    int ret;
    status_t err;
    thread_t *t;

    printf("\ttesting thread_join/thread_detach\n");
    2980:	f009 ff82 	bl	c888 <_printf>

    printf("\tcreating and waiting on thread to exit with thread_join\n");
    t = thread_create("join tester", &join_tester, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2984:	f44f 6680 	mov.w	r6, #1024	; 0x400
    status_t err;
    thread_t *t;

    printf("\ttesting thread_join/thread_detach\n");

    printf("\tcreating and waiting on thread to exit with thread_join\n");
    2988:	484e      	ldr	r0, [pc, #312]	; (2ac4 <join_tester_server+0x150>)
    298a:	f009 ff7d 	bl	c888 <_printf>
    t = thread_create("join tester", &join_tester, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    298e:	4621      	mov	r1, r4
    2990:	2201      	movs	r2, #1
    2992:	2310      	movs	r3, #16
    2994:	9600      	str	r6, [sp, #0]
    2996:	4628      	mov	r0, r5
    2998:	f002 f8f0 	bl	4b7c <thread_create>
    thread_resume(t);
    ret = 99;
    printf("\tthread magic is 0x%x (should be 0x%x)\n", t->magic, THREAD_MAGIC);
    299c:	f8df 913c 	ldr.w	r9, [r15, #316]	; 2adc <join_tester_server+0x168>
    29a0:	f8df 813c 	ldr.w	r8, [r15, #316]	; 2ae0 <join_tester_server+0x16c>
    thread_t *t;

    printf("\ttesting thread_join/thread_detach\n");

    printf("\tcreating and waiting on thread to exit with thread_join\n");
    t = thread_create("join tester", &join_tester, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    29a4:	4683      	mov	r11, r0
    thread_resume(t);
    ret = 99;
    29a6:	af06      	add	r7, sp, #24

    printf("\ttesting thread_join/thread_detach\n");

    printf("\tcreating and waiting on thread to exit with thread_join\n");
    t = thread_create("join tester", &join_tester, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_resume(t);
    29a8:	f002 f970 	bl	4c8c <thread_resume>
    ret = 99;
    29ac:	2363      	movs	r3, #99	; 0x63
    29ae:	f847 3d04 	str.w	r3, [r7, #-4]!
    printf("\tthread magic is 0x%x (should be 0x%x)\n", t->magic, THREAD_MAGIC);
    29b2:	f8db 1000 	ldr.w	r1, [r11]
    29b6:	4642      	mov	r2, r8
    29b8:	4648      	mov	r0, r9
    29ba:	f009 ff65 	bl	c888 <_printf>
    err = thread_join(t, &ret, INFINITE_TIME);
    29be:	4639      	mov	r1, r7
    29c0:	4658      	mov	r0, r11
    29c2:	f04f 32ff 	mov.w	r2, #4294967295
    29c6:	f002 fbbb 	bl	5140 <thread_join>
    printf("\tthread_join returns err %d, retval %d\n", err, ret);
    29ca:	f8df c118 	ldr.w	r12, [r15, #280]	; 2ae4 <join_tester_server+0x170>
    printf("\tthread magic is 0x%x (should be 0)\n", t->magic);
    29ce:	f8df a118 	ldr.w	r10, [r15, #280]	; 2ae8 <join_tester_server+0x174>
    t = thread_create("join tester", &join_tester, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_resume(t);
    ret = 99;
    printf("\tthread magic is 0x%x (should be 0x%x)\n", t->magic, THREAD_MAGIC);
    err = thread_join(t, &ret, INFINITE_TIME);
    printf("\tthread_join returns err %d, retval %d\n", err, ret);
    29d2:	9a05      	ldr	r2, [sp, #20]
    printf("\tcreating and waiting on thread to exit with thread_join\n");
    t = thread_create("join tester", &join_tester, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_resume(t);
    ret = 99;
    printf("\tthread magic is 0x%x (should be 0x%x)\n", t->magic, THREAD_MAGIC);
    err = thread_join(t, &ret, INFINITE_TIME);
    29d4:	4601      	mov	r1, r0
    printf("\tthread_join returns err %d, retval %d\n", err, ret);
    29d6:	4660      	mov	r0, r12
    29d8:	f8cd c00c 	str.w	r12, [r13, #12]
    29dc:	f009 ff54 	bl	c888 <_printf>
    printf("\tthread magic is 0x%x (should be 0)\n", t->magic);
    29e0:	f8db 1000 	ldr.w	r1, [r11]
    29e4:	4650      	mov	r0, r10
    29e6:	f009 ff4f 	bl	c888 <_printf>

    printf("\tcreating and waiting on thread to exit with thread_join, after thread has exited\n");
    29ea:	4837      	ldr	r0, [pc, #220]	; (2ac8 <join_tester_server+0x154>)
    29ec:	f009 ff4c 	bl	c888 <_printf>
    t = thread_create("join tester", &join_tester, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    29f0:	4621      	mov	r1, r4
    29f2:	2202      	movs	r2, #2
    29f4:	2310      	movs	r3, #16
    29f6:	9600      	str	r6, [sp, #0]
    29f8:	4628      	mov	r0, r5
    29fa:	f002 f8bf 	bl	4b7c <thread_create>
    29fe:	4683      	mov	r11, r0
    thread_resume(t);
    2a00:	f002 f944 	bl	4c8c <thread_resume>
    thread_sleep(1000); // wait until thread is already dead
    2a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2a08:	f002 f9e8 	bl	4ddc <thread_sleep>
    ret = 99;
    2a0c:	2363      	movs	r3, #99	; 0x63
    printf("\tthread magic is 0x%x (should be 0x%x)\n", t->magic, THREAD_MAGIC);
    2a0e:	f8db 1000 	ldr.w	r1, [r11]
    2a12:	4642      	mov	r2, r8
    2a14:	4648      	mov	r0, r9

    printf("\tcreating and waiting on thread to exit with thread_join, after thread has exited\n");
    t = thread_create("join tester", &join_tester, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_resume(t);
    thread_sleep(1000); // wait until thread is already dead
    ret = 99;
    2a16:	9305      	str	r3, [sp, #20]
    printf("\tthread magic is 0x%x (should be 0x%x)\n", t->magic, THREAD_MAGIC);
    2a18:	f009 ff36 	bl	c888 <_printf>
    err = thread_join(t, &ret, INFINITE_TIME);
    2a1c:	4639      	mov	r1, r7
    2a1e:	4658      	mov	r0, r11
    2a20:	f04f 32ff 	mov.w	r2, #4294967295
    2a24:	f002 fb8c 	bl	5140 <thread_join>
    printf("\tthread_join returns err %d, retval %d\n", err, ret);
    2a28:	f8dd c00c 	ldr.w	r12, [r13, #12]
    2a2c:	9a05      	ldr	r2, [sp, #20]
    t = thread_create("join tester", &join_tester, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_resume(t);
    thread_sleep(1000); // wait until thread is already dead
    ret = 99;
    printf("\tthread magic is 0x%x (should be 0x%x)\n", t->magic, THREAD_MAGIC);
    err = thread_join(t, &ret, INFINITE_TIME);
    2a2e:	4601      	mov	r1, r0
    printf("\tthread_join returns err %d, retval %d\n", err, ret);
    2a30:	4660      	mov	r0, r12
    2a32:	f009 ff29 	bl	c888 <_printf>
    printf("\tthread magic is 0x%x (should be 0)\n", t->magic);
    2a36:	f8db 1000 	ldr.w	r1, [r11]
    2a3a:	4650      	mov	r0, r10
    2a3c:	f009 ff24 	bl	c888 <_printf>

    printf("\tcreating a thread, detaching it, let it exit on its own\n");
    2a40:	4822      	ldr	r0, [pc, #136]	; (2acc <join_tester_server+0x158>)
    2a42:	f009 ff21 	bl	c888 <_printf>
    t = thread_create("join tester", &join_tester, (void *)3, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2a46:	2203      	movs	r2, #3
    2a48:	2310      	movs	r3, #16
    2a4a:	4621      	mov	r1, r4
    2a4c:	9600      	str	r6, [sp, #0]
    2a4e:	4628      	mov	r0, r5
    2a50:	f002 f894 	bl	4b7c <thread_create>
    2a54:	4607      	mov	r7, r0
    thread_detach(t);
    2a56:	f002 fcfb 	bl	5450 <thread_detach>
    thread_resume(t);
    2a5a:	4638      	mov	r0, r7
    2a5c:	f002 f916 	bl	4c8c <thread_resume>
    thread_sleep(1000); // wait until the thread should be dead
    2a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2a64:	f002 f9ba 	bl	4ddc <thread_sleep>
    printf("\tthread magic is 0x%x (should be 0)\n", t->magic);
    2a68:	6839      	ldr	r1, [r7, #0]
    2a6a:	4650      	mov	r0, r10
    2a6c:	f009 ff0c 	bl	c888 <_printf>

    printf("\tcreating a thread, detaching it after it should be dead\n");
    2a70:	4817      	ldr	r0, [pc, #92]	; (2ad0 <join_tester_server+0x15c>)
    2a72:	f009 ff09 	bl	c888 <_printf>
    t = thread_create("join tester", &join_tester, (void *)4, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2a76:	2310      	movs	r3, #16
    2a78:	4621      	mov	r1, r4
    2a7a:	2204      	movs	r2, #4
    2a7c:	9600      	str	r6, [sp, #0]
    2a7e:	4628      	mov	r0, r5
    2a80:	f002 f87c 	bl	4b7c <thread_create>
    2a84:	4604      	mov	r4, r0
    thread_resume(t);
    2a86:	f002 f901 	bl	4c8c <thread_resume>
    thread_sleep(1000); // wait until thread is already dead
    2a8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2a8e:	f002 f9a5 	bl	4ddc <thread_sleep>
    printf("\tthread magic is 0x%x (should be 0x%x)\n", t->magic, THREAD_MAGIC);
    2a92:	4642      	mov	r2, r8
    2a94:	6821      	ldr	r1, [r4, #0]
    2a96:	4648      	mov	r0, r9
    2a98:	f009 fef6 	bl	c888 <_printf>
    thread_detach(t);
    2a9c:	4620      	mov	r0, r4
    2a9e:	f002 fcd7 	bl	5450 <thread_detach>
    printf("\tthread magic is 0x%x\n", t->magic);
    2aa2:	6821      	ldr	r1, [r4, #0]
    2aa4:	480b      	ldr	r0, [pc, #44]	; (2ad4 <join_tester_server+0x160>)
    2aa6:	f009 feef 	bl	c888 <_printf>

    printf("\texiting join tester server\n");
    2aaa:	480b      	ldr	r0, [pc, #44]	; (2ad8 <join_tester_server+0x164>)
    2aac:	f009 feec 	bl	c888 <_printf>

    return 55;
}
    2ab0:	2037      	movs	r0, #55	; 0x37
    2ab2:	b007      	add	sp, #28
    2ab4:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    2ab8:	0000f9af 	.word	0x0000f9af
    2abc:	0000fa0d 	.word	0x0000fa0d
    2ac0:	0000274d 	.word	0x0000274d
    2ac4:	0000f9d3 	.word	0x0000f9d3
    2ac8:	0000fa8e 	.word	0x0000fa8e
    2acc:	0000fae1 	.word	0x0000fae1
    2ad0:	0000fb1b 	.word	0x0000fb1b
    2ad4:	0000fb55 	.word	0x0000fb55
    2ad8:	0000fb6c 	.word	0x0000fb6c
    2adc:	0000fa19 	.word	0x0000fa19
    2ae0:	74687264 	.word	0x74687264
    2ae4:	0000fa41 	.word	0x0000fa41
    2ae8:	0000fa69 	.word	0x0000fa69

00002aec <mutex_thread>:

    return 0;
}

static int mutex_thread(void *arg)
{
    2aec:	e92d 43f8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r14}
    2af0:	4d11      	ldr	r5, [pc, #68]	; (2b38 <mutex_thread+0x4c>)
    2af2:	4606      	mov	r6, r0

    static volatile int shared = 0;

    mutex_t *m = (mutex_t *)arg;

    printf("mutex tester thread %p starting up, will go for %d iterations\n", get_current_thread(), iterations);
    2af4:	6829      	ldr	r1, [r5, #0]
    2af6:	4811      	ldr	r0, [pc, #68]	; (2b3c <mutex_thread+0x50>)
    2af8:	4a11      	ldr	r2, [pc, #68]	; (2b40 <mutex_thread+0x54>)
    2afa:	46f1      	mov	r9, r14
    2afc:	f009 fec4 	bl	c888 <_printf>
    2b00:	4c0f      	ldr	r4, [pc, #60]	; (2b40 <mutex_thread+0x54>)
    2b02:	46a8      	mov	r8, r5

    for (i = 0; i < iterations; i++) {
        mutex_acquire(m);

        if (shared != 0)
    2b04:	4d0f      	ldr	r5, [pc, #60]	; (2b44 <mutex_thread+0x58>)
    mutex_t *m = (mutex_t *)arg;

    printf("mutex tester thread %p starting up, will go for %d iterations\n", get_current_thread(), iterations);

    for (i = 0; i < iterations; i++) {
        mutex_acquire(m);
    2b06:	4630      	mov	r0, r6
    2b08:	f7ff fe72 	bl	27f0 <mutex_acquire>

        if (shared != 0)
    2b0c:	682f      	ldr	r7, [r5, #0]
    2b0e:	b11f      	cbz	r7, 2b18 <mutex_thread+0x2c>
            panic("someone else has messed with the shared data\n");
    2b10:	4648      	mov	r0, r9
    2b12:	490d      	ldr	r1, [pc, #52]	; (2b48 <mutex_thread+0x5c>)
    2b14:	f008 fcce 	bl	b4b4 <_panic>

        shared = (intptr_t)get_current_thread();
    2b18:	f8d8 3000 	ldr.w	r3, [r8]
    2b1c:	602b      	str	r3, [r5, #0]
        thread_yield();
    2b1e:	f002 f86b 	bl	4bf8 <thread_yield>
        shared = 0;

        mutex_release(m);
    2b22:	4630      	mov	r0, r6
        if (shared != 0)
            panic("someone else has messed with the shared data\n");

        shared = (intptr_t)get_current_thread();
        thread_yield();
        shared = 0;
    2b24:	602f      	str	r7, [r5, #0]

        mutex_release(m);
    2b26:	f001 fd6d 	bl	4604 <mutex_release>
        thread_yield();
    2b2a:	f002 f865 	bl	4bf8 <thread_yield>

    mutex_t *m = (mutex_t *)arg;

    printf("mutex tester thread %p starting up, will go for %d iterations\n", get_current_thread(), iterations);

    for (i = 0; i < iterations; i++) {
    2b2e:	3c01      	subs	r4, #1
    2b30:	d1e8      	bne.n	2b04 <mutex_thread+0x18>
        mutex_release(m);
        thread_yield();
    }

    return 0;
}
    2b32:	4620      	mov	r0, r4
    2b34:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}
    2b38:	20000554 	.word	0x20000554
    2b3c:	0000fb89 	.word	0x0000fb89
    2b40:	000f4240 	.word	0x000f4240
    2b44:	200005f8 	.word	0x200005f8
    2b48:	0000fbc8 	.word	0x0000fbc8

00002b4c <event_waiter>:

    return 0;
}

static int event_waiter(void *arg)
{
    2b4c:	b538      	push	{r3, r4, r5, r14}
    2b4e:	4604      	mov	r4, r0
    int count = (intptr_t)arg;

    printf("event waiter starting\n");
    2b50:	480f      	ldr	r0, [pc, #60]	; (2b90 <event_waiter+0x44>)
    2b52:	f009 fe99 	bl	c888 <_printf>

    while (count > 0) {
    2b56:	2c00      	cmp	r4, #0
    2b58:	dd18      	ble.n	2b8c <event_waiter+0x40>
    2b5a:	4d0e      	ldr	r5, [pc, #56]	; (2b94 <event_waiter+0x48>)
        printf("%p: waiting on event...\n", get_current_thread());
    2b5c:	480e      	ldr	r0, [pc, #56]	; (2b98 <event_waiter+0x4c>)
    2b5e:	6829      	ldr	r1, [r5, #0]
    2b60:	f009 fe92 	bl	c888 <_printf>
        if (event_wait(&e) < 0) {
    2b64:	480d      	ldr	r0, [pc, #52]	; (2b9c <event_waiter+0x50>)
    2b66:	f7ff fe47 	bl	27f8 <event_wait>
    2b6a:	2800      	cmp	r0, #0
    2b6c:	da06      	bge.n	2b7c <event_waiter+0x30>
            printf("%p: event_wait() returned error\n", get_current_thread());
    2b6e:	6829      	ldr	r1, [r5, #0]
    2b70:	480b      	ldr	r0, [pc, #44]	; (2ba0 <event_waiter+0x54>)
    2b72:	f009 fe89 	bl	c888 <_printf>
    2b76:	f04f 30ff 	mov.w	r0, #4294967295
    2b7a:	bd38      	pop	{r3, r4, r5, r15}
            return -1;
        }
        printf("%p: done waiting on event...\n", get_current_thread());
    2b7c:	6829      	ldr	r1, [r5, #0]
    2b7e:	4809      	ldr	r0, [pc, #36]	; (2ba4 <event_waiter+0x58>)
    2b80:	f009 fe82 	bl	c888 <_printf>
        thread_yield();
        count--;
    2b84:	3c01      	subs	r4, #1
        if (event_wait(&e) < 0) {
            printf("%p: event_wait() returned error\n", get_current_thread());
            return -1;
        }
        printf("%p: done waiting on event...\n", get_current_thread());
        thread_yield();
    2b86:	f002 f837 	bl	4bf8 <thread_yield>
    2b8a:	e7e4      	b.n	2b56 <event_waiter+0xa>
        count--;
    }

    return 0;
    2b8c:	2000      	movs	r0, #0
}
    2b8e:	bd38      	pop	{r3, r4, r5, r15}
    2b90:	0000fbf6 	.word	0x0000fbf6
    2b94:	20000554 	.word	0x20000554
    2b98:	0000fc0d 	.word	0x0000fc0d
    2b9c:	20000600 	.word	0x20000600
    2ba0:	0000fc26 	.word	0x0000fc26
    2ba4:	0000fc47 	.word	0x0000fc47

00002ba8 <arch_interrupt_save.constprop.5>:
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    2ba8:	f3ef 8310 	mrs	r3, PRIMASK

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    if ((flags & SPIN_LOCK_FLAG_IRQ) && !arch_ints_disabled()) {
    2bac:	07db      	lsls	r3, r3, #31
    2bae:	d402      	bmi.n	2bb6 <arch_interrupt_save.constprop.5+0xe>
    __asm__ volatile("cpsie i");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
    2bb0:	b672      	cpsid	i
        state |= SPIN_LOCK_STATE_RESTORE_IRQ;
    2bb2:	2301      	movs	r3, #1
    2bb4:	e000      	b.n	2bb8 <arch_interrupt_save.constprop.5+0x10>
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    2bb6:	2300      	movs	r3, #0
    }
    if ((flags & SPIN_LOCK_FLAG_FIQ) && !arch_fiqs_disabled()) {
        state |= SPIN_LOCK_STATE_RESTORE_FIQ;
        arch_disable_fiqs();
    }
    *statep = state;
    2bb8:	6003      	str	r3, [r0, #0]
    2bba:	4770      	bx	r14

00002bbc <mutex_test>:

    return err;
}

int mutex_test(void)
{
    2bbc:	b530      	push	{r4, r5, r14}
    static mutex_t imutex = MUTEX_INITIAL_VALUE(imutex);
    printf("preinitialized mutex:\n");
    2bbe:	483b      	ldr	r0, [pc, #236]	; (2cac <mutex_test+0xf0>)

    return err;
}

int mutex_test(void)
{
    2bc0:	b097      	sub	sp, #92	; 0x5c
    static mutex_t imutex = MUTEX_INITIAL_VALUE(imutex);
    printf("preinitialized mutex:\n");
    2bc2:	f009 fe61 	bl	c888 <_printf>
    hexdump(&imutex, sizeof(imutex));
    2bc6:	483a      	ldr	r0, [pc, #232]	; (2cb0 <mutex_test+0xf4>)
    2bc8:	211c      	movs	r1, #28
    2bca:	f008 fc87 	bl	b4dc <hexdump>

    mutex_t m;
    mutex_init(&m);
    2bce:	a808      	add	r0, sp, #32
    2bd0:	f001 fc76 	bl	44c0 <mutex_init>
    2bd4:	2400      	movs	r4, #0

    thread_t *threads[5];

    for (uint i=0; i < countof(threads); i++) {
        threads[i] = thread_create("mutex tester", &mutex_thread, &m, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2bda:	9300      	str	r3, [sp, #0]
    2bdc:	4935      	ldr	r1, [pc, #212]	; (2cb4 <mutex_test+0xf8>)
    2bde:	aa08      	add	r2, sp, #32
    2be0:	2310      	movs	r3, #16
    2be2:	4835      	ldr	r0, [pc, #212]	; (2cb8 <mutex_test+0xfc>)
    2be4:	f001 ffca 	bl	4b7c <thread_create>
    2be8:	ad03      	add	r5, sp, #12
    2bea:	5128      	str	r0, [r5, r4]
    2bec:	3404      	adds	r4, #4
        thread_resume(threads[i]);
    2bee:	f002 f84d 	bl	4c8c <thread_resume>
    mutex_t m;
    mutex_init(&m);

    thread_t *threads[5];

    for (uint i=0; i < countof(threads); i++) {
    2bf2:	2c14      	cmp	r4, #20
    2bf4:	d1ef      	bne.n	2bd6 <mutex_test+0x1a>
    2bf6:	2400      	movs	r4, #0
        threads[i] = thread_create("mutex tester", &mutex_thread, &m, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
        thread_resume(threads[i]);
    }

    for (uint i=0; i < countof(threads); i++) {
        thread_join(threads[i], NULL, INFINITE_TIME);
    2bf8:	5928      	ldr	r0, [r5, r4]
    2bfa:	2100      	movs	r1, #0
    2bfc:	f04f 32ff 	mov.w	r2, #4294967295
    2c00:	3404      	adds	r4, #4
    2c02:	f002 fa9d 	bl	5140 <thread_join>
    for (uint i=0; i < countof(threads); i++) {
        threads[i] = thread_create("mutex tester", &mutex_thread, &m, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
        thread_resume(threads[i]);
    }

    for (uint i=0; i < countof(threads); i++) {
    2c06:	2c14      	cmp	r4, #20
    2c08:	d1f6      	bne.n	2bf8 <mutex_test+0x3c>
        thread_join(threads[i], NULL, INFINITE_TIME);
    }

    printf("done with simple mutex tests\n");
    2c0a:	482c      	ldr	r0, [pc, #176]	; (2cbc <mutex_test+0x100>)
    2c0c:	f009 fe3c 	bl	c888 <_printf>

    printf("testing mutex timeout\n");
    2c10:	482b      	ldr	r0, [pc, #172]	; (2cc0 <mutex_test+0x104>)
    2c12:	f009 fe39 	bl	c888 <_printf>

    mutex_t timeout_mutex;

    mutex_init(&timeout_mutex);
    2c16:	a80f      	add	r0, sp, #60	; 0x3c
    2c18:	f001 fc52 	bl	44c0 <mutex_init>
    mutex_acquire(&timeout_mutex);

    for (uint i=0; i < 2; i++) {
        threads[i] = thread_create("mutex timeout tester", &mutex_timeout_thread, (void *)&timeout_mutex, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2c1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    printf("testing mutex timeout\n");

    mutex_t timeout_mutex;

    mutex_init(&timeout_mutex);
    mutex_acquire(&timeout_mutex);
    2c20:	a80f      	add	r0, sp, #60	; 0x3c
    2c22:	f7ff fde5 	bl	27f0 <mutex_acquire>

    for (uint i=0; i < 2; i++) {
        threads[i] = thread_create("mutex timeout tester", &mutex_timeout_thread, (void *)&timeout_mutex, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2c26:	4927      	ldr	r1, [pc, #156]	; (2cc4 <mutex_test+0x108>)
    2c28:	aa0f      	add	r2, sp, #60	; 0x3c
    2c2a:	2310      	movs	r3, #16
    2c2c:	9400      	str	r4, [sp, #0]
    2c2e:	4826      	ldr	r0, [pc, #152]	; (2cc8 <mutex_test+0x10c>)
    2c30:	f001 ffa4 	bl	4b7c <thread_create>
    2c34:	9003      	str	r0, [sp, #12]
        thread_resume(threads[i]);
    2c36:	f002 f829 	bl	4c8c <thread_resume>

    mutex_init(&timeout_mutex);
    mutex_acquire(&timeout_mutex);

    for (uint i=0; i < 2; i++) {
        threads[i] = thread_create("mutex timeout tester", &mutex_timeout_thread, (void *)&timeout_mutex, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2c3a:	4922      	ldr	r1, [pc, #136]	; (2cc4 <mutex_test+0x108>)
    2c3c:	aa0f      	add	r2, sp, #60	; 0x3c
    2c3e:	2310      	movs	r3, #16
    2c40:	9400      	str	r4, [sp, #0]
    2c42:	4821      	ldr	r0, [pc, #132]	; (2cc8 <mutex_test+0x10c>)
    2c44:	f001 ff9a 	bl	4b7c <thread_create>
    2c48:	9004      	str	r0, [sp, #16]
        thread_resume(threads[i]);
    2c4a:	f002 f81f 	bl	4c8c <thread_resume>
    }

    for (uint i=2; i < 4; i++) {
        threads[i] = thread_create("mutex timeout tester", &mutex_zerotimeout_thread, (void *)&timeout_mutex, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2c4e:	491f      	ldr	r1, [pc, #124]	; (2ccc <mutex_test+0x110>)
    2c50:	aa0f      	add	r2, sp, #60	; 0x3c
    2c52:	2310      	movs	r3, #16
    2c54:	9400      	str	r4, [sp, #0]
    2c56:	481c      	ldr	r0, [pc, #112]	; (2cc8 <mutex_test+0x10c>)
    2c58:	f001 ff90 	bl	4b7c <thread_create>
    2c5c:	9005      	str	r0, [sp, #20]
        thread_resume(threads[i]);
    2c5e:	f002 f815 	bl	4c8c <thread_resume>
        threads[i] = thread_create("mutex timeout tester", &mutex_timeout_thread, (void *)&timeout_mutex, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
        thread_resume(threads[i]);
    }

    for (uint i=2; i < 4; i++) {
        threads[i] = thread_create("mutex timeout tester", &mutex_zerotimeout_thread, (void *)&timeout_mutex, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2c62:	491a      	ldr	r1, [pc, #104]	; (2ccc <mutex_test+0x110>)
    2c64:	aa0f      	add	r2, sp, #60	; 0x3c
    2c66:	2310      	movs	r3, #16
    2c68:	9400      	str	r4, [sp, #0]
    2c6a:	4817      	ldr	r0, [pc, #92]	; (2cc8 <mutex_test+0x10c>)
    2c6c:	f001 ff86 	bl	4b7c <thread_create>
    2c70:	9006      	str	r0, [sp, #24]
        thread_resume(threads[i]);
    2c72:	f002 f80b 	bl	4c8c <thread_resume>
    }

    thread_sleep(5000);
    2c76:	f241 3088 	movw	r0, #5000	; 0x1388
    2c7a:	f002 f8af 	bl	4ddc <thread_sleep>
    mutex_release(&timeout_mutex);
    2c7e:	a80f      	add	r0, sp, #60	; 0x3c
    2c80:	f001 fcc0 	bl	4604 <mutex_release>
    2c84:	2400      	movs	r4, #0

    for (uint i=0; i < 4; i++) {
        thread_join(threads[i], NULL, INFINITE_TIME);
    2c86:	5928      	ldr	r0, [r5, r4]
    2c88:	2100      	movs	r1, #0
    2c8a:	f04f 32ff 	mov.w	r2, #4294967295
    2c8e:	3404      	adds	r4, #4
    2c90:	f002 fa56 	bl	5140 <thread_join>
    }

    thread_sleep(5000);
    mutex_release(&timeout_mutex);

    for (uint i=0; i < 4; i++) {
    2c94:	2c10      	cmp	r4, #16
    2c96:	d1f6      	bne.n	2c86 <mutex_test+0xca>
        thread_join(threads[i], NULL, INFINITE_TIME);
    }

    printf("done with mutex tests\n");
    2c98:	480d      	ldr	r0, [pc, #52]	; (2cd0 <mutex_test+0x114>)
    2c9a:	f009 fdf5 	bl	c888 <_printf>

    mutex_destroy(&timeout_mutex);
    2c9e:	a80f      	add	r0, sp, #60	; 0x3c
    2ca0:	f001 fc20 	bl	44e4 <mutex_destroy>

    return 0;
}
    2ca4:	2000      	movs	r0, #0
    2ca6:	b017      	add	sp, #92	; 0x5c
    2ca8:	bd30      	pop	{r4, r5, r15}
    2caa:	bf00      	nop
    2cac:	0000fc6d 	.word	0x0000fc6d
    2cb0:	20000034 	.word	0x20000034
    2cb4:	00002aed 	.word	0x00002aed
    2cb8:	0000fc84 	.word	0x0000fc84
    2cbc:	0000fc91 	.word	0x0000fc91
    2cc0:	0000fcaf 	.word	0x0000fcaf
    2cc4:	000027b1 	.word	0x000027b1
    2cc8:	0000fcc6 	.word	0x0000fcc6
    2ccc:	00002775 	.word	0x00002775
    2cd0:	0000fcdb 	.word	0x0000fcdb

00002cd4 <event_test>:

    return 0;
}

void event_test(void)
{
    2cd4:	b530      	push	{r4, r5, r14}
    thread_t *threads[5];

    static event_t ievent = EVENT_INITIAL_VALUE(ievent, true, 0x1234);
    printf("preinitialized event:\n");
    2cd6:	4851      	ldr	r0, [pc, #324]	; (2e1c <event_test+0x148>)

    return 0;
}

void event_test(void)
{
    2cd8:	b089      	sub	sp, #36	; 0x24
    thread_t *threads[5];

    static event_t ievent = EVENT_INITIAL_VALUE(ievent, true, 0x1234);
    printf("preinitialized event:\n");
    2cda:	f009 fdd5 	bl	c888 <_printf>
    hexdump(&ievent, sizeof(ievent));
    2cde:	211c      	movs	r1, #28
    2ce0:	484f      	ldr	r0, [pc, #316]	; (2e20 <event_test+0x14c>)
    2ce2:	f008 fbfb 	bl	b4dc <hexdump>

    printf("event tests starting\n");
    2ce6:	484f      	ldr	r0, [pc, #316]	; (2e24 <event_test+0x150>)
    2ce8:	f009 fdce 	bl	c888 <_printf>

    /* make sure signaling the event wakes up all the threads */
    event_init(&e, false, 0);
    2cec:	2100      	movs	r1, #0
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2cee:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hexdump(&ievent, sizeof(ievent));

    printf("event tests starting\n");

    /* make sure signaling the event wakes up all the threads */
    event_init(&e, false, 0);
    2cf2:	460a      	mov	r2, r1
    2cf4:	484c      	ldr	r0, [pc, #304]	; (2e28 <event_test+0x154>)
    2cf6:	f001 faf5 	bl	42e4 <event_init>
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2cfa:	9400      	str	r4, [sp, #0]
    2cfc:	494b      	ldr	r1, [pc, #300]	; (2e2c <event_test+0x158>)
    2cfe:	2200      	movs	r2, #0
    2d00:	2310      	movs	r3, #16
    2d02:	484b      	ldr	r0, [pc, #300]	; (2e30 <event_test+0x15c>)
    2d04:	f001 ff3a 	bl	4b7c <thread_create>
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d08:	9400      	str	r4, [sp, #0]

    printf("event tests starting\n");

    /* make sure signaling the event wakes up all the threads */
    event_init(&e, false, 0);
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d0a:	9003      	str	r0, [sp, #12]
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d0c:	4949      	ldr	r1, [pc, #292]	; (2e34 <event_test+0x160>)
    2d0e:	2202      	movs	r2, #2
    2d10:	2310      	movs	r3, #16
    2d12:	4849      	ldr	r0, [pc, #292]	; (2e38 <event_test+0x164>)
    2d14:	f001 ff32 	bl	4b7c <thread_create>
    threads[2] = thread_create("event waiter 1", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d18:	9400      	str	r4, [sp, #0]
    printf("event tests starting\n");

    /* make sure signaling the event wakes up all the threads */
    event_init(&e, false, 0);
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d1a:	9004      	str	r0, [sp, #16]
    threads[2] = thread_create("event waiter 1", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d1c:	4945      	ldr	r1, [pc, #276]	; (2e34 <event_test+0x160>)
    2d1e:	2202      	movs	r2, #2
    2d20:	2310      	movs	r3, #16
    2d22:	4846      	ldr	r0, [pc, #280]	; (2e3c <event_test+0x168>)
    2d24:	f001 ff2a 	bl	4b7c <thread_create>
    threads[3] = thread_create("event waiter 2", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d28:	9400      	str	r4, [sp, #0]

    /* make sure signaling the event wakes up all the threads */
    event_init(&e, false, 0);
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("event waiter 1", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d2a:	9005      	str	r0, [sp, #20]
    threads[3] = thread_create("event waiter 2", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d2c:	4941      	ldr	r1, [pc, #260]	; (2e34 <event_test+0x160>)
    2d2e:	2202      	movs	r2, #2
    2d30:	2310      	movs	r3, #16
    2d32:	4843      	ldr	r0, [pc, #268]	; (2e40 <event_test+0x16c>)
    2d34:	f001 ff22 	bl	4b7c <thread_create>
    threads[4] = thread_create("event waiter 3", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d38:	9400      	str	r4, [sp, #0]
    /* make sure signaling the event wakes up all the threads */
    event_init(&e, false, 0);
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("event waiter 1", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[3] = thread_create("event waiter 2", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d3a:	9006      	str	r0, [sp, #24]
    threads[4] = thread_create("event waiter 3", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d3c:	493d      	ldr	r1, [pc, #244]	; (2e34 <event_test+0x160>)
    2d3e:	4841      	ldr	r0, [pc, #260]	; (2e44 <event_test+0x170>)
    2d40:	2202      	movs	r2, #2
    2d42:	2310      	movs	r3, #16
    2d44:	f001 ff1a 	bl	4b7c <thread_create>
    2d48:	2400      	movs	r4, #0
    2d4a:	9007      	str	r0, [sp, #28]

    for (uint i = 0; i < countof(threads); i++)
        thread_resume(threads[i]);
    2d4c:	ad03      	add	r5, sp, #12
    2d4e:	5960      	ldr	r0, [r4, r5]
    2d50:	3404      	adds	r4, #4
    2d52:	f001 ff9b 	bl	4c8c <thread_resume>
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("event waiter 1", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[3] = thread_create("event waiter 2", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[4] = thread_create("event waiter 3", &event_waiter, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);

    for (uint i = 0; i < countof(threads); i++)
    2d56:	2c14      	cmp	r4, #20
    2d58:	d1f8      	bne.n	2d4c <event_test+0x78>
        thread_resume(threads[i]);

    thread_sleep(2000);
    2d5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    2d5e:	f002 f83d 	bl	4ddc <thread_sleep>
    printf("destroying event\n");
    2d62:	4839      	ldr	r0, [pc, #228]	; (2e48 <event_test+0x174>)
    2d64:	f009 fd90 	bl	c888 <_printf>
    event_destroy(&e);
    2d68:	482f      	ldr	r0, [pc, #188]	; (2e28 <event_test+0x154>)
    2d6a:	f001 facd 	bl	4308 <event_destroy>
    2d6e:	2400      	movs	r4, #0

    for (uint i = 0; i < countof(threads); i++)
        thread_join(threads[i], NULL, INFINITE_TIME);
    2d70:	5928      	ldr	r0, [r5, r4]
    2d72:	2100      	movs	r1, #0
    2d74:	f04f 32ff 	mov.w	r2, #4294967295
    2d78:	3404      	adds	r4, #4
    2d7a:	f002 f9e1 	bl	5140 <thread_join>

    thread_sleep(2000);
    printf("destroying event\n");
    event_destroy(&e);

    for (uint i = 0; i < countof(threads); i++)
    2d7e:	2c14      	cmp	r4, #20
    2d80:	d1f6      	bne.n	2d70 <event_test+0x9c>
        thread_join(threads[i], NULL, INFINITE_TIME);

    /* make sure signaling the event wakes up precisely one thread */
    event_init(&e, false, EVENT_FLAG_AUTOUNSIGNAL);
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d82:	f44f 6480 	mov.w	r4, #1024	; 0x400

    for (uint i = 0; i < countof(threads); i++)
        thread_join(threads[i], NULL, INFINITE_TIME);

    /* make sure signaling the event wakes up precisely one thread */
    event_init(&e, false, EVENT_FLAG_AUTOUNSIGNAL);
    2d86:	4828      	ldr	r0, [pc, #160]	; (2e28 <event_test+0x154>)
    2d88:	2100      	movs	r1, #0
    2d8a:	2201      	movs	r2, #1
    2d8c:	f001 faaa 	bl	42e4 <event_init>
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d90:	9400      	str	r4, [sp, #0]
    2d92:	4926      	ldr	r1, [pc, #152]	; (2e2c <event_test+0x158>)
    2d94:	2200      	movs	r2, #0
    2d96:	2310      	movs	r3, #16
    2d98:	4825      	ldr	r0, [pc, #148]	; (2e30 <event_test+0x15c>)
    2d9a:	f001 feef 	bl	4b7c <thread_create>
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2d9e:	9400      	str	r4, [sp, #0]
    for (uint i = 0; i < countof(threads); i++)
        thread_join(threads[i], NULL, INFINITE_TIME);

    /* make sure signaling the event wakes up precisely one thread */
    event_init(&e, false, EVENT_FLAG_AUTOUNSIGNAL);
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2da0:	9003      	str	r0, [sp, #12]
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2da2:	4924      	ldr	r1, [pc, #144]	; (2e34 <event_test+0x160>)
    2da4:	2263      	movs	r2, #99	; 0x63
    2da6:	2310      	movs	r3, #16
    2da8:	4823      	ldr	r0, [pc, #140]	; (2e38 <event_test+0x164>)
    2daa:	f001 fee7 	bl	4b7c <thread_create>
    threads[2] = thread_create("event waiter 1", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2dae:	9400      	str	r4, [sp, #0]
        thread_join(threads[i], NULL, INFINITE_TIME);

    /* make sure signaling the event wakes up precisely one thread */
    event_init(&e, false, EVENT_FLAG_AUTOUNSIGNAL);
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2db0:	9004      	str	r0, [sp, #16]
    threads[2] = thread_create("event waiter 1", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2db2:	4920      	ldr	r1, [pc, #128]	; (2e34 <event_test+0x160>)
    2db4:	2263      	movs	r2, #99	; 0x63
    2db6:	2310      	movs	r3, #16
    2db8:	4820      	ldr	r0, [pc, #128]	; (2e3c <event_test+0x168>)
    2dba:	f001 fedf 	bl	4b7c <thread_create>
    threads[3] = thread_create("event waiter 2", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2dbe:	9400      	str	r4, [sp, #0]

    /* make sure signaling the event wakes up precisely one thread */
    event_init(&e, false, EVENT_FLAG_AUTOUNSIGNAL);
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("event waiter 1", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2dc0:	9005      	str	r0, [sp, #20]
    threads[3] = thread_create("event waiter 2", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2dc2:	491c      	ldr	r1, [pc, #112]	; (2e34 <event_test+0x160>)
    2dc4:	2263      	movs	r2, #99	; 0x63
    2dc6:	2310      	movs	r3, #16
    2dc8:	481d      	ldr	r0, [pc, #116]	; (2e40 <event_test+0x16c>)
    2dca:	f001 fed7 	bl	4b7c <thread_create>
    threads[4] = thread_create("event waiter 3", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2dce:	9400      	str	r4, [sp, #0]
    /* make sure signaling the event wakes up precisely one thread */
    event_init(&e, false, EVENT_FLAG_AUTOUNSIGNAL);
    threads[0] = thread_create("event signaler", &event_signaler, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("event waiter 1", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[3] = thread_create("event waiter 2", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2dd0:	9006      	str	r0, [sp, #24]
    threads[4] = thread_create("event waiter 3", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    2dd2:	4918      	ldr	r1, [pc, #96]	; (2e34 <event_test+0x160>)
    2dd4:	481b      	ldr	r0, [pc, #108]	; (2e44 <event_test+0x170>)
    2dd6:	2263      	movs	r2, #99	; 0x63
    2dd8:	2310      	movs	r3, #16
    2dda:	f001 fecf 	bl	4b7c <thread_create>
    2dde:	2400      	movs	r4, #0
    2de0:	9007      	str	r0, [sp, #28]

    for (uint i = 0; i < countof(threads); i++)
        thread_resume(threads[i]);
    2de2:	5928      	ldr	r0, [r5, r4]
    2de4:	3404      	adds	r4, #4
    2de6:	f001 ff51 	bl	4c8c <thread_resume>
    threads[1] = thread_create("event waiter 0", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("event waiter 1", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[3] = thread_create("event waiter 2", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    threads[4] = thread_create("event waiter 3", &event_waiter, (void *)99, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);

    for (uint i = 0; i < countof(threads); i++)
    2dea:	2c14      	cmp	r4, #20
    2dec:	d1f9      	bne.n	2de2 <event_test+0x10e>
        thread_resume(threads[i]);

    thread_sleep(2000);
    2dee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    2df2:	f001 fff3 	bl	4ddc <thread_sleep>
    event_destroy(&e);
    2df6:	480c      	ldr	r0, [pc, #48]	; (2e28 <event_test+0x154>)
    2df8:	f001 fa86 	bl	4308 <event_destroy>
    2dfc:	2400      	movs	r4, #0

    for (uint i = 0; i < countof(threads); i++)
        thread_join(threads[i], NULL, INFINITE_TIME);
    2dfe:	5928      	ldr	r0, [r5, r4]
    2e00:	2100      	movs	r1, #0
    2e02:	f04f 32ff 	mov.w	r2, #4294967295
    2e06:	3404      	adds	r4, #4
    2e08:	f002 f99a 	bl	5140 <thread_join>
        thread_resume(threads[i]);

    thread_sleep(2000);
    event_destroy(&e);

    for (uint i = 0; i < countof(threads); i++)
    2e0c:	2c14      	cmp	r4, #20
    2e0e:	d1f6      	bne.n	2dfe <event_test+0x12a>
        thread_join(threads[i], NULL, INFINITE_TIME);

    printf("event tests done\n");
    2e10:	480e      	ldr	r0, [pc, #56]	; (2e4c <event_test+0x178>)
}
    2e12:	b009      	add	sp, #36	; 0x24
    2e14:	e8bd 4030 	ldmia.w	r13!, {r4, r5, r14}
    event_destroy(&e);

    for (uint i = 0; i < countof(threads); i++)
        thread_join(threads[i], NULL, INFINITE_TIME);

    printf("event tests done\n");
    2e18:	f009 bd36 	b.w	c888 <_printf>
    2e1c:	0000fcf2 	.word	0x0000fcf2
    2e20:	20000018 	.word	0x20000018
    2e24:	0000fd09 	.word	0x0000fd09
    2e28:	20000600 	.word	0x20000600
    2e2c:	00002801 	.word	0x00002801
    2e30:	0000fd1f 	.word	0x0000fd1f
    2e34:	00002b4d 	.word	0x00002b4d
    2e38:	0000fd2e 	.word	0x0000fd2e
    2e3c:	0000fd3d 	.word	0x0000fd3d
    2e40:	0000fd4c 	.word	0x0000fd4c
    2e44:	0000fd5b 	.word	0x0000fd5b
    2e48:	0000fd6a 	.word	0x0000fd6a
    2e4c:	0000fd7c 	.word	0x0000fd7c

00002e50 <context_switch_test>:

    return 0;
}

void context_switch_test(void)
{
    2e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    event_init(&context_switch_event, false, 0);
    2e52:	4f42      	ldr	r7, [pc, #264]	; (2f5c <context_switch_test+0x10c>)
    2e54:	2100      	movs	r1, #0
    event_init(&context_switch_done_event, false, 0);
    2e56:	4e42      	ldr	r6, [pc, #264]	; (2f60 <context_switch_test+0x110>)
    return 0;
}

void context_switch_test(void)
{
    event_init(&context_switch_event, false, 0);
    2e58:	4638      	mov	r0, r7
    2e5a:	460a      	mov	r2, r1
    event_init(&context_switch_done_event, false, 0);

    thread_detach_and_resume(thread_create("context switch idle", &context_switch_tester, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2e5c:	4c41      	ldr	r4, [pc, #260]	; (2f64 <context_switch_test+0x114>)
    return 0;
}

void context_switch_test(void)
{
    event_init(&context_switch_event, false, 0);
    2e5e:	f001 fa41 	bl	42e4 <event_init>
    event_init(&context_switch_done_event, false, 0);
    2e62:	2100      	movs	r1, #0

    thread_detach_and_resume(thread_create("context switch idle", &context_switch_tester, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2e64:	f44f 6580 	mov.w	r5, #1024	; 0x400
}

void context_switch_test(void)
{
    event_init(&context_switch_event, false, 0);
    event_init(&context_switch_done_event, false, 0);
    2e68:	4630      	mov	r0, r6
    2e6a:	460a      	mov	r2, r1
    2e6c:	f001 fa3a 	bl	42e4 <event_init>

    thread_detach_and_resume(thread_create("context switch idle", &context_switch_tester, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2e70:	2201      	movs	r2, #1
    2e72:	2310      	movs	r3, #16
    2e74:	4621      	mov	r1, r4
    2e76:	9500      	str	r5, [sp, #0]
    2e78:	483b      	ldr	r0, [pc, #236]	; (2f68 <context_switch_test+0x118>)
    2e7a:	f001 fe7f 	bl	4b7c <thread_create>
    2e7e:	f002 fb29 	bl	54d4 <thread_detach_and_resume>
    thread_sleep(100);
    2e82:	2064      	movs	r0, #100	; 0x64
    2e84:	f001 ffaa 	bl	4ddc <thread_sleep>
    event_signal(&context_switch_event, true);
    2e88:	2101      	movs	r1, #1
    2e8a:	4638      	mov	r0, r7
    2e8c:	f001 faa2 	bl	43d4 <event_signal>
    event_wait(&context_switch_done_event);
    2e90:	4630      	mov	r0, r6
    2e92:	f7ff fcb1 	bl	27f8 <event_wait>
    thread_sleep(100);
    2e96:	2064      	movs	r0, #100	; 0x64
    2e98:	f001 ffa0 	bl	4ddc <thread_sleep>

    event_unsignal(&context_switch_event);
    2e9c:	4638      	mov	r0, r7
    2e9e:	f001 fad5 	bl	444c <event_unsignal>
    event_unsignal(&context_switch_done_event);
    2ea2:	4630      	mov	r0, r6
    2ea4:	f001 fad2 	bl	444c <event_unsignal>
    thread_detach_and_resume(thread_create("context switch 2a", &context_switch_tester, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2ea8:	4621      	mov	r1, r4
    2eaa:	2202      	movs	r2, #2
    2eac:	2310      	movs	r3, #16
    2eae:	9500      	str	r5, [sp, #0]
    2eb0:	482e      	ldr	r0, [pc, #184]	; (2f6c <context_switch_test+0x11c>)
    2eb2:	f001 fe63 	bl	4b7c <thread_create>
    2eb6:	f002 fb0d 	bl	54d4 <thread_detach_and_resume>
    thread_detach_and_resume(thread_create("context switch 2b", &context_switch_tester, (void *)2, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2eba:	2202      	movs	r2, #2
    2ebc:	2310      	movs	r3, #16
    2ebe:	4621      	mov	r1, r4
    2ec0:	9500      	str	r5, [sp, #0]
    2ec2:	482b      	ldr	r0, [pc, #172]	; (2f70 <context_switch_test+0x120>)
    2ec4:	f001 fe5a 	bl	4b7c <thread_create>
    2ec8:	f002 fb04 	bl	54d4 <thread_detach_and_resume>
    thread_sleep(100);
    2ecc:	2064      	movs	r0, #100	; 0x64
    2ece:	f001 ff85 	bl	4ddc <thread_sleep>
    event_signal(&context_switch_event, true);
    2ed2:	2101      	movs	r1, #1
    2ed4:	4638      	mov	r0, r7
    2ed6:	f001 fa7d 	bl	43d4 <event_signal>
    event_wait(&context_switch_done_event);
    2eda:	4630      	mov	r0, r6
    2edc:	f7ff fc8c 	bl	27f8 <event_wait>
    thread_sleep(100);
    2ee0:	2064      	movs	r0, #100	; 0x64
    2ee2:	f001 ff7b 	bl	4ddc <thread_sleep>

    event_unsignal(&context_switch_event);
    2ee6:	4638      	mov	r0, r7
    2ee8:	f001 fab0 	bl	444c <event_unsignal>
    event_unsignal(&context_switch_done_event);
    2eec:	4630      	mov	r0, r6
    2eee:	f001 faad 	bl	444c <event_unsignal>
    thread_detach_and_resume(thread_create("context switch 4a", &context_switch_tester, (void *)4, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2ef2:	4621      	mov	r1, r4
    2ef4:	2204      	movs	r2, #4
    2ef6:	2310      	movs	r3, #16
    2ef8:	9500      	str	r5, [sp, #0]
    2efa:	481e      	ldr	r0, [pc, #120]	; (2f74 <context_switch_test+0x124>)
    2efc:	f001 fe3e 	bl	4b7c <thread_create>
    2f00:	f002 fae8 	bl	54d4 <thread_detach_and_resume>
    thread_detach_and_resume(thread_create("context switch 4b", &context_switch_tester, (void *)4, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2f04:	4621      	mov	r1, r4
    2f06:	2204      	movs	r2, #4
    2f08:	2310      	movs	r3, #16
    2f0a:	9500      	str	r5, [sp, #0]
    2f0c:	481a      	ldr	r0, [pc, #104]	; (2f78 <context_switch_test+0x128>)
    2f0e:	f001 fe35 	bl	4b7c <thread_create>
    2f12:	f002 fadf 	bl	54d4 <thread_detach_and_resume>
    thread_detach_and_resume(thread_create("context switch 4c", &context_switch_tester, (void *)4, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2f16:	4621      	mov	r1, r4
    2f18:	2204      	movs	r2, #4
    2f1a:	2310      	movs	r3, #16
    2f1c:	9500      	str	r5, [sp, #0]
    2f1e:	4817      	ldr	r0, [pc, #92]	; (2f7c <context_switch_test+0x12c>)
    2f20:	f001 fe2c 	bl	4b7c <thread_create>
    2f24:	f002 fad6 	bl	54d4 <thread_detach_and_resume>
    thread_detach_and_resume(thread_create("context switch 4d", &context_switch_tester, (void *)4, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2f28:	2204      	movs	r2, #4
    2f2a:	2310      	movs	r3, #16
    2f2c:	4621      	mov	r1, r4
    2f2e:	9500      	str	r5, [sp, #0]
    2f30:	4813      	ldr	r0, [pc, #76]	; (2f80 <context_switch_test+0x130>)
    2f32:	f001 fe23 	bl	4b7c <thread_create>
    2f36:	f002 facd 	bl	54d4 <thread_detach_and_resume>
    thread_sleep(100);
    2f3a:	2064      	movs	r0, #100	; 0x64
    2f3c:	f001 ff4e 	bl	4ddc <thread_sleep>
    event_signal(&context_switch_event, true);
    2f40:	2101      	movs	r1, #1
    2f42:	4638      	mov	r0, r7
    2f44:	f001 fa46 	bl	43d4 <event_signal>
    event_wait(&context_switch_done_event);
    2f48:	4630      	mov	r0, r6
    2f4a:	f7ff fc55 	bl	27f8 <event_wait>
    thread_sleep(100);
    2f4e:	2064      	movs	r0, #100	; 0x64
}
    2f50:	b003      	add	sp, #12
    2f52:	e8bd 40f0 	ldmia.w	r13!, {r4, r5, r6, r7, r14}
    thread_detach_and_resume(thread_create("context switch 4c", &context_switch_tester, (void *)4, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    thread_detach_and_resume(thread_create("context switch 4d", &context_switch_tester, (void *)4, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    thread_sleep(100);
    event_signal(&context_switch_event, true);
    event_wait(&context_switch_done_event);
    thread_sleep(100);
    2f56:	f001 bf41 	b.w	4ddc <thread_sleep>
    2f5a:	bf00      	nop
    2f5c:	2000057c 	.word	0x2000057c
    2f60:	2000059c 	.word	0x2000059c
    2f64:	0000283d 	.word	0x0000283d
    2f68:	0000fdd2 	.word	0x0000fdd2
    2f6c:	0000fde6 	.word	0x0000fde6
    2f70:	0000fdf8 	.word	0x0000fdf8
    2f74:	0000fe0a 	.word	0x0000fe0a
    2f78:	0000fe1c 	.word	0x0000fe1c
    2f7c:	0000fe2e 	.word	0x0000fe2e
    2f80:	0000fe40 	.word	0x0000fe40

00002f84 <thread_tests>:
    printf("%u cycles to acquire/release lock w/irqsave %u times (%u cycles per)\n", c, COUNT, c / COUNT);
#undef COUNT
}

int thread_tests(void)
{
    2f84:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}
    2f88:	b08a      	sub	sp, #40	; 0x28
    2f8a:	4674      	mov	r4, r14
    mutex_test();
    2f8c:	f7ff fe16 	bl	2bbc <mutex_test>
}

static int semaphore_test(void)
{
    static semaphore_t isem = SEMAPHORE_INITIAL_VALUE(isem, 99);
    printf("preinitialized semaphore:\n");
    2f90:	48a9      	ldr	r0, [pc, #676]	; (3238 <thread_tests+0x2b4>)
    2f92:	f009 fc79 	bl	c888 <_printf>
    hexdump(&isem, sizeof(isem));
    2f96:	48a9      	ldr	r0, [pc, #676]	; (323c <thread_tests+0x2b8>)
    2f98:	2118      	movs	r1, #24
    2f9a:	f008 fa9f 	bl	b4dc <hexdump>

    sem_init(&sem, sem_start_value);
    2f9e:	48a8      	ldr	r0, [pc, #672]	; (3240 <thread_tests+0x2bc>)
    2fa0:	210a      	movs	r1, #10
    2fa2:	f002 fd4d 	bl	5a40 <sem_init>
    mutex_init(&sem_test_mutex);
    2fa6:	48a7      	ldr	r0, [pc, #668]	; (3244 <thread_tests+0x2c0>)
    2fa8:	f001 fa8a 	bl	44c0 <mutex_init>

    sem_remaining_its = sem_total_its;
    2fac:	4ba6      	ldr	r3, [pc, #664]	; (3248 <thread_tests+0x2c4>)
    2fae:	f242 7210 	movw	r2, #10000	; 0x2710
    2fb2:	601a      	str	r2, [r3, #0]
    2fb4:	461f      	mov	r7, r3
    while (1) {
        mutex_acquire(&sem_test_mutex);
    2fb6:	48a3      	ldr	r0, [pc, #652]	; (3244 <thread_tests+0x2c0>)
    2fb8:	f7ff fc1a 	bl	27f0 <mutex_acquire>
        if (sem_remaining_its) {
    2fbc:	683d      	ldr	r5, [r7, #0]
    2fbe:	f44f 6680 	mov.w	r6, #1024	; 0x400
    2fc2:	b185      	cbz	r5, 2fe6 <thread_tests+0x62>
            thread_detach_and_resume(thread_create("semaphore consumer", &semaphore_consumer, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2fc4:	2200      	movs	r2, #0
    2fc6:	2310      	movs	r3, #16
    2fc8:	49a0      	ldr	r1, [pc, #640]	; (324c <thread_tests+0x2c8>)
    2fca:	9600      	str	r6, [sp, #0]
    2fcc:	48a0      	ldr	r0, [pc, #640]	; (3250 <thread_tests+0x2cc>)
    2fce:	f001 fdd5 	bl	4b7c <thread_create>
    2fd2:	f002 fa7f 	bl	54d4 <thread_detach_and_resume>
            atomic_add(&sem_threads, 1);
    2fd6:	2101      	movs	r1, #1
    2fd8:	489e      	ldr	r0, [pc, #632]	; (3254 <thread_tests+0x2d0>)
    2fda:	f7ff fb80 	bl	26de <atomic_add>
        } else {
            mutex_release(&sem_test_mutex);
            break;
        }
        mutex_release(&sem_test_mutex);
    2fde:	4899      	ldr	r0, [pc, #612]	; (3244 <thread_tests+0x2c0>)
    2fe0:	f001 fb10 	bl	4604 <mutex_release>
    2fe4:	e7e7      	b.n	2fb6 <thread_tests+0x32>
        mutex_acquire(&sem_test_mutex);
        if (sem_remaining_its) {
            thread_detach_and_resume(thread_create("semaphore consumer", &semaphore_consumer, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
            atomic_add(&sem_threads, 1);
        } else {
            mutex_release(&sem_test_mutex);
    2fe6:	4897      	ldr	r0, [pc, #604]	; (3244 <thread_tests+0x2c0>)
    2fe8:	f001 fb0c 	bl	4604 <mutex_release>
            break;
        }
        mutex_release(&sem_test_mutex);
    }

    thread_detach_and_resume(thread_create("semaphore producer", &semaphore_producer, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
    2fec:	499a      	ldr	r1, [pc, #616]	; (3258 <thread_tests+0x2d4>)
    2fee:	462a      	mov	r2, r5
    2ff0:	2310      	movs	r3, #16
    2ff2:	9600      	str	r6, [sp, #0]
    2ff4:	4899      	ldr	r0, [pc, #612]	; (325c <thread_tests+0x2d8>)
    2ff6:	f001 fdc1 	bl	4b7c <thread_create>
    2ffa:	f002 fa6b 	bl	54d4 <thread_detach_and_resume>

    while (sem_threads)
    2ffe:	4b95      	ldr	r3, [pc, #596]	; (3254 <thread_tests+0x2d0>)
    3000:	681b      	ldr	r3, [r3, #0]
    3002:	b113      	cbz	r3, 300a <thread_tests+0x86>
        thread_yield();
    3004:	f001 fdf8 	bl	4bf8 <thread_yield>
    3008:	e7f9      	b.n	2ffe <thread_tests+0x7a>

    if (sem.count == sem_start_value)
    300a:	4b8d      	ldr	r3, [pc, #564]	; (3240 <thread_tests+0x2bc>)
    300c:	6859      	ldr	r1, [r3, #4]
    300e:	290a      	cmp	r1, #10
    3010:	d103      	bne.n	301a <thread_tests+0x96>
        printf("semaphore tests successfully complete\n");
    3012:	4893      	ldr	r0, [pc, #588]	; (3260 <thread_tests+0x2dc>)
    3014:	f009 fc38 	bl	c888 <_printf>
    3018:	e003      	b.n	3022 <thread_tests+0x9e>
    else
        printf("semaphore tests failed: %d != %d\n", sem.count, sem_start_value);
    301a:	4892      	ldr	r0, [pc, #584]	; (3264 <thread_tests+0x2e0>)
    301c:	220a      	movs	r2, #10
    301e:	f009 fc33 	bl	c888 <_printf>

    sem_destroy(&sem);
    3022:	4887      	ldr	r0, [pc, #540]	; (3240 <thread_tests+0x2bc>)
    3024:	f002 fd1c 	bl	5a60 <sem_destroy>
    mutex_destroy(&sem_test_mutex);
    3028:	4886      	ldr	r0, [pc, #536]	; (3244 <thread_tests+0x2c0>)
    302a:	f001 fa5b 	bl	44e4 <mutex_destroy>

int thread_tests(void)
{
    mutex_test();
    semaphore_test();
    event_test();
    302e:	f7ff fe51 	bl	2cd4 <event_test>
    spin_lock_t lock;

    spin_lock_init(&lock);

    // verify basic functionality (single core)
    printf("testing spinlock:\n");
    3032:	488d      	ldr	r0, [pc, #564]	; (3268 <thread_tests+0x2e4>)
    3034:	f009 fc28 	bl	c888 <_printf>
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    3038:	f3ef 8310 	mrs	r3, PRIMASK
    ASSERT(!spin_lock_held(&lock));
    ASSERT(!arch_ints_disabled());
    303c:	07dd      	lsls	r5, r3, #31
    303e:	d507      	bpl.n	3050 <thread_tests+0xcc>
    3040:	4b8a      	ldr	r3, [pc, #552]	; (326c <thread_tests+0x2e8>)
    3042:	4620      	mov	r0, r4
    3044:	9300      	str	r3, [sp, #0]
    3046:	498a      	ldr	r1, [pc, #552]	; (3270 <thread_tests+0x2ec>)
    3048:	4a8a      	ldr	r2, [pc, #552]	; (3274 <thread_tests+0x2f0>)
    304a:	f240 234d 	movw	r3, #589	; 0x24d
    304e:	e00f      	b.n	3070 <thread_tests+0xec>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    3050:	a802      	add	r0, sp, #8
    3052:	f7ff fda9 	bl	2ba8 <arch_interrupt_save.constprop.5>
    3056:	f3ef 8310 	mrs	r3, PRIMASK
    spin_lock_irqsave(&lock, state);
    ASSERT(arch_ints_disabled());
    305a:	f013 0f01 	tst.w	r3, #1
    305e:	af02      	add	r7, sp, #8
    3060:	d108      	bne.n	3074 <thread_tests+0xf0>
    3062:	4b85      	ldr	r3, [pc, #532]	; (3278 <thread_tests+0x2f4>)
    3064:	4982      	ldr	r1, [pc, #520]	; (3270 <thread_tests+0x2ec>)
    3066:	4a83      	ldr	r2, [pc, #524]	; (3274 <thread_tests+0x2f0>)
    3068:	9300      	str	r3, [sp, #0]
    306a:	4620      	mov	r0, r4
    306c:	f240 234f 	movw	r3, #591	; 0x24f
    3070:	f008 fa20 	bl	b4b4 <_panic>
static inline void
arch_interrupt_restore(spin_lock_saved_state_t old_state, spin_lock_save_flags_t flags)
{
    if ((flags & SPIN_LOCK_FLAG_FIQ) && (old_state & SPIN_LOCK_STATE_RESTORE_FIQ))
        arch_enable_fiqs();
    if ((flags & SPIN_LOCK_FLAG_IRQ) && (old_state & SPIN_LOCK_STATE_RESTORE_IRQ))
    3074:	9b02      	ldr	r3, [sp, #8]
    3076:	07d8      	lsls	r0, r3, #31
    3078:	d500      	bpl.n	307c <thread_tests+0xf8>

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
    307a:	b662      	cpsie	i
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    307c:	f3ef 8310 	mrs	r3, PRIMASK
    ASSERT(spin_lock_held(&lock));
    spin_unlock_irqrestore(&lock, state);
    ASSERT(!spin_lock_held(&lock));
    ASSERT(!arch_ints_disabled());
    3080:	07d9      	lsls	r1, r3, #31
    3082:	d507      	bpl.n	3094 <thread_tests+0x110>
    3084:	4b79      	ldr	r3, [pc, #484]	; (326c <thread_tests+0x2e8>)
    3086:	4620      	mov	r0, r4
    3088:	9300      	str	r3, [sp, #0]
    308a:	4979      	ldr	r1, [pc, #484]	; (3270 <thread_tests+0x2ec>)
    308c:	4a79      	ldr	r2, [pc, #484]	; (3274 <thread_tests+0x2f0>)
    308e:	f240 2353 	movw	r3, #595	; 0x253
    3092:	e7ed      	b.n	3070 <thread_tests+0xec>
static inline uint32_t arch_cycle_count(void)
{
#if ARM_ISA_ARMV7M
#if ENABLE_CYCLE_COUNTER
#define DWT_CYCCNT (0xE0001004)
    return *REG32(DWT_CYCCNT);
    3094:	4c79      	ldr	r4, [pc, #484]	; (327c <thread_tests+0x2f8>)
    printf("seems to work\n");
    3096:	487a      	ldr	r0, [pc, #488]	; (3280 <thread_tests+0x2fc>)
    3098:	f009 fbf6 	bl	c888 <_printf>
    309c:	6823      	ldr	r3, [r4, #0]
    309e:	6821      	ldr	r1, [r4, #0]
        spin_lock(&lock);
        spin_unlock(&lock);
    }
    c = arch_cycle_count() - c;

    printf("%u cycles to acquire/release lock %u times (%u cycles per)\n", c, COUNT, c / COUNT);
    30a0:	4878      	ldr	r0, [pc, #480]	; (3284 <thread_tests+0x300>)
    uint32_t c = arch_cycle_count();
    for (uint i = 0; i < COUNT; i++) {
        spin_lock(&lock);
        spin_unlock(&lock);
    }
    c = arch_cycle_count() - c;
    30a2:	1ac9      	subs	r1, r1, r3

    printf("%u cycles to acquire/release lock %u times (%u cycles per)\n", c, COUNT, c / COUNT);
    30a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    30a8:	0d0b      	lsrs	r3, r1, #20
    30aa:	f009 fbed 	bl	c888 <_printf>
    30ae:	6824      	ldr	r4, [r4, #0]
    30b0:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
    30b4:	4638      	mov	r0, r7
    30b6:	f7ff fd77 	bl	2ba8 <arch_interrupt_save.constprop.5>
    30ba:	9b02      	ldr	r3, [sp, #8]
    30bc:	07da      	lsls	r2, r3, #31
    30be:	d500      	bpl.n	30c2 <thread_tests+0x13e>

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
    30c0:	b662      	cpsie	i

    c = arch_cycle_count();
    for (uint i = 0; i < COUNT; i++) {
    30c2:	3e01      	subs	r6, #1
    30c4:	d1f6      	bne.n	30b4 <thread_tests+0x130>
static inline uint32_t arch_cycle_count(void)
{
#if ARM_ISA_ARMV7M
#if ENABLE_CYCLE_COUNTER
#define DWT_CYCCNT (0xE0001004)
    return *REG32(DWT_CYCCNT);
    30c6:	4b6d      	ldr	r3, [pc, #436]	; (327c <thread_tests+0x2f8>)
        spin_lock_irqsave(&lock, state);
        spin_unlock_irqrestore(&lock, state);
    }
    c = arch_cycle_count() - c;

    printf("%u cycles to acquire/release lock w/irqsave %u times (%u cycles per)\n", c, COUNT, c / COUNT);
    30c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    30cc:	6819      	ldr	r1, [r3, #0]
    30ce:	486e      	ldr	r0, [pc, #440]	; (3288 <thread_tests+0x304>)
    c = arch_cycle_count();
    for (uint i = 0; i < COUNT; i++) {
        spin_lock_irqsave(&lock, state);
        spin_unlock_irqrestore(&lock, state);
    }
    c = arch_cycle_count() - c;
    30d0:	1b09      	subs	r1, r1, r4

    printf("%u cycles to acquire/release lock w/irqsave %u times (%u cycles per)\n", c, COUNT, c / COUNT);
    30d2:	0d0b      	lsrs	r3, r1, #20
    30d4:	f009 fbd8 	bl	c888 <_printf>
    return 0;
}

static void atomic_test(void)
{
    atomic = 0;
    30d8:	f8df 81e0 	ldr.w	r8, [r15, #480]	; 32bc <thread_tests+0x338>
    atomic_count = 8;
    30dc:	4b6b      	ldr	r3, [pc, #428]	; (328c <thread_tests+0x308>)
    30de:	2408      	movs	r4, #8

    printf("testing atomic routines\n");

    thread_t *threads[8];
    threads[0] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    30e0:	f44f 6580 	mov.w	r5, #1024	; 0x400
static void atomic_test(void)
{
    atomic = 0;
    atomic_count = 8;

    printf("testing atomic routines\n");
    30e4:	486a      	ldr	r0, [pc, #424]	; (3290 <thread_tests+0x30c>)
    return 0;
}

static void atomic_test(void)
{
    atomic = 0;
    30e6:	f8c8 6000 	str.w	r6, [r8]
    atomic_count = 8;
    30ea:	601c      	str	r4, [r3, #0]

    printf("testing atomic routines\n");
    30ec:	f009 fbcc 	bl	c888 <_printf>

    thread_t *threads[8];
    threads[0] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    30f0:	9500      	str	r5, [sp, #0]
    30f2:	4968      	ldr	r1, [pc, #416]	; (3294 <thread_tests+0x310>)
    30f4:	2201      	movs	r2, #1
    30f6:	4623      	mov	r3, r4
    30f8:	4867      	ldr	r0, [pc, #412]	; (3298 <thread_tests+0x314>)
    30fa:	f001 fd3f 	bl	4b7c <thread_create>
    threads[1] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    30fe:	9500      	str	r5, [sp, #0]
    atomic_count = 8;

    printf("testing atomic routines\n");

    thread_t *threads[8];
    threads[0] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3100:	9002      	str	r0, [sp, #8]
    threads[1] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3102:	4964      	ldr	r1, [pc, #400]	; (3294 <thread_tests+0x310>)
    3104:	2201      	movs	r2, #1
    3106:	4623      	mov	r3, r4
    3108:	4863      	ldr	r0, [pc, #396]	; (3298 <thread_tests+0x314>)
    310a:	f001 fd37 	bl	4b7c <thread_create>
    threads[2] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    310e:	9500      	str	r5, [sp, #0]

    printf("testing atomic routines\n");

    thread_t *threads[8];
    threads[0] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3110:	9003      	str	r0, [sp, #12]
    threads[2] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3112:	4960      	ldr	r1, [pc, #384]	; (3294 <thread_tests+0x310>)
    3114:	2201      	movs	r2, #1
    3116:	4623      	mov	r3, r4
    3118:	485f      	ldr	r0, [pc, #380]	; (3298 <thread_tests+0x314>)
    311a:	f001 fd2f 	bl	4b7c <thread_create>
    threads[3] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    311e:	9500      	str	r5, [sp, #0]
    printf("testing atomic routines\n");

    thread_t *threads[8];
    threads[0] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3120:	9004      	str	r0, [sp, #16]
    threads[3] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3122:	495c      	ldr	r1, [pc, #368]	; (3294 <thread_tests+0x310>)
    3124:	2201      	movs	r2, #1
    3126:	4623      	mov	r3, r4
    3128:	485b      	ldr	r0, [pc, #364]	; (3298 <thread_tests+0x314>)
    312a:	f001 fd27 	bl	4b7c <thread_create>
    threads[4] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    312e:	9500      	str	r5, [sp, #0]

    thread_t *threads[8];
    threads[0] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[3] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3130:	9005      	str	r0, [sp, #20]
    threads[4] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3132:	4958      	ldr	r1, [pc, #352]	; (3294 <thread_tests+0x310>)
    3134:	f04f 32ff 	mov.w	r2, #4294967295
    3138:	4623      	mov	r3, r4
    313a:	4858      	ldr	r0, [pc, #352]	; (329c <thread_tests+0x318>)
    313c:	f001 fd1e 	bl	4b7c <thread_create>
    threads[5] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3140:	9500      	str	r5, [sp, #0]
    thread_t *threads[8];
    threads[0] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[3] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[4] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3142:	9006      	str	r0, [sp, #24]
    threads[5] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3144:	4953      	ldr	r1, [pc, #332]	; (3294 <thread_tests+0x310>)
    3146:	f04f 32ff 	mov.w	r2, #4294967295
    314a:	4623      	mov	r3, r4
    314c:	4853      	ldr	r0, [pc, #332]	; (329c <thread_tests+0x318>)
    314e:	f001 fd15 	bl	4b7c <thread_create>
    threads[6] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3152:	9500      	str	r5, [sp, #0]
    threads[0] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[1] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[3] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[4] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[5] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3154:	9007      	str	r0, [sp, #28]
    threads[6] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3156:	494f      	ldr	r1, [pc, #316]	; (3294 <thread_tests+0x310>)
    3158:	f04f 32ff 	mov.w	r2, #4294967295
    315c:	4623      	mov	r3, r4
    315e:	484f      	ldr	r0, [pc, #316]	; (329c <thread_tests+0x318>)
    3160:	f001 fd0c 	bl	4b7c <thread_create>
    threads[7] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3164:	9500      	str	r5, [sp, #0]
    threads[1] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[2] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[3] = thread_create("atomic tester 1", &atomic_tester, (void *)1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[4] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[5] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[6] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3166:	9008      	str	r0, [sp, #32]
    threads[7] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3168:	494a      	ldr	r1, [pc, #296]	; (3294 <thread_tests+0x310>)
    316a:	484c      	ldr	r0, [pc, #304]	; (329c <thread_tests+0x318>)
    316c:	f04f 32ff 	mov.w	r2, #4294967295
    3170:	4623      	mov	r3, r4
    3172:	f001 fd03 	bl	4b7c <thread_create>
    3176:	4645      	mov	r5, r8
    3178:	9009      	str	r0, [sp, #36]	; 0x24

    /* start all the threads */
    for (uint i = 0; i < countof(threads); i++)
        thread_resume(threads[i]);
    317a:	59b8      	ldr	r0, [r7, r6]
    317c:	3604      	adds	r6, #4
    317e:	f001 fd85 	bl	4c8c <thread_resume>
    threads[5] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[6] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    threads[7] = thread_create("atomic tester 2", &atomic_tester, (void *)-1, LOW_PRIORITY, DEFAULT_STACK_SIZE);

    /* start all the threads */
    for (uint i = 0; i < countof(threads); i++)
    3182:	2e20      	cmp	r6, #32
    3184:	d1f9      	bne.n	317a <thread_tests+0x1f6>
    3186:	2400      	movs	r4, #0
        thread_resume(threads[i]);

    /* wait for them to all stop */
    for (uint i = 0; i < countof(threads); i++) {
        thread_join(threads[i], NULL, INFINITE_TIME);
    3188:	5938      	ldr	r0, [r7, r4]
    318a:	2100      	movs	r1, #0
    318c:	f04f 32ff 	mov.w	r2, #4294967295
    3190:	3404      	adds	r4, #4
    3192:	f001 ffd5 	bl	5140 <thread_join>
    /* start all the threads */
    for (uint i = 0; i < countof(threads); i++)
        thread_resume(threads[i]);

    /* wait for them to all stop */
    for (uint i = 0; i < countof(threads); i++) {
    3196:	2c20      	cmp	r4, #32
    3198:	d1f6      	bne.n	3188 <thread_tests+0x204>
        thread_join(threads[i], NULL, INFINITE_TIME);
    }

    printf("atomic count == %d (should be zero)\n", atomic);
    319a:	6829      	ldr	r1, [r5, #0]
    319c:	4840      	ldr	r0, [pc, #256]	; (32a0 <thread_tests+0x31c>)
    319e:	f009 fb73 	bl	c888 <_printf>
    event_test();

    spinlock_test();
    atomic_test();

    thread_sleep(200);
    31a2:	20c8      	movs	r0, #200	; 0xc8
    31a4:	f001 fe1a 	bl	4ddc <thread_sleep>
    /* create 5 threads, let them run. If the system is properly timer preempting,
     * the threads should interleave each other at a fine enough granularity so
     * that they complete at roughly the same time. */
    printf("testing preemption\n");

    preempt_count = 5;
    31a8:	4c3e      	ldr	r4, [pc, #248]	; (32a4 <thread_tests+0x320>)

    spinlock_test();
    atomic_test();

    thread_sleep(200);
    context_switch_test();
    31aa:	f7ff fe51 	bl	2e50 <context_switch_test>
static void preempt_test(void)
{
    /* create 5 threads, let them run. If the system is properly timer preempting,
     * the threads should interleave each other at a fine enough granularity so
     * that they complete at roughly the same time. */
    printf("testing preemption\n");
    31ae:	483e      	ldr	r0, [pc, #248]	; (32a8 <thread_tests+0x324>)
    31b0:	f009 fb6a 	bl	c888 <_printf>

    preempt_count = 5;
    31b4:	2305      	movs	r3, #5
    31b6:	6023      	str	r3, [r4, #0]

    for (int i = 0; i < preempt_count; i++)
    31b8:	2500      	movs	r5, #0
    31ba:	6823      	ldr	r3, [r4, #0]
    31bc:	429d      	cmp	r5, r3
    31be:	da0c      	bge.n	31da <thread_tests+0x256>
        thread_detach_and_resume(thread_create("preempt tester", &preempt_tester, NULL, LOW_PRIORITY, DEFAULT_STACK_SIZE));
    31c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    31c4:	9300      	str	r3, [sp, #0]
    31c6:	4939      	ldr	r1, [pc, #228]	; (32ac <thread_tests+0x328>)
    31c8:	2200      	movs	r2, #0
    31ca:	2308      	movs	r3, #8
    31cc:	4838      	ldr	r0, [pc, #224]	; (32b0 <thread_tests+0x32c>)
    31ce:	f001 fcd5 	bl	4b7c <thread_create>
    31d2:	f002 f97f 	bl	54d4 <thread_detach_and_resume>
     * that they complete at roughly the same time. */
    printf("testing preemption\n");

    preempt_count = 5;

    for (int i = 0; i < preempt_count; i++)
    31d6:	3501      	adds	r5, #1
    31d8:	e7ef      	b.n	31ba <thread_tests+0x236>
        thread_detach_and_resume(thread_create("preempt tester", &preempt_tester, NULL, LOW_PRIORITY, DEFAULT_STACK_SIZE));

    while (preempt_count > 0) {
    31da:	6823      	ldr	r3, [r4, #0]
    31dc:	2b00      	cmp	r3, #0
    31de:	dd04      	ble.n	31ea <thread_tests+0x266>
        thread_sleep(1000);
    31e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    31e4:	f001 fdfa 	bl	4ddc <thread_sleep>
    31e8:	e7f7      	b.n	31da <thread_tests+0x256>
    }

    printf("done with preempt test, above time stamps should be very close\n");
    31ea:	4832      	ldr	r0, [pc, #200]	; (32b4 <thread_tests+0x330>)
    31ec:	f009 fb4c 	bl	c888 <_printf>

    /* do the same as above, but mark the threads as real time, which should
     * effectively disable timer based preemption for them. They should
     * complete in order, about a second apart. */
    printf("testing real time preemption\n");
    31f0:	4831      	ldr	r0, [pc, #196]	; (32b8 <thread_tests+0x334>)
    31f2:	f009 fb49 	bl	c888 <_printf>

    preempt_count = 5;
    31f6:	4b2b      	ldr	r3, [pc, #172]	; (32a4 <thread_tests+0x320>)
    31f8:	2205      	movs	r2, #5
    31fa:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < preempt_count; i++) {
    31fc:	2500      	movs	r5, #0
    31fe:	6823      	ldr	r3, [r4, #0]
    3200:	429d      	cmp	r5, r3
    3202:	da10      	bge.n	3226 <thread_tests+0x2a2>
        thread_t *t = thread_create("preempt tester", &preempt_tester, NULL, LOW_PRIORITY, DEFAULT_STACK_SIZE);
    3204:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3208:	4928      	ldr	r1, [pc, #160]	; (32ac <thread_tests+0x328>)
    320a:	2200      	movs	r2, #0
    320c:	9300      	str	r3, [sp, #0]
    320e:	4828      	ldr	r0, [pc, #160]	; (32b0 <thread_tests+0x32c>)
    3210:	2308      	movs	r3, #8
    3212:	f001 fcb3 	bl	4b7c <thread_create>
    3216:	4606      	mov	r6, r0
        thread_set_real_time(t);
    3218:	f001 fcc2 	bl	4ba0 <thread_set_real_time>
        thread_detach_and_resume(t);
    321c:	4630      	mov	r0, r6
    321e:	f002 f959 	bl	54d4 <thread_detach_and_resume>
     * complete in order, about a second apart. */
    printf("testing real time preemption\n");

    preempt_count = 5;

    for (int i = 0; i < preempt_count; i++) {
    3222:	3501      	adds	r5, #1
    3224:	e7eb      	b.n	31fe <thread_tests+0x27a>
        thread_t *t = thread_create("preempt tester", &preempt_tester, NULL, LOW_PRIORITY, DEFAULT_STACK_SIZE);
        thread_set_real_time(t);
        thread_detach_and_resume(t);
    }

    while (preempt_count > 0) {
    3226:	6823      	ldr	r3, [r4, #0]
    3228:	2b00      	cmp	r3, #0
    322a:	dd49      	ble.n	32c0 <thread_tests+0x33c>
        thread_sleep(1000);
    322c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3230:	f001 fdd4 	bl	4ddc <thread_sleep>
    3234:	e7f7      	b.n	3226 <thread_tests+0x2a2>
    3236:	bf00      	nop
    3238:	0000fe52 	.word	0x0000fe52
    323c:	20000000 	.word	0x20000000
    3240:	200005e0 	.word	0x200005e0
    3244:	200005c0 	.word	0x200005c0
    3248:	200005fc 	.word	0x200005fc
    324c:	000028c9 	.word	0x000028c9
    3250:	0000fe6d 	.word	0x0000fe6d
    3254:	200005b8 	.word	0x200005b8
    3258:	00002899 	.word	0x00002899
    325c:	0000fe80 	.word	0x0000fe80
    3260:	0000fe93 	.word	0x0000fe93
    3264:	0000feba 	.word	0x0000feba
    3268:	0000fedc 	.word	0x0000fedc
    326c:	0000ff08 	.word	0x0000ff08
    3270:	00010774 	.word	0x00010774
    3274:	0000feef 	.word	0x0000feef
    3278:	0000ff09 	.word	0x0000ff09
    327c:	e0001004 	.word	0xe0001004
    3280:	0000ff1e 	.word	0x0000ff1e
    3284:	0000ff2d 	.word	0x0000ff2d
    3288:	0000ff69 	.word	0x0000ff69
    328c:	200005bc 	.word	0x200005bc
    3290:	0000ffaf 	.word	0x0000ffaf
    3294:	000026f5 	.word	0x000026f5
    3298:	0000ffc8 	.word	0x0000ffc8
    329c:	0000ffd8 	.word	0x0000ffd8
    32a0:	0000ffe8 	.word	0x0000ffe8
    32a4:	20000598 	.word	0x20000598
    32a8:	0001000d 	.word	0x0001000d
    32ac:	00002945 	.word	0x00002945
    32b0:	00010021 	.word	0x00010021
    32b4:	00010030 	.word	0x00010030
    32b8:	00010070 	.word	0x00010070
    32bc:	200005dc 	.word	0x200005dc
    }

    printf("done with real-time preempt test, above time stamps should be 1 second apart\n");
    32c0:	4812      	ldr	r0, [pc, #72]	; (330c <thread_tests+0x388>)
    32c2:	f009 fae1 	bl	c888 <_printf>
{
    int ret;
    status_t err;
    thread_t *t;

    printf("testing thread_join/thread_detach\n");
    32c6:	4812      	ldr	r0, [pc, #72]	; (3310 <thread_tests+0x38c>)
    32c8:	f009 fade 	bl	c888 <_printf>

    printf("creating thread join server thread\n");
    32cc:	4811      	ldr	r0, [pc, #68]	; (3314 <thread_tests+0x390>)
    32ce:	f009 fadb 	bl	c888 <_printf>
    t = thread_create("join tester server", &join_tester_server, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    32d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    32d6:	9300      	str	r3, [sp, #0]
    32d8:	490f      	ldr	r1, [pc, #60]	; (3318 <thread_tests+0x394>)
    32da:	2201      	movs	r2, #1
    32dc:	2310      	movs	r3, #16
    32de:	480f      	ldr	r0, [pc, #60]	; (331c <thread_tests+0x398>)
    32e0:	f001 fc4c 	bl	4b7c <thread_create>
    32e4:	4604      	mov	r4, r0
    thread_resume(t);
    32e6:	f001 fcd1 	bl	4c8c <thread_resume>
    ret = 99;
    32ea:	2363      	movs	r3, #99	; 0x63
    err = thread_join(t, &ret, INFINITE_TIME);
    32ec:	4639      	mov	r1, r7
    32ee:	4620      	mov	r0, r4
    32f0:	f04f 32ff 	mov.w	r2, #4294967295
    printf("testing thread_join/thread_detach\n");

    printf("creating thread join server thread\n");
    t = thread_create("join tester server", &join_tester_server, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_resume(t);
    ret = 99;
    32f4:	9302      	str	r3, [sp, #8]
    err = thread_join(t, &ret, INFINITE_TIME);
    32f6:	f001 ff23 	bl	5140 <thread_join>
    printf("thread_join returns err %d, retval %d (should be 0 and 55)\n", err, ret);
    32fa:	9a02      	ldr	r2, [sp, #8]

    printf("creating thread join server thread\n");
    t = thread_create("join tester server", &join_tester_server, (void *)1, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_resume(t);
    ret = 99;
    err = thread_join(t, &ret, INFINITE_TIME);
    32fc:	4601      	mov	r1, r0
    printf("thread_join returns err %d, retval %d (should be 0 and 55)\n", err, ret);
    32fe:	4808      	ldr	r0, [pc, #32]	; (3320 <thread_tests+0x39c>)
    3300:	f009 fac2 	bl	c888 <_printf>
    preempt_test();

    join_test();

    return 0;
}
    3304:	2000      	movs	r0, #0
    3306:	b00a      	add	sp, #40	; 0x28
    3308:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    330c:	0001008e 	.word	0x0001008e
    3310:	0000f9b0 	.word	0x0000f9b0
    3314:	000100dc 	.word	0x000100dc
    3318:	00002975 	.word	0x00002975
    331c:	00010100 	.word	0x00010100
    3320:	00010113 	.word	0x00010113

00003324 <spinner>:
    return 0;
}

int spinner(int argc, const cmd_args *argv)
{
    if (argc < 2) {
    3324:	2801      	cmp	r0, #1

    return 0;
}

int spinner(int argc, const cmd_args *argv)
{
    3326:	b573      	push	{r0, r1, r4, r5, r6, r14}
    3328:	4606      	mov	r6, r0
    332a:	460c      	mov	r4, r1
    if (argc < 2) {
    332c:	dc09      	bgt.n	3342 <spinner+0x1e>
        printf("not enough args\n");
    332e:	4814      	ldr	r0, [pc, #80]	; (3380 <spinner+0x5c>)
    3330:	f009 faaa 	bl	c888 <_printf>
        printf("usage: %s <priority> <rt>\n", argv[0].str);
    3334:	4813      	ldr	r0, [pc, #76]	; (3384 <spinner+0x60>)
    3336:	6821      	ldr	r1, [r4, #0]
    3338:	f009 faa6 	bl	c888 <_printf>
        return -1;
    333c:	f04f 30ff 	mov.w	r0, #4294967295
    3340:	e01b      	b.n	337a <spinner+0x56>
    }

    thread_t *t = thread_create("spinner", spinner_thread, NULL, argv[1].u, DEFAULT_STACK_SIZE);
    3342:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3346:	9300      	str	r3, [sp, #0]
    3348:	480f      	ldr	r0, [pc, #60]	; (3388 <spinner+0x64>)
    334a:	4910      	ldr	r1, [pc, #64]	; (338c <spinner+0x68>)
    334c:	2200      	movs	r2, #0
    334e:	69a3      	ldr	r3, [r4, #24]
    3350:	f001 fc14 	bl	4b7c <thread_create>
    if (!t)
    3354:	4605      	mov	r5, r0
    3356:	b170      	cbz	r0, 3376 <spinner+0x52>
        return ERR_NO_MEMORY;

    if (argc >= 3 && !strcmp(argv[2].str, "rt")) {
    3358:	2e02      	cmp	r6, #2
    335a:	d007      	beq.n	336c <spinner+0x48>
    335c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    335e:	490c      	ldr	r1, [pc, #48]	; (3390 <spinner+0x6c>)
    3360:	f009 fab9 	bl	c8d6 <strcmp>
    3364:	b910      	cbnz	r0, 336c <spinner+0x48>
        thread_set_real_time(t);
    3366:	4628      	mov	r0, r5
    3368:	f001 fc1a 	bl	4ba0 <thread_set_real_time>
    }
    thread_resume(t);
    336c:	4628      	mov	r0, r5
    336e:	f001 fc8d 	bl	4c8c <thread_resume>

    return 0;
    3372:	2000      	movs	r0, #0
    3374:	e001      	b.n	337a <spinner+0x56>
        return -1;
    }

    thread_t *t = thread_create("spinner", spinner_thread, NULL, argv[1].u, DEFAULT_STACK_SIZE);
    if (!t)
        return ERR_NO_MEMORY;
    3376:	f06f 0004 	mvn.w	r0, #4
        thread_set_real_time(t);
    }
    thread_resume(t);

    return 0;
}
    337a:	b002      	add	sp, #8
    337c:	bd70      	pop	{r4, r5, r6, r15}
    337e:	bf00      	nop
    3380:	0000f0da 	.word	0x0000f0da
    3384:	0001014f 	.word	0x0001014f
    3388:	0000f6e0 	.word	0x0000f6e0
    338c:	000026f3 	.word	0x000026f3
    3390:	00018033 	.word	0x00018033

00003394 <make_port_pair>:

    return 0;
}

static status_t make_port_pair(const char *name, void *ctx, port_t *write, port_t *read)
{
    3394:	b570      	push	{r4, r5, r6, r14}
    3396:	460c      	mov	r4, r1
    status_t st = port_create(name, PORT_MODE_UNICAST, write);
    3398:	2101      	movs	r1, #1

    return 0;
}

static status_t make_port_pair(const char *name, void *ctx, port_t *write, port_t *read)
{
    339a:	4605      	mov	r5, r0
    339c:	461e      	mov	r6, r3
    status_t st = port_create(name, PORT_MODE_UNICAST, write);
    339e:	f002 fc29 	bl	5bf4 <port_create>
    if (st < 0)
    33a2:	2800      	cmp	r0, #0
    33a4:	db06      	blt.n	33b4 <make_port_pair+0x20>
        return st;
    return port_open(name,ctx, read);
    33a6:	4628      	mov	r0, r5
    33a8:	4621      	mov	r1, r4
    33aa:	4632      	mov	r2, r6
}
    33ac:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
static status_t make_port_pair(const char *name, void *ctx, port_t *write, port_t *read)
{
    status_t st = port_create(name, PORT_MODE_UNICAST, write);
    if (st < 0)
        return st;
    return port_open(name,ctx, read);
    33b0:	f002 bc9e 	b.w	5cf0 <port_open>
}
    33b4:	bd70      	pop	{r4, r5, r6, r15}
	...

000033b8 <ping_pong_thread>:
    printf("single_thread_basic : ok\n");
    return 0;
}

static int ping_pong_thread(void *arg)
{
    33b8:	b510      	push	{r4, r14}
    33ba:	b086      	sub	sp, #24
    port_t r_port;
    status_t st = port_open("ping_port", NULL, &r_port);
    33bc:	2100      	movs	r1, #0
    33be:	482b      	ldr	r0, [pc, #172]	; (346c <ping_pong_thread+0xb4>)
    33c0:	aa01      	add	r2, sp, #4
    33c2:	f002 fc95 	bl	5cf0 <port_open>
    if (st < 0) {
    33c6:	1e01      	subs	r1, r0, #0
    33c8:	da04      	bge.n	33d4 <ping_pong_thread+0x1c>
        printf("thread: could not open port, status = %d\n", st);
    33ca:	4829      	ldr	r0, [pc, #164]	; (3470 <ping_pong_thread+0xb8>)
    33cc:	f009 fa5c 	bl	c888 <_printf>
        return __LINE__;
    33d0:	20f3      	movs	r0, #243	; 0xf3
    33d2:	e048      	b.n	3466 <ping_pong_thread+0xae>
    }

    bool should_dispose_pong_port = true;
    port_t w_port;
    st = port_create("pong_port", PORT_MODE_UNICAST, &w_port);
    33d4:	2101      	movs	r1, #1
    33d6:	4827      	ldr	r0, [pc, #156]	; (3474 <ping_pong_thread+0xbc>)
    33d8:	aa02      	add	r2, sp, #8
    33da:	f002 fc0b 	bl	5bf4 <port_create>
    if (st == ERR_ALREADY_EXISTS) {
    33de:	f110 0f0e 	cmn.w	r0, #14
        return __LINE__;
    }

    bool should_dispose_pong_port = true;
    port_t w_port;
    st = port_create("pong_port", PORT_MODE_UNICAST, &w_port);
    33e2:	4601      	mov	r1, r0
    if (st == ERR_ALREADY_EXISTS) {
    33e4:	d006      	beq.n	33f4 <ping_pong_thread+0x3c>
        // won the race to create the port.
        should_dispose_pong_port = false;
    } else if (st < 0) {
    33e6:	2800      	cmp	r0, #0
    33e8:	da06      	bge.n	33f8 <ping_pong_thread+0x40>
        printf("thread: could not open port, status = %d\n", st);
    33ea:	4821      	ldr	r0, [pc, #132]	; (3470 <ping_pong_thread+0xb8>)
    33ec:	f009 fa4c 	bl	c888 <_printf>
        return __LINE__;
    33f0:	20fe      	movs	r0, #254	; 0xfe
    33f2:	e038      	b.n	3466 <ping_pong_thread+0xae>
    bool should_dispose_pong_port = true;
    port_t w_port;
    st = port_create("pong_port", PORT_MODE_UNICAST, &w_port);
    if (st == ERR_ALREADY_EXISTS) {
        // won the race to create the port.
        should_dispose_pong_port = false;
    33f4:	2400      	movs	r4, #0
    33f6:	e000      	b.n	33fa <ping_pong_thread+0x42>
    if (st < 0) {
        printf("thread: could not open port, status = %d\n", st);
        return __LINE__;
    }

    bool should_dispose_pong_port = true;
    33f8:	2401      	movs	r4, #1
    port_result_t pr;

    // the loop is read-mutate-write until the write port
    // is closed by the master thread.
    while (true) {
        st = port_read(r_port, INFINITE_TIME, &pr);
    33fa:	f04f 31ff 	mov.w	r1, #4294967295
    33fe:	9801      	ldr	r0, [sp, #4]
    3400:	aa03      	add	r2, sp, #12
    3402:	f002 fe55 	bl	60b0 <port_read>

        if (st == ERR_CANCELLED) {
    3406:	f110 0f1a 	cmn.w	r0, #26
    port_result_t pr;

    // the loop is read-mutate-write until the write port
    // is closed by the master thread.
    while (true) {
        st = port_read(r_port, INFINITE_TIME, &pr);
    340a:	4601      	mov	r1, r0

        if (st == ERR_CANCELLED) {
    340c:	d01e      	beq.n	344c <ping_pong_thread+0x94>
            break;
        } else if (st < 0) {
    340e:	2800      	cmp	r0, #0
    3410:	da05      	bge.n	341e <ping_pong_thread+0x66>
            printf("thread: could not read port, status = %d\n", st);
    3412:	4819      	ldr	r0, [pc, #100]	; (3478 <ping_pong_thread+0xc0>)
    3414:	f009 fa38 	bl	c888 <_printf>
            return __LINE__;
    3418:	f44f 7086 	mov.w	r0, #268	; 0x10c
    341c:	e023      	b.n	3466 <ping_pong_thread+0xae>
        }

        pr.packet.value[0]++;
    341e:	f89d 3010 	ldrb.w	r3, [r13, #16]
        pr.packet.value[5]--;

        st = port_write(w_port, &pr.packet, 1);
    3422:	a904      	add	r1, sp, #16
        } else if (st < 0) {
            printf("thread: could not read port, status = %d\n", st);
            return __LINE__;
        }

        pr.packet.value[0]++;
    3424:	3301      	adds	r3, #1
    3426:	f88d 3010 	strb.w	r3, [r13, #16]
        pr.packet.value[5]--;
    342a:	f89d 3015 	ldrb.w	r3, [r13, #21]

        st = port_write(w_port, &pr.packet, 1);
    342e:	9802      	ldr	r0, [sp, #8]
            printf("thread: could not read port, status = %d\n", st);
            return __LINE__;
        }

        pr.packet.value[0]++;
        pr.packet.value[5]--;
    3430:	3b01      	subs	r3, #1

        st = port_write(w_port, &pr.packet, 1);
    3432:	2201      	movs	r2, #1
            printf("thread: could not read port, status = %d\n", st);
            return __LINE__;
        }

        pr.packet.value[0]++;
        pr.packet.value[5]--;
    3434:	f88d 3015 	strb.w	r3, [r13, #21]

        st = port_write(w_port, &pr.packet, 1);
    3438:	f002 fdd8 	bl	5fec <port_write>
        if (st < 0) {
    343c:	1e01      	subs	r1, r0, #0
    343e:	dadc      	bge.n	33fa <ping_pong_thread+0x42>
            printf("thread: could not write port, status = %d\n", st);
    3440:	480e      	ldr	r0, [pc, #56]	; (347c <ping_pong_thread+0xc4>)
    3442:	f009 fa21 	bl	c888 <_printf>
            return __LINE__;
    3446:	f240 1015 	movw	r0, #277	; 0x115
    344a:	e00c      	b.n	3466 <ping_pong_thread+0xae>
        }
    }

    port_close(r_port);
    344c:	9801      	ldr	r0, [sp, #4]
    344e:	f002 fec9 	bl	61e4 <port_close>

    if (should_dispose_pong_port) {
    3452:	b13c      	cbz	r4, 3464 <ping_pong_thread+0xac>
        port_close(w_port);
    3454:	9802      	ldr	r0, [sp, #8]
    3456:	f002 fec5 	bl	61e4 <port_close>
        port_destroy(w_port);
    345a:	9802      	ldr	r0, [sp, #8]
    345c:	f002 fe76 	bl	614c <port_destroy>
    }

    return 0;
    3460:	2000      	movs	r0, #0
    3462:	e000      	b.n	3466 <ping_pong_thread+0xae>
    3464:	4620      	mov	r0, r4

bail:
    return __LINE__;
}
    3466:	b006      	add	sp, #24
    3468:	bd10      	pop	{r4, r15}
    346a:	bf00      	nop
    346c:	0001016a 	.word	0x0001016a
    3470:	00010174 	.word	0x00010174
    3474:	0001019e 	.word	0x0001019e
    3478:	000101a8 	.word	0x000101a8
    347c:	000101d2 	.word	0x000101d2

00003480 <group_watcher_thread>:
    watcher_cmd cmd  = {action, port};
    return port_write(cmd_port, ((port_packet_t *) &cmd), 1);;
}

static int group_watcher_thread(void *arg)
{
    3480:	b570      	push	{r4, r5, r6, r14}
    3482:	b08c      	sub	sp, #48	; 0x30
    port_t watched[8] = {0};
    3484:	ad04      	add	r5, sp, #16
    3486:	2100      	movs	r1, #0
    3488:	2220      	movs	r2, #32
    348a:	4628      	mov	r0, r5
    348c:	f008 fbe4 	bl	bc58 <memset>
    status_t st = port_open("grp_ctrl", CMD_PORT_CTX, &watched[0]);
    3490:	2177      	movs	r1, #119	; 0x77
    3492:	4836      	ldr	r0, [pc, #216]	; (356c <group_watcher_thread+0xec>)
    3494:	462a      	mov	r2, r5
    3496:	f002 fc2b 	bl	5cf0 <port_open>
    if (st < 0) {
    349a:	1e01      	subs	r1, r0, #0
    349c:	da05      	bge.n	34aa <group_watcher_thread+0x2a>
        printf("could not open port, status = %d\n", st);
    349e:	4834      	ldr	r0, [pc, #208]	; (3570 <group_watcher_thread+0xf0>)
    34a0:	f009 f9f2 	bl	c888 <_printf>
        return __LINE__;
    34a4:	f240 10b1 	movw	r0, #433	; 0x1b1
    34a8:	e05d      	b.n	3566 <group_watcher_thread+0xe6>

static int group_watcher_thread(void *arg)
{
    port_t watched[8] = {0};
    status_t st = port_open("grp_ctrl", CMD_PORT_CTX, &watched[0]);
    if (st < 0) {
    34aa:	2601      	movs	r6, #1
    34ac:	f04f 34ff 	mov.w	r4, #4294967295
    size_t count = 1;
    port_t group;
    int ctx_count = -1;

    while (true) {
        st = port_group(watched, count, &group);
    34b0:	4631      	mov	r1, r6
    34b2:	4628      	mov	r0, r5
    34b4:	466a      	mov	r2, r13
    34b6:	f002 fc9b 	bl	5df0 <port_group>
        if (st < 0) {
    34ba:	1e01      	subs	r1, r0, #0
    34bc:	da0b      	bge.n	34d6 <group_watcher_thread+0x56>
            printf("could not make group, status = %d\n", st);
    34be:	482d      	ldr	r0, [pc, #180]	; (3574 <group_watcher_thread+0xf4>)
    34c0:	f009 f9e2 	bl	c888 <_printf>
            return __LINE__;
    34c4:	f44f 70de 	mov.w	r0, #444	; 0x1bc
    34c8:	e04d      	b.n	3566 <group_watcher_thread+0xe6>
            if (st < 0) {
                printf("could not read port, status = %d\n", st);
                return __LINE__;
            }

            if (pr.ctx == CMD_PORT_CTX) {
    34ca:	9901      	ldr	r1, [sp, #4]
    34cc:	2977      	cmp	r1, #119	; 0x77
    34ce:	d01a      	beq.n	3506 <group_watcher_thread+0x86>
                break;
            } else if (pr.ctx == TS1_PORT_CTX) {
    34d0:	2911      	cmp	r1, #17
    34d2:	d10e      	bne.n	34f2 <group_watcher_thread+0x72>
                ctx_count += 1;
    34d4:	3401      	adds	r4, #1
            return __LINE__;
        }

        port_result_t pr;
        while (true) {
            st = port_read(group, INFINITE_TIME, &pr);
    34d6:	f04f 31ff 	mov.w	r1, #4294967295
    34da:	9800      	ldr	r0, [sp, #0]
    34dc:	aa01      	add	r2, sp, #4
    34de:	f002 fde7 	bl	60b0 <port_read>
            if (st < 0) {
    34e2:	1e01      	subs	r1, r0, #0
    34e4:	daf1      	bge.n	34ca <group_watcher_thread+0x4a>
                printf("could not read port, status = %d\n", st);
    34e6:	4824      	ldr	r0, [pc, #144]	; (3578 <group_watcher_thread+0xf8>)
    34e8:	f009 f9ce 	bl	c888 <_printf>
                return __LINE__;
    34ec:	f44f 70e2 	mov.w	r0, #452	; 0x1c4
    34f0:	e039      	b.n	3566 <group_watcher_thread+0xe6>

            if (pr.ctx == CMD_PORT_CTX) {
                break;
            } else if (pr.ctx == TS1_PORT_CTX) {
                ctx_count += 1;
            } else if (pr.ctx == TS2_PORT_CTX) {
    34f2:	2912      	cmp	r1, #18
    34f4:	d101      	bne.n	34fa <group_watcher_thread+0x7a>
                ctx_count += 2;
    34f6:	3402      	adds	r4, #2
    34f8:	e7ed      	b.n	34d6 <group_watcher_thread+0x56>
            } else {
                printf("unknown context %p\n", pr.ctx);
    34fa:	4820      	ldr	r0, [pc, #128]	; (357c <group_watcher_thread+0xfc>)
    34fc:	f009 f9c4 	bl	c888 <_printf>
                return __LINE__;
    3500:	f240 10cf 	movw	r0, #463	; 0x1cf
    3504:	e02f      	b.n	3566 <group_watcher_thread+0xe6>

        // Either adding a port or exiting; either way close the
        // existing group port and create a new one if needed
        // at the top of the loop.

        port_close(group);
    3506:	9800      	ldr	r0, [sp, #0]
    3508:	f002 fe6c 	bl	61e4 <port_close>
        watcher_cmd *wc = (watcher_cmd *) &pr.packet;

        if (wc->what == ADD_PORT) {
    350c:	f89d 1008 	ldrb.w	r1, [r13, #8]
    3510:	b921      	cbnz	r1, 351c <group_watcher_thread+0x9c>
            watched[count++] = wc->port;
    3512:	9b03      	ldr	r3, [sp, #12]
    3514:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
    3518:	3601      	adds	r6, #1
    351a:	e7c9      	b.n	34b0 <group_watcher_thread+0x30>
        }  else if (wc->what == QUIT) {
    351c:	2901      	cmp	r1, #1
    351e:	d005      	beq.n	352c <group_watcher_thread+0xac>
            break;
        } else {
            printf("unknown command %d\n", wc->what);
    3520:	4817      	ldr	r0, [pc, #92]	; (3580 <group_watcher_thread+0x100>)
    3522:	f009 f9b1 	bl	c888 <_printf>
            return __LINE__;
    3526:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    352a:	e01c      	b.n	3566 <group_watcher_thread+0xe6>
        }
    }

    if (ctx_count !=  2) {
    352c:	2c02      	cmp	r4, #2
    352e:	d006      	beq.n	353e <group_watcher_thread+0xbe>
        printf("unexpected context count %d", ctx_count);
    3530:	4814      	ldr	r0, [pc, #80]	; (3584 <group_watcher_thread+0x104>)
    3532:	4621      	mov	r1, r4
    3534:	f009 f9a8 	bl	c888 <_printf>
        return __LINE__;
    3538:	f44f 70f3 	mov.w	r0, #486	; 0x1e6
    353c:	e013      	b.n	3566 <group_watcher_thread+0xe6>
    }

    printf("group watcher shutdown\n");
    353e:	4812      	ldr	r0, [pc, #72]	; (3588 <group_watcher_thread+0x108>)
    3540:	f009 f9a2 	bl	c888 <_printf>

    for (size_t ix = 0; ix != count; ++ix) {
    3544:	2400      	movs	r4, #0
        st = port_close(watched[ix]);
    3546:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    354a:	f002 fe4b 	bl	61e4 <port_close>
        if (st < 0) {
    354e:	1e01      	subs	r1, r0, #0
    3550:	da05      	bge.n	355e <group_watcher_thread+0xde>
            printf("failed to close read port, status = %d\n", st);
    3552:	480e      	ldr	r0, [pc, #56]	; (358c <group_watcher_thread+0x10c>)
    3554:	f009 f998 	bl	c888 <_printf>
            return __LINE__;
    3558:	f240 10ef 	movw	r0, #495	; 0x1ef
    355c:	e003      	b.n	3566 <group_watcher_thread+0xe6>
        return __LINE__;
    }

    printf("group watcher shutdown\n");

    for (size_t ix = 0; ix != count; ++ix) {
    355e:	3401      	adds	r4, #1
    3560:	42b4      	cmp	r4, r6
    3562:	d1f0      	bne.n	3546 <group_watcher_thread+0xc6>
            printf("failed to close read port, status = %d\n", st);
            return __LINE__;
        }
    }

    return 0;
    3564:	2000      	movs	r0, #0
}
    3566:	b00c      	add	sp, #48	; 0x30
    3568:	bd70      	pop	{r4, r5, r6, r15}
    356a:	bf00      	nop
    356c:	000101fd 	.word	0x000101fd
    3570:	0001017c 	.word	0x0001017c
    3574:	00010206 	.word	0x00010206
    3578:	000101b0 	.word	0x000101b0
    357c:	00010229 	.word	0x00010229
    3580:	0001023d 	.word	0x0001023d
    3584:	00010251 	.word	0x00010251
    3588:	0001026d 	.word	0x0001026d
    358c:	00010285 	.word	0x00010285

00003590 <two_threads_basic>:
    return __LINE__;
}


int two_threads_basic(void)
{
    3590:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}
    3594:	b08a      	sub	sp, #40	; 0x28
    port_t w_port;
    status_t st = port_create("ping_port", PORT_MODE_BROADCAST, &w_port);
    3596:	2100      	movs	r1, #0
    3598:	4871      	ldr	r0, [pc, #452]	; (3760 <two_threads_basic+0x1d0>)
    359a:	aa02      	add	r2, sp, #8
    359c:	f002 fb2a 	bl	5bf4 <port_create>
    if (st < 0) {
    35a0:	1e01      	subs	r1, r0, #0
    35a2:	da05      	bge.n	35b0 <two_threads_basic+0x20>
        printf("could not create port, status = %d\n", st);
    35a4:	486f      	ldr	r0, [pc, #444]	; (3764 <two_threads_basic+0x1d4>)
    35a6:	f009 f96f 	bl	c888 <_printf>
        return __LINE__;
    35aa:	f240 102d 	movw	r0, #301	; 0x12d
    35ae:	e0d3      	b.n	3758 <two_threads_basic+0x1c8>
    }

    thread_t *t1 = thread_create(
    35b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    35b4:	496c      	ldr	r1, [pc, #432]	; (3768 <two_threads_basic+0x1d8>)
    35b6:	2200      	movs	r2, #0
    35b8:	2310      	movs	r3, #16
    35ba:	9400      	str	r4, [sp, #0]
    35bc:	486b      	ldr	r0, [pc, #428]	; (376c <two_threads_basic+0x1dc>)
    35be:	f001 fadd 	bl	4b7c <thread_create>
                       "worker1", &ping_pong_thread, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_t *t2 = thread_create(
    35c2:	4969      	ldr	r1, [pc, #420]	; (3768 <two_threads_basic+0x1d8>)
    if (st < 0) {
        printf("could not create port, status = %d\n", st);
        return __LINE__;
    }

    thread_t *t1 = thread_create(
    35c4:	4680      	mov	r8, r0
                       "worker1", &ping_pong_thread, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_t *t2 = thread_create(
    35c6:	2200      	movs	r2, #0
    35c8:	2310      	movs	r3, #16
    35ca:	9400      	str	r4, [sp, #0]
    35cc:	4868      	ldr	r0, [pc, #416]	; (3770 <two_threads_basic+0x1e0>)
    35ce:	f001 fad5 	bl	4b7c <thread_create>
    35d2:	4607      	mov	r7, r0
                       "worker2", &ping_pong_thread, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_resume(t1);
    35d4:	4640      	mov	r0, r8
    35d6:	f001 fb59 	bl	4c8c <thread_resume>
    thread_resume(t2);
    35da:	4638      	mov	r0, r7
    35dc:	f001 fb56 	bl	4c8c <thread_resume>

    // wait for the pong port to be created, the two threads race to do it.
    port_t r_port;
    while (true) {
        status_t st = port_open("pong_port", NULL, &r_port);
    35e0:	4864      	ldr	r0, [pc, #400]	; (3774 <two_threads_basic+0x1e4>)
    35e2:	2100      	movs	r1, #0
    35e4:	aa03      	add	r2, sp, #12
    35e6:	f002 fb83 	bl	5cf0 <port_open>
        if (st == NO_ERROR) {
    35ea:	4604      	mov	r4, r0
    35ec:	b160      	cbz	r0, 3608 <two_threads_basic+0x78>
            break;
        } else if (st == ERR_NOT_FOUND) {
    35ee:	1c83      	adds	r3, r0, #2
    35f0:	d103      	bne.n	35fa <two_threads_basic+0x6a>
            thread_sleep(100);
    35f2:	2064      	movs	r0, #100	; 0x64
    35f4:	f001 fbf2 	bl	4ddc <thread_sleep>
        } else {
            printf("could not open port, status = %d\n", st);
            return __LINE__;
        }
    }
    35f8:	e7f2      	b.n	35e0 <two_threads_basic+0x50>
        if (st == NO_ERROR) {
            break;
        } else if (st == ERR_NOT_FOUND) {
            thread_sleep(100);
        } else {
            printf("could not open port, status = %d\n", st);
    35fa:	485f      	ldr	r0, [pc, #380]	; (3778 <two_threads_basic+0x1e8>)
    35fc:	4621      	mov	r1, r4
    35fe:	f009 f943 	bl	c888 <_printf>
            return __LINE__;
    3602:	f240 1041 	movw	r0, #321	; 0x141
    3606:	e0a7      	b.n	3758 <two_threads_basic+0x1c8>
    }

    // We have two threads listening to the ping port. Which both reply
    // on the pong port, so we get two packets in per packet out.
    const int passes = 256;
    printf("two_threads_basic test, %d passes\n", passes);
    3608:	f44f 7180 	mov.w	r1, #256	; 0x100
    360c:	485b      	ldr	r0, [pc, #364]	; (377c <two_threads_basic+0x1ec>)
    360e:	f009 f93b 	bl	c888 <_printf>

    port_packet_t packet_out = {{0xaf, 0x77, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05}};
    3612:	4a5b      	ldr	r2, [pc, #364]	; (3780 <two_threads_basic+0x1f0>)
    3614:	ab05      	add	r3, sp, #20
    3616:	6810      	ldr	r0, [r2, #0]
    3618:	6851      	ldr	r1, [r2, #4]
    361a:	c303      	stmia	r3!, {r0, r1}

    port_result_t pr;
    for (int ix = 0; ix != passes; ++ix) {
        const size_t count = 1 + ((unsigned int)rand() % 3);
    361c:	f009 f8dc 	bl	c7d8 <rand>
    3620:	2303      	movs	r3, #3
    3622:	fbb0 f6f3 	udiv	r6, r0, r3
    3626:	fb06 0013 	mls	r0, r6, r3, r0

        for (size_t jx = 0; jx != count; ++jx) {
    362a:	2500      	movs	r5, #0

    port_packet_t packet_out = {{0xaf, 0x77, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05}};

    port_result_t pr;
    for (int ix = 0; ix != passes; ++ix) {
        const size_t count = 1 + ((unsigned int)rand() % 3);
    362c:	1c46      	adds	r6, r0, #1

        for (size_t jx = 0; jx != count; ++jx) {
            st = port_write(w_port, &packet_out, 1);
    362e:	a905      	add	r1, sp, #20
    3630:	9802      	ldr	r0, [sp, #8]
    3632:	2201      	movs	r2, #1
    3634:	f002 fcda 	bl	5fec <port_write>
            if (st < 0) {
    3638:	1e01      	subs	r1, r0, #0
    363a:	da05      	bge.n	3648 <two_threads_basic+0xb8>
                printf("could not write port, status = %d\n", st);
    363c:	4851      	ldr	r0, [pc, #324]	; (3784 <two_threads_basic+0x1f4>)
    363e:	f009 f923 	bl	c888 <_printf>
                return __LINE__;
    3642:	f44f 70aa 	mov.w	r0, #340	; 0x154
    3646:	e087      	b.n	3758 <two_threads_basic+0x1c8>

    port_result_t pr;
    for (int ix = 0; ix != passes; ++ix) {
        const size_t count = 1 + ((unsigned int)rand() % 3);

        for (size_t jx = 0; jx != count; ++jx) {
    3648:	3501      	adds	r5, #1
    364a:	42b5      	cmp	r5, r6
    364c:	d1ef      	bne.n	362e <two_threads_basic+0x9e>
                printf("could not write port, status = %d\n", st);
                return __LINE__;
            }
        }

        packet_out.value[0]++;
    364e:	f89d 3014 	ldrb.w	r3, [r13, #20]
        packet_out.value[5]--;

        for (size_t jx = 0; jx != count * 2; ++jx) {
    3652:	006d      	lsls	r5, r5, #1
                printf("could not write port, status = %d\n", st);
                return __LINE__;
            }
        }

        packet_out.value[0]++;
    3654:	3301      	adds	r3, #1
    3656:	f88d 3014 	strb.w	r3, [r13, #20]
        packet_out.value[5]--;
    365a:	f89d 3019 	ldrb.w	r3, [r13, #25]

        for (size_t jx = 0; jx != count * 2; ++jx) {
    365e:	2600      	movs	r6, #0
                return __LINE__;
            }
        }

        packet_out.value[0]++;
        packet_out.value[5]--;
    3660:	3b01      	subs	r3, #1
    3662:	f88d 3019 	strb.w	r3, [r13, #25]

        for (size_t jx = 0; jx != count * 2; ++jx) {
            st = port_read(r_port, INFINITE_TIME, &pr);
    3666:	f04f 31ff 	mov.w	r1, #4294967295
    366a:	9803      	ldr	r0, [sp, #12]
    366c:	aa07      	add	r2, sp, #28
    366e:	f002 fd1f 	bl	60b0 <port_read>
            if (st < 0) {
    3672:	1e01      	subs	r1, r0, #0
    3674:	da05      	bge.n	3682 <two_threads_basic+0xf2>
                printf("could not read port, status = %d\n", st);
    3676:	4844      	ldr	r0, [pc, #272]	; (3788 <two_threads_basic+0x1f8>)
    3678:	f009 f906 	bl	c888 <_printf>
                return __LINE__;
    367c:	f240 105f 	movw	r0, #351	; 0x15f
    3680:	e06a      	b.n	3758 <two_threads_basic+0x1c8>
            }

            if ((pr.packet.value[0] != packet_out.value[0]) ||
    3682:	f89d 2020 	ldrb.w	r2, [r13, #32]
    3686:	f89d 3014 	ldrb.w	r3, [r13, #20]
    368a:	429a      	cmp	r2, r3
    368c:	d006      	beq.n	369c <two_threads_basic+0x10c>
                    (pr.packet.value[5] != packet_out.value[5])) {
                printf("unexpected data in packet, loop %d", ix);
    368e:	483f      	ldr	r0, [pc, #252]	; (378c <two_threads_basic+0x1fc>)
    3690:	4621      	mov	r1, r4
    3692:	f009 f8f9 	bl	c888 <_printf>
                return __LINE__;
    3696:	f240 1065 	movw	r0, #357	; 0x165
    369a:	e05d      	b.n	3758 <two_threads_basic+0x1c8>
            if (st < 0) {
                printf("could not read port, status = %d\n", st);
                return __LINE__;
            }

            if ((pr.packet.value[0] != packet_out.value[0]) ||
    369c:	f89d 2025 	ldrb.w	r2, [r13, #37]	; 0x25
    36a0:	f89d 3019 	ldrb.w	r3, [r13, #25]
    36a4:	429a      	cmp	r2, r3
    36a6:	d1f2      	bne.n	368e <two_threads_basic+0xfe>
        }

        packet_out.value[0]++;
        packet_out.value[5]--;

        for (size_t jx = 0; jx != count * 2; ++jx) {
    36a8:	3601      	adds	r6, #1
    36aa:	42ae      	cmp	r6, r5
    36ac:	d1db      	bne.n	3666 <two_threads_basic+0xd6>
    printf("two_threads_basic test, %d passes\n", passes);

    port_packet_t packet_out = {{0xaf, 0x77, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05}};

    port_result_t pr;
    for (int ix = 0; ix != passes; ++ix) {
    36ae:	3401      	adds	r4, #1
    36b0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    36b4:	d1b2      	bne.n	361c <two_threads_basic+0x8c>
                return __LINE__;
            }
        }
    }

    thread_sleep(100);
    36b6:	2064      	movs	r0, #100	; 0x64
    36b8:	f001 fb90 	bl	4ddc <thread_sleep>

    // there should be no more packets to read.
    st = port_read(r_port, 0, &pr);
    36bc:	2100      	movs	r1, #0
    36be:	9803      	ldr	r0, [sp, #12]
    36c0:	aa07      	add	r2, sp, #28
    36c2:	f002 fcf5 	bl	60b0 <port_read>
    if (st != ERR_TIMED_OUT) {
    36c6:	f110 0f0d 	cmn.w	r0, #13
    }

    thread_sleep(100);

    // there should be no more packets to read.
    st = port_read(r_port, 0, &pr);
    36ca:	4601      	mov	r1, r0
    if (st != ERR_TIMED_OUT) {
    36cc:	d005      	beq.n	36da <two_threads_basic+0x14a>
        printf("unexpected packet, status = %d\n", st);
    36ce:	4830      	ldr	r0, [pc, #192]	; (3790 <two_threads_basic+0x200>)
    36d0:	f009 f8da 	bl	c888 <_printf>
        return __LINE__;
    36d4:	f44f 70b8 	mov.w	r0, #368	; 0x170
    36d8:	e03e      	b.n	3758 <two_threads_basic+0x1c8>
    }

    printf("two_threads_basic master shutdown\n");
    36da:	482e      	ldr	r0, [pc, #184]	; (3794 <two_threads_basic+0x204>)
    36dc:	f009 f8d4 	bl	c888 <_printf>

    st = port_close(r_port);
    36e0:	9803      	ldr	r0, [sp, #12]
    36e2:	f002 fd7f 	bl	61e4 <port_close>
    if (st < 0) {
    36e6:	1e01      	subs	r1, r0, #0
    36e8:	da05      	bge.n	36f6 <two_threads_basic+0x166>
        printf("could not close port, status = %d\n", st);
    36ea:	482b      	ldr	r0, [pc, #172]	; (3798 <two_threads_basic+0x208>)
    36ec:	f009 f8cc 	bl	c888 <_printf>
        return __LINE__;
    36f0:	f44f 70bc 	mov.w	r0, #376	; 0x178
    36f4:	e030      	b.n	3758 <two_threads_basic+0x1c8>
    }

    st = port_close(w_port);
    36f6:	9802      	ldr	r0, [sp, #8]
    36f8:	f002 fd74 	bl	61e4 <port_close>
    if (st < 0) {
    36fc:	1e01      	subs	r1, r0, #0
    36fe:	da05      	bge.n	370c <two_threads_basic+0x17c>
        printf("could not close port, status = %d\n", st);
    3700:	4825      	ldr	r0, [pc, #148]	; (3798 <two_threads_basic+0x208>)
    3702:	f009 f8c1 	bl	c888 <_printf>
        return __LINE__;
    3706:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    370a:	e025      	b.n	3758 <two_threads_basic+0x1c8>
    }

    st = port_destroy(w_port);
    370c:	9802      	ldr	r0, [sp, #8]
    370e:	f002 fd1d 	bl	614c <port_destroy>
    if (st < 0) {
    3712:	1e01      	subs	r1, r0, #0
    3714:	da05      	bge.n	3722 <two_threads_basic+0x192>
        printf("could not destroy port, status = %d\n", st);
    3716:	4821      	ldr	r0, [pc, #132]	; (379c <two_threads_basic+0x20c>)
    3718:	f009 f8b6 	bl	c888 <_printf>
        return __LINE__;
    371c:	f44f 70c2 	mov.w	r0, #388	; 0x184
    3720:	e01a      	b.n	3758 <two_threads_basic+0x1c8>
    }

    int retcode = -1;
    3722:	f04f 32ff 	mov.w	r2, #4294967295
    3726:	ac0a      	add	r4, sp, #40	; 0x28
    3728:	f844 2d18 	str.w	r2, [r4, #-24]!
    thread_join(t1, &retcode, INFINITE_TIME);
    372c:	4640      	mov	r0, r8
    372e:	4621      	mov	r1, r4
    3730:	f001 fd06 	bl	5140 <thread_join>
    if (retcode)
    3734:	9b04      	ldr	r3, [sp, #16]
    3736:	b133      	cbz	r3, 3746 <two_threads_basic+0x1b6>
        goto fail;

    return 0;

fail:
    printf("child thread exited with %d\n", retcode);
    3738:	4819      	ldr	r0, [pc, #100]	; (37a0 <two_threads_basic+0x210>)
    373a:	9904      	ldr	r1, [sp, #16]
    373c:	f009 f8a4 	bl	c888 <_printf>
    return __LINE__;
    3740:	f44f 70ca 	mov.w	r0, #404	; 0x194
    3744:	e008      	b.n	3758 <two_threads_basic+0x1c8>
    int retcode = -1;
    thread_join(t1, &retcode, INFINITE_TIME);
    if (retcode)
        goto fail;

    thread_join(t2,  &retcode, INFINITE_TIME);
    3746:	4638      	mov	r0, r7
    3748:	4621      	mov	r1, r4
    374a:	f04f 32ff 	mov.w	r2, #4294967295
    374e:	f001 fcf7 	bl	5140 <thread_join>
    if (retcode)
    3752:	9804      	ldr	r0, [sp, #16]
    3754:	2800      	cmp	r0, #0
    3756:	d1ef      	bne.n	3738 <two_threads_basic+0x1a8>
    return 0;

fail:
    printf("child thread exited with %d\n", retcode);
    return __LINE__;
}
    3758:	b00a      	add	sp, #40	; 0x28
    375a:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    375e:	bf00      	nop
    3760:	0001016a 	.word	0x0001016a
    3764:	000102ad 	.word	0x000102ad
    3768:	000033b9 	.word	0x000033b9
    376c:	000102d1 	.word	0x000102d1
    3770:	000102d9 	.word	0x000102d9
    3774:	0001019e 	.word	0x0001019e
    3778:	0001017c 	.word	0x0001017c
    377c:	000102e1 	.word	0x000102e1
    3780:	0000eabc 	.word	0x0000eabc
    3784:	000101da 	.word	0x000101da
    3788:	000101b0 	.word	0x000101b0
    378c:	00010304 	.word	0x00010304
    3790:	00010327 	.word	0x00010327
    3794:	00010347 	.word	0x00010347
    3798:	0001036a 	.word	0x0001036a
    379c:	0001038d 	.word	0x0001038d
    37a0:	000103b2 	.word	0x000103b2

000037a4 <send_watcher_cmd>:
    action_t what;
    port_t port;
} watcher_cmd;

status_t send_watcher_cmd(port_t cmd_port, action_t action, port_t port)
{
    37a4:	b507      	push	{r0, r1, r2, r14}
    watcher_cmd cmd  = {action, port};
    37a6:	f88d 1000 	strb.w	r1, [r13]
    37aa:	9201      	str	r2, [sp, #4]
    return port_write(cmd_port, ((port_packet_t *) &cmd), 1);;
    37ac:	4669      	mov	r1, r13
    37ae:	2201      	movs	r2, #1
    37b0:	f002 fc1c 	bl	5fec <port_write>
}
    37b4:	b003      	add	sp, #12
    37b6:	f85d fb04 	ldr.w	r15, [r13], #4
	...

000037bc <group_basic>:
        return st;
    return port_open(name,ctx, read);
}

int group_basic(void)
{
    37bc:	b530      	push	{r4, r5, r14}
    37be:	b08b      	sub	sp, #44	; 0x2c
    // we spin a thread that connects to a well known port, then we
    // send two ports that it will add to a group port.
    port_t cmd_port;
    status_t st = port_create("grp_ctrl", PORT_MODE_UNICAST, &cmd_port);
    37c0:	2101      	movs	r1, #1
    37c2:	4853      	ldr	r0, [pc, #332]	; (3910 <group_basic+0x154>)
    37c4:	aa02      	add	r2, sp, #8
    37c6:	f002 fa15 	bl	5bf4 <port_create>
    if (st < 0 ) {
    37ca:	1e01      	subs	r1, r0, #0
    37cc:	da05      	bge.n	37da <group_basic+0x1e>
        printf("could not create port, status = %d\n", st);
    37ce:	4851      	ldr	r0, [pc, #324]	; (3914 <group_basic+0x158>)
    37d0:	f009 f85a 	bl	c888 <_printf>
        return __LINE__;
    37d4:	f240 2006 	movw	r0, #518	; 0x206
    37d8:	e098      	b.n	390c <group_basic+0x150>
    }

    thread_t *wt = thread_create(
    37da:	f44f 6380 	mov.w	r3, #1024	; 0x400
    37de:	494e      	ldr	r1, [pc, #312]	; (3918 <group_basic+0x15c>)
    37e0:	2200      	movs	r2, #0
    37e2:	9300      	str	r3, [sp, #0]
    37e4:	484d      	ldr	r0, [pc, #308]	; (391c <group_basic+0x160>)
    37e6:	2310      	movs	r3, #16
    37e8:	f001 f9c8 	bl	4b7c <thread_create>
    37ec:	4605      	mov	r5, r0
                       "g_watcher", &group_watcher_thread, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE);
    thread_resume(wt);
    37ee:	f001 fa4d 	bl	4c8c <thread_resume>

    port_t w_test_port1, r_test_port1;
    st = make_port_pair("tst_port1", TS1_PORT_CTX, &w_test_port1, &r_test_port1);
    37f2:	484b      	ldr	r0, [pc, #300]	; (3920 <group_basic+0x164>)
    37f4:	2111      	movs	r1, #17
    37f6:	aa03      	add	r2, sp, #12
    37f8:	ab04      	add	r3, sp, #16
    37fa:	f7ff fdcb 	bl	3394 <make_port_pair>
    if (st < 0)
    37fe:	2800      	cmp	r0, #0
    3800:	db61      	blt.n	38c6 <group_basic+0x10a>
        return __LINE__;

    port_t w_test_port2, r_test_port2;
    st = make_port_pair("tst_port2", TS2_PORT_CTX, &w_test_port2, &r_test_port2);
    3802:	4848      	ldr	r0, [pc, #288]	; (3924 <group_basic+0x168>)
    3804:	2112      	movs	r1, #18
    3806:	aa05      	add	r2, sp, #20
    3808:	ab06      	add	r3, sp, #24
    380a:	f7ff fdc3 	bl	3394 <make_port_pair>
    if (st < 0)
    380e:	2800      	cmp	r0, #0
    3810:	db5c      	blt.n	38cc <group_basic+0x110>
        return __LINE__;

    st = send_watcher_cmd(cmd_port, ADD_PORT, r_test_port1);
    3812:	9802      	ldr	r0, [sp, #8]
    3814:	2100      	movs	r1, #0
    3816:	9a04      	ldr	r2, [sp, #16]
    3818:	f7ff ffc4 	bl	37a4 <send_watcher_cmd>
    if (st < 0)
    381c:	2800      	cmp	r0, #0
    381e:	db58      	blt.n	38d2 <group_basic+0x116>
        return __LINE__;

    st = send_watcher_cmd(cmd_port, ADD_PORT, r_test_port2);
    3820:	9802      	ldr	r0, [sp, #8]
    3822:	2100      	movs	r1, #0
    3824:	9a06      	ldr	r2, [sp, #24]
    3826:	f7ff ffbd 	bl	37a4 <send_watcher_cmd>
    if (st < 0)
    382a:	2800      	cmp	r0, #0
    382c:	db54      	blt.n	38d8 <group_basic+0x11c>
        return __LINE__;

    thread_sleep(50);
    382e:	2032      	movs	r0, #50	; 0x32
    3830:	f001 fad4 	bl	4ddc <thread_sleep>

    port_packet_t pp = {{0}};
    3834:	2400      	movs	r4, #0
    st = port_write(w_test_port1, &pp, 1);
    3836:	9803      	ldr	r0, [sp, #12]
    3838:	a908      	add	r1, sp, #32
    383a:	2201      	movs	r2, #1
    if (st < 0)
        return __LINE__;

    thread_sleep(50);

    port_packet_t pp = {{0}};
    383c:	9408      	str	r4, [sp, #32]
    383e:	9409      	str	r4, [sp, #36]	; 0x24
    st = port_write(w_test_port1, &pp, 1);
    3840:	f002 fbd4 	bl	5fec <port_write>
    if (st < 0)
    3844:	42a0      	cmp	r0, r4
    3846:	db4a      	blt.n	38de <group_basic+0x122>
        return __LINE__;

    st = port_write(w_test_port2, &pp, 1);
    3848:	9805      	ldr	r0, [sp, #20]
    384a:	a908      	add	r1, sp, #32
    384c:	2201      	movs	r2, #1
    384e:	f002 fbcd 	bl	5fec <port_write>
    if (st < 0)
    3852:	42a0      	cmp	r0, r4
    3854:	db46      	blt.n	38e4 <group_basic+0x128>
        return __LINE__;

    st = send_watcher_cmd(cmd_port, QUIT, 0);
    3856:	9802      	ldr	r0, [sp, #8]
    3858:	2101      	movs	r1, #1
    385a:	4622      	mov	r2, r4
    385c:	f7ff ffa2 	bl	37a4 <send_watcher_cmd>
    if (st < 0)
    3860:	42a0      	cmp	r0, r4
    3862:	db42      	blt.n	38ea <group_basic+0x12e>
        return __LINE__;

    int retcode = -1;
    3864:	a90a      	add	r1, sp, #40	; 0x28
    3866:	f04f 32ff 	mov.w	r2, #4294967295
    386a:	f841 2d0c 	str.w	r2, [r1, #-12]!
    thread_join(wt, &retcode, INFINITE_TIME);
    386e:	4628      	mov	r0, r5
    3870:	f001 fc66 	bl	5140 <thread_join>
    if (retcode) {
    3874:	9907      	ldr	r1, [sp, #28]
    3876:	b129      	cbz	r1, 3884 <group_basic+0xc8>
        printf("child thread exited with %d\n", retcode);
    3878:	482b      	ldr	r0, [pc, #172]	; (3928 <group_basic+0x16c>)
    387a:	f009 f805 	bl	c888 <_printf>
        return __LINE__;
    387e:	f240 2032 	movw	r0, #562	; 0x232
    3882:	e043      	b.n	390c <group_basic+0x150>
    }

    st = port_close(w_test_port1);
    3884:	9803      	ldr	r0, [sp, #12]
    3886:	f002 fcad 	bl	61e4 <port_close>
    if (st < 0)
    388a:	2800      	cmp	r0, #0
    388c:	db30      	blt.n	38f0 <group_basic+0x134>
        return __LINE__;
    st = port_close(w_test_port2);
    388e:	9805      	ldr	r0, [sp, #20]
    3890:	f002 fca8 	bl	61e4 <port_close>
    if (st < 0)
    3894:	2800      	cmp	r0, #0
    3896:	db2e      	blt.n	38f6 <group_basic+0x13a>
        return __LINE__;
    st = port_close(cmd_port);
    3898:	9802      	ldr	r0, [sp, #8]
    389a:	f002 fca3 	bl	61e4 <port_close>
    if (st < 0)
    389e:	2800      	cmp	r0, #0
    38a0:	db2c      	blt.n	38fc <group_basic+0x140>
        return __LINE__;
    st = port_destroy(w_test_port1);
    38a2:	9803      	ldr	r0, [sp, #12]
    38a4:	f002 fc52 	bl	614c <port_destroy>
    if (st < 0)
    38a8:	2800      	cmp	r0, #0
    38aa:	db2a      	blt.n	3902 <group_basic+0x146>
        return __LINE__;
    st = port_destroy(w_test_port2);
    38ac:	9805      	ldr	r0, [sp, #20]
    38ae:	f002 fc4d 	bl	614c <port_destroy>
    if (st < 0)
    38b2:	2800      	cmp	r0, #0
    38b4:	db28      	blt.n	3908 <group_basic+0x14c>
        return __LINE__;
    st = port_destroy(cmd_port);
    38b6:	9802      	ldr	r0, [sp, #8]
    38b8:	f002 fc48 	bl	614c <port_destroy>
    if (st < 0)
        return __LINE__;
    38bc:	f240 2346 	movw	r3, #582	; 0x246
    38c0:	ea03 70e0 	and.w	r0, r3, r0, asr #31
    38c4:	e022      	b.n	390c <group_basic+0x150>
    thread_resume(wt);

    port_t w_test_port1, r_test_port1;
    st = make_port_pair("tst_port1", TS1_PORT_CTX, &w_test_port1, &r_test_port1);
    if (st < 0)
        return __LINE__;
    38c6:	f44f 7004 	mov.w	r0, #528	; 0x210
    38ca:	e01f      	b.n	390c <group_basic+0x150>

    port_t w_test_port2, r_test_port2;
    st = make_port_pair("tst_port2", TS2_PORT_CTX, &w_test_port2, &r_test_port2);
    if (st < 0)
        return __LINE__;
    38cc:	f240 2015 	movw	r0, #533	; 0x215
    38d0:	e01c      	b.n	390c <group_basic+0x150>

    st = send_watcher_cmd(cmd_port, ADD_PORT, r_test_port1);
    if (st < 0)
        return __LINE__;
    38d2:	f240 2019 	movw	r0, #537	; 0x219
    38d6:	e019      	b.n	390c <group_basic+0x150>

    st = send_watcher_cmd(cmd_port, ADD_PORT, r_test_port2);
    if (st < 0)
        return __LINE__;
    38d8:	f240 201d 	movw	r0, #541	; 0x21d
    38dc:	e016      	b.n	390c <group_basic+0x150>
    thread_sleep(50);

    port_packet_t pp = {{0}};
    st = port_write(w_test_port1, &pp, 1);
    if (st < 0)
        return __LINE__;
    38de:	f44f 7009 	mov.w	r0, #548	; 0x224
    38e2:	e013      	b.n	390c <group_basic+0x150>

    st = port_write(w_test_port2, &pp, 1);
    if (st < 0)
        return __LINE__;
    38e4:	f44f 700a 	mov.w	r0, #552	; 0x228
    38e8:	e010      	b.n	390c <group_basic+0x150>

    st = send_watcher_cmd(cmd_port, QUIT, 0);
    if (st < 0)
        return __LINE__;
    38ea:	f44f 700b 	mov.w	r0, #556	; 0x22c
    38ee:	e00d      	b.n	390c <group_basic+0x150>
        return __LINE__;
    }

    st = port_close(w_test_port1);
    if (st < 0)
        return __LINE__;
    38f0:	f240 2037 	movw	r0, #567	; 0x237
    38f4:	e00a      	b.n	390c <group_basic+0x150>
    st = port_close(w_test_port2);
    if (st < 0)
        return __LINE__;
    38f6:	f240 203a 	movw	r0, #570	; 0x23a
    38fa:	e007      	b.n	390c <group_basic+0x150>
    st = port_close(cmd_port);
    if (st < 0)
        return __LINE__;
    38fc:	f240 203d 	movw	r0, #573	; 0x23d
    3900:	e004      	b.n	390c <group_basic+0x150>
    st = port_destroy(w_test_port1);
    if (st < 0)
        return __LINE__;
    3902:	f44f 7010 	mov.w	r0, #576	; 0x240
    3906:	e001      	b.n	390c <group_basic+0x150>
    st = port_destroy(w_test_port2);
    if (st < 0)
        return __LINE__;
    3908:	f240 2043 	movw	r0, #579	; 0x243
    st = port_destroy(cmd_port);
    if (st < 0)
        return __LINE__;

    return 0;
}
    390c:	b00b      	add	sp, #44	; 0x2c
    390e:	bd30      	pop	{r4, r5, r15}
    3910:	000101fd 	.word	0x000101fd
    3914:	000102ad 	.word	0x000102ad
    3918:	00003481 	.word	0x00003481
    391c:	000103cf 	.word	0x000103cf
    3920:	000103d9 	.word	0x000103d9
    3924:	000103e3 	.word	0x000103e3
    3928:	000103b2 	.word	0x000103b2

0000392c <group_dynamic>:

int group_dynamic(void)
{
    392c:	b510      	push	{r4, r14}
    392e:	b08a      	sub	sp, #40	; 0x28
    status_t st;

    port_t w_test_port1, r_test_port1;
    st = make_port_pair("tst_port1", TS1_PORT_CTX, &w_test_port1, &r_test_port1);
    3930:	4844      	ldr	r0, [pc, #272]	; (3a44 <group_dynamic+0x118>)
    3932:	2111      	movs	r1, #17
    3934:	466a      	mov	r2, r13
    3936:	ab01      	add	r3, sp, #4
    3938:	f7ff fd2c 	bl	3394 <make_port_pair>
    if (st < 0)
    393c:	2800      	cmp	r0, #0
    393e:	db59      	blt.n	39f4 <group_dynamic+0xc8>
        return __LINE__;

    port_t w_test_port2, r_test_port2;
    st = make_port_pair("tst_port2", TS2_PORT_CTX, &w_test_port2, &r_test_port2);
    3940:	4841      	ldr	r0, [pc, #260]	; (3a48 <group_dynamic+0x11c>)
    3942:	2112      	movs	r1, #18
    3944:	aa02      	add	r2, sp, #8
    3946:	ab03      	add	r3, sp, #12
    3948:	f7ff fd24 	bl	3394 <make_port_pair>
    if (st < 0)
    394c:	2800      	cmp	r0, #0
    394e:	db54      	blt.n	39fa <group_dynamic+0xce>
        return __LINE__;

    port_t pg;
    st = port_group(&r_test_port1, 1, &pg);
    3950:	a801      	add	r0, sp, #4
    3952:	2101      	movs	r1, #1
    3954:	aa04      	add	r2, sp, #16
    3956:	f002 fa4b 	bl	5df0 <port_group>
    if (st < 0)
    395a:	2800      	cmp	r0, #0
    395c:	db50      	blt.n	3a00 <group_dynamic+0xd4>
        return __LINE__;

    port_packet_t pkt = { { 0 } };
    395e:	2400      	movs	r4, #0
    st = port_write(w_test_port2, &pkt, 1);
    3960:	9802      	ldr	r0, [sp, #8]
    3962:	a905      	add	r1, sp, #20
    3964:	2201      	movs	r2, #1
    port_t pg;
    st = port_group(&r_test_port1, 1, &pg);
    if (st < 0)
        return __LINE__;

    port_packet_t pkt = { { 0 } };
    3966:	9405      	str	r4, [sp, #20]
    3968:	9406      	str	r4, [sp, #24]
    st = port_write(w_test_port2, &pkt, 1);
    396a:	f002 fb3f 	bl	5fec <port_write>
    if (st < 0)
    396e:	42a0      	cmp	r0, r4
    3970:	db49      	blt.n	3a06 <group_dynamic+0xda>
        return __LINE__;

    port_result_t rslt;
    st = port_read(pg, 0, &rslt);
    3972:	9804      	ldr	r0, [sp, #16]
    3974:	4621      	mov	r1, r4
    3976:	aa07      	add	r2, sp, #28
    3978:	f002 fb9a 	bl	60b0 <port_read>
    if (st != ERR_TIMED_OUT)
    397c:	300d      	adds	r0, #13
    397e:	d145      	bne.n	3a0c <group_dynamic+0xe0>
        return __LINE__;

    // Attach the port that has been written to to the port group and ensure
    // that we can read from it.
    st = port_group_add(pg, r_test_port2);
    3980:	9804      	ldr	r0, [sp, #16]
    3982:	9903      	ldr	r1, [sp, #12]
    3984:	f002 faa0 	bl	5ec8 <port_group_add>
    if (st < 0)
    3988:	42a0      	cmp	r0, r4
    398a:	db42      	blt.n	3a12 <group_dynamic+0xe6>
        return __LINE__;

    st = port_read(pg, 0, &rslt);
    398c:	9804      	ldr	r0, [sp, #16]
    398e:	4621      	mov	r1, r4
    3990:	aa07      	add	r2, sp, #28
    3992:	f002 fb8d 	bl	60b0 <port_read>
    if (st < 0)
    3996:	42a0      	cmp	r0, r4
    3998:	db3e      	blt.n	3a18 <group_dynamic+0xec>
        return __LINE__;

    // Write some data to a port then remove it from the port group and ensure
    // that we can't read from it.
    st = port_write(w_test_port1, &pkt, 1);
    399a:	9800      	ldr	r0, [sp, #0]
    399c:	a905      	add	r1, sp, #20
    399e:	2201      	movs	r2, #1
    39a0:	f002 fb24 	bl	5fec <port_write>
    if (st < 0)
    39a4:	42a0      	cmp	r0, r4
    39a6:	db3a      	blt.n	3a1e <group_dynamic+0xf2>
        return __LINE__;

    st = port_group_remove(pg, r_test_port1);
    39a8:	9804      	ldr	r0, [sp, #16]
    39aa:	9901      	ldr	r1, [sp, #4]
    39ac:	f002 fade 	bl	5f6c <port_group_remove>
    if (st < 0)
    39b0:	42a0      	cmp	r0, r4
    39b2:	db37      	blt.n	3a24 <group_dynamic+0xf8>
        return __LINE__;

    st = port_read(pg, 0, &rslt);
    39b4:	9804      	ldr	r0, [sp, #16]
    39b6:	4621      	mov	r1, r4
    39b8:	aa07      	add	r2, sp, #28
    39ba:	f002 fb79 	bl	60b0 <port_read>
    if (st != ERR_TIMED_OUT)
    39be:	300d      	adds	r0, #13
    39c0:	d133      	bne.n	3a2a <group_dynamic+0xfe>
        return __LINE__;

    st = port_close(w_test_port1);
    39c2:	9800      	ldr	r0, [sp, #0]
    39c4:	f002 fc0e 	bl	61e4 <port_close>
    if (st < 0)
    39c8:	42a0      	cmp	r0, r4
    39ca:	db31      	blt.n	3a30 <group_dynamic+0x104>
        return __LINE__;
    st = port_close(w_test_port2);
    39cc:	9802      	ldr	r0, [sp, #8]
    39ce:	f002 fc09 	bl	61e4 <port_close>
    if (st < 0)
    39d2:	42a0      	cmp	r0, r4
    39d4:	db2f      	blt.n	3a36 <group_dynamic+0x10a>
        return __LINE__;
    st = port_destroy(w_test_port1);
    39d6:	9800      	ldr	r0, [sp, #0]
    39d8:	f002 fbb8 	bl	614c <port_destroy>
    if (st < 0)
    39dc:	42a0      	cmp	r0, r4
    39de:	db2d      	blt.n	3a3c <group_dynamic+0x110>
        return __LINE__;
    st = port_destroy(w_test_port2);
    39e0:	9802      	ldr	r0, [sp, #8]
    39e2:	f002 fbb3 	bl	614c <port_destroy>
    if (st < 0)
        return __LINE__;
    39e6:	f240 238b 	movw	r3, #651	; 0x28b
    39ea:	42a0      	cmp	r0, r4
    39ec:	bfb4      	ite	lt
    39ee:	4618      	movlt	r0, r3
    39f0:	4620      	movge	r0, r4
    39f2:	e025      	b.n	3a40 <group_dynamic+0x114>
    status_t st;

    port_t w_test_port1, r_test_port1;
    st = make_port_pair("tst_port1", TS1_PORT_CTX, &w_test_port1, &r_test_port1);
    if (st < 0)
        return __LINE__;
    39f4:	f240 2052 	movw	r0, #594	; 0x252
    39f8:	e022      	b.n	3a40 <group_dynamic+0x114>

    port_t w_test_port2, r_test_port2;
    st = make_port_pair("tst_port2", TS2_PORT_CTX, &w_test_port2, &r_test_port2);
    if (st < 0)
        return __LINE__;
    39fa:	f240 2057 	movw	r0, #599	; 0x257
    39fe:	e01f      	b.n	3a40 <group_dynamic+0x114>

    port_t pg;
    st = port_group(&r_test_port1, 1, &pg);
    if (st < 0)
        return __LINE__;
    3a00:	f44f 7017 	mov.w	r0, #604	; 0x25c
    3a04:	e01c      	b.n	3a40 <group_dynamic+0x114>

    port_packet_t pkt = { { 0 } };
    st = port_write(w_test_port2, &pkt, 1);
    if (st < 0)
        return __LINE__;
    3a06:	f240 2061 	movw	r0, #609	; 0x261
    3a0a:	e019      	b.n	3a40 <group_dynamic+0x114>

    port_result_t rslt;
    st = port_read(pg, 0, &rslt);
    if (st != ERR_TIMED_OUT)
        return __LINE__;
    3a0c:	f240 2066 	movw	r0, #614	; 0x266
    3a10:	e016      	b.n	3a40 <group_dynamic+0x114>

    // Attach the port that has been written to to the port group and ensure
    // that we can read from it.
    st = port_group_add(pg, r_test_port2);
    if (st < 0)
        return __LINE__;
    3a12:	f44f 701b 	mov.w	r0, #620	; 0x26c
    3a16:	e013      	b.n	3a40 <group_dynamic+0x114>

    st = port_read(pg, 0, &rslt);
    if (st < 0)
        return __LINE__;
    3a18:	f44f 701c 	mov.w	r0, #624	; 0x270
    3a1c:	e010      	b.n	3a40 <group_dynamic+0x114>

    // Write some data to a port then remove it from the port group and ensure
    // that we can't read from it.
    st = port_write(w_test_port1, &pkt, 1);
    if (st < 0)
        return __LINE__;
    3a1e:	f240 2076 	movw	r0, #630	; 0x276
    3a22:	e00d      	b.n	3a40 <group_dynamic+0x114>

    st = port_group_remove(pg, r_test_port1);
    if (st < 0)
        return __LINE__;
    3a24:	f240 207a 	movw	r0, #634	; 0x27a
    3a28:	e00a      	b.n	3a40 <group_dynamic+0x114>

    st = port_read(pg, 0, &rslt);
    if (st != ERR_TIMED_OUT)
        return __LINE__;
    3a2a:	f240 207e 	movw	r0, #638	; 0x27e
    3a2e:	e007      	b.n	3a40 <group_dynamic+0x114>

    st = port_close(w_test_port1);
    if (st < 0)
        return __LINE__;
    3a30:	f240 2082 	movw	r0, #642	; 0x282
    3a34:	e004      	b.n	3a40 <group_dynamic+0x114>
    st = port_close(w_test_port2);
    if (st < 0)
        return __LINE__;
    3a36:	f240 2085 	movw	r0, #645	; 0x285
    3a3a:	e001      	b.n	3a40 <group_dynamic+0x114>
    st = port_destroy(w_test_port1);
    if (st < 0)
        return __LINE__;
    3a3c:	f44f 7022 	mov.w	r0, #648	; 0x288
    st = port_destroy(w_test_port2);
    if (st < 0)
        return __LINE__;

    return 0;
}
    3a40:	b00a      	add	sp, #40	; 0x28
    3a42:	bd10      	pop	{r4, r15}
    3a44:	000103d9 	.word	0x000103d9
    3a48:	000103e3 	.word	0x000103e3

00003a4c <port_tests>:
}

#define RUN_TEST(t)  result = t(); if (result) goto fail

int port_tests(void)
{
    3a4c:	b5f0      	push	{r4, r5, r6, r7, r14}
    int result;
    int count = 3;
    while (count--) {
    3a4e:	2604      	movs	r6, #4
}

#define RUN_TEST(t)  result = t(); if (result) goto fail

int port_tests(void)
{
    3a50:	b08d      	sub	sp, #52	; 0x34
    int result;
    int count = 3;
    while (count--) {
    3a52:	3e01      	subs	r6, #1
    3a54:	f000 8182 	beq.w	3d5c <port_tests+0x310>
}

static int single_thread_basic(void)
{
    port_t w_port;
    status_t st = port_create("sh_prt1", PORT_MODE_UNICAST, &w_port);
    3a58:	2101      	movs	r1, #1
    3a5a:	48a3      	ldr	r0, [pc, #652]	; (3ce8 <port_tests+0x29c>)
    3a5c:	aa01      	add	r2, sp, #4
    3a5e:	f002 f8c9 	bl	5bf4 <port_create>
    if (st < 0) {
    3a62:	1e01      	subs	r1, r0, #0
    3a64:	da04      	bge.n	3a70 <port_tests+0x24>
        printf("could not create port, status = %d\n", st);
    3a66:	48a1      	ldr	r0, [pc, #644]	; (3cec <port_tests+0x2a0>)
    3a68:	f008 ff0e 	bl	c888 <_printf>
        return __LINE__;
    3a6c:	2136      	movs	r1, #54	; 0x36
    3a6e:	e17a      	b.n	3d66 <port_tests+0x31a>
    }

    port_t r_port;
    st = port_open("sh_prt0", context1, &r_port);
    3a70:	4f9f      	ldr	r7, [pc, #636]	; (3cf0 <port_tests+0x2a4>)
    3a72:	aa02      	add	r2, sp, #8
    3a74:	6839      	ldr	r1, [r7, #0]
    3a76:	489f      	ldr	r0, [pc, #636]	; (3cf4 <port_tests+0x2a8>)
    3a78:	f002 f93a 	bl	5cf0 <port_open>
    if (st != ERR_NOT_FOUND) {
    3a7c:	1c82      	adds	r2, r0, #2
        printf("could not create port, status = %d\n", st);
        return __LINE__;
    }

    port_t r_port;
    st = port_open("sh_prt0", context1, &r_port);
    3a7e:	4601      	mov	r1, r0
    if (st != ERR_NOT_FOUND) {
    3a80:	d004      	beq.n	3a8c <port_tests+0x40>
        printf("expected not to find port, status = %d\n", st);
    3a82:	489d      	ldr	r0, [pc, #628]	; (3cf8 <port_tests+0x2ac>)
    3a84:	f008 ff00 	bl	c888 <_printf>
        return __LINE__;
    3a88:	213d      	movs	r1, #61	; 0x3d
    3a8a:	e16c      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_open("sh_prt1", context1, &r_port);
    3a8c:	6839      	ldr	r1, [r7, #0]
    3a8e:	4896      	ldr	r0, [pc, #600]	; (3ce8 <port_tests+0x29c>)
    3a90:	aa02      	add	r2, sp, #8
    3a92:	f002 f92d 	bl	5cf0 <port_open>
    if (st < 0) {
    3a96:	1e01      	subs	r1, r0, #0
    3a98:	da04      	bge.n	3aa4 <port_tests+0x58>
        printf("could not open port, status = %d\n", st);
    3a9a:	4898      	ldr	r0, [pc, #608]	; (3cfc <port_tests+0x2b0>)
    3a9c:	f008 fef4 	bl	c888 <_printf>
        return __LINE__;
    3aa0:	2143      	movs	r1, #67	; 0x43
    3aa2:	e160      	b.n	3d66 <port_tests+0x31a>
    }

    port_packet_t packet[3] = {
    3aa4:	4b96      	ldr	r3, [pc, #600]	; (3d00 <port_tests+0x2b4>)
    3aa6:	aa06      	add	r2, sp, #24
    3aa8:	f103 0e18 	add.w	r14, r3, #24
    3aac:	4614      	mov	r4, r2
    3aae:	6818      	ldr	r0, [r3, #0]
    3ab0:	6859      	ldr	r1, [r3, #4]
    3ab2:	4615      	mov	r5, r2
    3ab4:	c503      	stmia	r5!, {r0, r1}
    3ab6:	3308      	adds	r3, #8
    3ab8:	4573      	cmp	r3, r14
    3aba:	462a      	mov	r2, r5
    3abc:	d1f7      	bne.n	3aae <port_tests+0x62>
        {{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}},
        {{0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11}},
        {{0x33, 0x66, 0x99, 0xcc, 0x33, 0x66, 0x99, 0xcc}},
    };

    st = port_write(w_port, &packet[0], 1);
    3abe:	4621      	mov	r1, r4
    3ac0:	9801      	ldr	r0, [sp, #4]
    3ac2:	2201      	movs	r2, #1
    3ac4:	f002 fa92 	bl	5fec <port_write>
    if (st < 0) {
    3ac8:	1e01      	subs	r1, r0, #0
    3aca:	da04      	bge.n	3ad6 <port_tests+0x8a>
        printf("could not write port, status = %d\n", st);
    3acc:	488d      	ldr	r0, [pc, #564]	; (3d04 <port_tests+0x2b8>)
    3ace:	f008 fedb 	bl	c888 <_printf>
        return __LINE__;
    3ad2:	214f      	movs	r1, #79	; 0x4f
    3ad4:	e147      	b.n	3d66 <port_tests+0x31a>
    }

    printf("reading from port:\n");
    3ad6:	488c      	ldr	r0, [pc, #560]	; (3d08 <port_tests+0x2bc>)
    3ad8:	f008 fed6 	bl	c888 <_printf>

    port_result_t res = {0};
    3adc:	2100      	movs	r1, #0
    3ade:	220c      	movs	r2, #12
    3ae0:	a803      	add	r0, sp, #12
    3ae2:	f008 f8b9 	bl	bc58 <memset>

    st = port_read(r_port, 0, &res);
    3ae6:	2100      	movs	r1, #0
    3ae8:	9802      	ldr	r0, [sp, #8]
    3aea:	aa03      	add	r2, sp, #12
    3aec:	f002 fae0 	bl	60b0 <port_read>
    if (st < 0) {
    3af0:	1e01      	subs	r1, r0, #0
    3af2:	da04      	bge.n	3afe <port_tests+0xb2>
        printf("could not read port, status = %d\n", st);
    3af4:	4885      	ldr	r0, [pc, #532]	; (3d0c <port_tests+0x2c0>)
    3af6:	f008 fec7 	bl	c888 <_printf>
        return __LINE__;
    3afa:	2159      	movs	r1, #89	; 0x59
    3afc:	e133      	b.n	3d66 <port_tests+0x31a>
    }
    if (res.ctx != context1) {
    3afe:	9903      	ldr	r1, [sp, #12]
    3b00:	683b      	ldr	r3, [r7, #0]
    3b02:	4299      	cmp	r1, r3
    3b04:	d004      	beq.n	3b10 <port_tests+0xc4>
        printf("bad context! = %p\n", res.ctx);
    3b06:	4882      	ldr	r0, [pc, #520]	; (3d10 <port_tests+0x2c4>)
    3b08:	f008 febe 	bl	c888 <_printf>
        return __LINE__;
    3b0c:	215d      	movs	r1, #93	; 0x5d
    3b0e:	e12a      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_read(r_port, 0, &res);
    3b10:	2100      	movs	r1, #0
    3b12:	9802      	ldr	r0, [sp, #8]
    3b14:	aa03      	add	r2, sp, #12
    3b16:	f002 facb 	bl	60b0 <port_read>
    if (st != ERR_TIMED_OUT) {
    3b1a:	f110 0f0d 	cmn.w	r0, #13
    if (res.ctx != context1) {
        printf("bad context! = %p\n", res.ctx);
        return __LINE__;
    }

    st = port_read(r_port, 0, &res);
    3b1e:	4601      	mov	r1, r0
    if (st != ERR_TIMED_OUT) {
    3b20:	d004      	beq.n	3b2c <port_tests+0xe0>
        printf("expected timeout, status = %d\n", st);
    3b22:	487c      	ldr	r0, [pc, #496]	; (3d14 <port_tests+0x2c8>)
    3b24:	f008 feb0 	bl	c888 <_printf>
        return __LINE__;
    3b28:	2163      	movs	r1, #99	; 0x63
    3b2a:	e11c      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_write(w_port, &packet[1], 1);
    3b2c:	f104 0108 	add.w	r1, r4, #8
    3b30:	9801      	ldr	r0, [sp, #4]
    3b32:	2201      	movs	r2, #1
    3b34:	f002 fa5a 	bl	5fec <port_write>
    if (st < 0) {
    3b38:	1e01      	subs	r1, r0, #0
    3b3a:	da04      	bge.n	3b46 <port_tests+0xfa>
        printf("could not write port, status = %d\n", st);
    3b3c:	4871      	ldr	r0, [pc, #452]	; (3d04 <port_tests+0x2b8>)
    3b3e:	f008 fea3 	bl	c888 <_printf>
        return __LINE__;
    3b42:	2169      	movs	r1, #105	; 0x69
    3b44:	e10f      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_write(w_port, &packet[0], 1);
    3b46:	4621      	mov	r1, r4
    3b48:	9801      	ldr	r0, [sp, #4]
    3b4a:	2201      	movs	r2, #1
    3b4c:	f002 fa4e 	bl	5fec <port_write>
    if (st < 0) {
    3b50:	1e01      	subs	r1, r0, #0
    3b52:	da04      	bge.n	3b5e <port_tests+0x112>
        printf("could not write port, status = %d\n", st);
    3b54:	486b      	ldr	r0, [pc, #428]	; (3d04 <port_tests+0x2b8>)
    3b56:	f008 fe97 	bl	c888 <_printf>
        return __LINE__;
    3b5a:	216f      	movs	r1, #111	; 0x6f
    3b5c:	e103      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_write(w_port, &packet[2], 1);
    3b5e:	f104 0110 	add.w	r1, r4, #16
    3b62:	9801      	ldr	r0, [sp, #4]
    3b64:	2201      	movs	r2, #1
    3b66:	f002 fa41 	bl	5fec <port_write>
    if (st < 0) {
    3b6a:	1e01      	subs	r1, r0, #0
    3b6c:	da04      	bge.n	3b78 <port_tests+0x12c>
        printf("could not write port, status = %d\n", st);
    3b6e:	4865      	ldr	r0, [pc, #404]	; (3d04 <port_tests+0x2b8>)
    3b70:	f008 fe8a 	bl	c888 <_printf>
        return __LINE__;
    3b74:	2175      	movs	r1, #117	; 0x75
    3b76:	e0f6      	b.n	3d66 <port_tests+0x31a>
        printf("could not write port, status = %d\n", st);
        return __LINE__;
    }

    st = port_write(w_port, &packet[2], 1);
    if (st < 0) {
    3b78:	2503      	movs	r5, #3
        return __LINE__;
    }

    int expected_count = 3;
    while (true) {
        st = port_read(r_port, 0, &res);
    3b7a:	9802      	ldr	r0, [sp, #8]
    3b7c:	2100      	movs	r1, #0
    3b7e:	aa03      	add	r2, sp, #12
    3b80:	f002 fa96 	bl	60b0 <port_read>
        if (st < 0)
    3b84:	2800      	cmp	r0, #0
    3b86:	db01      	blt.n	3b8c <port_tests+0x140>
            break;
        dump_port_result(&res);
        --expected_count;
    3b88:	3d01      	subs	r5, #1
    3b8a:	e7f6      	b.n	3b7a <port_tests+0x12e>
    }

    if (expected_count != 0) {
    3b8c:	b12d      	cbz	r5, 3b9a <port_tests+0x14e>
        printf("invalid read count = %d\n", expected_count);
    3b8e:	4629      	mov	r1, r5
    3b90:	4861      	ldr	r0, [pc, #388]	; (3d18 <port_tests+0x2cc>)
    3b92:	f008 fe79 	bl	c888 <_printf>
        return __LINE__;
    3b96:	2183      	movs	r1, #131	; 0x83
    3b98:	e0e5      	b.n	3d66 <port_tests+0x31a>
    }

    printf("\n");
    3b9a:	4860      	ldr	r0, [pc, #384]	; (3d1c <port_tests+0x2d0>)
    3b9c:	f008 fe74 	bl	c888 <_printf>

    // port should be empty. should be able to write 8 packets.
    expected_count = 8;
    3ba0:	2508      	movs	r5, #8
    while (true) {
        st = port_write(w_port, &packet[1], 1);
    3ba2:	f104 0108 	add.w	r1, r4, #8
    3ba6:	9801      	ldr	r0, [sp, #4]
    3ba8:	2201      	movs	r2, #1
    3baa:	f002 fa1f 	bl	5fec <port_write>
        if (st < 0)
    3bae:	1e01      	subs	r1, r0, #0
    3bb0:	db0b      	blt.n	3bca <port_tests+0x17e>
            break;
        --expected_count;
        st = port_write(w_port, &packet[2], 1);
    3bb2:	f104 0110 	add.w	r1, r4, #16
    3bb6:	9801      	ldr	r0, [sp, #4]
    3bb8:	2201      	movs	r2, #1
    3bba:	f002 fa17 	bl	5fec <port_write>
        if (st < 0)
    3bbe:	1e01      	subs	r1, r0, #0
    3bc0:	da01      	bge.n	3bc6 <port_tests+0x17a>
    expected_count = 8;
    while (true) {
        st = port_write(w_port, &packet[1], 1);
        if (st < 0)
            break;
        --expected_count;
    3bc2:	3d01      	subs	r5, #1
    3bc4:	e001      	b.n	3bca <port_tests+0x17e>
        st = port_write(w_port, &packet[2], 1);
        if (st < 0)
            break;
        --expected_count;
    3bc6:	3d02      	subs	r5, #2
    3bc8:	e7eb      	b.n	3ba2 <port_tests+0x156>
    }

    if (expected_count != 0) {
    3bca:	b12d      	cbz	r5, 3bd8 <port_tests+0x18c>
        printf("invalid write count = %d\n", expected_count);
    3bcc:	4629      	mov	r1, r5
    3bce:	4854      	ldr	r0, [pc, #336]	; (3d20 <port_tests+0x2d4>)
    3bd0:	f008 fe5a 	bl	c888 <_printf>
        return __LINE__;
    3bd4:	2197      	movs	r1, #151	; 0x97
    3bd6:	e0c6      	b.n	3d66 <port_tests+0x31a>
    }

    // tod(cpu) fix this possibly wrong error.
    if (st != ERR_PARTIAL_WRITE) {
    3bd8:	f111 0f2c 	cmn.w	r1, #44	; 0x2c
    3bdc:	d004      	beq.n	3be8 <port_tests+0x19c>
        printf("expected buffer error, status =%d\n", st);
    3bde:	4851      	ldr	r0, [pc, #324]	; (3d24 <port_tests+0x2d8>)
    3be0:	f008 fe52 	bl	c888 <_printf>
        return __LINE__;
    3be4:	219d      	movs	r1, #157	; 0x9d
    3be6:	e0be      	b.n	3d66 <port_tests+0x31a>
        printf("invalid write count = %d\n", expected_count);
        return __LINE__;
    }

    // tod(cpu) fix this possibly wrong error.
    if (st != ERR_PARTIAL_WRITE) {
    3be8:	2503      	movs	r5, #3
        return __LINE__;
    }

    // read 3 packets.
    for (int ix = 0; ix != 3; ++ix) {
        st = port_read(r_port, 0, &res);
    3bea:	2100      	movs	r1, #0
    3bec:	9802      	ldr	r0, [sp, #8]
    3bee:	aa03      	add	r2, sp, #12
    3bf0:	f002 fa5e 	bl	60b0 <port_read>
        if (st < 0) {
    3bf4:	1e01      	subs	r1, r0, #0
    3bf6:	da04      	bge.n	3c02 <port_tests+0x1b6>
            printf("could not read port, status = %d\n", st);
    3bf8:	4844      	ldr	r0, [pc, #272]	; (3d0c <port_tests+0x2c0>)
    3bfa:	f008 fe45 	bl	c888 <_printf>
            return __LINE__;
    3bfe:	21a5      	movs	r1, #165	; 0xa5
    3c00:	e0b1      	b.n	3d66 <port_tests+0x31a>
        printf("expected buffer error, status =%d\n", st);
        return __LINE__;
    }

    // read 3 packets.
    for (int ix = 0; ix != 3; ++ix) {
    3c02:	3d01      	subs	r5, #1
    3c04:	d1f1      	bne.n	3bea <port_tests+0x19e>
            return __LINE__;
        }
    }

    // there are 5 packets, now we add another 3.
    st = port_write(w_port, packet, 3);
    3c06:	4621      	mov	r1, r4
    3c08:	9801      	ldr	r0, [sp, #4]
    3c0a:	2203      	movs	r2, #3
    3c0c:	f002 f9ee 	bl	5fec <port_write>
    if (st < 0) {
    3c10:	1e01      	subs	r1, r0, #0
    3c12:	da04      	bge.n	3c1e <port_tests+0x1d2>
        printf("could not write port, status = %d\n", st);
    3c14:	483b      	ldr	r0, [pc, #236]	; (3d04 <port_tests+0x2b8>)
    3c16:	f008 fe37 	bl	c888 <_printf>
        return __LINE__;
    3c1a:	21ad      	movs	r1, #173	; 0xad
    3c1c:	e0a3      	b.n	3d66 <port_tests+0x31a>
        }
    }

    // there are 5 packets, now we add another 3.
    st = port_write(w_port, packet, 3);
    if (st < 0) {
    3c1e:	2508      	movs	r5, #8
        return __LINE__;
    }

    expected_count = 8;
    while (true) {
        st = port_read(r_port, 0, &res);
    3c20:	9802      	ldr	r0, [sp, #8]
    3c22:	2100      	movs	r1, #0
    3c24:	aa03      	add	r2, sp, #12
    3c26:	f002 fa43 	bl	60b0 <port_read>
        if (st < 0)
    3c2a:	2800      	cmp	r0, #0
    3c2c:	db01      	blt.n	3c32 <port_tests+0x1e6>
            break;
        dump_port_result(&res);
        --expected_count;
    3c2e:	3d01      	subs	r5, #1
    3c30:	e7f6      	b.n	3c20 <port_tests+0x1d4>
    }

    if (expected_count != 0) {
    3c32:	b12d      	cbz	r5, 3c40 <port_tests+0x1f4>
        printf("invalid read count = %d\n", expected_count);
    3c34:	4629      	mov	r1, r5
    3c36:	4838      	ldr	r0, [pc, #224]	; (3d18 <port_tests+0x2cc>)
    3c38:	f008 fe26 	bl	c888 <_printf>
        return __LINE__;
    3c3c:	21bb      	movs	r1, #187	; 0xbb
    3c3e:	e092      	b.n	3d66 <port_tests+0x31a>
    }

    // attempt to use the wrong port.
    st = port_write(r_port, &packet[1], 1);
    3c40:	f104 0108 	add.w	r1, r4, #8
    3c44:	9802      	ldr	r0, [sp, #8]
    3c46:	2201      	movs	r2, #1
    3c48:	f002 f9d0 	bl	5fec <port_write>
    if (st !=  ERR_BAD_HANDLE) {
    3c4c:	f110 0f2a 	cmn.w	r0, #42	; 0x2a
        printf("invalid read count = %d\n", expected_count);
        return __LINE__;
    }

    // attempt to use the wrong port.
    st = port_write(r_port, &packet[1], 1);
    3c50:	4601      	mov	r1, r0
    if (st !=  ERR_BAD_HANDLE) {
    3c52:	d004      	beq.n	3c5e <port_tests+0x212>
        printf("expected bad handle error, status = %d\n", st);
    3c54:	4834      	ldr	r0, [pc, #208]	; (3d28 <port_tests+0x2dc>)
    3c56:	f008 fe17 	bl	c888 <_printf>
        return __LINE__;
    3c5a:	21c2      	movs	r1, #194	; 0xc2
    3c5c:	e083      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_read(w_port, 0, &res);
    3c5e:	4629      	mov	r1, r5
    3c60:	9801      	ldr	r0, [sp, #4]
    3c62:	aa03      	add	r2, sp, #12
    3c64:	f002 fa24 	bl	60b0 <port_read>
    if (st !=  ERR_BAD_HANDLE) {
    3c68:	f110 0f2a 	cmn.w	r0, #42	; 0x2a
    if (st !=  ERR_BAD_HANDLE) {
        printf("expected bad handle error, status = %d\n", st);
        return __LINE__;
    }

    st = port_read(w_port, 0, &res);
    3c6c:	4601      	mov	r1, r0
    if (st !=  ERR_BAD_HANDLE) {
    3c6e:	d004      	beq.n	3c7a <port_tests+0x22e>
        printf("expected bad handle error, status = %d\n", st);
    3c70:	482d      	ldr	r0, [pc, #180]	; (3d28 <port_tests+0x2dc>)
    3c72:	f008 fe09 	bl	c888 <_printf>
        return __LINE__;
    3c76:	21c8      	movs	r1, #200	; 0xc8
    3c78:	e075      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_close(r_port);
    3c7a:	9802      	ldr	r0, [sp, #8]
    3c7c:	f002 fab2 	bl	61e4 <port_close>
    if (st < 0) {
    3c80:	1e01      	subs	r1, r0, #0
    3c82:	da04      	bge.n	3c8e <port_tests+0x242>
        printf("could not close read port, status = %d\n", st);
    3c84:	4829      	ldr	r0, [pc, #164]	; (3d2c <port_tests+0x2e0>)
    3c86:	f008 fdff 	bl	c888 <_printf>
        return __LINE__;
    3c8a:	21ce      	movs	r1, #206	; 0xce
    3c8c:	e06b      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_close(w_port);
    3c8e:	9801      	ldr	r0, [sp, #4]
    3c90:	f002 faa8 	bl	61e4 <port_close>
    if (st < 0) {
    3c94:	1e01      	subs	r1, r0, #0
    3c96:	da04      	bge.n	3ca2 <port_tests+0x256>
        printf("could not close write port, status = %d\n", st);
    3c98:	4825      	ldr	r0, [pc, #148]	; (3d30 <port_tests+0x2e4>)
    3c9a:	f008 fdf5 	bl	c888 <_printf>
        return __LINE__;
    3c9e:	21d4      	movs	r1, #212	; 0xd4
    3ca0:	e061      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_close(r_port);
    3ca2:	9802      	ldr	r0, [sp, #8]
    3ca4:	f002 fa9e 	bl	61e4 <port_close>
    if (st != ERR_BAD_HANDLE) {
    3ca8:	f110 0f2a 	cmn.w	r0, #42	; 0x2a
    if (st < 0) {
        printf("could not close write port, status = %d\n", st);
        return __LINE__;
    }

    st = port_close(r_port);
    3cac:	4601      	mov	r1, r0
    if (st != ERR_BAD_HANDLE) {
    3cae:	d004      	beq.n	3cba <port_tests+0x26e>
        printf("expected bad handle error, status = %d\n", st);
    3cb0:	481d      	ldr	r0, [pc, #116]	; (3d28 <port_tests+0x2dc>)
    3cb2:	f008 fde9 	bl	c888 <_printf>
        return __LINE__;
    3cb6:	21da      	movs	r1, #218	; 0xda
    3cb8:	e055      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_close(w_port);
    3cba:	9801      	ldr	r0, [sp, #4]
    3cbc:	f002 fa92 	bl	61e4 <port_close>
    if (st != ERR_BAD_HANDLE) {
    3cc0:	f110 0f2a 	cmn.w	r0, #42	; 0x2a
    if (st != ERR_BAD_HANDLE) {
        printf("expected bad handle error, status = %d\n", st);
        return __LINE__;
    }

    st = port_close(w_port);
    3cc4:	4601      	mov	r1, r0
    if (st != ERR_BAD_HANDLE) {
    3cc6:	d004      	beq.n	3cd2 <port_tests+0x286>
        printf("expected bad handle error, status = %d\n", st);
    3cc8:	4817      	ldr	r0, [pc, #92]	; (3d28 <port_tests+0x2dc>)
    3cca:	f008 fddd 	bl	c888 <_printf>
        return __LINE__;
    3cce:	21e0      	movs	r1, #224	; 0xe0
    3cd0:	e049      	b.n	3d66 <port_tests+0x31a>
    }

    st = port_destroy(w_port);
    3cd2:	9801      	ldr	r0, [sp, #4]
    3cd4:	f002 fa3a 	bl	614c <port_destroy>
    if (st < 0) {
    3cd8:	1e01      	subs	r1, r0, #0
    3cda:	da2d      	bge.n	3d38 <port_tests+0x2ec>
        printf("could not destroy port, status = %d\n", st);
    3cdc:	4815      	ldr	r0, [pc, #84]	; (3d34 <port_tests+0x2e8>)
    3cde:	f008 fdd3 	bl	c888 <_printf>
        return __LINE__;
    3ce2:	21e6      	movs	r1, #230	; 0xe6
    3ce4:	e03f      	b.n	3d66 <port_tests+0x31a>
    3ce6:	bf00      	nop
    3ce8:	000103f6 	.word	0x000103f6
    3cec:	000102ad 	.word	0x000102ad
    3cf0:	20000050 	.word	0x20000050
    3cf4:	000103fe 	.word	0x000103fe
    3cf8:	00010406 	.word	0x00010406
    3cfc:	0001017c 	.word	0x0001017c
    3d00:	0000eac4 	.word	0x0000eac4
    3d04:	000101da 	.word	0x000101da
    3d08:	0001042e 	.word	0x0001042e
    3d0c:	000101b0 	.word	0x000101b0
    3d10:	00010442 	.word	0x00010442
    3d14:	00010455 	.word	0x00010455
    3d18:	00010474 	.word	0x00010474
    3d1c:	0000e7b4 	.word	0x0000e7b4
    3d20:	0001048d 	.word	0x0001048d
    3d24:	000104a7 	.word	0x000104a7
    3d28:	000104ca 	.word	0x000104ca
    3d2c:	000104f2 	.word	0x000104f2
    3d30:	0001051a 	.word	0x0001051a
    3d34:	0001038d 	.word	0x0001038d
    }

    printf("single_thread_basic : ok\n");
    3d38:	480e      	ldr	r0, [pc, #56]	; (3d74 <port_tests+0x328>)
    3d3a:	f008 fda5 	bl	c888 <_printf>
{
    int result;
    int count = 3;
    while (count--) {
        RUN_TEST(single_thread_basic);
        RUN_TEST(two_threads_basic);
    3d3e:	f7ff fc27 	bl	3590 <two_threads_basic>
    3d42:	4601      	mov	r1, r0
    3d44:	b978      	cbnz	r0, 3d66 <port_tests+0x31a>
        RUN_TEST(group_basic);
    3d46:	f7ff fd39 	bl	37bc <group_basic>
    3d4a:	4601      	mov	r1, r0
    3d4c:	b958      	cbnz	r0, 3d66 <port_tests+0x31a>
        RUN_TEST(group_dynamic);
    3d4e:	f7ff fded 	bl	392c <group_dynamic>
    3d52:	4601      	mov	r1, r0
    3d54:	2800      	cmp	r0, #0
    3d56:	f43f ae7c 	beq.w	3a52 <port_tests+0x6>
    3d5a:	e004      	b.n	3d66 <port_tests+0x31a>
    }

    printf("all tests passed\n");
    3d5c:	4806      	ldr	r0, [pc, #24]	; (3d78 <port_tests+0x32c>)
    3d5e:	f008 fd93 	bl	c888 <_printf>
    return 0;
    3d62:	4630      	mov	r0, r6
    3d64:	e003      	b.n	3d6e <port_tests+0x322>
fail:
    printf("test failed at line %d\n", result);
    3d66:	4805      	ldr	r0, [pc, #20]	; (3d7c <port_tests+0x330>)
    3d68:	f008 fd8e 	bl	c888 <_printf>
    return 1;
    3d6c:	2001      	movs	r0, #1
}
    3d6e:	b00d      	add	sp, #52	; 0x34
    3d70:	bdf0      	pop	{r4, r5, r6, r7, r15}
    3d72:	bf00      	nop
    3d74:	00010543 	.word	0x00010543
    3d78:	0001055d 	.word	0x0001055d
    3d7c:	0001056f 	.word	0x0001056f

00003d80 <platform_set_periodic_timer>:

status_t platform_set_periodic_timer(platform_timer_callback callback, void *arg, lk_time_t interval)
{
    LTRACEF("callback %p, arg %p, interval %u\n", callback, arg, interval);

    DEBUG_ASSERT(tick_rate != 0 && tick_rate_mhz != 0);
    3d80:	4b16      	ldr	r3, [pc, #88]	; (3ddc <platform_set_periodic_timer+0x5c>)

    arm_cm_irq_exit(resched);
}

status_t platform_set_periodic_timer(platform_timer_callback callback, void *arg, lk_time_t interval)
{
    3d82:	b537      	push	{r0, r1, r2, r4, r5, r14}
    LTRACEF("callback %p, arg %p, interval %u\n", callback, arg, interval);

    DEBUG_ASSERT(tick_rate != 0 && tick_rate_mhz != 0);
    3d84:	681b      	ldr	r3, [r3, #0]
    3d86:	4674      	mov	r4, r14
    3d88:	b113      	cbz	r3, 3d90 <platform_set_periodic_timer+0x10>
    3d8a:	4d15      	ldr	r5, [pc, #84]	; (3de0 <platform_set_periodic_timer+0x60>)
    3d8c:	682d      	ldr	r5, [r5, #0]
    3d8e:	b93d      	cbnz	r5, 3da0 <platform_set_periodic_timer+0x20>
    3d90:	4b14      	ldr	r3, [pc, #80]	; (3de4 <platform_set_periodic_timer+0x64>)
    3d92:	4620      	mov	r0, r4
    3d94:	9300      	str	r3, [sp, #0]
    3d96:	4914      	ldr	r1, [pc, #80]	; (3de8 <platform_set_periodic_timer+0x68>)
    3d98:	4a14      	ldr	r2, [pc, #80]	; (3dec <platform_set_periodic_timer+0x6c>)
    3d9a:	235b      	movs	r3, #91	; 0x5b
    3d9c:	f007 fb8a 	bl	b4b4 <_panic>

    cb = callback;
    3da0:	4c13      	ldr	r4, [pc, #76]	; (3df0 <platform_set_periodic_timer+0x70>)
    cb_args = arg;

    tick_interval_ms = interval;
    tick_interval_us = interval * 1000;
    3da2:	4d14      	ldr	r5, [pc, #80]	; (3df4 <platform_set_periodic_timer+0x74>)
{
    LTRACEF("callback %p, arg %p, interval %u\n", callback, arg, interval);

    DEBUG_ASSERT(tick_rate != 0 && tick_rate_mhz != 0);

    cb = callback;
    3da4:	6020      	str	r0, [r4, #0]
    cb_args = arg;
    3da6:	4814      	ldr	r0, [pc, #80]	; (3df8 <platform_set_periodic_timer+0x78>)

    tick_interval_ms = interval;
    tick_interval_us = interval * 1000;
    3da8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    LTRACEF("callback %p, arg %p, interval %u\n", callback, arg, interval);

    DEBUG_ASSERT(tick_rate != 0 && tick_rate_mhz != 0);

    cb = callback;
    cb_args = arg;
    3dac:	6001      	str	r1, [r0, #0]

    tick_interval_ms = interval;
    3dae:	4913      	ldr	r1, [pc, #76]	; (3dfc <platform_set_periodic_timer+0x7c>)
    tick_interval_us = interval * 1000;
    3db0:	fb04 f002 	mul.w	r0, r4, r2
    DEBUG_ASSERT(tick_rate != 0 && tick_rate_mhz != 0);

    cb = callback;
    cb_args = arg;

    tick_interval_ms = interval;
    3db4:	600a      	str	r2, [r1, #0]

static void arm_cm_systick_set_periodic(lk_time_t period)
{
    LTRACEF("clk_freq %u, period %u\n", tick_rate, (uint)period);

    uint32_t ticks = tick_rate / (1000 / period);
    3db6:	fbb4 f2f2 	udiv	r2, r4, r2
    3dba:	fbb3 f2f2 	udiv	r2, r3, r2
    LTRACEF("ticks %d\n", ticks);

    SysTick->LOAD = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;
    3dbe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3dc2:	4b0f      	ldr	r3, [pc, #60]	; (3e00 <platform_set_periodic_timer+0x80>)

    cb = callback;
    cb_args = arg;

    tick_interval_ms = interval;
    tick_interval_us = interval * 1000;
    3dc4:	2100      	movs	r1, #0
    LTRACEF("clk_freq %u, period %u\n", tick_rate, (uint)period);

    uint32_t ticks = tick_rate / (1000 / period);
    LTRACEF("ticks %d\n", ticks);

    SysTick->LOAD = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;
    3dc6:	3a01      	subs	r2, #1

    cb = callback;
    cb_args = arg;

    tick_interval_ms = interval;
    tick_interval_us = interval * 1000;
    3dc8:	e9c5 0100 	strd	r0, r1, [r5]
    LTRACEF("clk_freq %u, period %u\n", tick_rate, (uint)period);

    uint32_t ticks = tick_rate / (1000 / period);
    LTRACEF("ticks %d\n", ticks);

    SysTick->LOAD = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;
    3dcc:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
    3dce:	2000      	movs	r0, #0
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
    3dd0:	2207      	movs	r2, #7

    uint32_t ticks = tick_rate / (1000 / period);
    LTRACEF("ticks %d\n", ticks);

    SysTick->LOAD = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;
    SysTick->VAL = 0;
    3dd2:	6098      	str	r0, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
    3dd4:	601a      	str	r2, [r3, #0]
    tick_interval_ms = interval;
    tick_interval_us = interval * 1000;
    arm_cm_systick_set_periodic(interval);

    return NO_ERROR;
}
    3dd6:	b003      	add	sp, #12
    3dd8:	bd30      	pop	{r4, r5, r15}
    3dda:	bf00      	nop
    3ddc:	20000644 	.word	0x20000644
    3de0:	20000630 	.word	0x20000630
    3de4:	000107b3 	.word	0x000107b3
    3de8:	0001076e 	.word	0x0001076e
    3dec:	00010792 	.word	0x00010792
    3df0:	20000620 	.word	0x20000620
    3df4:	20000628 	.word	0x20000628
    3df8:	20000640 	.word	0x20000640
    3dfc:	2000061c 	.word	0x2000061c
    3e00:	e000e010 	.word	0xe000e010

00003e04 <current_time>:

lk_time_t current_time(void)
{
    uint32_t reload = SysTick->LOAD  & SysTick_LOAD_RELOAD_Msk;
    3e04:	4b0f      	ldr	r3, [pc, #60]	; (3e44 <current_time+0x40>)

    return NO_ERROR;
}

lk_time_t current_time(void)
{
    3e06:	b530      	push	{r4, r5, r14}
    uint32_t reload = SysTick->LOAD  & SysTick_LOAD_RELOAD_Msk;
    3e08:	685d      	ldr	r5, [r3, #4]
    3e0a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000

    uint64_t t;
    uint32_t delta;
    do {
        t = ticks;
    3e0e:	4b0e      	ldr	r3, [pc, #56]	; (3e48 <current_time+0x44>)
    3e10:	e9d3 0100 	ldrd	r0, r1, [r3]
        delta = (volatile uint32_t)SysTick->VAL;
    3e14:	4b0b      	ldr	r3, [pc, #44]	; (3e44 <current_time+0x40>)
    3e16:	689c      	ldr	r4, [r3, #8]
        DMB;
    3e18:	f3bf 8f5f 	dmb	sy
    } while (ticks != t);
    3e1c:	4b0a      	ldr	r3, [pc, #40]	; (3e48 <current_time+0x44>)
    3e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3e22:	428b      	cmp	r3, r1
    3e24:	bf08      	it	eq
    3e26:	4282      	cmpeq	r2, r0
    3e28:	d1f1      	bne.n	3e0e <current_time+0xa>

    /* convert ticks to msec */
    delta = (reload - delta) / (tick_rate_mhz * 1000);
    lk_time_t res = (t * tick_interval_ms) + delta;
    3e2a:	4908      	ldr	r1, [pc, #32]	; (3e4c <current_time+0x48>)
        delta = (volatile uint32_t)SysTick->VAL;
        DMB;
    } while (ticks != t);

    /* convert ticks to msec */
    delta = (reload - delta) / (tick_rate_mhz * 1000);
    3e2c:	1b2b      	subs	r3, r5, r4
    lk_time_t res = (t * tick_interval_ms) + delta;
    3e2e:	6808      	ldr	r0, [r1, #0]
        delta = (volatile uint32_t)SysTick->VAL;
        DMB;
    } while (ticks != t);

    /* convert ticks to msec */
    delta = (reload - delta) / (tick_rate_mhz * 1000);
    3e30:	4907      	ldr	r1, [pc, #28]	; (3e50 <current_time+0x4c>)
    3e32:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    3e36:	6809      	ldr	r1, [r1, #0]
    3e38:	4361      	muls	r1, r4
    3e3a:	fbb3 f3f1 	udiv	r3, r3, r1
    lk_time_t res = (t * tick_interval_ms) + delta;

    return res;
}
    3e3e:	fb00 3002 	mla	r0, r0, r2, r3
    3e42:	bd30      	pop	{r4, r5, r15}
    3e44:	e000e010 	.word	0xe000e010
    3e48:	20000638 	.word	0x20000638
    3e4c:	2000061c 	.word	0x2000061c
    3e50:	20000630 	.word	0x20000630

00003e54 <_systick>:
}

/* main systick irq handler */
void _systick(void)
{
    ticks++;
    3e54:	490e      	ldr	r1, [pc, #56]	; (3e90 <_systick+0x3c>)
    SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

/* main systick irq handler */
void _systick(void)
{
    3e56:	b510      	push	{r4, r14}
    ticks++;
    3e58:	e9d1 2300 	ldrd	r2, r3, [r1]
    3e5c:	3201      	adds	r2, #1
    3e5e:	f143 0300 	adc.w	r3, r3, #0
    3e62:	e9c1 2300 	strd	r2, r3, [r1]

    arm_cm_irq_entry();
    3e66:	f7fc fc5f 	bl	728 <arm_cm_irq_entry>

    bool resched = false;
    if (cb) {
    3e6a:	4b0a      	ldr	r3, [pc, #40]	; (3e94 <_systick+0x40>)
    3e6c:	681c      	ldr	r4, [r3, #0]
    3e6e:	b14c      	cbz	r4, 3e84 <_systick+0x30>
        lk_time_t now = current_time();
    3e70:	f7ff ffc8 	bl	3e04 <current_time>
        if (cb(cb_args, now) == INT_RESCHEDULE)
    3e74:	4b08      	ldr	r3, [pc, #32]	; (3e98 <_systick+0x44>)

    arm_cm_irq_entry();

    bool resched = false;
    if (cb) {
        lk_time_t now = current_time();
    3e76:	4601      	mov	r1, r0
        if (cb(cb_args, now) == INT_RESCHEDULE)
    3e78:	6818      	ldr	r0, [r3, #0]
    3e7a:	47a0      	blx	r4
    3e7c:	1e43      	subs	r3, r0, #1
    3e7e:	4258      	negs	r0, r3
    3e80:	4158      	adcs	r0, r3
    3e82:	e000      	b.n	3e86 <_systick+0x32>
{
    ticks++;

    arm_cm_irq_entry();

    bool resched = false;
    3e84:	4620      	mov	r0, r4
        if (cb(cb_args, now) == INT_RESCHEDULE)
            resched = true;
    }

    arm_cm_irq_exit(resched);
}
    3e86:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
        lk_time_t now = current_time();
        if (cb(cb_args, now) == INT_RESCHEDULE)
            resched = true;
    }

    arm_cm_irq_exit(resched);
    3e8a:	f7fc bc57 	b.w	73c <arm_cm_irq_exit>
    3e8e:	bf00      	nop
    3e90:	20000638 	.word	0x20000638
    3e94:	20000620 	.word	0x20000620
    3e98:	20000640 	.word	0x20000640

00003e9c <current_time_hires>:
    return res;
}

lk_bigtime_t current_time_hires(void)
{
    uint32_t reload = SysTick->LOAD  & SysTick_LOAD_RELOAD_Msk;
    3e9c:	4b12      	ldr	r3, [pc, #72]	; (3ee8 <current_time_hires+0x4c>)

    return res;
}

lk_bigtime_t current_time_hires(void)
{
    3e9e:	b530      	push	{r4, r5, r14}
    uint32_t reload = SysTick->LOAD  & SysTick_LOAD_RELOAD_Msk;
    3ea0:	685d      	ldr	r5, [r3, #4]
    3ea2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000

    uint64_t t;
    uint32_t delta;
    do {
        t = ticks;
    3ea6:	4b11      	ldr	r3, [pc, #68]	; (3eec <current_time_hires+0x50>)
    3ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
        delta = (volatile uint32_t)SysTick->VAL;
    3eac:	4b0e      	ldr	r3, [pc, #56]	; (3ee8 <current_time_hires+0x4c>)
    3eae:	689c      	ldr	r4, [r3, #8]
        DMB;
    3eb0:	f3bf 8f5f 	dmb	sy
    } while (ticks != t);
    3eb4:	4b0d      	ldr	r3, [pc, #52]	; (3eec <current_time_hires+0x50>)
    3eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3eba:	428b      	cmp	r3, r1
    3ebc:	bf08      	it	eq
    3ebe:	4282      	cmpeq	r2, r0
    3ec0:	d1f1      	bne.n	3ea6 <current_time_hires+0xa>

    /* convert ticks to usec */
    delta = (reload - delta) / tick_rate_mhz;
    3ec2:	490b      	ldr	r1, [pc, #44]	; (3ef0 <current_time_hires+0x54>)
    3ec4:	1b28      	subs	r0, r5, r4
    3ec6:	6809      	ldr	r1, [r1, #0]
    lk_bigtime_t res = (t * tick_interval_us) + delta;
    3ec8:	4c0a      	ldr	r4, [pc, #40]	; (3ef4 <current_time_hires+0x58>)
        delta = (volatile uint32_t)SysTick->VAL;
        DMB;
    } while (ticks != t);

    /* convert ticks to usec */
    delta = (reload - delta) / tick_rate_mhz;
    3eca:	fbb0 f0f1 	udiv	r0, r0, r1
    lk_bigtime_t res = (t * tick_interval_us) + delta;
    3ece:	cc12      	ldmia	r4, {r1, r4}
    3ed0:	4354      	muls	r4, r2
    3ed2:	fb01 4403 	mla	r4, r1, r3, r4
    3ed6:	fba1 2302 	umull	r2, r3, r1, r2
    3eda:	4423      	add	r3, r4

    return res;
}
    3edc:	1814      	adds	r4, r2, r0
    3ede:	f143 0500 	adc.w	r5, r3, #0
    3ee2:	4620      	mov	r0, r4
    3ee4:	4629      	mov	r1, r5
    3ee6:	bd30      	pop	{r4, r5, r15}
    3ee8:	e000e010 	.word	0xe000e010
    3eec:	20000638 	.word	0x20000638
    3ef0:	20000630 	.word	0x20000630
    3ef4:	20000628 	.word	0x20000628

00003ef8 <arm_cm_systick_init>:

void arm_cm_systick_init(uint32_t mhz)
{
    tick_rate = mhz;
    3ef8:	4b03      	ldr	r3, [pc, #12]	; (3f08 <arm_cm_systick_init+0x10>)
    3efa:	6018      	str	r0, [r3, #0]
    tick_rate_mhz = mhz / 1000000;
    3efc:	4b03      	ldr	r3, [pc, #12]	; (3f0c <arm_cm_systick_init+0x14>)
    3efe:	fbb0 f0f3 	udiv	r0, r0, r3
    3f02:	4b03      	ldr	r3, [pc, #12]	; (3f10 <arm_cm_systick_init+0x18>)
    3f04:	6018      	str	r0, [r3, #0]
    3f06:	4770      	bx	r14
    3f08:	20000644 	.word	0x20000644
    3f0c:	000f4240 	.word	0x000f4240
    3f10:	20000630 	.word	0x20000630

00003f14 <usb_do_callbacks>:
}

static void usb_do_callbacks(usb_callback_op_t op, const union usb_callback_args *args)
{
    usb_callback_container_t *c;
    list_for_every_entry(&usb.cb_list, c, usb_callback_container_t, node) {
    3f14:	4b07      	ldr	r3, [pc, #28]	; (3f34 <usb_do_callbacks+0x20>)

    return NO_ERROR;
}

static void usb_do_callbacks(usb_callback_op_t op, const union usb_callback_args *args)
{
    3f16:	b570      	push	{r4, r5, r6, r14}
    usb_callback_container_t *c;
    list_for_every_entry(&usb.cb_list, c, usb_callback_container_t, node) {
    3f18:	68dc      	ldr	r4, [r3, #12]

    return NO_ERROR;
}

static void usb_do_callbacks(usb_callback_op_t op, const union usb_callback_args *args)
{
    3f1a:	4605      	mov	r5, r0
    3f1c:	460e      	mov	r6, r1
    usb_callback_container_t *c;
    list_for_every_entry(&usb.cb_list, c, usb_callback_container_t, node) {
    3f1e:	4b06      	ldr	r3, [pc, #24]	; (3f38 <usb_do_callbacks+0x24>)
    3f20:	429c      	cmp	r4, r3
    3f22:	d006      	beq.n	3f32 <usb_do_callbacks+0x1e>
        c->cb(c->cookie, op, args);
    3f24:	68a3      	ldr	r3, [r4, #8]
    3f26:	68e0      	ldr	r0, [r4, #12]
    3f28:	4629      	mov	r1, r5
    3f2a:	4632      	mov	r2, r6
    3f2c:	4798      	blx	r3
}

static void usb_do_callbacks(usb_callback_op_t op, const union usb_callback_args *args)
{
    usb_callback_container_t *c;
    list_for_every_entry(&usb.cb_list, c, usb_callback_container_t, node) {
    3f2e:	6864      	ldr	r4, [r4, #4]
    3f30:	e7f5      	b.n	3f1e <usb_do_callbacks+0xa>
        c->cb(c->cookie, op, args);
    }
}
    3f32:	bd70      	pop	{r4, r5, r6, r15}
    3f34:	20000648 	.word	0x20000648
    3f38:	20000650 	.word	0x20000650

00003f3c <usb_init>:
#define LIST_INITIAL_VALUE(list) { &(list), &(list) }
#define LIST_INITIAL_CLEARED_VALUE { NULL, NULL }

static inline void list_initialize(struct list_node *list)
{
    list->prev = list->next = list;
    3f3c:	4b02      	ldr	r3, [pc, #8]	; (3f48 <usb_init+0xc>)
    3f3e:	f103 0208 	add.w	r2, r3, #8
    3f42:	60da      	str	r2, [r3, #12]
    3f44:	609a      	str	r2, [r3, #8]
    3f46:	4770      	bx	r14
    3f48:	20000648 	.word	0x20000648

00003f4c <usbc_callback>:
status_t usbc_callback(usb_callback_op_t op, const union usb_callback_args *args)
{
    LTRACEF("op %d, args %p\n", op, args);

    /* start looking for specific things to handle */
    if (op == USB_CB_SETUP_MSG) {
    3f4c:	2806      	cmp	r0, #6
        c->cb(c->cookie, op, args);
    }
}

status_t usbc_callback(usb_callback_op_t op, const union usb_callback_args *args)
{
    3f4e:	b537      	push	{r0, r1, r2, r4, r5, r14}
    3f50:	4604      	mov	r4, r0
    3f52:	460d      	mov	r5, r1
    LTRACEF("op %d, args %p\n", op, args);

    /* start looking for specific things to handle */
    if (op == USB_CB_SETUP_MSG) {
    3f54:	f040 8088 	bne.w	4068 <usbc_callback+0x11c>
        bool setup_handled = false;
        const struct usb_setup *setup = args->setup;
    3f58:	680c      	ldr	r4, [r1, #0]
        DEBUG_ASSERT(setup);
    3f5a:	b93c      	cbnz	r4, 3f6c <usbc_callback+0x20>
    3f5c:	4b4b      	ldr	r3, [pc, #300]	; (408c <usbc_callback+0x140>)
    3f5e:	4670      	mov	r0, r14
    3f60:	9300      	str	r3, [sp, #0]
    3f62:	494b      	ldr	r1, [pc, #300]	; (4090 <usbc_callback+0x144>)
    3f64:	4a4b      	ldr	r2, [pc, #300]	; (4094 <usbc_callback+0x148>)
    3f66:	23e8      	movs	r3, #232	; 0xe8
    3f68:	f007 faa4 	bl	b4b4 <_panic>
        LTRACEF("SETUP: req_type=%#x req=%#x value=%#x index=%#x len=%#x\n",
                setup->request_type, setup->request, setup->value, setup->index, setup->length);

        if ((setup->request_type & TYPE_MASK) == TYPE_STANDARD) {
    3f6c:	7823      	ldrb	r3, [r4, #0]
    3f6e:	f013 0f60 	tst.w	r3, #96	; 0x60
    3f72:	f040 8083 	bne.w	407c <usbc_callback+0x130>
            switch (setup->request) {
    3f76:	7862      	ldrb	r2, [r4, #1]
    3f78:	2a0b      	cmp	r2, #11
    3f7a:	d87f      	bhi.n	407c <usbc_callback+0x130>
    3f7c:	e8df f002 	tbb	[r15, r2]
    3f80:	0d7e0d6e 	.word	0x0d7e0d6e
    3f84:	7b10067e 	.word	0x7b10067e
    3f88:	686b4e66 	.word	0x686b4e66
                case SET_ADDRESS:
                    LTRACEF("SET_ADDRESS 0x%x\n", setup->value);
                    usbc_ep0_ack();
    3f8c:	f7fc fb20 	bl	5d0 <usbc_ep0_ack>
                    usbc_set_address(setup->value);
    3f90:	8860      	ldrh	r0, [r4, #2]
    3f92:	b2c0      	uxtb	r0, r0
    3f94:	f7fc fb42 	bl	61c <usbc_set_address>
                    setup_handled = true;
                    break;
    3f98:	e074      	b.n	4084 <usbc_callback+0x138>
                case SET_FEATURE:
                case CLEAR_FEATURE:
                    LTRACEF("SET/CLEAR_FEATURE, feature 0x%x\n", setup->value);
                    usbc_ep0_ack();
    3f9a:	f7fc fb19 	bl	5d0 <usbc_ep0_ack>
                    setup_handled = true;
                    break;
    3f9e:	e071      	b.n	4084 <usbc_callback+0x138>
                    LTRACEF("SET_DESCRIPTOR\n");
                    usbc_ep0_stall();
                    setup_handled = true;
                    break;
                case GET_DESCRIPTOR: {
                    if ((setup->request_type & RECIP_MASK) == RECIP_DEVICE) {
    3fa0:	06da      	lsls	r2, r3, #27
    3fa2:	d16b      	bne.n	407c <usbc_callback+0x130>
                        /* handle device descriptor fetches */

                        /* Get the right descriptors based on current speed */
                        const struct usb_descriptor_speed *speed;
                        if (usbc_is_highspeed()) {
    3fa4:	f7fc fb44 	bl	630 <usbc_is_highspeed>
    3fa8:	493b      	ldr	r1, [pc, #236]	; (4098 <usbc_callback+0x14c>)
                            speed = &usb.config->highspeed;
    3faa:	684a      	ldr	r2, [r1, #4]
                    if ((setup->request_type & RECIP_MASK) == RECIP_DEVICE) {
                        /* handle device descriptor fetches */

                        /* Get the right descriptors based on current speed */
                        const struct usb_descriptor_speed *speed;
                        if (usbc_is_highspeed()) {
    3fac:	b100      	cbz	r0, 3fb0 <usbc_callback+0x64>
                            speed = &usb.config->highspeed;
    3fae:	3224      	adds	r2, #36	; 0x24
                        } else {
                            speed = &usb.config->lowspeed;
                        }

                        switch (setup->value) {
    3fb0:	8863      	ldrh	r3, [r4, #2]
    3fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3fb6:	d20e      	bcs.n	3fd6 <usbc_callback+0x8a>
    3fb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3fbc:	d819      	bhi.n	3ff2 <usbc_callback+0xa6>
    3fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3fc2:	d00f      	beq.n	3fe4 <usbc_callback+0x98>
    3fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3fc8:	d00f      	beq.n	3fea <usbc_callback+0x9e>
    3fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3fce:	d159      	bne.n	4084 <usbc_callback+0x138>
                            case 0x100: /* device */
                                LTRACEF("got GET_DESCRIPTOR, device descriptor\n");
                                usbc_ep0_send(speed->device.desc, speed->device.len,
    3fd0:	6810      	ldr	r0, [r2, #0]
    3fd2:	6851      	ldr	r1, [r2, #4]
    3fd4:	e01e      	b.n	4014 <usbc_callback+0xc8>
                            speed = &usb.config->highspeed;
                        } else {
                            speed = &usb.config->lowspeed;
                        }

                        switch (setup->value) {
    3fd6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    3fda:	d019      	beq.n	4010 <usbc_callback+0xc4>
    3fdc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
    3fe0:	d049      	beq.n	4076 <usbc_callback+0x12a>
    3fe2:	e04f      	b.n	4084 <usbc_callback+0x138>
                                usbc_ep0_send(speed->device.desc, speed->device.len,
                                              setup->length);
                                break;
                            case 0x200:    /* CONFIGURATION */
                                LTRACEF("got GET_DESCRIPTOR, config descriptor\n");
                                usbc_ep0_send(speed->config.desc, speed->config.len,
    3fe4:	6990      	ldr	r0, [r2, #24]
    3fe6:	69d1      	ldr	r1, [r2, #28]
    3fe8:	e014      	b.n	4014 <usbc_callback+0xc8>
                                              setup->length);
                                break;
                            case 0x300:    /* Language ID */
                                LTRACEF("got GET_DESCRIPTOR, language id\n");
                                usbc_ep0_send(usb.config->langid.desc,
    3fea:	684b      	ldr	r3, [r1, #4]
    3fec:	6c98      	ldr	r0, [r3, #72]	; 0x48
    3fee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
    3ff0:	e010      	b.n	4014 <usbc_callback+0xc8>
                                break;
                            case (0x301)...(0x3ff): {
                                /* string descriptor, search our list for a match */
                                uint i;
                                bool found = false;
                                uint8_t id = setup->value & 0xff;
    3ff2:	b2db      	uxtb	r3, r3
                                for (i = 0; i < MAX_STRINGS; i++) {
    3ff4:	2200      	movs	r2, #0
    3ff6:	250e      	movs	r5, #14
    3ff8:	fb05 1502 	mla	r5, r5, r2, r1
                                    if (usb.strings[i].id == id) {
    3ffc:	7f28      	ldrb	r0, [r5, #28]
    3ffe:	4298      	cmp	r0, r3
    4000:	d102      	bne.n	4008 <usbc_callback+0xbc>
                                        usbc_ep0_send(usb.strings[i].string.desc,
    4002:	6928      	ldr	r0, [r5, #16]
    4004:	6969      	ldr	r1, [r5, #20]
    4006:	e005      	b.n	4014 <usbc_callback+0xc8>
                            case (0x301)...(0x3ff): {
                                /* string descriptor, search our list for a match */
                                uint i;
                                bool found = false;
                                uint8_t id = setup->value & 0xff;
                                for (i = 0; i < MAX_STRINGS; i++) {
    4008:	3201      	adds	r2, #1
    400a:	2a08      	cmp	r2, #8
    400c:	d1f3      	bne.n	3ff6 <usbc_callback+0xaa>
    400e:	e032      	b.n	4076 <usbc_callback+0x12a>
                                }
                                break;
                            }
                            case 0x600:    /* DEVICE QUALIFIER */
                                LTRACEF("got GET_DESCRIPTOR, device qualifier\n");
                                usbc_ep0_send(speed->device_qual.desc,
    4010:	68d0      	ldr	r0, [r2, #12]
    4012:	6911      	ldr	r1, [r2, #16]
    4014:	88e2      	ldrh	r2, [r4, #6]
    4016:	f7fc faeb 	bl	5f0 <usbc_ep0_send>
                                              speed->device_qual.len, setup->length);
                                break;
    401a:	e033      	b.n	4084 <usbc_callback+0x138>
                    break;
                }

                case SET_CONFIGURATION:
                    LTRACEF("SET_CONFIGURATION %d\n", setup->value);
                    usbc_ep0_ack();
    401c:	f7fc fad8 	bl	5d0 <usbc_ep0_ack>
    return ERR_NO_MEMORY;
}

static void usb_set_active_config(uint8_t config)
{
    if (config != usb.active_config) {
    4020:	4b1d      	ldr	r3, [pc, #116]	; (4098 <usbc_callback+0x14c>)
                }

                case SET_CONFIGURATION:
                    LTRACEF("SET_CONFIGURATION %d\n", setup->value);
                    usbc_ep0_ack();
                    usb_set_active_config(setup->value);
    4022:	8864      	ldrh	r4, [r4, #2]
    return ERR_NO_MEMORY;
}

static void usb_set_active_config(uint8_t config)
{
    if (config != usb.active_config) {
    4024:	785a      	ldrb	r2, [r3, #1]
                }

                case SET_CONFIGURATION:
                    LTRACEF("SET_CONFIGURATION %d\n", setup->value);
                    usbc_ep0_ack();
                    usb_set_active_config(setup->value);
    4026:	b2e4      	uxtb	r4, r4
    return ERR_NO_MEMORY;
}

static void usb_set_active_config(uint8_t config)
{
    if (config != usb.active_config) {
    4028:	42a2      	cmp	r2, r4
    402a:	d027      	beq.n	407c <usbc_callback+0x130>
        usb.active_config = config;
    402c:	705c      	strb	r4, [r3, #1]
        if (usb.active_config != 0) {
    402e:	b12c      	cbz	r4, 403c <usbc_callback+0xf0>
            printf("usb online\n");
    4030:	481a      	ldr	r0, [pc, #104]	; (409c <usbc_callback+0x150>)
    4032:	f008 fc29 	bl	c888 <_printf>
            usb_do_callbacks(USB_CB_ONLINE, NULL);
    4036:	2004      	movs	r0, #4
    4038:	2100      	movs	r1, #0
    403a:	e004      	b.n	4046 <usbc_callback+0xfa>
        } else {
            printf("usb offline\n");
    403c:	4818      	ldr	r0, [pc, #96]	; (40a0 <usbc_callback+0x154>)
    403e:	f008 fc23 	bl	c888 <_printf>
            usb_do_callbacks(USB_CB_OFFLINE, NULL);
    4042:	2005      	movs	r0, #5
    4044:	4621      	mov	r1, r4
    4046:	f7ff ff65 	bl	3f14 <usb_do_callbacks>
    404a:	e017      	b.n	407c <usbc_callback+0x130>
                    usb_set_active_config(setup->value);
                    break;

                case GET_CONFIGURATION:
                    LTRACEF("GET_CONFIGURATION\n");
                    usbc_ep0_send(&usb.active_config, 1, setup->length);
    404c:	4815      	ldr	r0, [pc, #84]	; (40a4 <usbc_callback+0x158>)
    404e:	e003      	b.n	4058 <usbc_callback+0x10c>
                    break;

                case SET_INTERFACE:
                    LTRACEF("SET_INTERFACE %d\n", setup->value);
                    usbc_ep0_ack();
    4050:	f7fc fabe 	bl	5d0 <usbc_ep0_ack>
                    break;
    4054:	e012      	b.n	407c <usbc_callback+0x130>

                case GET_INTERFACE: {
                    static uint8_t i = 1;
                    LTRACEF("GET_INTERFACE\n");
                    usbc_ep0_send(&i, 1, setup->length);
    4056:	4814      	ldr	r0, [pc, #80]	; (40a8 <usbc_callback+0x15c>)
    4058:	2101      	movs	r1, #1
    405a:	e001      	b.n	4060 <usbc_callback+0x114>
                }

                case GET_STATUS: {
                    static uint16_t i = 1; // self powered
                    LTRACEF("GET_STATUS\n");
                    usbc_ep0_send(&i, 2, setup->length);
    405c:	4813      	ldr	r0, [pc, #76]	; (40ac <usbc_callback+0x160>)
    405e:	2102      	movs	r1, #2
    4060:	88e2      	ldrh	r2, [r4, #6]
    4062:	f7fc fac5 	bl	5f0 <usbc_ep0_send>
                    break;
    4066:	e009      	b.n	407c <usbc_callback+0x130>
        }

        if (!setup_handled) {
            usb_do_callbacks(op, args);
        }
    } else if (op == USB_CB_RESET) {
    4068:	b950      	cbnz	r0, 4080 <usbc_callback+0x134>
        usb_do_callbacks(op, args);
    406a:	f7ff ff53 	bl	3f14 <usb_do_callbacks>

        usb.active_config = 0;
    406e:	4b0a      	ldr	r3, [pc, #40]	; (4098 <usbc_callback+0x14c>)
        usb_do_callbacks(USB_CB_OFFLINE, args);
    4070:	2005      	movs	r0, #5
            usb_do_callbacks(op, args);
        }
    } else if (op == USB_CB_RESET) {
        usb_do_callbacks(op, args);

        usb.active_config = 0;
    4072:	705c      	strb	r4, [r3, #1]
    4074:	e003      	b.n	407e <usbc_callback+0x132>
                                        break;
                                    }
                                }
                                if (!found) {
                                    /* couldn't find one, stall */
                                    usbc_ep0_stall();
    4076:	f7fc fab3 	bl	5e0 <usbc_ep0_stall>
    407a:	e003      	b.n	4084 <usbc_callback+0x138>
                    LTRACEF("unhandled standard request 0x%x\n", setup->request);
            }
        }

        if (!setup_handled) {
            usb_do_callbacks(op, args);
    407c:	2006      	movs	r0, #6
    407e:	4629      	mov	r1, r5
    4080:	f7ff ff48 	bl	3f14 <usb_do_callbacks>
        // other non setup messages, pass them down to anyone else
        usb_do_callbacks(op, args);
    }

    return NO_ERROR;
}
    4084:	2000      	movs	r0, #0
    4086:	b003      	add	sp, #12
    4088:	bd30      	pop	{r4, r5, r15}
    408a:	bf00      	nop
    408c:	000107ee 	.word	0x000107ee
    4090:	0001076e 	.word	0x0001076e
    4094:	000107d8 	.word	0x000107d8
    4098:	20000648 	.word	0x20000648
    409c:	000107f4 	.word	0x000107f4
    40a0:	00010800 	.word	0x00010800
    40a4:	20000649 	.word	0x20000649
    40a8:	20000054 	.word	0x20000054
    40ac:	20000056 	.word	0x20000056

000040b0 <cmd_threadstats>:
}
#endif

#if THREAD_STATS
static int cmd_threadstats(int argc, const cmd_args *argv)
{
    40b0:	b510      	push	{r4, r14}
    for (uint i = 0; i < SMP_MAX_CPUS; i++) {
        if (!mp_is_cpu_active(i))
            continue;

        printf("thread stats (cpu %d):\n", i);
        printf("\ttotal idle time: %lld\n", thread_stats[i].idle_time);
    40b2:	4c19      	ldr	r4, [pc, #100]	; (4118 <cmd_threadstats+0x68>)
{
    for (uint i = 0; i < SMP_MAX_CPUS; i++) {
        if (!mp_is_cpu_active(i))
            continue;

        printf("thread stats (cpu %d):\n", i);
    40b4:	2100      	movs	r1, #0
    40b6:	4819      	ldr	r0, [pc, #100]	; (411c <cmd_threadstats+0x6c>)
    40b8:	f008 fbe6 	bl	c888 <_printf>
        printf("\ttotal idle time: %lld\n", thread_stats[i].idle_time);
    40bc:	e9d4 2300 	ldrd	r2, r3, [r4]
    40c0:	4817      	ldr	r0, [pc, #92]	; (4120 <cmd_threadstats+0x70>)
    40c2:	f008 fbe1 	bl	c888 <_printf>
        printf("\ttotal busy time: %lld\n", current_time_hires() - thread_stats[i].idle_time);
    40c6:	f7ff fee9 	bl	3e9c <current_time_hires>
    40ca:	e9d4 2300 	ldrd	r2, r3, [r4]
    40ce:	1a82      	subs	r2, r0, r2
    40d0:	eb61 0303 	sbc.w	r3, r1, r3
    40d4:	4813      	ldr	r0, [pc, #76]	; (4124 <cmd_threadstats+0x74>)
    40d6:	f008 fbd7 	bl	c888 <_printf>
        printf("\treschedules: %lu\n", thread_stats[i].reschedules);
    40da:	6921      	ldr	r1, [r4, #16]
    40dc:	4812      	ldr	r0, [pc, #72]	; (4128 <cmd_threadstats+0x78>)
    40de:	f008 fbd3 	bl	c888 <_printf>
#if WITH_SMP
        printf("\treschedule_ipis: %lu\n", thread_stats[i].reschedule_ipis);
#endif
        printf("\tcontext_switches: %lu\n", thread_stats[i].context_switches);
    40e2:	6961      	ldr	r1, [r4, #20]
    40e4:	4811      	ldr	r0, [pc, #68]	; (412c <cmd_threadstats+0x7c>)
    40e6:	f008 fbcf 	bl	c888 <_printf>
        printf("\tpreempts: %lu\n", thread_stats[i].preempts);
    40ea:	69a1      	ldr	r1, [r4, #24]
    40ec:	4810      	ldr	r0, [pc, #64]	; (4130 <cmd_threadstats+0x80>)
    40ee:	f008 fbcb 	bl	c888 <_printf>
        printf("\tyields: %lu\n", thread_stats[i].yields);
    40f2:	69e1      	ldr	r1, [r4, #28]
    40f4:	480f      	ldr	r0, [pc, #60]	; (4134 <cmd_threadstats+0x84>)
    40f6:	f008 fbc7 	bl	c888 <_printf>
        printf("\tinterrupts: %lu\n", thread_stats[i].interrupts);
    40fa:	6a21      	ldr	r1, [r4, #32]
    40fc:	480e      	ldr	r0, [pc, #56]	; (4138 <cmd_threadstats+0x88>)
    40fe:	f008 fbc3 	bl	c888 <_printf>
        printf("\ttimer interrupts: %lu\n", thread_stats[i].timer_ints);
    4102:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4104:	480d      	ldr	r0, [pc, #52]	; (413c <cmd_threadstats+0x8c>)
    4106:	f008 fbbf 	bl	c888 <_printf>
        printf("\ttimers: %lu\n", thread_stats[i].timers);
    410a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    410c:	480c      	ldr	r0, [pc, #48]	; (4140 <cmd_threadstats+0x90>)
    410e:	f008 fbbb 	bl	c888 <_printf>
    }

    return 0;
}
    4112:	2000      	movs	r0, #0
    4114:	bd10      	pop	{r4, r15}
    4116:	bf00      	nop
    4118:	20000728 	.word	0x20000728
    411c:	00010843 	.word	0x00010843
    4120:	0001085b 	.word	0x0001085b
    4124:	00010873 	.word	0x00010873
    4128:	0001088b 	.word	0x0001088b
    412c:	0001089e 	.word	0x0001089e
    4130:	000108b6 	.word	0x000108b6
    4134:	000108c6 	.word	0x000108c6
    4138:	000108d4 	.word	0x000108d4
    413c:	000108e6 	.word	0x000108e6
    4140:	000108fe 	.word	0x000108fe

00004144 <cmd_threads>:
#endif
STATIC_COMMAND_END(kernel);

#if LK_DEBUGLEVEL > 1
static int cmd_threads(int argc, const cmd_args *argv)
{
    4144:	b508      	push	{r3, r14}
    printf("thread list:\n");
    4146:	4803      	ldr	r0, [pc, #12]	; (4154 <cmd_threads+0x10>)
    4148:	f008 fb9e 	bl	c888 <_printf>
    dump_all_threads();
    414c:	f000 ff46 	bl	4fdc <dump_all_threads>

    return 0;
}
    4150:	2000      	movs	r0, #0
    4152:	bd08      	pop	{r3, r15}
    4154:	0001090c 	.word	0x0001090c

00004158 <threadload>:

static inline enum handler_return mp_mbx_reschedule_irq(void) { return 0; }

// only one cpu exists in UP and if you're calling these functions, it's active...
static inline int mp_is_cpu_active(uint cpu) { return 1; }
static inline int mp_is_cpu_idle(uint cpu) { return (get_current_thread()->flags & THREAD_FLAG_IDLE) != 0; }
    4158:	4a32      	ldr	r2, [pc, #200]	; (4224 <threadload+0xcc>)

    return 0;
}

static enum handler_return threadload(struct timer *t, lk_time_t now, void *arg)
{
    415a:	e92d 43f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r14}
    415e:	6812      	ldr	r2, [r2, #0]
    for (uint i = 0; i < SMP_MAX_CPUS; i++) {
        /* dont display time for inactiv cpus */
        if (!mp_is_cpu_active(i))
            continue;

        lk_bigtime_t idle_time = thread_stats[i].idle_time;
    4160:	4b31      	ldr	r3, [pc, #196]	; (4228 <threadload+0xd0>)
    4162:	6a12      	ldr	r2, [r2, #32]

    return 0;
}

static enum handler_return threadload(struct timer *t, lk_time_t now, void *arg)
{
    4164:	b087      	sub	sp, #28

        lk_bigtime_t idle_time = thread_stats[i].idle_time;

        /* if the cpu is currently idle, add the time since it went idle up until now to the idle counter */
        bool is_idle = !!mp_is_cpu_idle(i);
        if (is_idle) {
    4166:	f012 0f10 	tst.w	r2, #16
    for (uint i = 0; i < SMP_MAX_CPUS; i++) {
        /* dont display time for inactiv cpus */
        if (!mp_is_cpu_active(i))
            continue;

        lk_bigtime_t idle_time = thread_stats[i].idle_time;
    416a:	e9d3 6700 	ldrd	r6, r7, [r3]
    416e:	4698      	mov	r8, r3

        /* if the cpu is currently idle, add the time since it went idle up until now to the idle counter */
        bool is_idle = !!mp_is_cpu_idle(i);
        if (is_idle) {
    4170:	d009      	beq.n	4186 <threadload+0x2e>
            idle_time += current_time_hires() - thread_stats[i].last_idle_timestamp;
    4172:	f7ff fe93 	bl	3e9c <current_time_hires>
    4176:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
    417a:	1ab6      	subs	r6, r6, r2
    417c:	eb67 0703 	sbc.w	r7, r7, r3
    4180:	1836      	adds	r6, r6, r0
    4182:	eb47 0701 	adc.w	r7, r7, r1
        }

        lk_bigtime_t delta_time = idle_time - last_idle_time[i];
    4186:	4929      	ldr	r1, [pc, #164]	; (422c <threadload+0xd4>)
        lk_bigtime_t busy_time = 1000000ULL - (delta_time > 1000000ULL ? 1000000ULL : delta_time);
    4188:	4a29      	ldr	r2, [pc, #164]	; (4230 <threadload+0xd8>)
        bool is_idle = !!mp_is_cpu_idle(i);
        if (is_idle) {
            idle_time += current_time_hires() - thread_stats[i].last_idle_timestamp;
        }

        lk_bigtime_t delta_time = idle_time - last_idle_time[i];
    418a:	e9d1 4500 	ldrd	r4, r5, [r1]
        lk_bigtime_t busy_time = 1000000ULL - (delta_time > 1000000ULL ? 1000000ULL : delta_time);
    418e:	2300      	movs	r3, #0
        bool is_idle = !!mp_is_cpu_idle(i);
        if (is_idle) {
            idle_time += current_time_hires() - thread_stats[i].last_idle_timestamp;
        }

        lk_bigtime_t delta_time = idle_time - last_idle_time[i];
    4190:	1b34      	subs	r4, r6, r4
    4192:	eb67 0505 	sbc.w	r5, r7, r5
        lk_bigtime_t busy_time = 1000000ULL - (delta_time > 1000000ULL ? 1000000ULL : delta_time);
    4196:	42ab      	cmp	r3, r5
    4198:	bf08      	it	eq
    419a:	42a2      	cmpeq	r2, r4
    419c:	bf3c      	itt	cc
    419e:	4614      	movcc	r4, r2
    41a0:	461d      	movcc	r5, r3
    41a2:	1b12      	subs	r2, r2, r4
    41a4:	eb63 0305 	sbc.w	r3, r3, r5
        uint busypercent = (busy_time * 10000) / (1000000);
    41a8:	f242 7410 	movw	r4, #10000	; 0x2710
    41ac:	4689      	mov	r9, r1
    41ae:	fba2 0104 	umull	r0, r1, r2, r4
    41b2:	4a1f      	ldr	r2, [pc, #124]	; (4230 <threadload+0xd8>)
    41b4:	fb04 1103 	mla	r1, r4, r3, r1
    41b8:	2300      	movs	r3, #0
    41ba:	f009 fe23 	bl	de04 <__aeabi_uldivmod>

        printf("cpu %u LOAD: "
    41be:	4c1d      	ldr	r4, [pc, #116]	; (4234 <threadload+0xdc>)
    41c0:	2364      	movs	r3, #100	; 0x64
    41c2:	6961      	ldr	r1, [r4, #20]
    41c4:	fbb0 f2f3 	udiv	r2, r0, r3
            idle_time += current_time_hires() - thread_stats[i].last_idle_timestamp;
        }

        lk_bigtime_t delta_time = idle_time - last_idle_time[i];
        lk_bigtime_t busy_time = 1000000ULL - (delta_time > 1000000ULL ? 1000000ULL : delta_time);
        uint busypercent = (busy_time * 10000) / (1000000);
    41c8:	4605      	mov	r5, r0

        printf("cpu %u LOAD: "
    41ca:	f8d8 0014 	ldr.w	r0, [r8, #20]
    41ce:	fb03 5312 	mls	r3, r3, r2, r5
    41d2:	1a41      	subs	r1, r0, r1
    41d4:	9100      	str	r1, [sp, #0]
    41d6:	f8d8 0018 	ldr.w	r0, [r8, #24]
    41da:	69a1      	ldr	r1, [r4, #24]
#endif
               thread_stats[i].interrupts - old_stats[i].interrupts,
               thread_stats[i].timer_ints - old_stats[i].timer_ints,
               thread_stats[i].timers - old_stats[i].timers);

        old_stats[i] = thread_stats[i];
    41dc:	4d12      	ldr	r5, [pc, #72]	; (4228 <threadload+0xd0>)

        lk_bigtime_t delta_time = idle_time - last_idle_time[i];
        lk_bigtime_t busy_time = 1000000ULL - (delta_time > 1000000ULL ? 1000000ULL : delta_time);
        uint busypercent = (busy_time * 10000) / (1000000);

        printf("cpu %u LOAD: "
    41de:	1a41      	subs	r1, r0, r1
    41e0:	9101      	str	r1, [sp, #4]
    41e2:	f8d8 0020 	ldr.w	r0, [r8, #32]
    41e6:	6a21      	ldr	r1, [r4, #32]
    41e8:	1a41      	subs	r1, r0, r1
    41ea:	9102      	str	r1, [sp, #8]
    41ec:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    41f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    41f2:	1a41      	subs	r1, r0, r1
    41f4:	9103      	str	r1, [sp, #12]
    41f6:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    41fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    41fc:	1a41      	subs	r1, r0, r1
    41fe:	9104      	str	r1, [sp, #16]
    4200:	480d      	ldr	r0, [pc, #52]	; (4238 <threadload+0xe0>)
    4202:	2100      	movs	r1, #0
    4204:	f008 fb40 	bl	c888 <_printf>
#endif
               thread_stats[i].interrupts - old_stats[i].interrupts,
               thread_stats[i].timer_ints - old_stats[i].timer_ints,
               thread_stats[i].timers - old_stats[i].timers);

        old_stats[i] = thread_stats[i];
    4208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    420a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    420c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    420e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4210:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    4214:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        last_idle_time[i] = idle_time;
    }

    return INT_NO_RESCHEDULE;
}
    4218:	2000      	movs	r0, #0
               thread_stats[i].interrupts - old_stats[i].interrupts,
               thread_stats[i].timer_ints - old_stats[i].timer_ints,
               thread_stats[i].timers - old_stats[i].timers);

        old_stats[i] = thread_stats[i];
        last_idle_time[i] = idle_time;
    421a:	e9c9 6700 	strd	r6, r7, [r9]
    }

    return INT_NO_RESCHEDULE;
}
    421e:	b007      	add	sp, #28
    4220:	e8bd 83f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r15}
    4224:	20000554 	.word	0x20000554
    4228:	20000728 	.word	0x20000728
    422c:	20000720 	.word	0x20000720
    4230:	000f4240 	.word	0x000f4240
    4234:	200006e8 	.word	0x200006e8
    4238:	0001091a 	.word	0x0001091a

0000423c <cmd_threadload>:

static int cmd_threadload(int argc, const cmd_args *argv)
{
    423c:	b538      	push	{r3, r4, r5, r14}
    static bool showthreadload = false;
    static timer_t tltimer;

    if (showthreadload == false) {
    423e:	4c0a      	ldr	r4, [pc, #40]	; (4268 <cmd_threadload+0x2c>)
        // start the display
        timer_initialize(&tltimer);
    4240:	480a      	ldr	r0, [pc, #40]	; (426c <cmd_threadload+0x30>)
static int cmd_threadload(int argc, const cmd_args *argv)
{
    static bool showthreadload = false;
    static timer_t tltimer;

    if (showthreadload == false) {
    4242:	7825      	ldrb	r5, [r4, #0]
    4244:	b955      	cbnz	r5, 425c <cmd_threadload+0x20>
        // start the display
        timer_initialize(&tltimer);
    4246:	f001 fb91 	bl	596c <timer_initialize>
        timer_set_periodic(&tltimer, 1000, &threadload, NULL);
    424a:	462b      	mov	r3, r5
    424c:	4807      	ldr	r0, [pc, #28]	; (426c <cmd_threadload+0x30>)
    424e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    4252:	4a07      	ldr	r2, [pc, #28]	; (4270 <cmd_threadload+0x34>)
    4254:	f001 fba2 	bl	599c <timer_set_periodic>
        showthreadload = true;
    4258:	2301      	movs	r3, #1
    425a:	e002      	b.n	4262 <cmd_threadload+0x26>
    } else {
        timer_cancel(&tltimer);
    425c:	f001 fbaa 	bl	59b4 <timer_cancel>
        showthreadload = false;
    4260:	2300      	movs	r3, #0
    4262:	7023      	strb	r3, [r4, #0]
    }

    return 0;
}
    4264:	2000      	movs	r0, #0
    4266:	bd38      	pop	{r3, r4, r5, r15}
    4268:	20000718 	.word	0x20000718
    426c:	200006c8 	.word	0x200006c8
    4270:	00004159 	.word	0x00004159

00004274 <arch_interrupt_restore.constprop.0>:
    4274:	07c3      	lsls	r3, r0, #31
    4276:	d500      	bpl.n	427a <arch_interrupt_restore.constprop.0+0x6>

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
    4278:	b662      	cpsie	i
    427a:	4770      	bx	r14

0000427c <arch_interrupt_restore.constprop.0>:
    427c:	07c3      	lsls	r3, r0, #31
    427e:	d500      	bpl.n	4282 <arch_interrupt_restore.constprop.0+0x6>
    4280:	b662      	cpsie	i
    4282:	4770      	bx	r14

00004284 <arch_interrupt_restore.constprop.0>:
    4284:	07c3      	lsls	r3, r0, #31
    4286:	d500      	bpl.n	428a <arch_interrupt_restore.constprop.0+0x6>
    4288:	b662      	cpsie	i
    428a:	4770      	bx	r14

0000428c <arch_interrupt_restore.constprop.0>:
    428c:	07c2      	lsls	r2, r0, #31
    428e:	d500      	bpl.n	4292 <arch_interrupt_restore.constprop.0+0x6>
    4290:	b662      	cpsie	i
    4292:	4770      	bx	r14

00004294 <arch_interrupt_save.constprop.1>:
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    4294:	f3ef 8310 	mrs	r3, PRIMASK

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    if ((flags & SPIN_LOCK_FLAG_IRQ) && !arch_ints_disabled()) {
    4298:	07da      	lsls	r2, r3, #31
    429a:	d402      	bmi.n	42a2 <arch_interrupt_save.constprop.1+0xe>
    __asm__ volatile("cpsie i");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
    429c:	b672      	cpsid	i
        state |= SPIN_LOCK_STATE_RESTORE_IRQ;
    429e:	2301      	movs	r3, #1
    42a0:	e000      	b.n	42a4 <arch_interrupt_save.constprop.1+0x10>
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    42a2:	2300      	movs	r3, #0
    }
    if ((flags & SPIN_LOCK_FLAG_FIQ) && !arch_fiqs_disabled()) {
        state |= SPIN_LOCK_STATE_RESTORE_FIQ;
        arch_disable_fiqs();
    }
    *statep = state;
    42a4:	6003      	str	r3, [r0, #0]
    42a6:	4770      	bx	r14

000042a8 <arch_interrupt_save.constprop.1>:
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    42a8:	f3ef 8310 	mrs	r3, PRIMASK

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    if ((flags & SPIN_LOCK_FLAG_IRQ) && !arch_ints_disabled()) {
    42ac:	07da      	lsls	r2, r3, #31
    42ae:	d402      	bmi.n	42b6 <arch_interrupt_save.constprop.1+0xe>
    __asm__ volatile("cpsie i");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
    42b0:	b672      	cpsid	i
        state |= SPIN_LOCK_STATE_RESTORE_IRQ;
    42b2:	2301      	movs	r3, #1
    42b4:	e000      	b.n	42b8 <arch_interrupt_save.constprop.1+0x10>
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    42b6:	2300      	movs	r3, #0
    }
    if ((flags & SPIN_LOCK_FLAG_FIQ) && !arch_fiqs_disabled()) {
        state |= SPIN_LOCK_STATE_RESTORE_FIQ;
        arch_disable_fiqs();
    }
    *statep = state;
    42b8:	6003      	str	r3, [r0, #0]
    42ba:	4770      	bx	r14

000042bc <arch_interrupt_save.constprop.1>:
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    42bc:	f3ef 8310 	mrs	r3, PRIMASK

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    if ((flags & SPIN_LOCK_FLAG_IRQ) && !arch_ints_disabled()) {
    42c0:	07da      	lsls	r2, r3, #31
    42c2:	d402      	bmi.n	42ca <arch_interrupt_save.constprop.1+0xe>
    __asm__ volatile("cpsie i");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
    42c4:	b672      	cpsid	i
        state |= SPIN_LOCK_STATE_RESTORE_IRQ;
    42c6:	2301      	movs	r3, #1
    42c8:	e000      	b.n	42cc <arch_interrupt_save.constprop.1+0x10>
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    42ca:	2300      	movs	r3, #0
    }
    if ((flags & SPIN_LOCK_FLAG_FIQ) && !arch_fiqs_disabled()) {
        state |= SPIN_LOCK_STATE_RESTORE_FIQ;
        arch_disable_fiqs();
    }
    *statep = state;
    42cc:	6003      	str	r3, [r0, #0]
    42ce:	4770      	bx	r14

000042d0 <arch_interrupt_save.constprop.1>:
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    42d0:	f3ef 8310 	mrs	r3, PRIMASK

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    if ((flags & SPIN_LOCK_FLAG_IRQ) && !arch_ints_disabled()) {
    42d4:	07d9      	lsls	r1, r3, #31
    42d6:	d402      	bmi.n	42de <arch_interrupt_save.constprop.1+0xe>
    __asm__ volatile("cpsie i");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
    42d8:	b672      	cpsid	i
        state |= SPIN_LOCK_STATE_RESTORE_IRQ;
    42da:	2301      	movs	r3, #1
    42dc:	e000      	b.n	42e0 <arch_interrupt_save.constprop.1+0x10>
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    42de:	2300      	movs	r3, #0
    }
    if ((flags & SPIN_LOCK_FLAG_FIQ) && !arch_fiqs_disabled()) {
        state |= SPIN_LOCK_STATE_RESTORE_FIQ;
        arch_disable_fiqs();
    }
    *statep = state;
    42e0:	6003      	str	r3, [r0, #0]
    42e2:	4770      	bx	r14

000042e4 <event_init>:
 * @param e        Event object to initialize
 * @param initial  Initial value for "signaled" state
 * @param flags    0 or EVENT_FLAG_AUTOUNSIGNAL
 */
void event_init(event_t *e, bool initial, uint flags)
{
    42e4:	b510      	push	{r4, r14}
    *e = (event_t)EVENT_INITIAL_VALUE(*e, initial, flags);
    42e6:	f100 0310 	add.w	r3, r0, #16
    42ea:	4c05      	ldr	r4, [pc, #20]	; (4300 <event_init+0x1c>)
    42ec:	6082      	str	r2, [r0, #8]
    42ee:	4a05      	ldr	r2, [pc, #20]	; (4304 <event_init+0x20>)
    42f0:	6103      	str	r3, [r0, #16]
    42f2:	6143      	str	r3, [r0, #20]
    42f4:	2300      	movs	r3, #0
    42f6:	6004      	str	r4, [r0, #0]
    42f8:	7101      	strb	r1, [r0, #4]
    42fa:	60c2      	str	r2, [r0, #12]
    42fc:	6183      	str	r3, [r0, #24]
    42fe:	bd10      	pop	{r4, r15}
    4300:	65766e74 	.word	0x65766e74
    4304:	77616974 	.word	0x77616974

00004308 <event_destroy>:
 * still waiting on the event will be resumed.
 *
 * @param e        Event object to initialize
 */
void event_destroy(event_t *e)
{
    4308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    DEBUG_ASSERT(e->magic == EVENT_MAGIC);
    430a:	6803      	ldr	r3, [r0, #0]
    430c:	4a0f      	ldr	r2, [pc, #60]	; (434c <event_destroy+0x44>)
 * still waiting on the event will be resumed.
 *
 * @param e        Event object to initialize
 */
void event_destroy(event_t *e)
{
    430e:	4604      	mov	r4, r0
    DEBUG_ASSERT(e->magic == EVENT_MAGIC);
    4310:	4293      	cmp	r3, r2
    4312:	d007      	beq.n	4324 <event_destroy+0x1c>
    4314:	4b0e      	ldr	r3, [pc, #56]	; (4350 <event_destroy+0x48>)
    4316:	4670      	mov	r0, r14
    4318:	9300      	str	r3, [sp, #0]
    431a:	490e      	ldr	r1, [pc, #56]	; (4354 <event_destroy+0x4c>)
    431c:	4a0e      	ldr	r2, [pc, #56]	; (4358 <event_destroy+0x50>)
    431e:	2348      	movs	r3, #72	; 0x48
    4320:	f007 f8c8 	bl	b4b4 <_panic>
    4324:	a803      	add	r0, sp, #12

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    4326:	4e0d      	ldr	r6, [pc, #52]	; (435c <event_destroy+0x54>)
    4328:	f7ff ffb4 	bl	4294 <arch_interrupt_save.constprop.1>

    THREAD_LOCK(state);

    e->magic = 0;
    432c:	2500      	movs	r5, #0
    432e:	2101      	movs	r1, #1
    4330:	6031      	str	r1, [r6, #0]
    e->signaled = false;
    e->flags = 0;
    wait_queue_destroy(&e->wait, true);
    4332:	f104 000c 	add.w	r0, r4, #12
{
    DEBUG_ASSERT(e->magic == EVENT_MAGIC);

    THREAD_LOCK(state);

    e->magic = 0;
    4336:	6025      	str	r5, [r4, #0]
    e->signaled = false;
    4338:	7125      	strb	r5, [r4, #4]
    e->flags = 0;
    433a:	60a5      	str	r5, [r4, #8]
    wait_queue_destroy(&e->wait, true);
    433c:	f001 f940 	bl	55c0 <wait_queue_destroy>
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    4340:	9803      	ldr	r0, [sp, #12]
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    4342:	6035      	str	r5, [r6, #0]
    4344:	f7ff ff96 	bl	4274 <arch_interrupt_restore.constprop.0>

    THREAD_UNLOCK(state);
}
    4348:	b004      	add	sp, #16
    434a:	bd70      	pop	{r4, r5, r6, r15}
    434c:	65766e74 	.word	0x65766e74
    4350:	000109d4 	.word	0x000109d4
    4354:	0001076e 	.word	0x0001076e
    4358:	000109c5 	.word	0x000109c5
    435c:	200008d4 	.word	0x200008d4

00004360 <event_wait_timeout>:
 *
 * @return  0 on success, ERR_TIMED_OUT on timeout,
 *         other values on other errors.
 */
status_t event_wait_timeout(event_t *e, lk_time_t timeout)
{
    4360:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    status_t ret = NO_ERROR;

    DEBUG_ASSERT(e->magic == EVENT_MAGIC);
    4362:	6803      	ldr	r3, [r0, #0]
    4364:	4a16      	ldr	r2, [pc, #88]	; (43c0 <event_wait_timeout+0x60>)
 *
 * @return  0 on success, ERR_TIMED_OUT on timeout,
 *         other values on other errors.
 */
status_t event_wait_timeout(event_t *e, lk_time_t timeout)
{
    4366:	4604      	mov	r4, r0
    status_t ret = NO_ERROR;

    DEBUG_ASSERT(e->magic == EVENT_MAGIC);
    4368:	4293      	cmp	r3, r2
 *
 * @return  0 on success, ERR_TIMED_OUT on timeout,
 *         other values on other errors.
 */
status_t event_wait_timeout(event_t *e, lk_time_t timeout)
{
    436a:	460e      	mov	r6, r1
    status_t ret = NO_ERROR;

    DEBUG_ASSERT(e->magic == EVENT_MAGIC);
    436c:	d007      	beq.n	437e <event_wait_timeout+0x1e>
    436e:	4b15      	ldr	r3, [pc, #84]	; (43c4 <event_wait_timeout+0x64>)
    4370:	4670      	mov	r0, r14
    4372:	9300      	str	r3, [sp, #0]
    4374:	4914      	ldr	r1, [pc, #80]	; (43c8 <event_wait_timeout+0x68>)
    4376:	4a15      	ldr	r2, [pc, #84]	; (43cc <event_wait_timeout+0x6c>)
    4378:	2367      	movs	r3, #103	; 0x67
    437a:	f007 f89b 	bl	b4b4 <_panic>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    437e:	a803      	add	r0, sp, #12
    4380:	f7ff ff88 	bl	4294 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    4384:	4b12      	ldr	r3, [pc, #72]	; (43d0 <event_wait_timeout+0x70>)
    4386:	2201      	movs	r2, #1
    4388:	601a      	str	r2, [r3, #0]

    THREAD_LOCK(state);

    if (e->signaled) {
    438a:	7922      	ldrb	r2, [r4, #4]
    438c:	461d      	mov	r5, r3
    438e:	b13a      	cbz	r2, 43a0 <event_wait_timeout+0x40>
        /* signaled, we're going to fall through */
        if (e->flags & EVENT_FLAG_AUTOUNSIGNAL) {
    4390:	68a3      	ldr	r3, [r4, #8]
    4392:	2200      	movs	r2, #0
    4394:	f013 0301 	ands.w	r3, r3, #1
    4398:	d009      	beq.n	43ae <event_wait_timeout+0x4e>
            /* autounsignal flag lets one thread fall through before unsignaling */
            e->signaled = false;
    439a:	7122      	strb	r2, [r4, #4]
 * @return  0 on success, ERR_TIMED_OUT on timeout,
 *         other values on other errors.
 */
status_t event_wait_timeout(event_t *e, lk_time_t timeout)
{
    status_t ret = NO_ERROR;
    439c:	4614      	mov	r4, r2
    439e:	e007      	b.n	43b0 <event_wait_timeout+0x50>
            /* autounsignal flag lets one thread fall through before unsignaling */
            e->signaled = false;
        }
    } else {
        /* unsignaled, block here */
        ret = wait_queue_block(&e->wait, timeout);
    43a0:	f104 000c 	add.w	r0, r4, #12
    43a4:	4631      	mov	r1, r6
    43a6:	f000 fe55 	bl	5054 <wait_queue_block>
    43aa:	4604      	mov	r4, r0
    43ac:	e000      	b.n	43b0 <event_wait_timeout+0x50>
 * @return  0 on success, ERR_TIMED_OUT on timeout,
 *         other values on other errors.
 */
status_t event_wait_timeout(event_t *e, lk_time_t timeout)
{
    status_t ret = NO_ERROR;
    43ae:	461c      	mov	r4, r3
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    43b0:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    43b2:	9803      	ldr	r0, [sp, #12]
    43b4:	602b      	str	r3, [r5, #0]
    43b6:	f7ff ff5d 	bl	4274 <arch_interrupt_restore.constprop.0>
    }

    THREAD_UNLOCK(state);

    return ret;
}
    43ba:	4620      	mov	r0, r4
    43bc:	b004      	add	sp, #16
    43be:	bd70      	pop	{r4, r5, r6, r15}
    43c0:	65766e74 	.word	0x65766e74
    43c4:	000109d4 	.word	0x000109d4
    43c8:	0001076e 	.word	0x0001076e
    43cc:	000109c5 	.word	0x000109c5
    43d0:	200008d4 	.word	0x200008d4

000043d4 <event_signal>:
 *                    queue.
 *
 * @return  Returns NO_ERROR on success.
 */
status_t event_signal(event_t *e, bool reschedule)
{
    43d4:	b5f0      	push	{r4, r5, r6, r7, r14}
    DEBUG_ASSERT(e->magic == EVENT_MAGIC);
    43d6:	6803      	ldr	r3, [r0, #0]
    43d8:	4a17      	ldr	r2, [pc, #92]	; (4438 <event_signal+0x64>)
 *                    queue.
 *
 * @return  Returns NO_ERROR on success.
 */
status_t event_signal(event_t *e, bool reschedule)
{
    43da:	b085      	sub	sp, #20
    DEBUG_ASSERT(e->magic == EVENT_MAGIC);
    43dc:	4293      	cmp	r3, r2
 *                    queue.
 *
 * @return  Returns NO_ERROR on success.
 */
status_t event_signal(event_t *e, bool reschedule)
{
    43de:	4604      	mov	r4, r0
    43e0:	460e      	mov	r6, r1
    DEBUG_ASSERT(e->magic == EVENT_MAGIC);
    43e2:	d007      	beq.n	43f4 <event_signal+0x20>
    43e4:	4b15      	ldr	r3, [pc, #84]	; (443c <event_signal+0x68>)
    43e6:	4670      	mov	r0, r14
    43e8:	9300      	str	r3, [sp, #0]
    43ea:	4915      	ldr	r1, [pc, #84]	; (4440 <event_signal+0x6c>)
    43ec:	4a15      	ldr	r2, [pc, #84]	; (4444 <event_signal+0x70>)
    43ee:	238e      	movs	r3, #142	; 0x8e
    43f0:	f007 f860 	bl	b4b4 <_panic>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    43f4:	a803      	add	r0, sp, #12
    43f6:	f7ff ff4d 	bl	4294 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    43fa:	4b13      	ldr	r3, [pc, #76]	; (4448 <event_signal+0x74>)

    THREAD_LOCK(state);

    if (!e->signaled) {
    43fc:	7922      	ldrb	r2, [r4, #4]
    43fe:	2501      	movs	r5, #1
    4400:	601d      	str	r5, [r3, #0]
    4402:	461f      	mov	r7, r3
    4404:	b982      	cbnz	r2, 4428 <event_signal+0x54>
        if (e->flags & EVENT_FLAG_AUTOUNSIGNAL) {
    4406:	68a3      	ldr	r3, [r4, #8]
    4408:	f104 000c 	add.w	r0, r4, #12
    440c:	402b      	ands	r3, r5
    440e:	d006      	beq.n	441e <event_signal+0x4a>
            /* try to release one thread and leave unsignaled if successful */
            if (wait_queue_wake_one(&e->wait, reschedule, NO_ERROR) <= 0) {
    4410:	4631      	mov	r1, r6
    4412:	f000 ff29 	bl	5268 <wait_queue_wake_one>
    4416:	2800      	cmp	r0, #0
    4418:	dc06      	bgt.n	4428 <event_signal+0x54>
                /*
                 * if we didn't actually find a thread to wake up, go to
                 * signaled state and let the next call to event_wait
                 * unsignal the event.
                 */
                e->signaled = true;
    441a:	7125      	strb	r5, [r4, #4]
    441c:	e004      	b.n	4428 <event_signal+0x54>
            }
        } else {
            /* release all threads and remain signaled */
            e->signaled = true;
    441e:	7125      	strb	r5, [r4, #4]
            wait_queue_wake_all(&e->wait, reschedule, NO_ERROR);
    4420:	4631      	mov	r1, r6
    4422:	461a      	mov	r2, r3
    4424:	f000 ff90 	bl	5348 <wait_queue_wake_all>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    4428:	2400      	movs	r4, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    442a:	9803      	ldr	r0, [sp, #12]
    442c:	603c      	str	r4, [r7, #0]
    442e:	f7ff ff21 	bl	4274 <arch_interrupt_restore.constprop.0>
    }

    THREAD_UNLOCK(state);

    return NO_ERROR;
}
    4432:	4620      	mov	r0, r4
    4434:	b005      	add	sp, #20
    4436:	bdf0      	pop	{r4, r5, r6, r7, r15}
    4438:	65766e74 	.word	0x65766e74
    443c:	000109d4 	.word	0x000109d4
    4440:	0001076e 	.word	0x0001076e
    4444:	000109c5 	.word	0x000109c5
    4448:	200008d4 	.word	0x200008d4

0000444c <event_unsignal>:
 * @param e  Event object
 *
 * @return  Returns NO_ERROR on success.
 */
status_t event_unsignal(event_t *e)
{
    444c:	b507      	push	{r0, r1, r2, r14}
    DEBUG_ASSERT(e->magic == EVENT_MAGIC);
    444e:	6803      	ldr	r3, [r0, #0]
 * @param e  Event object
 *
 * @return  Returns NO_ERROR on success.
 */
status_t event_unsignal(event_t *e)
{
    4450:	4602      	mov	r2, r0
    DEBUG_ASSERT(e->magic == EVENT_MAGIC);
    4452:	4808      	ldr	r0, [pc, #32]	; (4474 <event_unsignal+0x28>)
    4454:	4283      	cmp	r3, r0
    4456:	d007      	beq.n	4468 <event_unsignal+0x1c>
    4458:	4b07      	ldr	r3, [pc, #28]	; (4478 <event_unsignal+0x2c>)
    445a:	4670      	mov	r0, r14
    445c:	9300      	str	r3, [sp, #0]
    445e:	4907      	ldr	r1, [pc, #28]	; (447c <event_unsignal+0x30>)
    4460:	4a07      	ldr	r2, [pc, #28]	; (4480 <event_unsignal+0x34>)
    4462:	23b7      	movs	r3, #183	; 0xb7
    4464:	f007 f826 	bl	b4b4 <_panic>

    e->signaled = false;
    4468:	2000      	movs	r0, #0
    446a:	7110      	strb	r0, [r2, #4]

    return NO_ERROR;
}
    446c:	b003      	add	sp, #12
    446e:	f85d fb04 	ldr.w	r15, [r13], #4
    4472:	bf00      	nop
    4474:	65766e74 	.word	0x65766e74
    4478:	000109d4 	.word	0x000109d4
    447c:	0001076e 	.word	0x0001076e
    4480:	000109c5 	.word	0x000109c5

00004484 <kernel_init>:
#include <kernel/timer.h>
#include <kernel/mp.h>
#include <kernel/port.h>

void kernel_init(void)
{
    4484:	b508      	push	{r3, r14}
    // if enabled, configure the kernel's event log
    kernel_evlog_init();

    // initialize the threading system
    dprintf(SPEW, "initializing mp\n");
    4486:	480a      	ldr	r0, [pc, #40]	; (44b0 <kernel_init+0x2c>)
    4488:	f008 f9fe 	bl	c888 <_printf>
    mp_init();

    // initialize the threading system
    dprintf(SPEW, "initializing threads\n");
    448c:	4809      	ldr	r0, [pc, #36]	; (44b4 <kernel_init+0x30>)
    448e:	f008 f9fb 	bl	c888 <_printf>
    thread_init();
    4492:	f000 fd2d 	bl	4ef0 <thread_init>

    // initialize kernel timers
    dprintf(SPEW, "initializing timers\n");
    4496:	4808      	ldr	r0, [pc, #32]	; (44b8 <kernel_init+0x34>)
    4498:	f008 f9f6 	bl	c888 <_printf>
    timer_init();
    449c:	f001 fac0 	bl	5a20 <timer_init>

    // initialize ports
    dprintf(SPEW, "initializing ports\n");
    44a0:	4806      	ldr	r0, [pc, #24]	; (44bc <kernel_init+0x38>)
    44a2:	f008 f9f1 	bl	c888 <_printf>
    port_init();
}
    44a6:	e8bd 4008 	ldmia.w	r13!, {r3, r14}
    dprintf(SPEW, "initializing timers\n");
    timer_init();

    // initialize ports
    dprintf(SPEW, "initializing ports\n");
    port_init();
    44aa:	f001 bb9d 	b.w	5be8 <port_init>
    44ae:	bf00      	nop
    44b0:	000109ec 	.word	0x000109ec
    44b4:	000109fd 	.word	0x000109fd
    44b8:	00010a13 	.word	0x00010a13
    44bc:	00010a28 	.word	0x00010a28

000044c0 <mutex_init>:
/**
 * @brief  Initialize a mutex_t
 */
void mutex_init(mutex_t *m)
{
    *m = (mutex_t)MUTEX_INITIAL_VALUE(*m);
    44c0:	4b06      	ldr	r3, [pc, #24]	; (44dc <mutex_init+0x1c>)
    44c2:	4907      	ldr	r1, [pc, #28]	; (44e0 <mutex_init+0x20>)
    44c4:	f100 0210 	add.w	r2, r0, #16
    44c8:	6003      	str	r3, [r0, #0]
    44ca:	2300      	movs	r3, #0
    44cc:	6043      	str	r3, [r0, #4]
    44ce:	6083      	str	r3, [r0, #8]
    44d0:	60c1      	str	r1, [r0, #12]
    44d2:	6102      	str	r2, [r0, #16]
    44d4:	6142      	str	r2, [r0, #20]
    44d6:	6183      	str	r3, [r0, #24]
    44d8:	4770      	bx	r14
    44da:	bf00      	nop
    44dc:	6d757478 	.word	0x6d757478
    44e0:	77616974 	.word	0x77616974

000044e4 <mutex_destroy>:
 *
 * This function frees any resources that were allocated
 * in mutex_init().  The mutex_t object itself is not freed.
 */
void mutex_destroy(mutex_t *m)
{
    44e4:	b570      	push	{r4, r5, r6, r14}
    DEBUG_ASSERT(m->magic == MUTEX_MAGIC);
    44e6:	6803      	ldr	r3, [r0, #0]
    44e8:	4a17      	ldr	r2, [pc, #92]	; (4548 <mutex_destroy+0x64>)
 *
 * This function frees any resources that were allocated
 * in mutex_init().  The mutex_t object itself is not freed.
 */
void mutex_destroy(mutex_t *m)
{
    44ea:	b086      	sub	sp, #24
    DEBUG_ASSERT(m->magic == MUTEX_MAGIC);
    44ec:	4293      	cmp	r3, r2
 *
 * This function frees any resources that were allocated
 * in mutex_init().  The mutex_t object itself is not freed.
 */
void mutex_destroy(mutex_t *m)
{
    44ee:	4604      	mov	r4, r0
    DEBUG_ASSERT(m->magic == MUTEX_MAGIC);
    44f0:	d007      	beq.n	4502 <mutex_destroy+0x1e>
    44f2:	4b16      	ldr	r3, [pc, #88]	; (454c <mutex_destroy+0x68>)
    44f4:	4670      	mov	r0, r14
    44f6:	9300      	str	r3, [sp, #0]
    44f8:	4915      	ldr	r1, [pc, #84]	; (4550 <mutex_destroy+0x6c>)
    44fa:	4a16      	ldr	r2, [pc, #88]	; (4554 <mutex_destroy+0x70>)
    44fc:	2337      	movs	r3, #55	; 0x37
    44fe:	f006 ffd9 	bl	b4b4 <_panic>

#if LK_DEBUGLEVEL > 0
    if (unlikely(m->holder != 0 && get_current_thread() != m->holder))
    4502:	6843      	ldr	r3, [r0, #4]
    4504:	b16b      	cbz	r3, 4522 <mutex_destroy+0x3e>
/* use a global pointer to store the current_thread */
extern struct thread *_current_thread;

static inline struct thread *get_current_thread(void)
{
    return _current_thread;
    4506:	4a14      	ldr	r2, [pc, #80]	; (4558 <mutex_destroy+0x74>)
    4508:	6812      	ldr	r2, [r2, #0]
    450a:	429a      	cmp	r2, r3
    450c:	d009      	beq.n	4522 <mutex_destroy+0x3e>
        panic("mutex_destroy: thread %p (%s) tried to release mutex %p it doesn't own. owned by %p (%s)\n",
    450e:	9301      	str	r3, [sp, #4]
    4510:	3358      	adds	r3, #88	; 0x58
    4512:	9000      	str	r0, [sp, #0]
    4514:	9302      	str	r3, [sp, #8]
    4516:	4670      	mov	r0, r14
    4518:	4910      	ldr	r1, [pc, #64]	; (455c <mutex_destroy+0x78>)
    451a:	f102 0358 	add.w	r3, r2, #88	; 0x58
    451e:	f006 ffc9 	bl	b4b4 <_panic>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    4522:	a805      	add	r0, sp, #20

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    4524:	4e0e      	ldr	r6, [pc, #56]	; (4560 <mutex_destroy+0x7c>)
    4526:	f7ff febf 	bl	42a8 <arch_interrupt_save.constprop.1>
              get_current_thread(), get_current_thread()->name, m, m->holder, m->holder->name);
#endif

    THREAD_LOCK(state);
    m->magic = 0;
    452a:	2500      	movs	r5, #0
    452c:	2101      	movs	r1, #1
    452e:	6031      	str	r1, [r6, #0]
    m->count = 0;
    wait_queue_destroy(&m->wait, true);
    4530:	f104 000c 	add.w	r0, r4, #12
        panic("mutex_destroy: thread %p (%s) tried to release mutex %p it doesn't own. owned by %p (%s)\n",
              get_current_thread(), get_current_thread()->name, m, m->holder, m->holder->name);
#endif

    THREAD_LOCK(state);
    m->magic = 0;
    4534:	6025      	str	r5, [r4, #0]
    m->count = 0;
    4536:	60a5      	str	r5, [r4, #8]
    wait_queue_destroy(&m->wait, true);
    4538:	f001 f842 	bl	55c0 <wait_queue_destroy>
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    453c:	9805      	ldr	r0, [sp, #20]
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    453e:	6035      	str	r5, [r6, #0]
    4540:	f7ff fe9c 	bl	427c <arch_interrupt_restore.constprop.0>
    THREAD_UNLOCK(state);
}
    4544:	b006      	add	sp, #24
    4546:	bd70      	pop	{r4, r5, r6, r15}
    4548:	6d757478 	.word	0x6d757478
    454c:	00010a4b 	.word	0x00010a4b
    4550:	0001076e 	.word	0x0001076e
    4554:	00010a3c 	.word	0x00010a3c
    4558:	20000554 	.word	0x20000554
    455c:	00010a63 	.word	0x00010a63
    4560:	200008d4 	.word	0x200008d4

00004564 <mutex_acquire_timeout>:
 *
 * @return  NO_ERROR on success, ERR_TIMED_OUT on timeout,
 * other values on error
 */
status_t mutex_acquire_timeout(mutex_t *m, lk_time_t timeout)
{
    4564:	b5f0      	push	{r4, r5, r6, r7, r14}
    DEBUG_ASSERT(m->magic == MUTEX_MAGIC);
    4566:	6803      	ldr	r3, [r0, #0]
    4568:	4a1f      	ldr	r2, [pc, #124]	; (45e8 <mutex_acquire_timeout+0x84>)
 *
 * @return  NO_ERROR on success, ERR_TIMED_OUT on timeout,
 * other values on error
 */
status_t mutex_acquire_timeout(mutex_t *m, lk_time_t timeout)
{
    456a:	b085      	sub	sp, #20
    DEBUG_ASSERT(m->magic == MUTEX_MAGIC);
    456c:	4293      	cmp	r3, r2
 *
 * @return  NO_ERROR on success, ERR_TIMED_OUT on timeout,
 * other values on error
 */
status_t mutex_acquire_timeout(mutex_t *m, lk_time_t timeout)
{
    456e:	4604      	mov	r4, r0
    4570:	460d      	mov	r5, r1
    DEBUG_ASSERT(m->magic == MUTEX_MAGIC);
    4572:	d006      	beq.n	4582 <mutex_acquire_timeout+0x1e>
    4574:	4b1d      	ldr	r3, [pc, #116]	; (45ec <mutex_acquire_timeout+0x88>)
    4576:	4670      	mov	r0, r14
    4578:	9300      	str	r3, [sp, #0]
    457a:	491d      	ldr	r1, [pc, #116]	; (45f0 <mutex_acquire_timeout+0x8c>)
    457c:	4a1d      	ldr	r2, [pc, #116]	; (45f4 <mutex_acquire_timeout+0x90>)
    457e:	2352      	movs	r3, #82	; 0x52
    4580:	e00a      	b.n	4598 <mutex_acquire_timeout+0x34>
    4582:	4b1d      	ldr	r3, [pc, #116]	; (45f8 <mutex_acquire_timeout+0x94>)

#if LK_DEBUGLEVEL > 0
    if (unlikely(get_current_thread() == m->holder))
    4584:	6840      	ldr	r0, [r0, #4]
    4586:	681a      	ldr	r2, [r3, #0]
    4588:	461e      	mov	r6, r3
    458a:	4282      	cmp	r2, r0
    458c:	d106      	bne.n	459c <mutex_acquire_timeout+0x38>
        panic("mutex_acquire_timeout: thread %p (%s) tried to acquire mutex %p it already owns.\n",
    458e:	491b      	ldr	r1, [pc, #108]	; (45fc <mutex_acquire_timeout+0x98>)
    4590:	9400      	str	r4, [sp, #0]
    4592:	4670      	mov	r0, r14
    4594:	f102 0358 	add.w	r3, r2, #88	; 0x58
    4598:	f006 ff8c 	bl	b4b4 <_panic>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    459c:	a803      	add	r0, sp, #12
    459e:	f7ff fe83 	bl	42a8 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    45a2:	4b17      	ldr	r3, [pc, #92]	; (4600 <mutex_acquire_timeout+0x9c>)
    45a4:	2201      	movs	r2, #1
    45a6:	601a      	str	r2, [r3, #0]
#endif

    THREAD_LOCK(state);

    status_t ret = NO_ERROR;
    if (unlikely(++m->count > 1)) {
    45a8:	68a2      	ldr	r2, [r4, #8]
    45aa:	461f      	mov	r7, r3
    45ac:	3201      	adds	r2, #1
    45ae:	2a01      	cmp	r2, #1
    45b0:	60a2      	str	r2, [r4, #8]
              get_current_thread(), get_current_thread()->name, m);
#endif

    THREAD_LOCK(state);

    status_t ret = NO_ERROR;
    45b2:	bfd8      	it	le
    45b4:	2500      	movle	r5, #0
    if (unlikely(++m->count > 1)) {
    45b6:	dd0d      	ble.n	45d4 <mutex_acquire_timeout+0x70>
        ret = wait_queue_block(&m->wait, timeout);
    45b8:	4629      	mov	r1, r5
    45ba:	f104 000c 	add.w	r0, r4, #12
    45be:	f000 fd49 	bl	5054 <wait_queue_block>
        if (unlikely(ret < NO_ERROR)) {
    45c2:	1e05      	subs	r5, r0, #0
    45c4:	da06      	bge.n	45d4 <mutex_acquire_timeout+0x70>
            /* if the acquisition timed out, back out the acquire and exit */
            if (likely(ret == ERR_TIMED_OUT)) {
    45c6:	f115 0f0d 	cmn.w	r5, #13
    45ca:	d105      	bne.n	45d8 <mutex_acquire_timeout+0x74>
                /*
                 * race: the mutex may have been destroyed after the timeout,
                 * but before we got scheduled again which makes messing with the
                 * count variable dangerous.
                 */
                m->count--;
    45cc:	68a2      	ldr	r2, [r4, #8]
    45ce:	3a01      	subs	r2, #1
    45d0:	60a2      	str	r2, [r4, #8]
    45d2:	e001      	b.n	45d8 <mutex_acquire_timeout+0x74>
             */
            goto err;
        }
    }

    m->holder = get_current_thread();
    45d4:	6832      	ldr	r2, [r6, #0]
    45d6:	6062      	str	r2, [r4, #4]
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    45d8:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    45da:	9803      	ldr	r0, [sp, #12]
    45dc:	603b      	str	r3, [r7, #0]
    45de:	f7ff fe4d 	bl	427c <arch_interrupt_restore.constprop.0>

err:
    THREAD_UNLOCK(state);
    return ret;
}
    45e2:	4628      	mov	r0, r5
    45e4:	b005      	add	sp, #20
    45e6:	bdf0      	pop	{r4, r5, r6, r7, r15}
    45e8:	6d757478 	.word	0x6d757478
    45ec:	00010a4b 	.word	0x00010a4b
    45f0:	0001076e 	.word	0x0001076e
    45f4:	00010a3c 	.word	0x00010a3c
    45f8:	20000554 	.word	0x20000554
    45fc:	00010abd 	.word	0x00010abd
    4600:	200008d4 	.word	0x200008d4

00004604 <mutex_release>:

/**
 * @brief  Release mutex
 */
status_t mutex_release(mutex_t *m)
{
    4604:	b530      	push	{r4, r5, r14}
    DEBUG_ASSERT(m->magic == MUTEX_MAGIC);
    4606:	6803      	ldr	r3, [r0, #0]
    4608:	4a1c      	ldr	r2, [pc, #112]	; (467c <mutex_release+0x78>)

/**
 * @brief  Release mutex
 */
status_t mutex_release(mutex_t *m)
{
    460a:	b087      	sub	sp, #28
    DEBUG_ASSERT(m->magic == MUTEX_MAGIC);
    460c:	4293      	cmp	r3, r2

/**
 * @brief  Release mutex
 */
status_t mutex_release(mutex_t *m)
{
    460e:	4604      	mov	r4, r0
    DEBUG_ASSERT(m->magic == MUTEX_MAGIC);
    4610:	d007      	beq.n	4622 <mutex_release+0x1e>
    4612:	4b1b      	ldr	r3, [pc, #108]	; (4680 <mutex_release+0x7c>)
    4614:	4670      	mov	r0, r14
    4616:	9300      	str	r3, [sp, #0]
    4618:	491a      	ldr	r1, [pc, #104]	; (4684 <mutex_release+0x80>)
    461a:	4a1b      	ldr	r2, [pc, #108]	; (4688 <mutex_release+0x84>)
    461c:	237c      	movs	r3, #124	; 0x7c
    461e:	f006 ff49 	bl	b4b4 <_panic>
    4622:	4b1a      	ldr	r3, [pc, #104]	; (468c <mutex_release+0x88>)

#if LK_DEBUGLEVEL > 0
    if (unlikely(get_current_thread() != m->holder)) {
    4624:	6841      	ldr	r1, [r0, #4]
    4626:	681a      	ldr	r2, [r3, #0]
    4628:	428a      	cmp	r2, r1
    462a:	d00d      	beq.n	4648 <mutex_release+0x44>
        panic("mutex_release: thread %p (%s) tried to release mutex %p it doesn't own. owned by %p (%s)\n",
    462c:	f102 0358 	add.w	r3, r2, #88	; 0x58
    4630:	b111      	cbz	r1, 4638 <mutex_release+0x34>
    4632:	f101 0058 	add.w	r0, r1, #88	; 0x58
    4636:	e000      	b.n	463a <mutex_release+0x36>
    4638:	4815      	ldr	r0, [pc, #84]	; (4690 <mutex_release+0x8c>)
    463a:	9101      	str	r1, [sp, #4]
    463c:	9002      	str	r0, [sp, #8]
    463e:	9400      	str	r4, [sp, #0]
    4640:	4670      	mov	r0, r14
    4642:	4914      	ldr	r1, [pc, #80]	; (4694 <mutex_release+0x90>)
    4644:	f006 ff36 	bl	b4b4 <_panic>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    4648:	a805      	add	r0, sp, #20
    464a:	f7ff fe2d 	bl	42a8 <arch_interrupt_save.constprop.1>

    THREAD_LOCK(state);

    m->holder = 0;

    if (unlikely(--m->count >= 1)) {
    464e:	68a0      	ldr	r0, [r4, #8]

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    4650:	4b11      	ldr	r3, [pc, #68]	; (4698 <mutex_release+0x94>)
    }
#endif

    THREAD_LOCK(state);

    m->holder = 0;
    4652:	2200      	movs	r2, #0

    if (unlikely(--m->count >= 1)) {
    4654:	3801      	subs	r0, #1
    4656:	2101      	movs	r1, #1
    4658:	4290      	cmp	r0, r2
    465a:	6019      	str	r1, [r3, #0]
    }
#endif

    THREAD_LOCK(state);

    m->holder = 0;
    465c:	6062      	str	r2, [r4, #4]

    if (unlikely(--m->count >= 1)) {
    465e:	60a0      	str	r0, [r4, #8]
    4660:	461d      	mov	r5, r3
    4662:	dd03      	ble.n	466c <mutex_release+0x68>
        /* release a thread */
        wait_queue_wake_one(&m->wait, true, NO_ERROR);
    4664:	f104 000c 	add.w	r0, r4, #12
    4668:	f000 fdfe 	bl	5268 <wait_queue_wake_one>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    466c:	2400      	movs	r4, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    466e:	9805      	ldr	r0, [sp, #20]
    4670:	602c      	str	r4, [r5, #0]
    4672:	f7ff fe03 	bl	427c <arch_interrupt_restore.constprop.0>
    }

    THREAD_UNLOCK(state);
    return NO_ERROR;
}
    4676:	4620      	mov	r0, r4
    4678:	b007      	add	sp, #28
    467a:	bd30      	pop	{r4, r5, r15}
    467c:	6d757478 	.word	0x6d757478
    4680:	00010a4b 	.word	0x00010a4b
    4684:	0001076e 	.word	0x0001076e
    4688:	00010a3c 	.word	0x00010a3c
    468c:	20000554 	.word	0x20000554
    4690:	00010b0f 	.word	0x00010b0f
    4694:	00010b14 	.word	0x00010b14
    4698:	200008d4 	.word	0x200008d4

0000469c <list_delete>:

#define list_add_before(entry, new_entry) list_add_tail(entry, new_entry)

static inline void list_delete(struct list_node *item)
{
    item->next->prev = item->prev;
    469c:	e890 000c 	ldmia.w	r0, {r2, r3}
    46a0:	601a      	str	r2, [r3, #0]
    item->prev->next = item->next;
    46a2:	6802      	ldr	r2, [r0, #0]
    46a4:	6053      	str	r3, [r2, #4]
    item->prev = item->next = 0;
    46a6:	2300      	movs	r3, #0
    46a8:	6043      	str	r3, [r0, #4]
    46aa:	6003      	str	r3, [r0, #0]
    46ac:	4770      	bx	r14

000046ae <list_delete>:

#define list_add_before(entry, new_entry) list_add_tail(entry, new_entry)

static inline void list_delete(struct list_node *item)
{
    item->next->prev = item->prev;
    46ae:	e890 000c 	ldmia.w	r0, {r2, r3}
    46b2:	601a      	str	r2, [r3, #0]
    item->prev->next = item->next;
    46b4:	6802      	ldr	r2, [r0, #0]
    46b6:	6053      	str	r3, [r2, #4]
    item->prev = item->next = 0;
    46b8:	2300      	movs	r3, #0
    46ba:	6043      	str	r3, [r0, #4]
    46bc:	6003      	str	r3, [r0, #0]
    46be:	4770      	bx	r14

000046c0 <arch_ints_disabled>:
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    46c0:	f3ef 8010 	mrs	r0, PRIMASK
    __asm__ volatile("mrs %0, cpsr" : "=r"(state));
    state &= (1<<7);
#endif

    return !!state;
}
    46c4:	f000 0001 	and.w	r0, r0, #1
    46c8:	4770      	bx	r14
	...

000046cc <init_thread_struct>:
    list_add_tail(&run_queue[t->priority], &t->queue_node);
    run_queue_bitmap |= (1<<t->priority);
}

static void init_thread_struct(thread_t *t, const char *name)
{
    46cc:	b538      	push	{r3, r4, r5, r14}
    memset(t, 0, sizeof(thread_t));
    46ce:	2278      	movs	r2, #120	; 0x78
    list_add_tail(&run_queue[t->priority], &t->queue_node);
    run_queue_bitmap |= (1<<t->priority);
}

static void init_thread_struct(thread_t *t, const char *name)
{
    46d0:	460c      	mov	r4, r1
    memset(t, 0, sizeof(thread_t));
    46d2:	2100      	movs	r1, #0
    list_add_tail(&run_queue[t->priority], &t->queue_node);
    run_queue_bitmap |= (1<<t->priority);
}

static void init_thread_struct(thread_t *t, const char *name)
{
    46d4:	4605      	mov	r5, r0
    memset(t, 0, sizeof(thread_t));
    46d6:	f007 fabf 	bl	bc58 <memset>
    t->magic = THREAD_MAGIC;
    46da:	4b05      	ldr	r3, [pc, #20]	; (46f0 <init_thread_struct+0x24>)
    46dc:	4628      	mov	r0, r5
    46de:	f840 3b58 	str.w	r3, [r0], #88
    thread_set_pinned_cpu(t, -1);
    strlcpy(t->name, name, sizeof(t->name));
    46e2:	4621      	mov	r1, r4
    46e4:	2220      	movs	r2, #32
}
    46e6:	e8bd 4038 	ldmia.w	r13!, {r3, r4, r5, r14}
static void init_thread_struct(thread_t *t, const char *name)
{
    memset(t, 0, sizeof(thread_t));
    t->magic = THREAD_MAGIC;
    thread_set_pinned_cpu(t, -1);
    strlcpy(t->name, name, sizeof(t->name));
    46ea:	f008 b901 	b.w	c8f0 <strlcpy>
    46ee:	bf00      	nop
    46f0:	74687264 	.word	0x74687264

000046f4 <thread_resched>:
 *
 * This is probably not the function you're looking for. See
 * thread_yield() instead.
 */
void thread_resched(void)
{
    46f4:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
/* use a global pointer to store the current_thread */
extern struct thread *_current_thread;

static inline struct thread *get_current_thread(void)
{
    return _current_thread;
    46f8:	4c55      	ldr	r4, [pc, #340]	; (4850 <thread_resched+0x15c>)
    46fa:	b085      	sub	sp, #20
    46fc:	4677      	mov	r7, r14
    46fe:	6826      	ldr	r6, [r4, #0]
    thread_t *newthread;

    thread_t *current_thread = get_current_thread();
    uint cpu = arch_curr_cpu_num();

    DEBUG_ASSERT(arch_ints_disabled());
    4700:	f7ff ffde 	bl	46c0 <arch_ints_disabled>
    4704:	46a1      	mov	r9, r4
    4706:	b938      	cbnz	r0, 4718 <thread_resched+0x24>
    4708:	4b52      	ldr	r3, [pc, #328]	; (4854 <thread_resched+0x160>)
    470a:	4638      	mov	r0, r7
    470c:	9300      	str	r3, [sp, #0]
    470e:	4952      	ldr	r1, [pc, #328]	; (4858 <thread_resched+0x164>)
    4710:	4a52      	ldr	r2, [pc, #328]	; (485c <thread_resched+0x168>)
    4712:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    4716:	e009      	b.n	472c <thread_resched+0x38>
    DEBUG_ASSERT(spin_lock_held(&thread_lock));
    4718:	4b51      	ldr	r3, [pc, #324]	; (4860 <thread_resched+0x16c>)
    471a:	681b      	ldr	r3, [r3, #0]
    471c:	b943      	cbnz	r3, 4730 <thread_resched+0x3c>
    471e:	4b51      	ldr	r3, [pc, #324]	; (4864 <thread_resched+0x170>)
    4720:	494d      	ldr	r1, [pc, #308]	; (4858 <thread_resched+0x164>)
    4722:	4a4e      	ldr	r2, [pc, #312]	; (485c <thread_resched+0x168>)
    4724:	9300      	str	r3, [sp, #0]
    4726:	4638      	mov	r0, r7
    4728:	f240 13f1 	movw	r3, #497	; 0x1f1
    472c:	f006 fec2 	bl	b4b4 <_panic>
    DEBUG_ASSERT(current_thread->state != THREAD_RUNNING);
    4730:	7e33      	ldrb	r3, [r6, #24]
    4732:	2b02      	cmp	r3, #2
    4734:	d107      	bne.n	4746 <thread_resched+0x52>
    4736:	4b4c      	ldr	r3, [pc, #304]	; (4868 <thread_resched+0x174>)
    4738:	4638      	mov	r0, r7
    473a:	9300      	str	r3, [sp, #0]
    473c:	4946      	ldr	r1, [pc, #280]	; (4858 <thread_resched+0x164>)
    473e:	4a47      	ldr	r2, [pc, #284]	; (485c <thread_resched+0x168>)
    4740:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    4744:	e7f2      	b.n	472c <thread_resched+0x38>

    THREAD_STATS_INC(reschedules);
    4746:	4a49      	ldr	r2, [pc, #292]	; (486c <thread_resched+0x178>)
}

static thread_t *get_top_thread(int cpu)
{
    thread_t *newthread;
    uint32_t local_run_queue_bitmap = run_queue_bitmap;
    4748:	4949      	ldr	r1, [pc, #292]	; (4870 <thread_resched+0x17c>)

    DEBUG_ASSERT(arch_ints_disabled());
    DEBUG_ASSERT(spin_lock_held(&thread_lock));
    DEBUG_ASSERT(current_thread->state != THREAD_RUNNING);

    THREAD_STATS_INC(reschedules);
    474a:	6913      	ldr	r3, [r2, #16]
}

static thread_t *get_top_thread(int cpu)
{
    thread_t *newthread;
    uint32_t local_run_queue_bitmap = run_queue_bitmap;
    474c:	f8d1 b000 	ldr.w	r11, [r1]

    DEBUG_ASSERT(arch_ints_disabled());
    DEBUG_ASSERT(spin_lock_held(&thread_lock));
    DEBUG_ASSERT(current_thread->state != THREAD_RUNNING);

    THREAD_STATS_INC(reschedules);
    4750:	3301      	adds	r3, #1
    4752:	6113      	str	r3, [r2, #16]
    4754:	4690      	mov	r8, r2
}

static thread_t *get_top_thread(int cpu)
{
    thread_t *newthread;
    uint32_t local_run_queue_bitmap = run_queue_bitmap;
    4756:	465b      	mov	r3, r11

    while (local_run_queue_bitmap) {
    4758:	b1fb      	cbz	r3, 479a <thread_resched+0xa6>
        /* find the first (remaining) queue with a thread in it */
        uint next_queue = sizeof(run_queue_bitmap) * 8 - 1 - __builtin_clz(local_run_queue_bitmap);
    475a:	fab3 f583 	clz	r5, r3

        list_for_every_entry(&run_queue[next_queue], newthread, thread_t, queue_node) {
    475e:	4c45      	ldr	r4, [pc, #276]	; (4874 <thread_resched+0x180>)
    thread_t *newthread;
    uint32_t local_run_queue_bitmap = run_queue_bitmap;

    while (local_run_queue_bitmap) {
        /* find the first (remaining) queue with a thread in it */
        uint next_queue = sizeof(run_queue_bitmap) * 8 - 1 - __builtin_clz(local_run_queue_bitmap);
    4760:	f1c5 051f 	rsb	r5, r5, #31

        list_for_every_entry(&run_queue[next_queue], newthread, thread_t, queue_node) {
    4764:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    4768:	6860      	ldr	r0, [r4, #4]
    476a:	42a0      	cmp	r0, r4
    476c:	f1a0 0a0c 	sub.w	r10, r0, #12
    4770:	d00d      	beq.n	478e <thread_resched+0x9a>
#if WITH_SMP
            if (newthread->pinned_cpu < 0 || newthread->pinned_cpu == cpu)
#endif
            {
                list_delete(&newthread->queue_node);
    4772:	9103      	str	r1, [sp, #12]
    4774:	f7ff ff92 	bl	469c <list_delete>

                if (list_is_empty(&run_queue[next_queue]))
    4778:	6863      	ldr	r3, [r4, #4]
    477a:	9903      	ldr	r1, [sp, #12]
    477c:	42a3      	cmp	r3, r4
    477e:	d10e      	bne.n	479e <thread_resched+0xaa>
                    run_queue_bitmap &= ~(1<<next_queue);
    4780:	2301      	movs	r3, #1
    4782:	fa03 f505 	lsl.w	r5, r3, r5
    4786:	ea2b 0505 	bic.w	r5, r11, r5
    478a:	600d      	str	r5, [r1, #0]
    478c:	e007      	b.n	479e <thread_resched+0xaa>

                return newthread;
            }
        }

        local_run_queue_bitmap &= ~(1<<next_queue);
    478e:	2201      	movs	r2, #1
    4790:	fa02 f505 	lsl.w	r5, r2, r5
    4794:	ea23 0305 	bic.w	r3, r3, r5
    4798:	e7de      	b.n	4758 <thread_resched+0x64>
    }
    /* no threads to run, select the idle thread for this cpu */
    return idle_thread(cpu);
    479a:	4c37      	ldr	r4, [pc, #220]	; (4878 <thread_resched+0x184>)
    479c:	e00b      	b.n	47b6 <thread_resched+0xc2>
    479e:	4654      	mov	r4, r10

    THREAD_STATS_INC(reschedules);

    newthread = get_top_thread(cpu);

    DEBUG_ASSERT(newthread);
    47a0:	f1ba 0f00 	cmp.w	r10, #0
    47a4:	d107      	bne.n	47b6 <thread_resched+0xc2>
    47a6:	4b35      	ldr	r3, [pc, #212]	; (487c <thread_resched+0x188>)
    47a8:	4638      	mov	r0, r7
    47aa:	9300      	str	r3, [sp, #0]
    47ac:	492a      	ldr	r1, [pc, #168]	; (4858 <thread_resched+0x164>)
    47ae:	4a2b      	ldr	r2, [pc, #172]	; (485c <thread_resched+0x168>)
    47b0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
    47b4:	e7ba      	b.n	472c <thread_resched+0x38>

    newthread->state = THREAD_RUNNING;
    47b6:	2302      	movs	r3, #2

    oldthread = current_thread;

    if (newthread == oldthread)
    47b8:	42b4      	cmp	r4, r6

    newthread = get_top_thread(cpu);

    DEBUG_ASSERT(newthread);

    newthread->state = THREAD_RUNNING;
    47ba:	7623      	strb	r3, [r4, #24]

    oldthread = current_thread;

    if (newthread == oldthread)
    47bc:	d044      	beq.n	4848 <thread_resched+0x154>
        return;

    /* set up quantum for the new thread if it was consumed */
    if (newthread->remaining_quantum <= 0) {
    47be:	69e3      	ldr	r3, [r4, #28]
        mp_set_cpu_non_realtime(cpu);
    }
#endif

#if THREAD_STATS
    THREAD_STATS_INC(context_switches);
    47c0:	4d2a      	ldr	r5, [pc, #168]	; (486c <thread_resched+0x178>)

    if (newthread == oldthread)
        return;

    /* set up quantum for the new thread if it was consumed */
    if (newthread->remaining_quantum <= 0) {
    47c2:	2b00      	cmp	r3, #0
        newthread->remaining_quantum = 5; // XXX make this smarter
    47c4:	bfdc      	itt	le
    47c6:	2305      	movle	r3, #5
    47c8:	61e3      	strle	r3, [r4, #28]
        mp_set_cpu_non_realtime(cpu);
    }
#endif

#if THREAD_STATS
    THREAD_STATS_INC(context_switches);
    47ca:	f8d8 3014 	ldr.w	r3, [r8, #20]
    47ce:	3301      	adds	r3, #1
    47d0:	f8c8 3014 	str.w	r3, [r8, #20]
    return (t->flags & THREAD_FLAG_REAL_TIME) && t->priority > DEFAULT_PRIORITY;
}

static bool thread_is_idle(thread_t *t)
{
    return !!(t->flags & THREAD_FLAG_IDLE);
    47d4:	6a33      	ldr	r3, [r6, #32]
#endif

#if THREAD_STATS
    THREAD_STATS_INC(context_switches);

    if (thread_is_idle(oldthread)) {
    47d6:	06d9      	lsls	r1, r3, #27
    47d8:	d50e      	bpl.n	47f8 <thread_resched+0x104>
        lk_bigtime_t now = current_time_hires();
    47da:	f7ff fb5f 	bl	3e9c <current_time_hires>
        thread_stats[cpu].idle_time += now - thread_stats[cpu].last_idle_timestamp;
    47de:	e9d5 2300 	ldrd	r2, r3, [r5]
    47e2:	e9d5 ab02 	ldrd	r10, r11, [r5, #8]
    47e6:	ebb2 020a 	subs.w	r2, r2, r10
    47ea:	eb63 030b 	sbc.w	r3, r3, r11
    47ee:	1880      	adds	r0, r0, r2
    47f0:	eb41 0103 	adc.w	r1, r1, r3
    47f4:	e9c5 0100 	strd	r0, r1, [r5]
    return (t->flags & THREAD_FLAG_REAL_TIME) && t->priority > DEFAULT_PRIORITY;
}

static bool thread_is_idle(thread_t *t)
{
    return !!(t->flags & THREAD_FLAG_IDLE);
    47f8:	6a23      	ldr	r3, [r4, #32]

    if (thread_is_idle(oldthread)) {
        lk_bigtime_t now = current_time_hires();
        thread_stats[cpu].idle_time += now - thread_stats[cpu].last_idle_timestamp;
    }
    if (thread_is_idle(newthread)) {
    47fa:	06da      	lsls	r2, r3, #27
    47fc:	d503      	bpl.n	4806 <thread_resched+0x112>
        thread_stats[cpu].last_idle_timestamp = current_time_hires();
    47fe:	f7ff fb4d 	bl	3e9c <current_time_hires>
    4802:	e9c8 0102 	strd	r0, r1, [r8, #8]
            newthread->priority, newthread->flags);
#endif

#if THREAD_STACK_BOUNDS_CHECK
    /* check that the old thread has not blown its stack just before pushing its context */
    if (oldthread->flags & THREAD_FLAG_DEBUG_STACK_BOUNDS_CHECK) {
    4806:	6a33      	ldr	r3, [r6, #32]
}

static inline void set_current_thread(struct thread *t)
{
    _current_thread = t;
    4808:	f8c9 4000 	str.w	r4, [r9]
    480c:	069b      	lsls	r3, r3, #26
    480e:	d514      	bpl.n	483a <thread_resched+0x146>
        STATIC_ASSERT((THREAD_STACK_PADDING_SIZE % sizeof(uint32_t)) == 0);
        uint32_t *s = (uint32_t *)oldthread->stack;
    4810:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4812:	2300      	movs	r3, #0
        for (size_t i = 0; i < THREAD_STACK_PADDING_SIZE / sizeof(uint32_t); i++) {
            if (unlikely(s[i] != STACK_DEBUG_WORD)) {
    4814:	58c8      	ldr	r0, [r1, r3]
    4816:	18ca      	adds	r2, r1, r3
    4818:	f1b0 3f99 	cmp.w	r0, #2576980377	; 0x99999999
    481c:	d009      	beq.n	4832 <thread_resched+0x13e>
                /* NOTE: will probably blow the stack harder here, but hopefully enough
                 * state exists to at least get some sort of debugging done.
                 */
                panic("stack overrun at %p: thread %p (%s), stack %p\n", &s[i],
    481e:	f106 0358 	add.w	r3, r6, #88	; 0x58
    4822:	9300      	str	r3, [sp, #0]
    4824:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4826:	4638      	mov	r0, r7
    4828:	9301      	str	r3, [sp, #4]
    482a:	4915      	ldr	r1, [pc, #84]	; (4880 <thread_resched+0x18c>)
    482c:	4633      	mov	r3, r6
    482e:	f006 fe41 	bl	b4b4 <_panic>
    4832:	3304      	adds	r3, #4
#if THREAD_STACK_BOUNDS_CHECK
    /* check that the old thread has not blown its stack just before pushing its context */
    if (oldthread->flags & THREAD_FLAG_DEBUG_STACK_BOUNDS_CHECK) {
        STATIC_ASSERT((THREAD_STACK_PADDING_SIZE % sizeof(uint32_t)) == 0);
        uint32_t *s = (uint32_t *)oldthread->stack;
        for (size_t i = 0; i < THREAD_STACK_PADDING_SIZE / sizeof(uint32_t); i++) {
    4834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4838:	d1ec      	bne.n	4814 <thread_resched+0x120>
        vmm_context_switch(oldthread->aspace, newthread->aspace);
    }
#endif

    /* do the low level context switch */
    arch_context_switch(oldthread, newthread);
    483a:	4630      	mov	r0, r6
    483c:	4621      	mov	r1, r4
}
    483e:	b005      	add	sp, #20
    4840:	e8bd 4ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
        vmm_context_switch(oldthread->aspace, newthread->aspace);
    }
#endif

    /* do the low level context switch */
    arch_context_switch(oldthread, newthread);
    4844:	f7fc b90e 	b.w	a64 <arch_context_switch>
}
    4848:	b005      	add	sp, #20
    484a:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    484e:	bf00      	nop
    4850:	20000554 	.word	0x20000554
    4854:	0000ff09 	.word	0x0000ff09
    4858:	0001076e 	.word	0x0001076e
    485c:	00010b6e 	.word	0x00010b6e
    4860:	200008d4 	.word	0x200008d4
    4864:	00010b7e 	.word	0x00010b7e
    4868:	00010b9b 	.word	0x00010b9b
    486c:	20000728 	.word	0x20000728
    4870:	200008d0 	.word	0x200008d0
    4874:	200007d0 	.word	0x200007d0
    4878:	20000758 	.word	0x20000758
    487c:	00010bc3 	.word	0x00010bc3
    4880:	00010bcd 	.word	0x00010bcd

00004884 <arch_interrupt_restore.constprop.11>:
static inline void
arch_interrupt_restore(spin_lock_saved_state_t old_state, spin_lock_save_flags_t flags)
{
    if ((flags & SPIN_LOCK_FLAG_FIQ) && (old_state & SPIN_LOCK_STATE_RESTORE_FIQ))
        arch_enable_fiqs();
    if ((flags & SPIN_LOCK_FLAG_IRQ) && (old_state & SPIN_LOCK_STATE_RESTORE_IRQ))
    4884:	07c0      	lsls	r0, r0, #31
    4886:	d500      	bpl.n	488a <arch_interrupt_restore.constprop.11+0x6>

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
    4888:	b662      	cpsie	i
    488a:	4770      	bx	r14

0000488c <arch_interrupt_save.constprop.12>:
    SPIN_LOCK_STATE_RESTORE_IRQ = 1,
    SPIN_LOCK_STATE_RESTORE_FIQ = 2,
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
    488c:	b510      	push	{r4, r14}
    488e:	4604      	mov	r4, r0
{
    spin_lock_saved_state_t state = 0;
    if ((flags & SPIN_LOCK_FLAG_IRQ) && !arch_ints_disabled()) {
    4890:	f7ff ff16 	bl	46c0 <arch_ints_disabled>
    4894:	b910      	cbnz	r0, 489c <arch_interrupt_save.constprop.12+0x10>
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
    4896:	b672      	cpsid	i
        state |= SPIN_LOCK_STATE_RESTORE_IRQ;
    4898:	2301      	movs	r3, #1
    489a:	e000      	b.n	489e <arch_interrupt_save.constprop.12+0x12>
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    489c:	2300      	movs	r3, #0
    }
    if ((flags & SPIN_LOCK_FLAG_FIQ) && !arch_fiqs_disabled()) {
        state |= SPIN_LOCK_STATE_RESTORE_FIQ;
        arch_disable_fiqs();
    }
    *statep = state;
    489e:	6023      	str	r3, [r4, #0]
    48a0:	bd10      	pop	{r4, r15}
	...

000048a4 <insert_in_run_queue_tail>:
    list_add_head(&run_queue[t->priority], &t->queue_node);
    run_queue_bitmap |= (1<<t->priority);
}

static void insert_in_run_queue_tail(thread_t *t)
{
    48a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    48a6:	6803      	ldr	r3, [r0, #0]
    48a8:	4a26      	ldr	r2, [pc, #152]	; (4944 <insert_in_run_queue_tail+0xa0>)
    48aa:	4675      	mov	r5, r14
    48ac:	4293      	cmp	r3, r2
    list_add_head(&run_queue[t->priority], &t->queue_node);
    run_queue_bitmap |= (1<<t->priority);
}

static void insert_in_run_queue_tail(thread_t *t)
{
    48ae:	4604      	mov	r4, r0
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    48b0:	d006      	beq.n	48c0 <insert_in_run_queue_tail+0x1c>
    48b2:	4b25      	ldr	r3, [pc, #148]	; (4948 <insert_in_run_queue_tail+0xa4>)
    48b4:	4670      	mov	r0, r14
    48b6:	9300      	str	r3, [sp, #0]
    48b8:	4924      	ldr	r1, [pc, #144]	; (494c <insert_in_run_queue_tail+0xa8>)
    48ba:	4a25      	ldr	r2, [pc, #148]	; (4950 <insert_in_run_queue_tail+0xac>)
    48bc:	236b      	movs	r3, #107	; 0x6b
    48be:	e008      	b.n	48d2 <insert_in_run_queue_tail+0x2e>
    DEBUG_ASSERT(t->state == THREAD_READY);
    48c0:	7e07      	ldrb	r7, [r0, #24]
    48c2:	2f01      	cmp	r7, #1
    48c4:	d007      	beq.n	48d6 <insert_in_run_queue_tail+0x32>
    48c6:	4b23      	ldr	r3, [pc, #140]	; (4954 <insert_in_run_queue_tail+0xb0>)
    48c8:	4920      	ldr	r1, [pc, #128]	; (494c <insert_in_run_queue_tail+0xa8>)
    48ca:	4a21      	ldr	r2, [pc, #132]	; (4950 <insert_in_run_queue_tail+0xac>)
    48cc:	9300      	str	r3, [sp, #0]
    48ce:	4670      	mov	r0, r14
    48d0:	236c      	movs	r3, #108	; 0x6c
    48d2:	f006 fdef 	bl	b4b4 <_panic>
    item->prev = item->next = 0;
}

static inline bool list_in_list(struct list_node *item)
{
    if (item->prev == 0 && item->next == 0)
    48d6:	68c3      	ldr	r3, [r0, #12]
    DEBUG_ASSERT(!list_in_list(&t->queue_node));
    48d8:	f100 060c 	add.w	r6, r0, #12
    48dc:	b90b      	cbnz	r3, 48e2 <insert_in_run_queue_tail+0x3e>
    48de:	6903      	ldr	r3, [r0, #16]
    48e0:	b133      	cbz	r3, 48f0 <insert_in_run_queue_tail+0x4c>
    48e2:	4b1d      	ldr	r3, [pc, #116]	; (4958 <insert_in_run_queue_tail+0xb4>)
    48e4:	4628      	mov	r0, r5
    48e6:	9300      	str	r3, [sp, #0]
    48e8:	4918      	ldr	r1, [pc, #96]	; (494c <insert_in_run_queue_tail+0xa8>)
    48ea:	4a19      	ldr	r2, [pc, #100]	; (4950 <insert_in_run_queue_tail+0xac>)
    48ec:	236d      	movs	r3, #109	; 0x6d
    48ee:	e7f0      	b.n	48d2 <insert_in_run_queue_tail+0x2e>
    DEBUG_ASSERT(arch_ints_disabled());
    48f0:	f7ff fee6 	bl	46c0 <arch_ints_disabled>
    48f4:	b930      	cbnz	r0, 4904 <insert_in_run_queue_tail+0x60>
    48f6:	4b19      	ldr	r3, [pc, #100]	; (495c <insert_in_run_queue_tail+0xb8>)
    48f8:	4628      	mov	r0, r5
    48fa:	9300      	str	r3, [sp, #0]
    48fc:	4913      	ldr	r1, [pc, #76]	; (494c <insert_in_run_queue_tail+0xa8>)
    48fe:	4a14      	ldr	r2, [pc, #80]	; (4950 <insert_in_run_queue_tail+0xac>)
    4900:	236e      	movs	r3, #110	; 0x6e
    4902:	e7e6      	b.n	48d2 <insert_in_run_queue_tail+0x2e>
    DEBUG_ASSERT(spin_lock_held(&thread_lock));
    4904:	4b16      	ldr	r3, [pc, #88]	; (4960 <insert_in_run_queue_tail+0xbc>)
    4906:	681b      	ldr	r3, [r3, #0]
    4908:	b933      	cbnz	r3, 4918 <insert_in_run_queue_tail+0x74>
    490a:	4b16      	ldr	r3, [pc, #88]	; (4964 <insert_in_run_queue_tail+0xc0>)
    490c:	4628      	mov	r0, r5
    490e:	9300      	str	r3, [sp, #0]
    4910:	490e      	ldr	r1, [pc, #56]	; (494c <insert_in_run_queue_tail+0xa8>)
    4912:	4a0f      	ldr	r2, [pc, #60]	; (4950 <insert_in_run_queue_tail+0xac>)
    4914:	236f      	movs	r3, #111	; 0x6f
    4916:	e7dc      	b.n	48d2 <insert_in_run_queue_tail+0x2e>

    list_add_tail(&run_queue[t->priority], &t->queue_node);
    4918:	6963      	ldr	r3, [r4, #20]
    491a:	4a13      	ldr	r2, [pc, #76]	; (4968 <insert_in_run_queue_tail+0xc4>)

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    491c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
    4920:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    4924:	60e1      	str	r1, [r4, #12]
    item->next = list;
    list->prev->next = item;
    4926:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    item->next = list;
    492a:	6120      	str	r0, [r4, #16]
    list->prev->next = item;
    492c:	604e      	str	r6, [r1, #4]
    list->prev = item;
    492e:	f842 6033 	str.w	r6, [r2, r3, lsl #3]
    run_queue_bitmap |= (1<<t->priority);
    4932:	fa07 f303 	lsl.w	r3, r7, r3
    4936:	4a0d      	ldr	r2, [pc, #52]	; (496c <insert_in_run_queue_tail+0xc8>)
    4938:	6811      	ldr	r1, [r2, #0]
    493a:	4319      	orrs	r1, r3
    493c:	6011      	str	r1, [r2, #0]
}
    493e:	b003      	add	sp, #12
    4940:	bdf0      	pop	{r4, r5, r6, r7, r15}
    4942:	bf00      	nop
    4944:	74687264 	.word	0x74687264
    4948:	00010bfc 	.word	0x00010bfc
    494c:	0001076e 	.word	0x0001076e
    4950:	00010b6e 	.word	0x00010b6e
    4954:	00010c15 	.word	0x00010c15
    4958:	00010c2e 	.word	0x00010c2e
    495c:	0000ff09 	.word	0x0000ff09
    4960:	200008d4 	.word	0x200008d4
    4964:	00010b7e 	.word	0x00010b7e
    4968:	200007d0 	.word	0x200007d0
    496c:	200008d0 	.word	0x200008d0

00004970 <insert_in_run_queue_head>:
static timer_t preempt_timer[SMP_MAX_CPUS];
#endif

/* run queue manipulation */
static void insert_in_run_queue_head(thread_t *t)
{
    4970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    4972:	6803      	ldr	r3, [r0, #0]
    4974:	4a24      	ldr	r2, [pc, #144]	; (4a08 <insert_in_run_queue_head+0x98>)
    4976:	4675      	mov	r5, r14
    4978:	4293      	cmp	r3, r2
static timer_t preempt_timer[SMP_MAX_CPUS];
#endif

/* run queue manipulation */
static void insert_in_run_queue_head(thread_t *t)
{
    497a:	4604      	mov	r4, r0
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    497c:	d006      	beq.n	498c <insert_in_run_queue_head+0x1c>
    497e:	4b23      	ldr	r3, [pc, #140]	; (4a0c <insert_in_run_queue_head+0x9c>)
    4980:	4670      	mov	r0, r14
    4982:	9300      	str	r3, [sp, #0]
    4984:	4922      	ldr	r1, [pc, #136]	; (4a10 <insert_in_run_queue_head+0xa0>)
    4986:	4a23      	ldr	r2, [pc, #140]	; (4a14 <insert_in_run_queue_head+0xa4>)
    4988:	235f      	movs	r3, #95	; 0x5f
    498a:	e008      	b.n	499e <insert_in_run_queue_head+0x2e>
    DEBUG_ASSERT(t->state == THREAD_READY);
    498c:	7e07      	ldrb	r7, [r0, #24]
    498e:	2f01      	cmp	r7, #1
    4990:	d007      	beq.n	49a2 <insert_in_run_queue_head+0x32>
    4992:	4b21      	ldr	r3, [pc, #132]	; (4a18 <insert_in_run_queue_head+0xa8>)
    4994:	491e      	ldr	r1, [pc, #120]	; (4a10 <insert_in_run_queue_head+0xa0>)
    4996:	4a1f      	ldr	r2, [pc, #124]	; (4a14 <insert_in_run_queue_head+0xa4>)
    4998:	9300      	str	r3, [sp, #0]
    499a:	4670      	mov	r0, r14
    499c:	2360      	movs	r3, #96	; 0x60
    499e:	f006 fd89 	bl	b4b4 <_panic>
    item->prev = item->next = 0;
}

static inline bool list_in_list(struct list_node *item)
{
    if (item->prev == 0 && item->next == 0)
    49a2:	68c3      	ldr	r3, [r0, #12]
    DEBUG_ASSERT(!list_in_list(&t->queue_node));
    49a4:	f100 060c 	add.w	r6, r0, #12
    49a8:	b90b      	cbnz	r3, 49ae <insert_in_run_queue_head+0x3e>
    49aa:	6903      	ldr	r3, [r0, #16]
    49ac:	b133      	cbz	r3, 49bc <insert_in_run_queue_head+0x4c>
    49ae:	4b1b      	ldr	r3, [pc, #108]	; (4a1c <insert_in_run_queue_head+0xac>)
    49b0:	4628      	mov	r0, r5
    49b2:	9300      	str	r3, [sp, #0]
    49b4:	4916      	ldr	r1, [pc, #88]	; (4a10 <insert_in_run_queue_head+0xa0>)
    49b6:	4a17      	ldr	r2, [pc, #92]	; (4a14 <insert_in_run_queue_head+0xa4>)
    49b8:	2361      	movs	r3, #97	; 0x61
    49ba:	e7f0      	b.n	499e <insert_in_run_queue_head+0x2e>
    DEBUG_ASSERT(arch_ints_disabled());
    49bc:	f7ff fe80 	bl	46c0 <arch_ints_disabled>
    49c0:	b930      	cbnz	r0, 49d0 <insert_in_run_queue_head+0x60>
    49c2:	4b17      	ldr	r3, [pc, #92]	; (4a20 <insert_in_run_queue_head+0xb0>)
    49c4:	4628      	mov	r0, r5
    49c6:	9300      	str	r3, [sp, #0]
    49c8:	4911      	ldr	r1, [pc, #68]	; (4a10 <insert_in_run_queue_head+0xa0>)
    49ca:	4a12      	ldr	r2, [pc, #72]	; (4a14 <insert_in_run_queue_head+0xa4>)
    49cc:	2362      	movs	r3, #98	; 0x62
    49ce:	e7e6      	b.n	499e <insert_in_run_queue_head+0x2e>
    DEBUG_ASSERT(spin_lock_held(&thread_lock));
    49d0:	4b14      	ldr	r3, [pc, #80]	; (4a24 <insert_in_run_queue_head+0xb4>)
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	b933      	cbnz	r3, 49e4 <insert_in_run_queue_head+0x74>
    49d6:	4b14      	ldr	r3, [pc, #80]	; (4a28 <insert_in_run_queue_head+0xb8>)
    49d8:	4628      	mov	r0, r5
    49da:	9300      	str	r3, [sp, #0]
    49dc:	490c      	ldr	r1, [pc, #48]	; (4a10 <insert_in_run_queue_head+0xa0>)
    49de:	4a0d      	ldr	r2, [pc, #52]	; (4a14 <insert_in_run_queue_head+0xa4>)
    49e0:	2363      	movs	r3, #99	; 0x63
    49e2:	e7dc      	b.n	499e <insert_in_run_queue_head+0x2e>

    list_add_head(&run_queue[t->priority], &t->queue_node);
    49e4:	6962      	ldr	r2, [r4, #20]
    49e6:	4b11      	ldr	r3, [pc, #68]	; (4a2c <insert_in_run_queue_head+0xbc>)
    run_queue_bitmap |= (1<<t->priority);
    49e8:	4097      	lsls	r7, r2
    DEBUG_ASSERT(t->state == THREAD_READY);
    DEBUG_ASSERT(!list_in_list(&t->queue_node));
    DEBUG_ASSERT(arch_ints_disabled());
    DEBUG_ASSERT(spin_lock_held(&thread_lock));

    list_add_head(&run_queue[t->priority], &t->queue_node);
    49ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    49ee:	6859      	ldr	r1, [r3, #4]
    item->prev = list;
    49f0:	60e3      	str	r3, [r4, #12]
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    49f2:	6121      	str	r1, [r4, #16]
    item->prev = list;
    list->next->prev = item;
    49f4:	6859      	ldr	r1, [r3, #4]
    49f6:	600e      	str	r6, [r1, #0]
    list->next = item;
    49f8:	605e      	str	r6, [r3, #4]
    run_queue_bitmap |= (1<<t->priority);
    49fa:	4b0d      	ldr	r3, [pc, #52]	; (4a30 <insert_in_run_queue_head+0xc0>)
    49fc:	6819      	ldr	r1, [r3, #0]
    49fe:	4339      	orrs	r1, r7
    4a00:	6019      	str	r1, [r3, #0]
}
    4a02:	b003      	add	sp, #12
    4a04:	bdf0      	pop	{r4, r5, r6, r7, r15}
    4a06:	bf00      	nop
    4a08:	74687264 	.word	0x74687264
    4a0c:	00010bfc 	.word	0x00010bfc
    4a10:	0001076e 	.word	0x0001076e
    4a14:	00010b6e 	.word	0x00010b6e
    4a18:	00010c15 	.word	0x00010c15
    4a1c:	00010c2e 	.word	0x00010c2e
    4a20:	0000ff09 	.word	0x0000ff09
    4a24:	200008d4 	.word	0x200008d4
    4a28:	00010b7e 	.word	0x00010b7e
    4a2c:	200007d0 	.word	0x200007d0
    4a30:	200008d0 	.word	0x200008d0

00004a34 <thread_sleep_handler>:
    }
}

/* timer callback to wake up a sleeping thread */
static enum handler_return thread_sleep_handler(timer_t *timer, lk_time_t now, void *arg)
{
    4a34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    thread_t *t = (thread_t *)arg;

    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    4a36:	6813      	ldr	r3, [r2, #0]
    }
}

/* timer callback to wake up a sleeping thread */
static enum handler_return thread_sleep_handler(timer_t *timer, lk_time_t now, void *arg)
{
    4a38:	4614      	mov	r4, r2
    thread_t *t = (thread_t *)arg;

    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    4a3a:	4a14      	ldr	r2, [pc, #80]	; (4a8c <thread_sleep_handler+0x58>)
    4a3c:	4670      	mov	r0, r14
    4a3e:	4293      	cmp	r3, r2
    4a40:	d006      	beq.n	4a50 <thread_sleep_handler+0x1c>
    4a42:	4b13      	ldr	r3, [pc, #76]	; (4a90 <thread_sleep_handler+0x5c>)
    4a44:	4913      	ldr	r1, [pc, #76]	; (4a94 <thread_sleep_handler+0x60>)
    4a46:	9300      	str	r3, [sp, #0]
    4a48:	4a13      	ldr	r2, [pc, #76]	; (4a98 <thread_sleep_handler+0x64>)
    4a4a:	f240 23ed 	movw	r3, #749	; 0x2ed
    4a4e:	e008      	b.n	4a62 <thread_sleep_handler+0x2e>
    DEBUG_ASSERT(t->state == THREAD_SLEEPING);
    4a50:	7e23      	ldrb	r3, [r4, #24]
    4a52:	2b04      	cmp	r3, #4
    4a54:	d007      	beq.n	4a66 <thread_sleep_handler+0x32>
    4a56:	4b11      	ldr	r3, [pc, #68]	; (4a9c <thread_sleep_handler+0x68>)
    4a58:	490e      	ldr	r1, [pc, #56]	; (4a94 <thread_sleep_handler+0x60>)
    4a5a:	4a0f      	ldr	r2, [pc, #60]	; (4a98 <thread_sleep_handler+0x64>)
    4a5c:	9300      	str	r3, [sp, #0]
    4a5e:	f240 23ee 	movw	r3, #750	; 0x2ee
    4a62:	f006 fd27 	bl	b4b4 <_panic>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    4a66:	2501      	movs	r5, #1
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    4a68:	a803      	add	r0, sp, #12
    4a6a:	4e0d      	ldr	r6, [pc, #52]	; (4aa0 <thread_sleep_handler+0x6c>)
    4a6c:	f7ff ff0e 	bl	488c <arch_interrupt_save.constprop.12>

    THREAD_LOCK(state);

    t->state = THREAD_READY;
    insert_in_run_queue_head(t);
    4a70:	4620      	mov	r0, r4
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    DEBUG_ASSERT(t->state == THREAD_SLEEPING);

    THREAD_LOCK(state);

    t->state = THREAD_READY;
    4a72:	7625      	strb	r5, [r4, #24]
    4a74:	6035      	str	r5, [r6, #0]
    insert_in_run_queue_head(t);
    4a76:	f7ff ff7b 	bl	4970 <insert_in_run_queue_head>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    4a7a:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    4a7c:	9803      	ldr	r0, [sp, #12]
    4a7e:	6033      	str	r3, [r6, #0]
    4a80:	f7ff ff00 	bl	4884 <arch_interrupt_restore.constprop.11>

    THREAD_UNLOCK(state);

    return INT_RESCHEDULE;
}
    4a84:	4628      	mov	r0, r5
    4a86:	b004      	add	sp, #16
    4a88:	bd70      	pop	{r4, r5, r6, r15}
    4a8a:	bf00      	nop
    4a8c:	74687264 	.word	0x74687264
    4a90:	00010bfc 	.word	0x00010bfc
    4a94:	0001076e 	.word	0x0001076e
    4a98:	00010b6e 	.word	0x00010b6e
    4a9c:	00010c4c 	.word	0x00010c4c
    4aa0:	200008d4 	.word	0x200008d4

00004aa4 <thread_create_etc>:
 * Stack size is typically set to DEFAULT_STACK_SIZE
 *
 * @return  Pointer to thread object, or NULL on failure.
 */
thread_t *thread_create_etc(thread_t *t, const char *name, thread_start_routine entry, void *arg, int priority, void *stack, size_t stack_size)
{
    4aa4:	e92d 47f3 	stmdb	r13!, {r0, r1, r4, r5, r6, r7, r8, r9, r10, r14}
    4aa8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    4aaa:	468a      	mov	r10, r1
    4aac:	4691      	mov	r9, r2
    4aae:	4698      	mov	r8, r3
    4ab0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    unsigned int flags = 0;

    if (!t) {
    4ab2:	4604      	mov	r4, r0
    4ab4:	b938      	cbnz	r0, 4ac6 <thread_create_etc+0x22>
        t = malloc(sizeof(thread_t));
    4ab6:	2078      	movs	r0, #120	; 0x78
    4ab8:	f006 fe34 	bl	b724 <malloc>
        if (!t)
            return NULL;
        flags |= THREAD_FLAG_FREE_STRUCT;
    4abc:	2504      	movs	r5, #4
{
    unsigned int flags = 0;

    if (!t) {
        t = malloc(sizeof(thread_t));
        if (!t)
    4abe:	4604      	mov	r4, r0
    4ac0:	b910      	cbnz	r0, 4ac8 <thread_create_etc+0x24>
            return NULL;
    4ac2:	2000      	movs	r0, #0
    4ac4:	e050      	b.n	4b68 <thread_create_etc+0xc4>
 *
 * @return  Pointer to thread object, or NULL on failure.
 */
thread_t *thread_create_etc(thread_t *t, const char *name, thread_start_routine entry, void *arg, int priority, void *stack, size_t stack_size)
{
    unsigned int flags = 0;
    4ac6:	2500      	movs	r5, #0
        if (!t)
            return NULL;
        flags |= THREAD_FLAG_FREE_STRUCT;
    }

    init_thread_struct(t, name);
    4ac8:	4651      	mov	r1, r10
    4aca:	4620      	mov	r0, r4
    4acc:	f7ff fdfe 	bl	46cc <init_thread_struct>

    t->entry = entry;
    t->arg = arg;
    t->priority = priority;
    4ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 * @defgroup  wait  Wait Queue
 * @{
 */
void wait_queue_init(wait_queue_t *wait)
{
    *wait = (wait_queue_t)WAIT_QUEUE_INITIAL_VALUE(*wait);
    4ad2:	4927      	ldr	r1, [pc, #156]	; (4b70 <thread_create_etc+0xcc>)
    4ad4:	f104 024c 	add.w	r2, r4, #76	; 0x4c

    init_thread_struct(t, name);

    t->entry = entry;
    t->arg = arg;
    t->priority = priority;
    4ad8:	6163      	str	r3, [r4, #20]
    t->state = THREAD_SUSPENDED;
    4ada:	2300      	movs	r3, #0
        flags |= THREAD_FLAG_FREE_STRUCT;
    }

    init_thread_struct(t, name);

    t->entry = entry;
    4adc:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
    t->arg = arg;
    4ae0:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    t->priority = priority;
    t->state = THREAD_SUSPENDED;
    4ae4:	7623      	strb	r3, [r4, #24]
    t->blocking_wait_queue = NULL;
    4ae6:	6263      	str	r3, [r4, #36]	; 0x24
    t->wait_queue_block_ret = NO_ERROR;
    4ae8:	62a3      	str	r3, [r4, #40]	; 0x28
    thread_set_curr_cpu(t, -1);

    t->retcode = 0;
    4aea:	6463      	str	r3, [r4, #68]	; 0x44
 * @defgroup  wait  Wait Queue
 * @{
 */
void wait_queue_init(wait_queue_t *wait)
{
    *wait = (wait_queue_t)WAIT_QUEUE_INITIAL_VALUE(*wait);
    4aec:	64a1      	str	r1, [r4, #72]	; 0x48
    4aee:	64e2      	str	r2, [r4, #76]	; 0x4c
    4af0:	6522      	str	r2, [r4, #80]	; 0x50
    4af2:	6563      	str	r3, [r4, #84]	; 0x54
#if WITH_KERNEL_VM
    t->aspace = NULL;
#endif

    /* create the stack */
    if (!stack) {
    4af4:	b9a7      	cbnz	r7, 4b20 <thread_create_etc+0x7c>
#if THREAD_STACK_BOUNDS_CHECK
        stack_size += THREAD_STACK_PADDING_SIZE;
    4af6:	f506 7680 	add.w	r6, r6, #256	; 0x100
        flags |= THREAD_FLAG_DEBUG_STACK_BOUNDS_CHECK;
#endif
        t->stack = malloc(stack_size);
    4afa:	4630      	mov	r0, r6
    4afc:	f006 fe12 	bl	b724 <malloc>
    4b00:	6360      	str	r0, [r4, #52]	; 0x34
        if (!t->stack) {
    4b02:	b928      	cbnz	r0, 4b10 <thread_create_etc+0x6c>
            if (flags & THREAD_FLAG_FREE_STRUCT)
    4b04:	076b      	lsls	r3, r5, #29
    4b06:	d5dc      	bpl.n	4ac2 <thread_create_etc+0x1e>
                free(t);
    4b08:	4620      	mov	r0, r4
    4b0a:	f006 fe9b 	bl	b844 <free>
    4b0e:	e7d8      	b.n	4ac2 <thread_create_etc+0x1e>
            return NULL;
        }
        flags |= THREAD_FLAG_FREE_STACK;
#if THREAD_STACK_BOUNDS_CHECK
        memset(t->stack, STACK_DEBUG_BYTE, THREAD_STACK_PADDING_SIZE);
    4b10:	2199      	movs	r1, #153	; 0x99
    4b12:	f44f 7280 	mov.w	r2, #256	; 0x100
        if (!t->stack) {
            if (flags & THREAD_FLAG_FREE_STRUCT)
                free(t);
            return NULL;
        }
        flags |= THREAD_FLAG_FREE_STACK;
    4b16:	f045 0522 	orr.w	r5, r5, #34	; 0x22
#if THREAD_STACK_BOUNDS_CHECK
        memset(t->stack, STACK_DEBUG_BYTE, THREAD_STACK_PADDING_SIZE);
    4b1a:	f007 f89d 	bl	bc58 <memset>
    4b1e:	e000      	b.n	4b22 <thread_create_etc+0x7e>
#endif
    } else {
        t->stack = stack;
    4b20:	6367      	str	r7, [r4, #52]	; 0x34
    }
#if THREAD_STACK_HIGHWATER
    if (flags & THREAD_FLAG_DEBUG_STACK_BOUNDS_CHECK) {
    4b22:	06af      	lsls	r7, r5, #26
        memset(t->stack + THREAD_STACK_PADDING_SIZE, STACK_DEBUG_BYTE,
    4b24:	6b60      	ldr	r0, [r4, #52]	; 0x34
#endif
    } else {
        t->stack = stack;
    }
#if THREAD_STACK_HIGHWATER
    if (flags & THREAD_FLAG_DEBUG_STACK_BOUNDS_CHECK) {
    4b26:	d505      	bpl.n	4b34 <thread_create_etc+0x90>
        memset(t->stack + THREAD_STACK_PADDING_SIZE, STACK_DEBUG_BYTE,
    4b28:	f500 7080 	add.w	r0, r0, #256	; 0x100
    4b2c:	2199      	movs	r1, #153	; 0x99
    4b2e:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
    4b32:	e001      	b.n	4b38 <thread_create_etc+0x94>
               stack_size - THREAD_STACK_PADDING_SIZE);
    } else {
        memset(t->stack, STACK_DEBUG_BYTE, stack_size);
    4b34:	2199      	movs	r1, #153	; 0x99
    4b36:	4632      	mov	r2, r6
    4b38:	f007 f88e 	bl	bc58 <memset>
    int i;
    for (i=0; i < MAX_TLS_ENTRY; i++)
        t->tls[i] = current_thread->tls[i];

    /* set up the initial stack frame */
    arch_thread_initialize(t);
    4b3c:	4620      	mov	r0, r4
    } else {
        memset(t->stack, STACK_DEBUG_BYTE, stack_size);
    }
#endif

    t->stack_size = stack_size;
    4b3e:	63a6      	str	r6, [r4, #56]	; 0x38

    /* save whether or not we need to free the thread struct and/or stack */
    t->flags = flags;
    4b40:	6225      	str	r5, [r4, #32]
    int i;
    for (i=0; i < MAX_TLS_ENTRY; i++)
        t->tls[i] = current_thread->tls[i];

    /* set up the initial stack frame */
    arch_thread_initialize(t);
    4b42:	f7fb ff75 	bl	a30 <arch_thread_initialize>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    4b46:	a801      	add	r0, sp, #4
    4b48:	f7ff fea0 	bl	488c <arch_interrupt_save.constprop.12>
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    4b4c:	4b09      	ldr	r3, [pc, #36]	; (4b74 <thread_create_etc+0xd0>)

    /* add it to the global thread list */
    THREAD_LOCK(state);
    list_add_head(&thread_list, &t->thread_list_node);
    4b4e:	1d22      	adds	r2, r4, #4
    4b50:	6859      	ldr	r1, [r3, #4]
    item->prev = list;
    4b52:	6063      	str	r3, [r4, #4]
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    4b54:	60a1      	str	r1, [r4, #8]
    item->prev = list;
    list->next->prev = item;
    4b56:	600a      	str	r2, [r1, #0]
    list->next = item;
    4b58:	605a      	str	r2, [r3, #4]
    4b5a:	4b07      	ldr	r3, [pc, #28]	; (4b78 <thread_create_etc+0xd4>)
    4b5c:	2200      	movs	r2, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    4b5e:	9801      	ldr	r0, [sp, #4]
    4b60:	601a      	str	r2, [r3, #0]
    4b62:	f7ff fe8f 	bl	4884 <arch_interrupt_restore.constprop.11>
    THREAD_UNLOCK(state);

    return t;
    4b66:	4620      	mov	r0, r4
}
    4b68:	b002      	add	sp, #8
    4b6a:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
    4b6e:	bf00      	nop
    4b70:	77616974 	.word	0x77616974
    4b74:	200008d8 	.word	0x200008d8
    4b78:	200008d4 	.word	0x200008d4

00004b7c <thread_create>:

thread_t *thread_create(const char *name, thread_start_routine entry, void *arg, int priority, size_t stack_size)
{
    4b7c:	b5f0      	push	{r4, r5, r6, r7, r14}
    4b7e:	b085      	sub	sp, #20
    return thread_create_etc(NULL, name, entry, arg, priority, NULL, stack_size);
    4b80:	9c0a      	ldr	r4, [sp, #40]	; 0x28

    return t;
}

thread_t *thread_create(const char *name, thread_start_routine entry, void *arg, int priority, size_t stack_size)
{
    4b82:	4607      	mov	r7, r0
    4b84:	460e      	mov	r6, r1
    4b86:	4615      	mov	r5, r2
    return thread_create_etc(NULL, name, entry, arg, priority, NULL, stack_size);
    4b88:	2000      	movs	r0, #0
    4b8a:	9300      	str	r3, [sp, #0]
    4b8c:	9001      	str	r0, [sp, #4]
    4b8e:	9402      	str	r4, [sp, #8]
    4b90:	4639      	mov	r1, r7
    4b92:	4632      	mov	r2, r6
    4b94:	462b      	mov	r3, r5
    4b96:	f7ff ff85 	bl	4aa4 <thread_create_etc>
}
    4b9a:	b005      	add	sp, #20
    4b9c:	bdf0      	pop	{r4, r5, r6, r7, r15}
	...

00004ba0 <thread_set_real_time>:
 * @param t Thread to flag
 *
 * @return NO_ERROR on success
 */
status_t thread_set_real_time(thread_t *t)
{
    4ba0:	b51f      	push	{r0, r1, r2, r3, r4, r14}
    if (!t)
    4ba2:	4604      	mov	r4, r0
    4ba4:	b1d0      	cbz	r0, 4bdc <thread_set_real_time+0x3c>
        return ERR_INVALID_ARGS;

    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    4ba6:	6803      	ldr	r3, [r0, #0]
    4ba8:	490e      	ldr	r1, [pc, #56]	; (4be4 <thread_set_real_time+0x44>)
    4baa:	428b      	cmp	r3, r1
    4bac:	d007      	beq.n	4bbe <thread_set_real_time+0x1e>
    4bae:	4b0e      	ldr	r3, [pc, #56]	; (4be8 <thread_set_real_time+0x48>)
    4bb0:	4670      	mov	r0, r14
    4bb2:	9300      	str	r3, [sp, #0]
    4bb4:	490d      	ldr	r1, [pc, #52]	; (4bec <thread_set_real_time+0x4c>)
    4bb6:	4a0e      	ldr	r2, [pc, #56]	; (4bf0 <thread_set_real_time+0x50>)
    4bb8:	23f7      	movs	r3, #247	; 0xf7
    4bba:	f006 fc7b 	bl	b4b4 <_panic>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    4bbe:	a803      	add	r0, sp, #12
    4bc0:	f7ff fe64 	bl	488c <arch_interrupt_save.constprop.12>
    if (t == get_current_thread()) {
        /* if we're currently running, cancel the preemption timer. */
        timer_cancel(&preempt_timer[arch_curr_cpu_num()]);
    }
#endif
    t->flags |= THREAD_FLAG_REAL_TIME;
    4bc4:	6a23      	ldr	r3, [r4, #32]
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    4bc6:	9803      	ldr	r0, [sp, #12]
    4bc8:	f043 0308 	orr.w	r3, r3, #8
    4bcc:	6223      	str	r3, [r4, #32]
    4bce:	4b09      	ldr	r3, [pc, #36]	; (4bf4 <thread_set_real_time+0x54>)
    4bd0:	2400      	movs	r4, #0
    4bd2:	601c      	str	r4, [r3, #0]
    4bd4:	f7ff fe56 	bl	4884 <arch_interrupt_restore.constprop.11>
    THREAD_UNLOCK(state);

    return NO_ERROR;
    4bd8:	4620      	mov	r0, r4
    4bda:	e001      	b.n	4be0 <thread_set_real_time+0x40>
 * @return NO_ERROR on success
 */
status_t thread_set_real_time(thread_t *t)
{
    if (!t)
        return ERR_INVALID_ARGS;
    4bdc:	f06f 0007 	mvn.w	r0, #7
#endif
    t->flags |= THREAD_FLAG_REAL_TIME;
    THREAD_UNLOCK(state);

    return NO_ERROR;
}
    4be0:	b004      	add	sp, #16
    4be2:	bd10      	pop	{r4, r15}
    4be4:	74687264 	.word	0x74687264
    4be8:	00010bfc 	.word	0x00010bfc
    4bec:	0001076e 	.word	0x0001076e
    4bf0:	00010b6e 	.word	0x00010b6e
    4bf4:	200008d4 	.word	0x200008d4

00004bf8 <thread_yield>:
/* use a global pointer to store the current_thread */
extern struct thread *_current_thread;

static inline struct thread *get_current_thread(void)
{
    return _current_thread;
    4bf8:	4b1c      	ldr	r3, [pc, #112]	; (4c6c <thread_yield+0x74>)
 *
 * This function will return at some later time. Possibly immediately if
 * no other threads are waiting to execute.
 */
void thread_yield(void)
{
    4bfa:	b530      	push	{r4, r5, r14}
    4bfc:	681c      	ldr	r4, [r3, #0]
    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    4bfe:	4a1c      	ldr	r2, [pc, #112]	; (4c70 <thread_yield+0x78>)
    4c00:	6823      	ldr	r3, [r4, #0]
 *
 * This function will return at some later time. Possibly immediately if
 * no other threads are waiting to execute.
 */
void thread_yield(void)
{
    4c02:	b085      	sub	sp, #20
    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    4c04:	4293      	cmp	r3, r2
    4c06:	4670      	mov	r0, r14
    4c08:	d006      	beq.n	4c18 <thread_yield+0x20>
    4c0a:	4b1a      	ldr	r3, [pc, #104]	; (4c74 <thread_yield+0x7c>)
    4c0c:	491a      	ldr	r1, [pc, #104]	; (4c78 <thread_yield+0x80>)
    4c0e:	9300      	str	r3, [sp, #0]
    4c10:	4a1a      	ldr	r2, [pc, #104]	; (4c7c <thread_yield+0x84>)
    4c12:	f240 2376 	movw	r3, #630	; 0x276
    4c16:	e008      	b.n	4c2a <thread_yield+0x32>
    DEBUG_ASSERT(current_thread->state == THREAD_RUNNING);
    4c18:	7e23      	ldrb	r3, [r4, #24]
    4c1a:	2b02      	cmp	r3, #2
    4c1c:	d007      	beq.n	4c2e <thread_yield+0x36>
    4c1e:	4b18      	ldr	r3, [pc, #96]	; (4c80 <thread_yield+0x88>)
    4c20:	4915      	ldr	r1, [pc, #84]	; (4c78 <thread_yield+0x80>)
    4c22:	4a16      	ldr	r2, [pc, #88]	; (4c7c <thread_yield+0x84>)
    4c24:	9300      	str	r3, [sp, #0]
    4c26:	f240 2377 	movw	r3, #631	; 0x277
    4c2a:	f006 fc43 	bl	b4b4 <_panic>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    4c2e:	a803      	add	r0, sp, #12
    4c30:	f7ff fe2c 	bl	488c <arch_interrupt_save.constprop.12>

    THREAD_LOCK(state);

    THREAD_STATS_INC(yields);
    4c34:	4913      	ldr	r1, [pc, #76]	; (4c84 <thread_yield+0x8c>)

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    4c36:	2201      	movs	r2, #1
    4c38:	69c8      	ldr	r0, [r1, #28]
    4c3a:	4b13      	ldr	r3, [pc, #76]	; (4c88 <thread_yield+0x90>)
    4c3c:	4410      	add	r0, r2
    4c3e:	61c8      	str	r0, [r1, #28]
    4c40:	601a      	str	r2, [r3, #0]

    /* we are yielding the cpu, so stick ourselves into the tail of the run queue and reschedule */
    current_thread->state = THREAD_READY;
    4c42:	7622      	strb	r2, [r4, #24]
    current_thread->remaining_quantum = 0;
    4c44:	2200      	movs	r2, #0
    4c46:	61e2      	str	r2, [r4, #28]
    return (t->flags & THREAD_FLAG_REAL_TIME) && t->priority > DEFAULT_PRIORITY;
}

static bool thread_is_idle(thread_t *t)
{
    return !!(t->flags & THREAD_FLAG_IDLE);
    4c48:	6a22      	ldr	r2, [r4, #32]
    4c4a:	461d      	mov	r5, r3
    THREAD_STATS_INC(yields);

    /* we are yielding the cpu, so stick ourselves into the tail of the run queue and reschedule */
    current_thread->state = THREAD_READY;
    current_thread->remaining_quantum = 0;
    if (likely(!thread_is_idle(current_thread))) { /* idle thread doesn't go in the run queue */
    4c4c:	f012 0f10 	tst.w	r2, #16
    4c50:	d102      	bne.n	4c58 <thread_yield+0x60>
        insert_in_run_queue_tail(current_thread);
    4c52:	4620      	mov	r0, r4
    4c54:	f7ff fe26 	bl	48a4 <insert_in_run_queue_tail>
    }
    thread_resched();
    4c58:	f7ff fd4c 	bl	46f4 <thread_resched>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    4c5c:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    4c5e:	9803      	ldr	r0, [sp, #12]
    4c60:	602b      	str	r3, [r5, #0]
    4c62:	f7ff fe0f 	bl	4884 <arch_interrupt_restore.constprop.11>

    THREAD_UNLOCK(state);
}
    4c66:	b005      	add	sp, #20
    4c68:	bd30      	pop	{r4, r5, r15}
    4c6a:	bf00      	nop
    4c6c:	20000554 	.word	0x20000554
    4c70:	74687264 	.word	0x74687264
    4c74:	00010c68 	.word	0x00010c68
    4c78:	0001076e 	.word	0x0001076e
    4c7c:	00010b6e 	.word	0x00010b6e
    4c80:	00010c8e 	.word	0x00010c8e
    4c84:	20000728 	.word	0x20000728
    4c88:	200008d4 	.word	0x200008d4

00004c8c <thread_resume>:
 * @param t  Thread to resume
 *
 * @return NO_ERROR on success, ERR_NOT_SUSPENDED if thread was not suspended.
 */
status_t thread_resume(thread_t *t)
{
    4c8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    4c8e:	6803      	ldr	r3, [r0, #0]
    4c90:	4a1b      	ldr	r2, [pc, #108]	; (4d00 <thread_resume+0x74>)
 * @param t  Thread to resume
 *
 * @return NO_ERROR on success, ERR_NOT_SUSPENDED if thread was not suspended.
 */
status_t thread_resume(thread_t *t)
{
    4c92:	4604      	mov	r4, r0
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    4c94:	4293      	cmp	r3, r2
    4c96:	d007      	beq.n	4ca8 <thread_resume+0x1c>
    4c98:	4b1a      	ldr	r3, [pc, #104]	; (4d04 <thread_resume+0x78>)
    4c9a:	4670      	mov	r0, r14
    4c9c:	9300      	str	r3, [sp, #0]
    4c9e:	491a      	ldr	r1, [pc, #104]	; (4d08 <thread_resume+0x7c>)
    4ca0:	4a1a      	ldr	r2, [pc, #104]	; (4d0c <thread_resume+0x80>)
    4ca2:	f240 1321 	movw	r3, #289	; 0x121
    4ca6:	e009      	b.n	4cbc <thread_resume+0x30>
    DEBUG_ASSERT(t->state != THREAD_DEATH);
    4ca8:	7e03      	ldrb	r3, [r0, #24]
    4caa:	2b05      	cmp	r3, #5
    4cac:	d108      	bne.n	4cc0 <thread_resume+0x34>
    4cae:	4b18      	ldr	r3, [pc, #96]	; (4d10 <thread_resume+0x84>)
    4cb0:	4915      	ldr	r1, [pc, #84]	; (4d08 <thread_resume+0x7c>)
    4cb2:	4a16      	ldr	r2, [pc, #88]	; (4d0c <thread_resume+0x80>)
    4cb4:	9300      	str	r3, [sp, #0]
    4cb6:	4670      	mov	r0, r14
    4cb8:	f44f 7391 	mov.w	r3, #290	; 0x122
    4cbc:	f006 fbfa 	bl	b4b4 <_panic>

    bool resched = false;
    bool ints_disabled = arch_ints_disabled();
    4cc0:	f7ff fcfe 	bl	46c0 <arch_ints_disabled>
    4cc4:	4605      	mov	r5, r0
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    4cc6:	a803      	add	r0, sp, #12
    4cc8:	f7ff fde0 	bl	488c <arch_interrupt_save.constprop.12>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    4ccc:	4a11      	ldr	r2, [pc, #68]	; (4d14 <thread_resume+0x88>)
    THREAD_LOCK(state);
    if (t->state == THREAD_SUSPENDED) {
    4cce:	7e21      	ldrb	r1, [r4, #24]
    4cd0:	2301      	movs	r3, #1
    4cd2:	6013      	str	r3, [r2, #0]
    4cd4:	4616      	mov	r6, r2
    4cd6:	b939      	cbnz	r1, 4ce8 <thread_resume+0x5c>
        t->state = THREAD_READY;
    4cd8:	7623      	strb	r3, [r4, #24]
        insert_in_run_queue_head(t);
    4cda:	4620      	mov	r0, r4
        if (!ints_disabled) /* HACK, don't resced into bootstrap thread before idle thread is set up */
    4cdc:	f085 0401 	eor.w	r4, r5, #1
    bool resched = false;
    bool ints_disabled = arch_ints_disabled();
    THREAD_LOCK(state);
    if (t->state == THREAD_SUSPENDED) {
        t->state = THREAD_READY;
        insert_in_run_queue_head(t);
    4ce0:	f7ff fe46 	bl	4970 <insert_in_run_queue_head>
        if (!ints_disabled) /* HACK, don't resced into bootstrap thread before idle thread is set up */
    4ce4:	b2e4      	uxtb	r4, r4
    4ce6:	e000      	b.n	4cea <thread_resume+0x5e>
status_t thread_resume(thread_t *t)
{
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    DEBUG_ASSERT(t->state != THREAD_DEATH);

    bool resched = false;
    4ce8:	2400      	movs	r4, #0
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    4cea:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    4cec:	9803      	ldr	r0, [sp, #12]
    4cee:	6033      	str	r3, [r6, #0]
    4cf0:	f7ff fdc8 	bl	4884 <arch_interrupt_restore.constprop.11>

    mp_reschedule(MP_CPU_ALL_BUT_LOCAL, 0);

    THREAD_UNLOCK(state);

    if (resched)
    4cf4:	b10c      	cbz	r4, 4cfa <thread_resume+0x6e>
        thread_yield();
    4cf6:	f7ff ff7f 	bl	4bf8 <thread_yield>

    return NO_ERROR;
}
    4cfa:	2000      	movs	r0, #0
    4cfc:	b004      	add	sp, #16
    4cfe:	bd70      	pop	{r4, r5, r6, r15}
    4d00:	74687264 	.word	0x74687264
    4d04:	00010bfc 	.word	0x00010bfc
    4d08:	0001076e 	.word	0x0001076e
    4d0c:	00010b6e 	.word	0x00010b6e
    4d10:	00010cb6 	.word	0x00010cb6
    4d14:	200008d4 	.word	0x200008d4

00004d18 <thread_preempt>:
    4d18:	4b1f      	ldr	r3, [pc, #124]	; (4d98 <thread_preempt+0x80>)
 *
 * This function will return at some later time. Possibly immediately if
 * no other threads are waiting to execute.
 */
void thread_preempt(void)
{
    4d1a:	b530      	push	{r4, r5, r14}
    4d1c:	681c      	ldr	r4, [r3, #0]
    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    4d1e:	4a1f      	ldr	r2, [pc, #124]	; (4d9c <thread_preempt+0x84>)
    4d20:	6823      	ldr	r3, [r4, #0]
 *
 * This function will return at some later time. Possibly immediately if
 * no other threads are waiting to execute.
 */
void thread_preempt(void)
{
    4d22:	b085      	sub	sp, #20
    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    4d24:	4293      	cmp	r3, r2
    4d26:	4670      	mov	r0, r14
    4d28:	d006      	beq.n	4d38 <thread_preempt+0x20>
    4d2a:	4b1d      	ldr	r3, [pc, #116]	; (4da0 <thread_preempt+0x88>)
    4d2c:	491d      	ldr	r1, [pc, #116]	; (4da4 <thread_preempt+0x8c>)
    4d2e:	9300      	str	r3, [sp, #0]
    4d30:	4a1d      	ldr	r2, [pc, #116]	; (4da8 <thread_preempt+0x90>)
    4d32:	f240 239b 	movw	r3, #667	; 0x29b
    4d36:	e008      	b.n	4d4a <thread_preempt+0x32>
    DEBUG_ASSERT(current_thread->state == THREAD_RUNNING);
    4d38:	7e23      	ldrb	r3, [r4, #24]
    4d3a:	2b02      	cmp	r3, #2
    4d3c:	d007      	beq.n	4d4e <thread_preempt+0x36>
    4d3e:	4b1b      	ldr	r3, [pc, #108]	; (4dac <thread_preempt+0x94>)
    4d40:	4918      	ldr	r1, [pc, #96]	; (4da4 <thread_preempt+0x8c>)
    4d42:	4a19      	ldr	r2, [pc, #100]	; (4da8 <thread_preempt+0x90>)
    4d44:	9300      	str	r3, [sp, #0]
    4d46:	f44f 7327 	mov.w	r3, #668	; 0x29c
    4d4a:	f006 fbb3 	bl	b4b4 <_panic>
    return (t->flags & THREAD_FLAG_REAL_TIME) && t->priority > DEFAULT_PRIORITY;
}

static bool thread_is_idle(thread_t *t)
{
    return !!(t->flags & THREAD_FLAG_IDLE);
    4d4e:	6a23      	ldr	r3, [r4, #32]

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    DEBUG_ASSERT(current_thread->state == THREAD_RUNNING);

#if THREAD_STATS
    if (!thread_is_idle(current_thread))
    4d50:	06da      	lsls	r2, r3, #27
    4d52:	d403      	bmi.n	4d5c <thread_preempt+0x44>
        THREAD_STATS_INC(preempts); /* only track when a meaningful preempt happens */
    4d54:	4b16      	ldr	r3, [pc, #88]	; (4db0 <thread_preempt+0x98>)
    4d56:	699a      	ldr	r2, [r3, #24]
    4d58:	3201      	adds	r2, #1
    4d5a:	619a      	str	r2, [r3, #24]
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    4d5c:	a803      	add	r0, sp, #12
    4d5e:	f7ff fd95 	bl	488c <arch_interrupt_save.constprop.12>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    4d62:	4b14      	ldr	r3, [pc, #80]	; (4db4 <thread_preempt+0x9c>)
    4d64:	2201      	movs	r2, #1
    4d66:	601a      	str	r2, [r3, #0]
    KEVLOG_THREAD_PREEMPT(current_thread);

    THREAD_LOCK(state);

    /* we are being preempted, so we get to go back into the front of the run queue if we have quantum left */
    current_thread->state = THREAD_READY;
    4d68:	7622      	strb	r2, [r4, #24]
    return (t->flags & THREAD_FLAG_REAL_TIME) && t->priority > DEFAULT_PRIORITY;
}

static bool thread_is_idle(thread_t *t)
{
    return !!(t->flags & THREAD_FLAG_IDLE);
    4d6a:	6a22      	ldr	r2, [r4, #32]
    4d6c:	461d      	mov	r5, r3

    THREAD_LOCK(state);

    /* we are being preempted, so we get to go back into the front of the run queue if we have quantum left */
    current_thread->state = THREAD_READY;
    if (likely(!thread_is_idle(current_thread))) { /* idle thread doesn't go in the run queue */
    4d6e:	f012 0f10 	tst.w	r2, #16
    4d72:	d108      	bne.n	4d86 <thread_preempt+0x6e>
        if (current_thread->remaining_quantum > 0)
    4d74:	69e3      	ldr	r3, [r4, #28]
            insert_in_run_queue_head(current_thread);
    4d76:	4620      	mov	r0, r4
    THREAD_LOCK(state);

    /* we are being preempted, so we get to go back into the front of the run queue if we have quantum left */
    current_thread->state = THREAD_READY;
    if (likely(!thread_is_idle(current_thread))) { /* idle thread doesn't go in the run queue */
        if (current_thread->remaining_quantum > 0)
    4d78:	2b00      	cmp	r3, #0
    4d7a:	dd02      	ble.n	4d82 <thread_preempt+0x6a>
            insert_in_run_queue_head(current_thread);
    4d7c:	f7ff fdf8 	bl	4970 <insert_in_run_queue_head>
    4d80:	e001      	b.n	4d86 <thread_preempt+0x6e>
        else
            insert_in_run_queue_tail(current_thread); /* if we're out of quantum, go to the tail of the queue */
    4d82:	f7ff fd8f 	bl	48a4 <insert_in_run_queue_tail>
    }
    thread_resched();
    4d86:	f7ff fcb5 	bl	46f4 <thread_resched>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    4d8a:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    4d8c:	9803      	ldr	r0, [sp, #12]
    4d8e:	602b      	str	r3, [r5, #0]
    4d90:	f7ff fd78 	bl	4884 <arch_interrupt_restore.constprop.11>

    THREAD_UNLOCK(state);
}
    4d94:	b005      	add	sp, #20
    4d96:	bd30      	pop	{r4, r5, r15}
    4d98:	20000554 	.word	0x20000554
    4d9c:	74687264 	.word	0x74687264
    4da0:	00010c68 	.word	0x00010c68
    4da4:	0001076e 	.word	0x0001076e
    4da8:	00010b6e 	.word	0x00010b6e
    4dac:	00010c8e 	.word	0x00010c8e
    4db0:	20000728 	.word	0x20000728
    4db4:	200008d4 	.word	0x200008d4

00004db8 <thread_timer_tick>:
    4db8:	4b07      	ldr	r3, [pc, #28]	; (4dd8 <thread_timer_tick+0x20>)
    4dba:	681b      	ldr	r3, [r3, #0]
    return !!(t->flags & THREAD_FLAG_IDLE);
}

static bool thread_is_real_time_or_idle(thread_t *t)
{
    return !!(t->flags & (THREAD_FLAG_REAL_TIME | THREAD_FLAG_IDLE));
    4dbc:	6a1a      	ldr	r2, [r3, #32]

enum handler_return thread_timer_tick(void)
{
    thread_t *current_thread = get_current_thread();

    if (thread_is_real_time_or_idle(current_thread))
    4dbe:	f012 0f18 	tst.w	r2, #24
    4dc2:	d107      	bne.n	4dd4 <thread_timer_tick+0x1c>
        return INT_NO_RESCHEDULE;

    current_thread->remaining_quantum--;
    4dc4:	69d8      	ldr	r0, [r3, #28]
    4dc6:	3801      	subs	r0, #1
enum handler_return thread_timer_tick(void)
{
    thread_t *current_thread = get_current_thread();

    if (thread_is_real_time_or_idle(current_thread))
        return INT_NO_RESCHEDULE;
    4dc8:	2800      	cmp	r0, #0

    current_thread->remaining_quantum--;
    4dca:	61d8      	str	r0, [r3, #28]
enum handler_return thread_timer_tick(void)
{
    thread_t *current_thread = get_current_thread();

    if (thread_is_real_time_or_idle(current_thread))
        return INT_NO_RESCHEDULE;
    4dcc:	bfcc      	ite	gt
    4dce:	2000      	movgt	r0, #0
    4dd0:	2001      	movle	r0, #1
    4dd2:	4770      	bx	r14
    4dd4:	2000      	movs	r0, #0
    if (current_thread->remaining_quantum <= 0) {
        return INT_RESCHEDULE;
    } else {
        return INT_NO_RESCHEDULE;
    }
}
    4dd6:	4770      	bx	r14
    4dd8:	20000554 	.word	0x20000554

00004ddc <thread_sleep>:
    4ddc:	4b20      	ldr	r3, [pc, #128]	; (4e60 <thread_sleep+0x84>)
 * Note that this function could sleep for longer than the specified delay if
 * other threads are running.  When the timer expires, this thread will
 * be placed at the head of the run queue.
 */
void thread_sleep(lk_time_t delay)
{
    4dde:	b5f0      	push	{r4, r5, r6, r7, r14}
    4de0:	681c      	ldr	r4, [r3, #0]
    timer_t timer;

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    4de2:	4a20      	ldr	r2, [pc, #128]	; (4e64 <thread_sleep+0x88>)
    4de4:	6823      	ldr	r3, [r4, #0]
 * Note that this function could sleep for longer than the specified delay if
 * other threads are running.  When the timer expires, this thread will
 * be placed at the head of the run queue.
 */
void thread_sleep(lk_time_t delay)
{
    4de6:	b08b      	sub	sp, #44	; 0x2c
    timer_t timer;

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    4de8:	4293      	cmp	r3, r2
 * Note that this function could sleep for longer than the specified delay if
 * other threads are running.  When the timer expires, this thread will
 * be placed at the head of the run queue.
 */
void thread_sleep(lk_time_t delay)
{
    4dea:	4607      	mov	r7, r0
    timer_t timer;

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    4dec:	d007      	beq.n	4dfe <thread_sleep+0x22>
    4dee:	4b1e      	ldr	r3, [pc, #120]	; (4e68 <thread_sleep+0x8c>)
    4df0:	4670      	mov	r0, r14
    4df2:	9300      	str	r3, [sp, #0]
    4df4:	491d      	ldr	r1, [pc, #116]	; (4e6c <thread_sleep+0x90>)
    4df6:	4a1e      	ldr	r2, [pc, #120]	; (4e70 <thread_sleep+0x94>)
    4df8:	f240 330a 	movw	r3, #778	; 0x30a
    4dfc:	e009      	b.n	4e12 <thread_sleep+0x36>
    DEBUG_ASSERT(current_thread->state == THREAD_RUNNING);
    4dfe:	7e23      	ldrb	r3, [r4, #24]
    4e00:	2b02      	cmp	r3, #2
    4e02:	d008      	beq.n	4e16 <thread_sleep+0x3a>
    4e04:	4b1b      	ldr	r3, [pc, #108]	; (4e74 <thread_sleep+0x98>)
    4e06:	4919      	ldr	r1, [pc, #100]	; (4e6c <thread_sleep+0x90>)
    4e08:	4a19      	ldr	r2, [pc, #100]	; (4e70 <thread_sleep+0x94>)
    4e0a:	9300      	str	r3, [sp, #0]
    4e0c:	4670      	mov	r0, r14
    4e0e:	f240 330b 	movw	r3, #779	; 0x30b
    4e12:	f006 fb4f 	bl	b4b4 <_panic>
    return (t->flags & THREAD_FLAG_REAL_TIME) && t->priority > DEFAULT_PRIORITY;
}

static bool thread_is_idle(thread_t *t)
{
    return !!(t->flags & THREAD_FLAG_IDLE);
    4e16:	6a23      	ldr	r3, [r4, #32]

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    DEBUG_ASSERT(current_thread->state == THREAD_RUNNING);
    DEBUG_ASSERT(!thread_is_idle(current_thread));
    4e18:	f013 0610 	ands.w	r6, r3, #16
    4e1c:	d007      	beq.n	4e2e <thread_sleep+0x52>
    4e1e:	4b16      	ldr	r3, [pc, #88]	; (4e78 <thread_sleep+0x9c>)
    4e20:	4670      	mov	r0, r14
    4e22:	9300      	str	r3, [sp, #0]
    4e24:	4911      	ldr	r1, [pc, #68]	; (4e6c <thread_sleep+0x90>)
    4e26:	4a12      	ldr	r2, [pc, #72]	; (4e70 <thread_sleep+0x94>)
    4e28:	f44f 7343 	mov.w	r3, #780	; 0x30c
    4e2c:	e7f1      	b.n	4e12 <thread_sleep+0x36>

    timer_initialize(&timer);
    4e2e:	a803      	add	r0, sp, #12
    4e30:	f000 fd9c 	bl	596c <timer_initialize>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    4e34:	4d11      	ldr	r5, [pc, #68]	; (4e7c <thread_sleep+0xa0>)
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    4e36:	a802      	add	r0, sp, #8
    4e38:	f7ff fd28 	bl	488c <arch_interrupt_save.constprop.12>
    4e3c:	2301      	movs	r3, #1

    THREAD_LOCK(state);
    timer_set_oneshot(&timer, delay, thread_sleep_handler, (void *)current_thread);
    4e3e:	a803      	add	r0, sp, #12
    4e40:	4639      	mov	r1, r7
    4e42:	4a0f      	ldr	r2, [pc, #60]	; (4e80 <thread_sleep+0xa4>)
    4e44:	602b      	str	r3, [r5, #0]
    4e46:	4623      	mov	r3, r4
    4e48:	f000 fd9c 	bl	5984 <timer_set_oneshot>
    current_thread->state = THREAD_SLEEPING;
    4e4c:	2304      	movs	r3, #4
    4e4e:	7623      	strb	r3, [r4, #24]
    thread_resched();
    4e50:	f7ff fc50 	bl	46f4 <thread_resched>
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    4e54:	9802      	ldr	r0, [sp, #8]
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    4e56:	602e      	str	r6, [r5, #0]
    4e58:	f7ff fd14 	bl	4884 <arch_interrupt_restore.constprop.11>
    THREAD_UNLOCK(state);
}
    4e5c:	b00b      	add	sp, #44	; 0x2c
    4e5e:	bdf0      	pop	{r4, r5, r6, r7, r15}
    4e60:	20000554 	.word	0x20000554
    4e64:	74687264 	.word	0x74687264
    4e68:	00010c68 	.word	0x00010c68
    4e6c:	0001076e 	.word	0x0001076e
    4e70:	00010b6e 	.word	0x00010b6e
    4e74:	00010c8e 	.word	0x00010c8e
    4e78:	00010cf7 	.word	0x00010cf7
    4e7c:	200008d4 	.word	0x200008d4
    4e80:	00004a35 	.word	0x00004a35

00004e84 <thread_init_early>:
 * @brief  Initialize threading system
 *
 * This function is called once, from kmain()
 */
void thread_init_early(void)
{
    4e84:	b538      	push	{r3, r4, r5, r14}
    4e86:	2300      	movs	r3, #0
    4e88:	4913      	ldr	r1, [pc, #76]	; (4ed8 <thread_init_early+0x54>)
    4e8a:	18ca      	adds	r2, r1, r3
#define LIST_INITIAL_VALUE(list) { &(list), &(list) }
#define LIST_INITIAL_CLEARED_VALUE { NULL, NULL }

static inline void list_initialize(struct list_node *list)
{
    list->prev = list->next = list;
    4e8c:	6052      	str	r2, [r2, #4]
    4e8e:	505a      	str	r2, [r3, r1]
    4e90:	3308      	adds	r3, #8
    int i;

    DEBUG_ASSERT(arch_curr_cpu_num() == 0);

    /* initialize the run queues */
    for (i=0; i < NUM_PRIORITIES; i++)
    4e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4e96:	d1f7      	bne.n	4e88 <thread_init_early+0x4>
    /* initialize the thread list */
    list_initialize(&thread_list);

    /* create a thread to cover the current running state */
    thread_t *t = idle_thread(0);
    init_thread_struct(t, "bootstrap");
    4e98:	4c10      	ldr	r4, [pc, #64]	; (4edc <thread_init_early+0x58>)
    4e9a:	4d11      	ldr	r5, [pc, #68]	; (4ee0 <thread_init_early+0x5c>)
    4e9c:	4620      	mov	r0, r4
    4e9e:	4911      	ldr	r1, [pc, #68]	; (4ee4 <thread_init_early+0x60>)
    4ea0:	606d      	str	r5, [r5, #4]
    4ea2:	602d      	str	r5, [r5, #0]
    4ea4:	f7ff fc12 	bl	46cc <init_thread_struct>

    /* half construct this thread, since we're already running */
    t->priority = HIGHEST_PRIORITY;
    4ea8:	231f      	movs	r3, #31
    4eaa:	6163      	str	r3, [r4, #20]
    t->state = THREAD_RUNNING;
    4eac:	2302      	movs	r3, #2
    4eae:	7623      	strb	r3, [r4, #24]
    t->flags = THREAD_FLAG_DETACHED;
    4eb0:	2301      	movs	r3, #1
    4eb2:	6223      	str	r3, [r4, #32]
 * @defgroup  wait  Wait Queue
 * @{
 */
void wait_queue_init(wait_queue_t *wait)
{
    *wait = (wait_queue_t)WAIT_QUEUE_INITIAL_VALUE(*wait);
    4eb4:	4b0c      	ldr	r3, [pc, #48]	; (4ee8 <thread_init_early+0x64>)
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    4eb6:	686a      	ldr	r2, [r5, #4]
    4eb8:	64a3      	str	r3, [r4, #72]	; 0x48
    4eba:	f104 034c 	add.w	r3, r4, #76	; 0x4c
    4ebe:	64e3      	str	r3, [r4, #76]	; 0x4c
    4ec0:	6523      	str	r3, [r4, #80]	; 0x50
    4ec2:	2300      	movs	r3, #0
    4ec4:	6563      	str	r3, [r4, #84]	; 0x54
    item->prev = list;
    4ec6:	4623      	mov	r3, r4
    4ec8:	f843 5f04 	str.w	r5, [r3, #4]!
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    4ecc:	60a2      	str	r2, [r4, #8]
    item->prev = list;
    list->next->prev = item;
    4ece:	6013      	str	r3, [r2, #0]
    list->next = item;
    4ed0:	606b      	str	r3, [r5, #4]
}

static inline void set_current_thread(struct thread *t)
{
    _current_thread = t;
    4ed2:	4b06      	ldr	r3, [pc, #24]	; (4eec <thread_init_early+0x68>)
    4ed4:	601c      	str	r4, [r3, #0]
    4ed6:	bd38      	pop	{r3, r4, r5, r15}
    4ed8:	200007d0 	.word	0x200007d0
    4edc:	20000758 	.word	0x20000758
    4ee0:	200008d8 	.word	0x200008d8
    4ee4:	00010d45 	.word	0x00010d45
    4ee8:	77616974 	.word	0x77616974
    4eec:	20000554 	.word	0x20000554

00004ef0 <thread_init>:
 * @brief Complete thread initialization
 *
 * This function is called once at boot time
 */
void thread_init(void)
{
    4ef0:	4770      	bx	r14
	...

00004ef4 <thread_set_name>:
/* use a global pointer to store the current_thread */
extern struct thread *_current_thread;

static inline struct thread *get_current_thread(void)
{
    return _current_thread;
    4ef4:	4b03      	ldr	r3, [pc, #12]	; (4f04 <thread_set_name+0x10>)

/**
 * @brief Change name of current thread
 */
void thread_set_name(const char *name)
{
    4ef6:	4601      	mov	r1, r0
    thread_t *current_thread = get_current_thread();
    strlcpy(current_thread->name, name, sizeof(current_thread->name));
    4ef8:	6818      	ldr	r0, [r3, #0]
    4efa:	2220      	movs	r2, #32
    4efc:	3058      	adds	r0, #88	; 0x58
    4efe:	f007 bcf7 	b.w	c8f0 <strlcpy>
    4f02:	bf00      	nop
    4f04:	20000554 	.word	0x20000554

00004f08 <thread_become_idle>:
 * This function marks the current thread as the idle thread -- the one which
 * executes when there is nothing else to do.  This function does not return.
 * This function is called once at boot time.
 */
void thread_become_idle(void)
{
    4f08:	b507      	push	{r0, r1, r2, r14}
    4f0a:	4674      	mov	r4, r14
    DEBUG_ASSERT(arch_ints_disabled());
    4f0c:	f7ff fbd8 	bl	46c0 <arch_ints_disabled>
    4f10:	b940      	cbnz	r0, 4f24 <thread_become_idle+0x1c>
    4f12:	4b0d      	ldr	r3, [pc, #52]	; (4f48 <thread_become_idle+0x40>)
    4f14:	4620      	mov	r0, r4
    4f16:	9300      	str	r3, [sp, #0]
    4f18:	490c      	ldr	r1, [pc, #48]	; (4f4c <thread_become_idle+0x44>)
    4f1a:	4a0d      	ldr	r2, [pc, #52]	; (4f50 <thread_become_idle+0x48>)
    4f1c:	f44f 735c 	mov.w	r3, #880	; 0x370
    4f20:	f006 fac8 	bl	b4b4 <_panic>
    4f24:	4b0b      	ldr	r3, [pc, #44]	; (4f54 <thread_become_idle+0x4c>)
#if WITH_SMP
    char name[16];
    snprintf(name, sizeof(name), "idle %d", arch_curr_cpu_num());
    thread_set_name(name);
#else
    thread_set_name("idle");
    4f26:	480c      	ldr	r0, [pc, #48]	; (4f58 <thread_become_idle+0x50>)
    4f28:	681c      	ldr	r4, [r3, #0]
    4f2a:	f7ff ffe3 	bl	4ef4 <thread_set_name>
#endif

    /* mark ourself as idle */
    t->priority = IDLE_PRIORITY;
    4f2e:	2300      	movs	r3, #0
    4f30:	6163      	str	r3, [r4, #20]
    t->flags |= THREAD_FLAG_IDLE;
    4f32:	6a23      	ldr	r3, [r4, #32]
    4f34:	f043 0310 	orr.w	r3, r3, #16
    4f38:	6223      	str	r3, [r4, #32]

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
    4f3a:	b662      	cpsie	i
    mp_set_curr_cpu_active(true);
    mp_set_cpu_idle(arch_curr_cpu_num());

    /* enable interrupts and start the scheduler */
    arch_enable_ints();
    thread_yield();
    4f3c:	f7ff fe5c 	bl	4bf8 <thread_yield>
}

static void idle_thread_routine(void)
{
    for (;;)
        arch_idle();
    4f40:	f7fb fbf0 	bl	724 <arch_idle>
    4f44:	e7fc      	b.n	4f40 <thread_become_idle+0x38>
    4f46:	bf00      	nop
    4f48:	0000ff09 	.word	0x0000ff09
    4f4c:	0001076e 	.word	0x0001076e
    4f50:	00010b6e 	.word	0x00010b6e
    4f54:	20000554 	.word	0x20000554
    4f58:	0000fde1 	.word	0x0000fde1

00004f5c <dump_thread>:
}
/**
 * @brief  Dump debugging info about the specified thread.
 */
void dump_thread(thread_t *t)
{
    4f5c:	b510      	push	{r4, r14}
    4f5e:	4604      	mov	r4, r0
    dprintf(INFO, "dump_thread: t %p (%s)\n", t, t->name);
    4f60:	4621      	mov	r1, r4
    4f62:	f104 0258 	add.w	r2, r4, #88	; 0x58
    4f66:	4816      	ldr	r0, [pc, #88]	; (4fc0 <dump_thread+0x64>)
    4f68:	f007 fc8e 	bl	c888 <_printf>
#if WITH_SMP
    dprintf(INFO, "\tstate %s, curr_cpu %d, pinned_cpu %d, priority %d, remaining quantum %d\n",
            thread_state_to_str(t->state), t->curr_cpu, t->pinned_cpu, t->priority, t->remaining_quantum);
#else
    dprintf(INFO, "\tstate %s, priority %d, remaining quantum %d\n",
    4f6c:	7e23      	ldrb	r3, [r4, #24]
    4f6e:	4815      	ldr	r0, [pc, #84]	; (4fc4 <dump_thread+0x68>)
    4f70:	2b05      	cmp	r3, #5
    4f72:	bf96      	itet	ls
    4f74:	4a14      	ldrls	r2, [pc, #80]	; (4fc8 <dump_thread+0x6c>)
    4f76:	4915      	ldrhi	r1, [pc, #84]	; (4fcc <dump_thread+0x70>)
    4f78:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
    4f7c:	6962      	ldr	r2, [r4, #20]
    4f7e:	69e3      	ldr	r3, [r4, #28]
    4f80:	f007 fc82 	bl	c888 <_printf>
            thread_state_to_str(t->state), t->priority, t->remaining_quantum);
#endif
#ifdef THREAD_STACK_HIGHWATER
    dprintf(INFO, "\tstack %p, stack_size %zd, stack_used %zd\n",
    4f84:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4f86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    size_t i;

    stack_base = t->stack;
    stack_size = t->stack_size;

    for (i = 0; i < stack_size; i++) {
    4f88:	2300      	movs	r3, #0
    4f8a:	4293      	cmp	r3, r2
    4f8c:	d002      	beq.n	4f94 <dump_thread+0x38>
        if (stack_base[i] != STACK_DEBUG_BYTE)
    4f8e:	5cc8      	ldrb	r0, [r1, r3]
    4f90:	2899      	cmp	r0, #153	; 0x99
    4f92:	d013      	beq.n	4fbc <dump_thread+0x60>
#else
    dprintf(INFO, "\tstate %s, priority %d, remaining quantum %d\n",
            thread_state_to_str(t->state), t->priority, t->remaining_quantum);
#endif
#ifdef THREAD_STACK_HIGHWATER
    dprintf(INFO, "\tstack %p, stack_size %zd, stack_used %zd\n",
    4f94:	1ad3      	subs	r3, r2, r3
    4f96:	480e      	ldr	r0, [pc, #56]	; (4fd0 <dump_thread+0x74>)
    4f98:	f007 fc76 	bl	c888 <_printf>
            t->stack, t->stack_size, thread_stack_used(t));
#else
    dprintf(INFO, "\tstack %p, stack_size %zd\n", t->stack, t->stack_size);
#endif
    dprintf(INFO, "\tentry %p, arg %p, flags 0x%x\n", t->entry, t->arg, t->flags);
    4f9c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    4f9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4fa0:	6a23      	ldr	r3, [r4, #32]
    4fa2:	480c      	ldr	r0, [pc, #48]	; (4fd4 <dump_thread+0x78>)
    4fa4:	f007 fc70 	bl	c888 <_printf>
    dprintf(INFO, "\twait queue %p, wait queue ret %d\n", t->blocking_wait_queue, t->wait_queue_block_ret);
    4fa8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4faa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4fac:	480a      	ldr	r0, [pc, #40]	; (4fd8 <dump_thread+0x7c>)
    4fae:	f007 fc6b 	bl	c888 <_printf>
    for (i=0; i < MAX_TLS_ENTRY; i++) {
        dprintf(INFO, " 0x%lx", t->tls[i]);
    }
    dprintf(INFO, "\n");
#endif
    arch_dump_thread(t);
    4fb2:	4620      	mov	r0, r4
}
    4fb4:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
    for (i=0; i < MAX_TLS_ENTRY; i++) {
        dprintf(INFO, " 0x%lx", t->tls[i]);
    }
    dprintf(INFO, "\n");
#endif
    arch_dump_thread(t);
    4fb8:	f7fb bd94 	b.w	ae4 <arch_dump_thread>
    size_t i;

    stack_base = t->stack;
    stack_size = t->stack_size;

    for (i = 0; i < stack_size; i++) {
    4fbc:	3301      	adds	r3, #1
    4fbe:	e7e4      	b.n	4f8a <dump_thread+0x2e>
    4fc0:	00010d5c 	.word	0x00010d5c
    4fc4:	00010d74 	.word	0x00010d74
    4fc8:	00010fb4 	.word	0x00010fb4
    4fcc:	00010d57 	.word	0x00010d57
    4fd0:	00010da2 	.word	0x00010da2
    4fd4:	00010dcd 	.word	0x00010dcd
    4fd8:	00010dec 	.word	0x00010dec

00004fdc <dump_all_threads>:

/**
 * @brief  Dump debugging info about all threads
 */
void dump_all_threads(void)
{
    4fdc:	b573      	push	{r0, r1, r4, r5, r6, r14}
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    4fde:	a801      	add	r0, sp, #4
    4fe0:	f7ff fc54 	bl	488c <arch_interrupt_save.constprop.12>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    4fe4:	4a12      	ldr	r2, [pc, #72]	; (5030 <dump_all_threads+0x54>)
    4fe6:	2301      	movs	r3, #1
    4fe8:	6013      	str	r3, [r2, #0]
    thread_t *t;

    THREAD_LOCK(state);
    list_for_every_entry(&thread_list, t, thread_t, thread_list_node) {
    4fea:	4b12      	ldr	r3, [pc, #72]	; (5034 <dump_all_threads+0x58>)
    4fec:	4615      	mov	r5, r2
    4fee:	685c      	ldr	r4, [r3, #4]
    4ff0:	461e      	mov	r6, r3
    4ff2:	3c04      	subs	r4, #4
    4ff4:	1d23      	adds	r3, r4, #4
    4ff6:	429e      	cmp	r6, r3
    4ff8:	d012      	beq.n	5020 <dump_all_threads+0x44>
        if (t->magic != THREAD_MAGIC) {
    4ffa:	6822      	ldr	r2, [r4, #0]
    4ffc:	4b0e      	ldr	r3, [pc, #56]	; (5038 <dump_all_threads+0x5c>)
    4ffe:	429a      	cmp	r2, r3
    5000:	d008      	beq.n	5014 <dump_all_threads+0x38>
            dprintf(INFO, "bad magic on thread struct %p, aborting.\n", t);
    5002:	4621      	mov	r1, r4
    5004:	480d      	ldr	r0, [pc, #52]	; (503c <dump_all_threads+0x60>)
    5006:	f007 fc3f 	bl	c888 <_printf>
            hexdump(t, sizeof(thread_t));
    500a:	4620      	mov	r0, r4
    500c:	2178      	movs	r1, #120	; 0x78
    500e:	f006 fa65 	bl	b4dc <hexdump>
            break;
    5012:	e005      	b.n	5020 <dump_all_threads+0x44>
        }
        dump_thread(t);
    5014:	4620      	mov	r0, r4
    5016:	f7ff ffa1 	bl	4f5c <dump_thread>
void dump_all_threads(void)
{
    thread_t *t;

    THREAD_LOCK(state);
    list_for_every_entry(&thread_list, t, thread_t, thread_list_node) {
    501a:	68a4      	ldr	r4, [r4, #8]
    501c:	3c04      	subs	r4, #4
    501e:	e7e9      	b.n	4ff4 <dump_all_threads+0x18>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5020:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    5022:	9801      	ldr	r0, [sp, #4]
    5024:	602b      	str	r3, [r5, #0]
    5026:	f7ff fc2d 	bl	4884 <arch_interrupt_restore.constprop.11>
            break;
        }
        dump_thread(t);
    }
    THREAD_UNLOCK(state);
}
    502a:	b002      	add	sp, #8
    502c:	bd70      	pop	{r4, r5, r6, r15}
    502e:	bf00      	nop
    5030:	200008d4 	.word	0x200008d4
    5034:	200008d8 	.word	0x200008d8
    5038:	74687264 	.word	0x74687264
    503c:	00010e0f 	.word	0x00010e0f

00005040 <wait_queue_init>:
 * @defgroup  wait  Wait Queue
 * @{
 */
void wait_queue_init(wait_queue_t *wait)
{
    *wait = (wait_queue_t)WAIT_QUEUE_INITIAL_VALUE(*wait);
    5040:	4a03      	ldr	r2, [pc, #12]	; (5050 <wait_queue_init+0x10>)
    5042:	1d03      	adds	r3, r0, #4
    5044:	e880 000c 	stmia.w	r0, {r2, r3}
    5048:	6083      	str	r3, [r0, #8]
    504a:	2300      	movs	r3, #0
    504c:	60c3      	str	r3, [r0, #12]
    504e:	4770      	bx	r14
    5050:	77616974 	.word	0x77616974

00005054 <wait_queue_block>:
 *
 * @return ERR_TIMED_OUT on timeout, else returns the return
 * value specified when the queue was woken by wait_queue_wake_one().
 */
status_t wait_queue_block(wait_queue_t *wait, lk_time_t timeout)
{
    5054:	b5f0      	push	{r4, r5, r6, r7, r14}
/* use a global pointer to store the current_thread */
extern struct thread *_current_thread;

static inline struct thread *get_current_thread(void)
{
    return _current_thread;
    5056:	4b30      	ldr	r3, [pc, #192]	; (5118 <wait_queue_block+0xc4>)
    timer_t timer;

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    5058:	4a30      	ldr	r2, [pc, #192]	; (511c <wait_queue_block+0xc8>)
    505a:	681c      	ldr	r4, [r3, #0]
    505c:	6803      	ldr	r3, [r0, #0]
 *
 * @return ERR_TIMED_OUT on timeout, else returns the return
 * value specified when the queue was woken by wait_queue_wake_one().
 */
status_t wait_queue_block(wait_queue_t *wait, lk_time_t timeout)
{
    505e:	b08b      	sub	sp, #44	; 0x2c
    timer_t timer;

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    5060:	4293      	cmp	r3, r2
    5062:	4677      	mov	r7, r14
 *
 * @return ERR_TIMED_OUT on timeout, else returns the return
 * value specified when the queue was woken by wait_queue_wake_one().
 */
status_t wait_queue_block(wait_queue_t *wait, lk_time_t timeout)
{
    5064:	4605      	mov	r5, r0
    5066:	460e      	mov	r6, r1
    timer_t timer;

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    5068:	d007      	beq.n	507a <wait_queue_block+0x26>
    506a:	4b2d      	ldr	r3, [pc, #180]	; (5120 <wait_queue_block+0xcc>)
    506c:	4670      	mov	r0, r14
    506e:	9300      	str	r3, [sp, #0]
    5070:	492c      	ldr	r1, [pc, #176]	; (5124 <wait_queue_block+0xd0>)
    5072:	4a2d      	ldr	r2, [pc, #180]	; (5128 <wait_queue_block+0xd4>)
    5074:	f240 434c 	movw	r3, #1100	; 0x44c
    5078:	e009      	b.n	508e <wait_queue_block+0x3a>
    DEBUG_ASSERT(current_thread->state == THREAD_RUNNING);
    507a:	7e23      	ldrb	r3, [r4, #24]
    507c:	2b02      	cmp	r3, #2
    507e:	d008      	beq.n	5092 <wait_queue_block+0x3e>
    5080:	4b2a      	ldr	r3, [pc, #168]	; (512c <wait_queue_block+0xd8>)
    5082:	4928      	ldr	r1, [pc, #160]	; (5124 <wait_queue_block+0xd0>)
    5084:	4a28      	ldr	r2, [pc, #160]	; (5128 <wait_queue_block+0xd4>)
    5086:	9300      	str	r3, [sp, #0]
    5088:	4670      	mov	r0, r14
    508a:	f240 434d 	movw	r3, #1101	; 0x44d
    508e:	f006 fa11 	bl	b4b4 <_panic>
    DEBUG_ASSERT(arch_ints_disabled());
    5092:	f7ff fb15 	bl	46c0 <arch_ints_disabled>
    5096:	b938      	cbnz	r0, 50a8 <wait_queue_block+0x54>
    5098:	4b25      	ldr	r3, [pc, #148]	; (5130 <wait_queue_block+0xdc>)
    509a:	4638      	mov	r0, r7
    509c:	9300      	str	r3, [sp, #0]
    509e:	4921      	ldr	r1, [pc, #132]	; (5124 <wait_queue_block+0xd0>)
    50a0:	4a21      	ldr	r2, [pc, #132]	; (5128 <wait_queue_block+0xd4>)
    50a2:	f240 434e 	movw	r3, #1102	; 0x44e
    50a6:	e7f2      	b.n	508e <wait_queue_block+0x3a>
    DEBUG_ASSERT(spin_lock_held(&thread_lock));
    50a8:	4b22      	ldr	r3, [pc, #136]	; (5134 <wait_queue_block+0xe0>)
    50aa:	681b      	ldr	r3, [r3, #0]
    50ac:	b93b      	cbnz	r3, 50be <wait_queue_block+0x6a>
    50ae:	4b22      	ldr	r3, [pc, #136]	; (5138 <wait_queue_block+0xe4>)
    50b0:	4638      	mov	r0, r7
    50b2:	9300      	str	r3, [sp, #0]
    50b4:	491b      	ldr	r1, [pc, #108]	; (5124 <wait_queue_block+0xd0>)
    50b6:	4a1c      	ldr	r2, [pc, #112]	; (5128 <wait_queue_block+0xd4>)
    50b8:	f240 434f 	movw	r3, #1103	; 0x44f
    50bc:	e7e7      	b.n	508e <wait_queue_block+0x3a>

    if (timeout == 0)
    50be:	b336      	cbz	r6, 510e <wait_queue_block+0xba>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    50c0:	462b      	mov	r3, r5
    50c2:	f853 2f04 	ldr.w	r2, [r3, #4]!
        return ERR_TIMED_OUT;

    list_add_tail(&wait->list, &current_thread->queue_node);
    50c6:	f104 010c 	add.w	r1, r4, #12
    50ca:	60e2      	str	r2, [r4, #12]
    item->next = list;
    50cc:	6123      	str	r3, [r4, #16]
    wait->count++;
    50ce:	68eb      	ldr	r3, [r5, #12]
    list->prev->next = item;
    50d0:	686a      	ldr	r2, [r5, #4]
    50d2:	3301      	adds	r3, #1
    50d4:	6051      	str	r1, [r2, #4]
    50d6:	60eb      	str	r3, [r5, #12]
    current_thread->state = THREAD_BLOCKED;
    50d8:	2303      	movs	r3, #3
    list->prev = item;
    50da:	6069      	str	r1, [r5, #4]
    50dc:	7623      	strb	r3, [r4, #24]
    current_thread->blocking_wait_queue = wait;
    current_thread->wait_queue_block_ret = NO_ERROR;

    /* if the timeout is nonzero or noninfinite, set a callback to yank us out of the queue */
    if (timeout != INFINITE_TIME) {
    50de:	1c71      	adds	r1, r6, #1

    list_add_tail(&wait->list, &current_thread->queue_node);
    wait->count++;
    current_thread->state = THREAD_BLOCKED;
    current_thread->blocking_wait_queue = wait;
    current_thread->wait_queue_block_ret = NO_ERROR;
    50e0:	f04f 0300 	mov.w	r3, #0
        return ERR_TIMED_OUT;

    list_add_tail(&wait->list, &current_thread->queue_node);
    wait->count++;
    current_thread->state = THREAD_BLOCKED;
    current_thread->blocking_wait_queue = wait;
    50e4:	6265      	str	r5, [r4, #36]	; 0x24
    current_thread->wait_queue_block_ret = NO_ERROR;
    50e6:	62a3      	str	r3, [r4, #40]	; 0x28

    /* if the timeout is nonzero or noninfinite, set a callback to yank us out of the queue */
    if (timeout != INFINITE_TIME) {
    50e8:	d008      	beq.n	50fc <wait_queue_block+0xa8>
        timer_initialize(&timer);
    50ea:	a803      	add	r0, sp, #12
    50ec:	f000 fc3e 	bl	596c <timer_initialize>
        timer_set_oneshot(&timer, timeout, wait_queue_timeout_handler, (void *)current_thread);
    50f0:	a803      	add	r0, sp, #12
    50f2:	4631      	mov	r1, r6
    50f4:	4a11      	ldr	r2, [pc, #68]	; (513c <wait_queue_block+0xe8>)
    50f6:	4623      	mov	r3, r4
    50f8:	f000 fc44 	bl	5984 <timer_set_oneshot>
    }

    thread_resched();
    50fc:	f7ff fafa 	bl	46f4 <thread_resched>

    /* we don't really know if the timer fired or not, so it's better safe to try to cancel it */
    if (timeout != INFINITE_TIME) {
    5100:	3601      	adds	r6, #1
    5102:	d002      	beq.n	510a <wait_queue_block+0xb6>
        timer_cancel(&timer);
    5104:	a803      	add	r0, sp, #12
    5106:	f000 fc55 	bl	59b4 <timer_cancel>
    }

    return current_thread->wait_queue_block_ret;
    510a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    510c:	e001      	b.n	5112 <wait_queue_block+0xbe>
    DEBUG_ASSERT(current_thread->state == THREAD_RUNNING);
    DEBUG_ASSERT(arch_ints_disabled());
    DEBUG_ASSERT(spin_lock_held(&thread_lock));

    if (timeout == 0)
        return ERR_TIMED_OUT;
    510e:	f06f 000c 	mvn.w	r0, #12
    if (timeout != INFINITE_TIME) {
        timer_cancel(&timer);
    }

    return current_thread->wait_queue_block_ret;
}
    5112:	b00b      	add	sp, #44	; 0x2c
    5114:	bdf0      	pop	{r4, r5, r6, r7, r15}
    5116:	bf00      	nop
    5118:	20000554 	.word	0x20000554
    511c:	77616974 	.word	0x77616974
    5120:	00010e39 	.word	0x00010e39
    5124:	0001076e 	.word	0x0001076e
    5128:	00010b6e 	.word	0x00010b6e
    512c:	00010c8e 	.word	0x00010c8e
    5130:	0000ff09 	.word	0x0000ff09
    5134:	200008d4 	.word	0x200008d4
    5138:	00010b7e 	.word	0x00010b7e
    513c:	00005731 	.word	0x00005731

00005140 <thread_join>:
        return err;
    return thread_resume(t);
}

status_t thread_join(thread_t *t, int *retcode, lk_time_t timeout)
{
    5140:	e92d 47ff 	stmdb	r13!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r14}
    5144:	4692      	mov	r10, r2
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    5146:	6803      	ldr	r3, [r0, #0]
    5148:	4a3f      	ldr	r2, [pc, #252]	; (5248 <thread_join+0x108>)
    514a:	4675      	mov	r5, r14
    514c:	4293      	cmp	r3, r2
        return err;
    return thread_resume(t);
}

status_t thread_join(thread_t *t, int *retcode, lk_time_t timeout)
{
    514e:	4604      	mov	r4, r0
    5150:	460f      	mov	r7, r1
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    5152:	d007      	beq.n	5164 <thread_join+0x24>
    5154:	4b3d      	ldr	r3, [pc, #244]	; (524c <thread_join+0x10c>)
    5156:	4670      	mov	r0, r14
    5158:	9300      	str	r3, [sp, #0]
    515a:	493d      	ldr	r1, [pc, #244]	; (5250 <thread_join+0x110>)
    515c:	4a3d      	ldr	r2, [pc, #244]	; (5254 <thread_join+0x114>)
    515e:	f240 1343 	movw	r3, #323	; 0x143
    5162:	e02f      	b.n	51c4 <thread_join+0x84>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5164:	4e3c      	ldr	r6, [pc, #240]	; (5258 <thread_join+0x118>)
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    5166:	a803      	add	r0, sp, #12
    5168:	f7ff fb90 	bl	488c <arch_interrupt_save.constprop.12>
    516c:	2301      	movs	r3, #1
    516e:	6033      	str	r3, [r6, #0]

    THREAD_LOCK(state);

    if (t->flags & THREAD_FLAG_DETACHED) {
    5170:	6a23      	ldr	r3, [r4, #32]
    5172:	46b0      	mov	r8, r6
    5174:	f013 0901 	ands.w	r9, r3, #1
    5178:	d007      	beq.n	518a <thread_join+0x4a>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    517a:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    517c:	9803      	ldr	r0, [sp, #12]
    517e:	6033      	str	r3, [r6, #0]
    5180:	f7ff fb80 	bl	4884 <arch_interrupt_restore.constprop.11>
        /* the thread is detached, go ahead and exit */
        THREAD_UNLOCK(state);
        return ERR_THREAD_DETACHED;
    5184:	f06f 0021 	mvn.w	r0, #33	; 0x21
    5188:	e05b      	b.n	5242 <thread_join+0x102>
    }

    /* wait for the thread to die */
    if (t->state != THREAD_DEATH) {
    518a:	7e23      	ldrb	r3, [r4, #24]
    518c:	2b05      	cmp	r3, #5
    518e:	d00e      	beq.n	51ae <thread_join+0x6e>
        status_t err = wait_queue_block(&t->retcode_wait_queue, timeout);
    5190:	4651      	mov	r1, r10
    5192:	f104 0048 	add.w	r0, r4, #72	; 0x48
    5196:	f7ff ff5d 	bl	5054 <wait_queue_block>
        if (err < 0) {
    519a:	f1b0 0a00 	subs.w	r10, r0, #0
    519e:	da06      	bge.n	51ae <thread_join+0x6e>
    51a0:	9803      	ldr	r0, [sp, #12]
    51a2:	f8c6 9000 	str.w	r9, [r6]
    51a6:	f7ff fb6d 	bl	4884 <arch_interrupt_restore.constprop.11>
            THREAD_UNLOCK(state);
            return err;
    51aa:	4650      	mov	r0, r10
    51ac:	e049      	b.n	5242 <thread_join+0x102>
        }
    }

    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    51ae:	6823      	ldr	r3, [r4, #0]
    51b0:	4a25      	ldr	r2, [pc, #148]	; (5248 <thread_join+0x108>)
    51b2:	4293      	cmp	r3, r2
    51b4:	d008      	beq.n	51c8 <thread_join+0x88>
    51b6:	4b25      	ldr	r3, [pc, #148]	; (524c <thread_join+0x10c>)
    51b8:	4925      	ldr	r1, [pc, #148]	; (5250 <thread_join+0x110>)
    51ba:	4a26      	ldr	r2, [pc, #152]	; (5254 <thread_join+0x114>)
    51bc:	9300      	str	r3, [sp, #0]
    51be:	4628      	mov	r0, r5
    51c0:	f44f 73ab 	mov.w	r3, #342	; 0x156
    51c4:	f006 f976 	bl	b4b4 <_panic>
    DEBUG_ASSERT(t->state == THREAD_DEATH);
    51c8:	7e23      	ldrb	r3, [r4, #24]
    51ca:	2b05      	cmp	r3, #5
    51cc:	d007      	beq.n	51de <thread_join+0x9e>
    51ce:	4b23      	ldr	r3, [pc, #140]	; (525c <thread_join+0x11c>)
    51d0:	4628      	mov	r0, r5
    51d2:	9300      	str	r3, [sp, #0]
    51d4:	491e      	ldr	r1, [pc, #120]	; (5250 <thread_join+0x110>)
    51d6:	4a1f      	ldr	r2, [pc, #124]	; (5254 <thread_join+0x114>)
    51d8:	f240 1357 	movw	r3, #343	; 0x157
    51dc:	e7f2      	b.n	51c4 <thread_join+0x84>
    DEBUG_ASSERT(t->blocking_wait_queue == NULL);
    51de:	6a63      	ldr	r3, [r4, #36]	; 0x24
    51e0:	b13b      	cbz	r3, 51f2 <thread_join+0xb2>
    51e2:	4b1f      	ldr	r3, [pc, #124]	; (5260 <thread_join+0x120>)
    51e4:	4628      	mov	r0, r5
    51e6:	9300      	str	r3, [sp, #0]
    51e8:	4919      	ldr	r1, [pc, #100]	; (5250 <thread_join+0x110>)
    51ea:	4a1a      	ldr	r2, [pc, #104]	; (5254 <thread_join+0x114>)
    51ec:	f44f 73ac 	mov.w	r3, #344	; 0x158
    51f0:	e7e8      	b.n	51c4 <thread_join+0x84>
    item->prev = item->next = 0;
}

static inline bool list_in_list(struct list_node *item)
{
    if (item->prev == 0 && item->next == 0)
    51f2:	68e3      	ldr	r3, [r4, #12]
    51f4:	b90b      	cbnz	r3, 51fa <thread_join+0xba>
    51f6:	6923      	ldr	r3, [r4, #16]
    51f8:	b13b      	cbz	r3, 520a <thread_join+0xca>
    DEBUG_ASSERT(!list_in_list(&t->queue_node));
    51fa:	4b1a      	ldr	r3, [pc, #104]	; (5264 <thread_join+0x124>)
    51fc:	4628      	mov	r0, r5
    51fe:	9300      	str	r3, [sp, #0]
    5200:	4913      	ldr	r1, [pc, #76]	; (5250 <thread_join+0x110>)
    5202:	4a14      	ldr	r2, [pc, #80]	; (5254 <thread_join+0x114>)
    5204:	f240 1359 	movw	r3, #345	; 0x159
    5208:	e7dc      	b.n	51c4 <thread_join+0x84>

    /* save the return code */
    if (retcode)
    520a:	b10f      	cbz	r7, 5210 <thread_join+0xd0>
        *retcode = t->retcode;
    520c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    520e:	603b      	str	r3, [r7, #0]

    /* remove it from the master thread list */
    list_delete(&t->thread_list_node);
    5210:	1d20      	adds	r0, r4, #4
    5212:	f7ff fa43 	bl	469c <list_delete>

    /* clear the structure's magic */
    t->magic = 0;
    5216:	2300      	movs	r3, #0
    5218:	6023      	str	r3, [r4, #0]
    521a:	9803      	ldr	r0, [sp, #12]
    521c:	f8c8 3000 	str.w	r3, [r8]
    5220:	f7ff fb30 	bl	4884 <arch_interrupt_restore.constprop.11>

    THREAD_UNLOCK(state);

    /* free its stack and the thread structure itself */
    if (t->flags & THREAD_FLAG_FREE_STACK && t->stack)
    5224:	6a23      	ldr	r3, [r4, #32]
    5226:	0798      	lsls	r0, r3, #30
    5228:	d503      	bpl.n	5232 <thread_join+0xf2>
    522a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    522c:	b108      	cbz	r0, 5232 <thread_join+0xf2>
        free(t->stack);
    522e:	f006 fb09 	bl	b844 <free>

    if (t->flags & THREAD_FLAG_FREE_STRUCT)
    5232:	6a20      	ldr	r0, [r4, #32]
    5234:	f010 0004 	ands.w	r0, r0, #4
    5238:	d003      	beq.n	5242 <thread_join+0x102>
        free(t);
    523a:	4620      	mov	r0, r4
    523c:	f006 fb02 	bl	b844 <free>

    return NO_ERROR;
    5240:	2000      	movs	r0, #0
}
    5242:	b004      	add	sp, #16
    5244:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
    5248:	74687264 	.word	0x74687264
    524c:	00010bfc 	.word	0x00010bfc
    5250:	0001076e 	.word	0x0001076e
    5254:	00010b6e 	.word	0x00010b6e
    5258:	200008d4 	.word	0x200008d4
    525c:	00010e59 	.word	0x00010e59
    5260:	00010e72 	.word	0x00010e72
    5264:	00010c2e 	.word	0x00010c2e

00005268 <wait_queue_wake_one>:
    5268:	4b2e      	ldr	r3, [pc, #184]	; (5324 <wait_queue_wake_one+0xbc>)
 * from wait_queue_block().
 *
 * @return  The number of threads woken (zero or one)
 */
int wait_queue_wake_one(wait_queue_t *wait, bool reschedule, status_t wait_queue_error)
{
    526a:	e92d 43f7 	stmdb	r13!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r14}
    526e:	4691      	mov	r9, r2
    5270:	f8d3 8000 	ldr.w	r8, [r3]
    thread_t *t;
    int ret = 0;

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    5274:	4a2c      	ldr	r2, [pc, #176]	; (5328 <wait_queue_wake_one+0xc0>)
    5276:	6803      	ldr	r3, [r0, #0]
    5278:	4676      	mov	r6, r14
    527a:	4293      	cmp	r3, r2
 * from wait_queue_block().
 *
 * @return  The number of threads woken (zero or one)
 */
int wait_queue_wake_one(wait_queue_t *wait, bool reschedule, status_t wait_queue_error)
{
    527c:	4604      	mov	r4, r0
    527e:	460f      	mov	r7, r1
    thread_t *t;
    int ret = 0;

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    5280:	d007      	beq.n	5292 <wait_queue_wake_one+0x2a>
    5282:	4b2a      	ldr	r3, [pc, #168]	; (532c <wait_queue_wake_one+0xc4>)
    5284:	4670      	mov	r0, r14
    5286:	9300      	str	r3, [sp, #0]
    5288:	4929      	ldr	r1, [pc, #164]	; (5330 <wait_queue_wake_one+0xc8>)
    528a:	4a2a      	ldr	r2, [pc, #168]	; (5334 <wait_queue_wake_one+0xcc>)
    528c:	f240 437f 	movw	r3, #1151	; 0x47f
    5290:	e009      	b.n	52a6 <wait_queue_wake_one+0x3e>
    DEBUG_ASSERT(arch_ints_disabled());
    5292:	f7ff fa15 	bl	46c0 <arch_ints_disabled>
    5296:	b940      	cbnz	r0, 52aa <wait_queue_wake_one+0x42>
    5298:	4b27      	ldr	r3, [pc, #156]	; (5338 <wait_queue_wake_one+0xd0>)
    529a:	4925      	ldr	r1, [pc, #148]	; (5330 <wait_queue_wake_one+0xc8>)
    529c:	4a25      	ldr	r2, [pc, #148]	; (5334 <wait_queue_wake_one+0xcc>)
    529e:	9300      	str	r3, [sp, #0]
    52a0:	4630      	mov	r0, r6
    52a2:	f44f 6390 	mov.w	r3, #1152	; 0x480
    52a6:	f006 f905 	bl	b4b4 <_panic>
    DEBUG_ASSERT(spin_lock_held(&thread_lock));
    52aa:	4b24      	ldr	r3, [pc, #144]	; (533c <wait_queue_wake_one+0xd4>)
    52ac:	681b      	ldr	r3, [r3, #0]
    52ae:	b93b      	cbnz	r3, 52c0 <wait_queue_wake_one+0x58>
    52b0:	4b23      	ldr	r3, [pc, #140]	; (5340 <wait_queue_wake_one+0xd8>)
    52b2:	4630      	mov	r0, r6
    52b4:	9300      	str	r3, [sp, #0]
    52b6:	491e      	ldr	r1, [pc, #120]	; (5330 <wait_queue_wake_one+0xc8>)
    52b8:	4a1e      	ldr	r2, [pc, #120]	; (5334 <wait_queue_wake_one+0xcc>)
    52ba:	f240 4381 	movw	r3, #1153	; 0x481
    52be:	e7f2      	b.n	52a6 <wait_queue_wake_one+0x3e>
    item->prev = item->next = 0;
}

static inline struct list_node *list_remove_head(struct list_node *list)
{
    if (list->next != list) {
    52c0:	68a5      	ldr	r5, [r4, #8]

    t = list_remove_head_type(&wait->list, thread_t, queue_node);
    52c2:	1d23      	adds	r3, r4, #4
    52c4:	429d      	cmp	r5, r3
    52c6:	d101      	bne.n	52cc <wait_queue_wake_one+0x64>
 * @return  The number of threads woken (zero or one)
 */
int wait_queue_wake_one(wait_queue_t *wait, bool reschedule, status_t wait_queue_error)
{
    thread_t *t;
    int ret = 0;
    52c8:	2000      	movs	r0, #0
    52ca:	e027      	b.n	531c <wait_queue_wake_one+0xb4>
        struct list_node *item = list->next;
        list_delete(item);
    52cc:	4628      	mov	r0, r5
    52ce:	f7ff f9e5 	bl	469c <list_delete>

    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    DEBUG_ASSERT(arch_ints_disabled());
    DEBUG_ASSERT(spin_lock_held(&thread_lock));

    t = list_remove_head_type(&wait->list, thread_t, queue_node);
    52d2:	2d00      	cmp	r5, #0
    52d4:	d0f8      	beq.n	52c8 <wait_queue_wake_one+0x60>
    if (t) {
    52d6:	3d0c      	subs	r5, #12
    52d8:	d0f6      	beq.n	52c8 <wait_queue_wake_one+0x60>
        wait->count--;
    52da:	68e3      	ldr	r3, [r4, #12]
    52dc:	3b01      	subs	r3, #1
    52de:	60e3      	str	r3, [r4, #12]
        DEBUG_ASSERT(t->state == THREAD_BLOCKED);
    52e0:	7e2b      	ldrb	r3, [r5, #24]
    52e2:	2b03      	cmp	r3, #3
    52e4:	d007      	beq.n	52f6 <wait_queue_wake_one+0x8e>
    52e6:	4b17      	ldr	r3, [pc, #92]	; (5344 <wait_queue_wake_one+0xdc>)
    52e8:	4630      	mov	r0, r6
    52ea:	9300      	str	r3, [sp, #0]
    52ec:	4910      	ldr	r1, [pc, #64]	; (5330 <wait_queue_wake_one+0xc8>)
    52ee:	4a11      	ldr	r2, [pc, #68]	; (5334 <wait_queue_wake_one+0xcc>)
    52f0:	f240 4386 	movw	r3, #1158	; 0x486
    52f4:	e7d7      	b.n	52a6 <wait_queue_wake_one+0x3e>
        t->state = THREAD_READY;
    52f6:	2301      	movs	r3, #1
        t->wait_queue_block_ret = wait_queue_error;
        t->blocking_wait_queue = NULL;
    52f8:	2200      	movs	r2, #0

    t = list_remove_head_type(&wait->list, thread_t, queue_node);
    if (t) {
        wait->count--;
        DEBUG_ASSERT(t->state == THREAD_BLOCKED);
        t->state = THREAD_READY;
    52fa:	762b      	strb	r3, [r5, #24]
        t->wait_queue_block_ret = wait_queue_error;
    52fc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
        t->blocking_wait_queue = NULL;
    5300:	626a      	str	r2, [r5, #36]	; 0x24

        /* if we're instructed to reschedule, stick the current thread on the head
         * of the run queue first, so that the newly awakened thread gets a chance to run
         * before the current one, but the current one doesn't get unnecessarilly punished.
         */
        if (reschedule) {
    5302:	b127      	cbz	r7, 530e <wait_queue_wake_one+0xa6>
            current_thread->state = THREAD_READY;
    5304:	f888 3018 	strb.w	r3, [r8, #24]
            insert_in_run_queue_head(current_thread);
    5308:	4640      	mov	r0, r8
    530a:	f7ff fb31 	bl	4970 <insert_in_run_queue_head>
        }
        insert_in_run_queue_head(t);
    530e:	4628      	mov	r0, r5
    5310:	f7ff fb2e 	bl	4970 <insert_in_run_queue_head>
        mp_reschedule(MP_CPU_ALL_BUT_LOCAL, 0);
        if (reschedule) {
    5314:	b10f      	cbz	r7, 531a <wait_queue_wake_one+0xb2>
            thread_resched();
    5316:	f7ff f9ed 	bl	46f4 <thread_resched>
        }
        ret = 1;
    531a:	2001      	movs	r0, #1

    }

    return ret;
}
    531c:	b003      	add	sp, #12
    531e:	e8bd 83f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r15}
    5322:	bf00      	nop
    5324:	20000554 	.word	0x20000554
    5328:	77616974 	.word	0x77616974
    532c:	00010e39 	.word	0x00010e39
    5330:	0001076e 	.word	0x0001076e
    5334:	00010b6e 	.word	0x00010b6e
    5338:	0000ff09 	.word	0x0000ff09
    533c:	200008d4 	.word	0x200008d4
    5340:	00010b7e 	.word	0x00010b7e
    5344:	00010d17 	.word	0x00010d17

00005348 <wait_queue_wake_all>:
    5348:	4b37      	ldr	r3, [pc, #220]	; (5428 <wait_queue_wake_all+0xe0>)
 * from wait_queue_block().
 *
 * @return  The number of threads woken (zero or one)
 */
int wait_queue_wake_all(wait_queue_t *wait, bool reschedule, status_t wait_queue_error)
{
    534a:	e92d 43f7 	stmdb	r13!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r14}
    534e:	4691      	mov	r9, r2
    5350:	681e      	ldr	r6, [r3, #0]
    thread_t *t;
    int ret = 0;

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    5352:	4a36      	ldr	r2, [pc, #216]	; (542c <wait_queue_wake_all+0xe4>)
    5354:	6803      	ldr	r3, [r0, #0]
    5356:	4675      	mov	r5, r14
    5358:	4293      	cmp	r3, r2
 * from wait_queue_block().
 *
 * @return  The number of threads woken (zero or one)
 */
int wait_queue_wake_all(wait_queue_t *wait, bool reschedule, status_t wait_queue_error)
{
    535a:	4604      	mov	r4, r0
    535c:	4688      	mov	r8, r1
    thread_t *t;
    int ret = 0;

    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    535e:	d007      	beq.n	5370 <wait_queue_wake_all+0x28>
    5360:	4b33      	ldr	r3, [pc, #204]	; (5430 <wait_queue_wake_all+0xe8>)
    5362:	4670      	mov	r0, r14
    5364:	9300      	str	r3, [sp, #0]
    5366:	4933      	ldr	r1, [pc, #204]	; (5434 <wait_queue_wake_all+0xec>)
    5368:	4a33      	ldr	r2, [pc, #204]	; (5438 <wait_queue_wake_all+0xf0>)
    536a:	f240 43b5 	movw	r3, #1205	; 0x4b5
    536e:	e009      	b.n	5384 <wait_queue_wake_all+0x3c>
    DEBUG_ASSERT(arch_ints_disabled());
    5370:	f7ff f9a6 	bl	46c0 <arch_ints_disabled>
    5374:	b940      	cbnz	r0, 5388 <wait_queue_wake_all+0x40>
    5376:	4b31      	ldr	r3, [pc, #196]	; (543c <wait_queue_wake_all+0xf4>)
    5378:	492e      	ldr	r1, [pc, #184]	; (5434 <wait_queue_wake_all+0xec>)
    537a:	4a2f      	ldr	r2, [pc, #188]	; (5438 <wait_queue_wake_all+0xf0>)
    537c:	9300      	str	r3, [sp, #0]
    537e:	4628      	mov	r0, r5
    5380:	f240 43b6 	movw	r3, #1206	; 0x4b6
    5384:	f006 f896 	bl	b4b4 <_panic>
    DEBUG_ASSERT(spin_lock_held(&thread_lock));
    5388:	4b2d      	ldr	r3, [pc, #180]	; (5440 <wait_queue_wake_all+0xf8>)
    538a:	681b      	ldr	r3, [r3, #0]
    538c:	b93b      	cbnz	r3, 539e <wait_queue_wake_all+0x56>
    538e:	4b2d      	ldr	r3, [pc, #180]	; (5444 <wait_queue_wake_all+0xfc>)
    5390:	4628      	mov	r0, r5
    5392:	9300      	str	r3, [sp, #0]
    5394:	4927      	ldr	r1, [pc, #156]	; (5434 <wait_queue_wake_all+0xec>)
    5396:	4a28      	ldr	r2, [pc, #160]	; (5438 <wait_queue_wake_all+0xf0>)
    5398:	f240 43b7 	movw	r3, #1207	; 0x4b7
    539c:	e7f2      	b.n	5384 <wait_queue_wake_all+0x3c>

    if (reschedule && wait->count > 0) {
    539e:	f1b8 0f00 	cmp.w	r8, #0
    53a2:	d007      	beq.n	53b4 <wait_queue_wake_all+0x6c>
    53a4:	68e3      	ldr	r3, [r4, #12]
    53a6:	2b00      	cmp	r3, #0
    53a8:	dd04      	ble.n	53b4 <wait_queue_wake_all+0x6c>
        /* if we're instructed to reschedule, stick the current thread on the head
         * of the run queue first, so that the newly awakened threads get a chance to run
         * before the current one, but the current one doesn't get unnecessarilly punished.
         */
        current_thread->state = THREAD_READY;
    53aa:	2301      	movs	r3, #1
    53ac:	7633      	strb	r3, [r6, #24]
        insert_in_run_queue_head(current_thread);
    53ae:	4630      	mov	r0, r6
    53b0:	f7ff fade 	bl	4970 <insert_in_run_queue_head>
 * from wait_queue_block().
 *
 * @return  The number of threads woken (zero or one)
 */
int wait_queue_wake_all(wait_queue_t *wait, bool reschedule, status_t wait_queue_error)
{
    53b4:	2700      	movs	r7, #0
    item->prev = item->next = 0;
}

static inline struct list_node *list_remove_head(struct list_node *list)
{
    if (list->next != list) {
    53b6:	68a6      	ldr	r6, [r4, #8]
        current_thread->state = THREAD_READY;
        insert_in_run_queue_head(current_thread);
    }

    /* pop all the threads off the wait queue into the run queue */
    while ((t = list_remove_head_type(&wait->list, thread_t, queue_node))) {
    53b8:	1d23      	adds	r3, r4, #4
    53ba:	429e      	cmp	r6, r3
    53bc:	d109      	bne.n	53d2 <wait_queue_wake_all+0x8a>

        insert_in_run_queue_head(t);
        ret++;
    }

    DEBUG_ASSERT(wait->count == 0);
    53be:	68e3      	ldr	r3, [r4, #12]
    53c0:	b33b      	cbz	r3, 5412 <wait_queue_wake_all+0xca>
    53c2:	4b21      	ldr	r3, [pc, #132]	; (5448 <wait_queue_wake_all+0x100>)
    53c4:	4628      	mov	r0, r5
    53c6:	9300      	str	r3, [sp, #0]
    53c8:	491a      	ldr	r1, [pc, #104]	; (5434 <wait_queue_wake_all+0xec>)
    53ca:	4a1b      	ldr	r2, [pc, #108]	; (5438 <wait_queue_wake_all+0xf0>)
    53cc:	f240 43ce 	movw	r3, #1230	; 0x4ce
    53d0:	e7d8      	b.n	5384 <wait_queue_wake_all+0x3c>
        struct list_node *item = list->next;
        list_delete(item);
    53d2:	4630      	mov	r0, r6
    53d4:	f7ff f962 	bl	469c <list_delete>
        current_thread->state = THREAD_READY;
        insert_in_run_queue_head(current_thread);
    }

    /* pop all the threads off the wait queue into the run queue */
    while ((t = list_remove_head_type(&wait->list, thread_t, queue_node))) {
    53d8:	2e00      	cmp	r6, #0
    53da:	d0f0      	beq.n	53be <wait_queue_wake_all+0x76>
    53dc:	f1b6 000c 	subs.w	r0, r6, #12
    53e0:	d0ed      	beq.n	53be <wait_queue_wake_all+0x76>
        wait->count--;
    53e2:	68e3      	ldr	r3, [r4, #12]
    53e4:	3b01      	subs	r3, #1
    53e6:	60e3      	str	r3, [r4, #12]
        DEBUG_ASSERT(t->state == THREAD_BLOCKED);
    53e8:	7e03      	ldrb	r3, [r0, #24]
    53ea:	2b03      	cmp	r3, #3
    53ec:	d007      	beq.n	53fe <wait_queue_wake_all+0xb6>
    53ee:	4b17      	ldr	r3, [pc, #92]	; (544c <wait_queue_wake_all+0x104>)
    53f0:	4628      	mov	r0, r5
    53f2:	9300      	str	r3, [sp, #0]
    53f4:	490f      	ldr	r1, [pc, #60]	; (5434 <wait_queue_wake_all+0xec>)
    53f6:	4a10      	ldr	r2, [pc, #64]	; (5438 <wait_queue_wake_all+0xf0>)
    53f8:	f240 43c5 	movw	r3, #1221	; 0x4c5
    53fc:	e7c2      	b.n	5384 <wait_queue_wake_all+0x3c>
        t->state = THREAD_READY;
    53fe:	2301      	movs	r3, #1
    5400:	7603      	strb	r3, [r0, #24]
        t->wait_queue_block_ret = wait_queue_error;
        t->blocking_wait_queue = NULL;
    5402:	2300      	movs	r3, #0
    /* pop all the threads off the wait queue into the run queue */
    while ((t = list_remove_head_type(&wait->list, thread_t, queue_node))) {
        wait->count--;
        DEBUG_ASSERT(t->state == THREAD_BLOCKED);
        t->state = THREAD_READY;
        t->wait_queue_block_ret = wait_queue_error;
    5404:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
        t->blocking_wait_queue = NULL;
    5408:	6243      	str	r3, [r0, #36]	; 0x24

        insert_in_run_queue_head(t);
    540a:	f7ff fab1 	bl	4970 <insert_in_run_queue_head>
        ret++;
    540e:	3701      	adds	r7, #1
    5410:	e7d1      	b.n	53b6 <wait_queue_wake_all+0x6e>
    }

    DEBUG_ASSERT(wait->count == 0);

    if (ret > 0) {
    5412:	b127      	cbz	r7, 541e <wait_queue_wake_all+0xd6>
        mp_reschedule(MP_CPU_ALL_BUT_LOCAL, 0);
        if (reschedule) {
    5414:	f1b8 0f00 	cmp.w	r8, #0
    5418:	d001      	beq.n	541e <wait_queue_wake_all+0xd6>
            thread_resched();
    541a:	f7ff f96b 	bl	46f4 <thread_resched>
        }
    }

    return ret;
}
    541e:	4638      	mov	r0, r7
    5420:	b003      	add	sp, #12
    5422:	e8bd 83f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r15}
    5426:	bf00      	nop
    5428:	20000554 	.word	0x20000554
    542c:	77616974 	.word	0x77616974
    5430:	00010e39 	.word	0x00010e39
    5434:	0001076e 	.word	0x0001076e
    5438:	00010b6e 	.word	0x00010b6e
    543c:	0000ff09 	.word	0x0000ff09
    5440:	200008d4 	.word	0x200008d4
    5444:	00010b7e 	.word	0x00010b7e
    5448:	00010e91 	.word	0x00010e91
    544c:	00010d17 	.word	0x00010d17

00005450 <thread_detach>:

    return NO_ERROR;
}

status_t thread_detach(thread_t *t)
{
    5450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    5452:	6803      	ldr	r3, [r0, #0]
    5454:	4a1a      	ldr	r2, [pc, #104]	; (54c0 <thread_detach+0x70>)

    return NO_ERROR;
}

status_t thread_detach(thread_t *t)
{
    5456:	4604      	mov	r4, r0
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    5458:	4293      	cmp	r3, r2
    545a:	d008      	beq.n	546e <thread_detach+0x1e>
    545c:	4b19      	ldr	r3, [pc, #100]	; (54c4 <thread_detach+0x74>)
    545e:	4670      	mov	r0, r14
    5460:	9300      	str	r3, [sp, #0]
    5462:	4919      	ldr	r1, [pc, #100]	; (54c8 <thread_detach+0x78>)
    5464:	4a19      	ldr	r2, [pc, #100]	; (54cc <thread_detach+0x7c>)
    5466:	f240 1373 	movw	r3, #371	; 0x173
    546a:	f006 f823 	bl	b4b4 <_panic>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    546e:	a803      	add	r0, sp, #12

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5470:	4d17      	ldr	r5, [pc, #92]	; (54d0 <thread_detach+0x80>)
    5472:	f7ff fa0b 	bl	488c <arch_interrupt_save.constprop.12>
    5476:	2301      	movs	r3, #1

    THREAD_LOCK(state);

    /* if another thread is blocked inside thread_join() on this thread,
     * wake them up with a specific return code */
    wait_queue_wake_all(&t->retcode_wait_queue, false, ERR_THREAD_DETACHED);
    5478:	f104 0048 	add.w	r0, r4, #72	; 0x48
    547c:	2100      	movs	r1, #0
    547e:	f06f 0221 	mvn.w	r2, #33	; 0x21
    5482:	602b      	str	r3, [r5, #0]
    5484:	f7ff ff60 	bl	5348 <wait_queue_wake_all>

    /* if it's already dead, then just do what join would have and exit */
    if (t->state == THREAD_DEATH) {
    5488:	7e23      	ldrb	r3, [r4, #24]
    548a:	9803      	ldr	r0, [sp, #12]
    548c:	2b05      	cmp	r3, #5
    548e:	6a23      	ldr	r3, [r4, #32]
    5490:	d10c      	bne.n	54ac <thread_detach+0x5c>
        t->flags &= ~THREAD_FLAG_DETACHED; /* makes sure thread_join continues */
    5492:	f023 0301 	bic.w	r3, r3, #1
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5496:	2600      	movs	r6, #0
    5498:	6223      	str	r3, [r4, #32]
    549a:	602e      	str	r6, [r5, #0]
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    549c:	f7ff f9f2 	bl	4884 <arch_interrupt_restore.constprop.11>
        THREAD_UNLOCK(state);
        return thread_join(t, NULL, 0);
    54a0:	4620      	mov	r0, r4
    54a2:	4631      	mov	r1, r6
    54a4:	4632      	mov	r2, r6
    54a6:	f7ff fe4b 	bl	5140 <thread_join>
    54aa:	e007      	b.n	54bc <thread_detach+0x6c>
    } else {
        t->flags |= THREAD_FLAG_DETACHED;
    54ac:	f043 0301 	orr.w	r3, r3, #1
    54b0:	6223      	str	r3, [r4, #32]
    54b2:	2400      	movs	r4, #0
    54b4:	602c      	str	r4, [r5, #0]
    54b6:	f7ff f9e5 	bl	4884 <arch_interrupt_restore.constprop.11>
        THREAD_UNLOCK(state);
        return NO_ERROR;
    54ba:	4620      	mov	r0, r4
    }
}
    54bc:	b004      	add	sp, #16
    54be:	bd70      	pop	{r4, r5, r6, r15}
    54c0:	74687264 	.word	0x74687264
    54c4:	00010bfc 	.word	0x00010bfc
    54c8:	0001076e 	.word	0x0001076e
    54cc:	00010b6e 	.word	0x00010b6e
    54d0:	200008d4 	.word	0x200008d4

000054d4 <thread_detach_and_resume>:

    return NO_ERROR;
}

status_t thread_detach_and_resume(thread_t *t)
{
    54d4:	b510      	push	{r4, r14}
    54d6:	4604      	mov	r4, r0
    status_t err;
    err = thread_detach(t);
    54d8:	f7ff ffba 	bl	5450 <thread_detach>
    if (err < 0)
    54dc:	2800      	cmp	r0, #0
    54de:	db04      	blt.n	54ea <thread_detach_and_resume+0x16>
        return err;
    return thread_resume(t);
    54e0:	4620      	mov	r0, r4
}
    54e2:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
{
    status_t err;
    err = thread_detach(t);
    if (err < 0)
        return err;
    return thread_resume(t);
    54e6:	f7ff bbd1 	b.w	4c8c <thread_resume>
}
    54ea:	bd10      	pop	{r4, r15}

000054ec <thread_exit>:
 * Current thread exits with the specified return code.
 *
 * This function does not return.
 */
void thread_exit(int retcode)
{
    54ec:	b58f      	push	{r0, r1, r2, r3, r7, r14}
    54ee:	4b2b      	ldr	r3, [pc, #172]	; (559c <thread_exit+0xb0>)
    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    54f0:	4a2b      	ldr	r2, [pc, #172]	; (55a0 <thread_exit+0xb4>)
    54f2:	681c      	ldr	r4, [r3, #0]
    54f4:	4675      	mov	r5, r14
    54f6:	6823      	ldr	r3, [r4, #0]
 * Current thread exits with the specified return code.
 *
 * This function does not return.
 */
void thread_exit(int retcode)
{
    54f8:	4607      	mov	r7, r0
    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    54fa:	4293      	cmp	r3, r2
    54fc:	d007      	beq.n	550e <thread_exit+0x22>
    54fe:	4b29      	ldr	r3, [pc, #164]	; (55a4 <thread_exit+0xb8>)
    5500:	4670      	mov	r0, r14
    5502:	9300      	str	r3, [sp, #0]
    5504:	4928      	ldr	r1, [pc, #160]	; (55a8 <thread_exit+0xbc>)
    5506:	4a29      	ldr	r2, [pc, #164]	; (55ac <thread_exit+0xc0>)
    5508:	f44f 73c9 	mov.w	r3, #402	; 0x192
    550c:	e009      	b.n	5522 <thread_exit+0x36>
    DEBUG_ASSERT(current_thread->state == THREAD_RUNNING);
    550e:	7e23      	ldrb	r3, [r4, #24]
    5510:	2b02      	cmp	r3, #2
    5512:	d008      	beq.n	5526 <thread_exit+0x3a>
    5514:	4b26      	ldr	r3, [pc, #152]	; (55b0 <thread_exit+0xc4>)
    5516:	4924      	ldr	r1, [pc, #144]	; (55a8 <thread_exit+0xbc>)
    5518:	4a24      	ldr	r2, [pc, #144]	; (55ac <thread_exit+0xc0>)
    551a:	9300      	str	r3, [sp, #0]
    551c:	4670      	mov	r0, r14
    551e:	f240 1393 	movw	r3, #403	; 0x193
    5522:	f005 ffc7 	bl	b4b4 <_panic>
    return (t->flags & THREAD_FLAG_REAL_TIME) && t->priority > DEFAULT_PRIORITY;
}

static bool thread_is_idle(thread_t *t)
{
    return !!(t->flags & THREAD_FLAG_IDLE);
    5526:	6a23      	ldr	r3, [r4, #32]
{
    thread_t *current_thread = get_current_thread();

    DEBUG_ASSERT(current_thread->magic == THREAD_MAGIC);
    DEBUG_ASSERT(current_thread->state == THREAD_RUNNING);
    DEBUG_ASSERT(!thread_is_idle(current_thread));
    5528:	f013 0610 	ands.w	r6, r3, #16
    552c:	d007      	beq.n	553e <thread_exit+0x52>
    552e:	4b21      	ldr	r3, [pc, #132]	; (55b4 <thread_exit+0xc8>)
    5530:	4670      	mov	r0, r14
    5532:	9300      	str	r3, [sp, #0]
    5534:	491c      	ldr	r1, [pc, #112]	; (55a8 <thread_exit+0xbc>)
    5536:	4a1d      	ldr	r2, [pc, #116]	; (55ac <thread_exit+0xc0>)
    5538:	f44f 73ca 	mov.w	r3, #404	; 0x194
    553c:	e7f1      	b.n	5522 <thread_exit+0x36>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    553e:	a803      	add	r0, sp, #12
    5540:	f7ff f9a4 	bl	488c <arch_interrupt_save.constprop.12>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5544:	4b1c      	ldr	r3, [pc, #112]	; (55b8 <thread_exit+0xcc>)
    /* enter the dead state */
    current_thread->state = THREAD_DEATH;
    current_thread->retcode = retcode;

    /* if we're detached, then do our teardown here */
    if (current_thread->flags & THREAD_FLAG_DETACHED) {
    5546:	6a21      	ldr	r1, [r4, #32]
    5548:	2201      	movs	r2, #1
    554a:	601a      	str	r2, [r3, #0]
    554c:	4011      	ands	r1, r2
//  dprintf("thread_exit: current %p\n", current_thread);

    THREAD_LOCK(state);

    /* enter the dead state */
    current_thread->state = THREAD_DEATH;
    554e:	f04f 0305 	mov.w	r3, #5
    5552:	7623      	strb	r3, [r4, #24]
    current_thread->retcode = retcode;
    5554:	6467      	str	r7, [r4, #68]	; 0x44

    /* if we're detached, then do our teardown here */
    if (current_thread->flags & THREAD_FLAG_DETACHED) {
    5556:	d015      	beq.n	5584 <thread_exit+0x98>
        /* remove it from the master thread list */
        list_delete(&current_thread->thread_list_node);
    5558:	1d20      	adds	r0, r4, #4
    555a:	f7ff f89f 	bl	469c <list_delete>

        /* clear the structure's magic */
        current_thread->magic = 0;

        /* free its stack and the thread structure itself */
        if (current_thread->flags & THREAD_FLAG_FREE_STACK && current_thread->stack) {
    555e:	6a23      	ldr	r3, [r4, #32]
    if (current_thread->flags & THREAD_FLAG_DETACHED) {
        /* remove it from the master thread list */
        list_delete(&current_thread->thread_list_node);

        /* clear the structure's magic */
        current_thread->magic = 0;
    5560:	6026      	str	r6, [r4, #0]

        /* free its stack and the thread structure itself */
        if (current_thread->flags & THREAD_FLAG_FREE_STACK && current_thread->stack) {
    5562:	079f      	lsls	r7, r3, #30
    5564:	d507      	bpl.n	5576 <thread_exit+0x8a>
    5566:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5568:	b128      	cbz	r0, 5576 <thread_exit+0x8a>
            heap_delayed_free(current_thread->stack);
    556a:	f006 fae1 	bl	bb30 <heap_delayed_free>

            /* make sure its not going to get a bounds check performed on the half-freed stack */
            current_thread->flags &= ~THREAD_FLAG_DEBUG_STACK_BOUNDS_CHECK;
    556e:	6a23      	ldr	r3, [r4, #32]
    5570:	f023 0320 	bic.w	r3, r3, #32
    5574:	6223      	str	r3, [r4, #32]
        }

        if (current_thread->flags & THREAD_FLAG_FREE_STRUCT)
    5576:	6a23      	ldr	r3, [r4, #32]
    5578:	075e      	lsls	r6, r3, #29
    557a:	d508      	bpl.n	558e <thread_exit+0xa2>
            heap_delayed_free(current_thread);
    557c:	4620      	mov	r0, r4
    557e:	f006 fad7 	bl	bb30 <heap_delayed_free>
    5582:	e004      	b.n	558e <thread_exit+0xa2>
    } else {
        /* signal if anyone is waiting */
        wait_queue_wake_all(&current_thread->retcode_wait_queue, false, 0);
    5584:	f104 0048 	add.w	r0, r4, #72	; 0x48
    5588:	460a      	mov	r2, r1
    558a:	f7ff fedd 	bl	5348 <wait_queue_wake_all>
    }

    /* reschedule */
    thread_resched();
    558e:	f7ff f8b1 	bl	46f4 <thread_resched>

    panic("somehow fell through thread_exit()\n");
    5592:	4628      	mov	r0, r5
    5594:	4909      	ldr	r1, [pc, #36]	; (55bc <thread_exit+0xd0>)
    5596:	f005 ff8d 	bl	b4b4 <_panic>
    559a:	bf00      	nop
    559c:	20000554 	.word	0x20000554
    55a0:	74687264 	.word	0x74687264
    55a4:	00010c68 	.word	0x00010c68
    55a8:	0001076e 	.word	0x0001076e
    55ac:	00010b6e 	.word	0x00010b6e
    55b0:	00010c8e 	.word	0x00010c8e
    55b4:	00010cf7 	.word	0x00010cf7
    55b8:	200008d4 	.word	0x200008d4
    55bc:	00010ea2 	.word	0x00010ea2

000055c0 <wait_queue_destroy>:
 *
 * If any threads were waiting on this queue, they are all woken.
 */
void wait_queue_destroy(wait_queue_t *wait, bool reschedule)
{
    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    55c0:	6803      	ldr	r3, [r0, #0]
    55c2:	4a18      	ldr	r2, [pc, #96]	; (5624 <wait_queue_destroy+0x64>)
 * @brief  Free all resources allocated in wait_queue_init()
 *
 * If any threads were waiting on this queue, they are all woken.
 */
void wait_queue_destroy(wait_queue_t *wait, bool reschedule)
{
    55c4:	b573      	push	{r0, r1, r4, r5, r6, r14}
    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    55c6:	4293      	cmp	r3, r2
    55c8:	4675      	mov	r5, r14
 * @brief  Free all resources allocated in wait_queue_init()
 *
 * If any threads were waiting on this queue, they are all woken.
 */
void wait_queue_destroy(wait_queue_t *wait, bool reschedule)
{
    55ca:	4604      	mov	r4, r0
    55cc:	460e      	mov	r6, r1
    DEBUG_ASSERT(wait->magic == WAIT_QUEUE_MAGIC);
    55ce:	d007      	beq.n	55e0 <wait_queue_destroy+0x20>
    55d0:	4b15      	ldr	r3, [pc, #84]	; (5628 <wait_queue_destroy+0x68>)
    55d2:	4670      	mov	r0, r14
    55d4:	9300      	str	r3, [sp, #0]
    55d6:	4915      	ldr	r1, [pc, #84]	; (562c <wait_queue_destroy+0x6c>)
    55d8:	4a15      	ldr	r2, [pc, #84]	; (5630 <wait_queue_destroy+0x70>)
    55da:	f240 43e1 	movw	r3, #1249	; 0x4e1
    55de:	e009      	b.n	55f4 <wait_queue_destroy+0x34>
    DEBUG_ASSERT(arch_ints_disabled());
    55e0:	f7ff f86e 	bl	46c0 <arch_ints_disabled>
    55e4:	b940      	cbnz	r0, 55f8 <wait_queue_destroy+0x38>
    55e6:	4b13      	ldr	r3, [pc, #76]	; (5634 <wait_queue_destroy+0x74>)
    55e8:	4910      	ldr	r1, [pc, #64]	; (562c <wait_queue_destroy+0x6c>)
    55ea:	4a11      	ldr	r2, [pc, #68]	; (5630 <wait_queue_destroy+0x70>)
    55ec:	9300      	str	r3, [sp, #0]
    55ee:	4628      	mov	r0, r5
    55f0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    55f4:	f005 ff5e 	bl	b4b4 <_panic>
    DEBUG_ASSERT(spin_lock_held(&thread_lock));
    55f8:	4b0f      	ldr	r3, [pc, #60]	; (5638 <wait_queue_destroy+0x78>)
    55fa:	681b      	ldr	r3, [r3, #0]
    55fc:	b93b      	cbnz	r3, 560e <wait_queue_destroy+0x4e>
    55fe:	4b0f      	ldr	r3, [pc, #60]	; (563c <wait_queue_destroy+0x7c>)
    5600:	4628      	mov	r0, r5
    5602:	9300      	str	r3, [sp, #0]
    5604:	4909      	ldr	r1, [pc, #36]	; (562c <wait_queue_destroy+0x6c>)
    5606:	4a0a      	ldr	r2, [pc, #40]	; (5630 <wait_queue_destroy+0x70>)
    5608:	f240 43e3 	movw	r3, #1251	; 0x4e3
    560c:	e7f2      	b.n	55f4 <wait_queue_destroy+0x34>

    wait_queue_wake_all(wait, reschedule, ERR_OBJECT_DESTROYED);
    560e:	4620      	mov	r0, r4
    5610:	4631      	mov	r1, r6
    5612:	f06f 020a 	mvn.w	r2, #10
    5616:	f7ff fe97 	bl	5348 <wait_queue_wake_all>
    wait->magic = 0;
    561a:	2300      	movs	r3, #0
    561c:	6023      	str	r3, [r4, #0]
}
    561e:	b002      	add	sp, #8
    5620:	bd70      	pop	{r4, r5, r6, r15}
    5622:	bf00      	nop
    5624:	77616974 	.word	0x77616974
    5628:	00010e39 	.word	0x00010e39
    562c:	0001076e 	.word	0x0001076e
    5630:	00010b6e 	.word	0x00010b6e
    5634:	0000ff09 	.word	0x0000ff09
    5638:	200008d4 	.word	0x200008d4
    563c:	00010b7e 	.word	0x00010b7e

00005640 <thread_unblock_from_wait_queue>:
 *
 * @return ERR_NOT_BLOCKED if thread was not in any wait queue.
 */
status_t thread_unblock_from_wait_queue(thread_t *t, status_t wait_queue_error)
{
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    5640:	6803      	ldr	r3, [r0, #0]
    5642:	4a30      	ldr	r2, [pc, #192]	; (5704 <thread_unblock_from_wait_queue+0xc4>)
 *   from wait_queue_block().
 *
 * @return ERR_NOT_BLOCKED if thread was not in any wait queue.
 */
status_t thread_unblock_from_wait_queue(thread_t *t, status_t wait_queue_error)
{
    5644:	b573      	push	{r0, r1, r4, r5, r6, r14}
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    5646:	4293      	cmp	r3, r2
    5648:	4675      	mov	r5, r14
 *   from wait_queue_block().
 *
 * @return ERR_NOT_BLOCKED if thread was not in any wait queue.
 */
status_t thread_unblock_from_wait_queue(thread_t *t, status_t wait_queue_error)
{
    564a:	4604      	mov	r4, r0
    564c:	460e      	mov	r6, r1
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    564e:	d007      	beq.n	5660 <thread_unblock_from_wait_queue+0x20>
    5650:	4b2d      	ldr	r3, [pc, #180]	; (5708 <thread_unblock_from_wait_queue+0xc8>)
    5652:	4670      	mov	r0, r14
    5654:	9300      	str	r3, [sp, #0]
    5656:	492d      	ldr	r1, [pc, #180]	; (570c <thread_unblock_from_wait_queue+0xcc>)
    5658:	4a2d      	ldr	r2, [pc, #180]	; (5710 <thread_unblock_from_wait_queue+0xd0>)
    565a:	f240 43f7 	movw	r3, #1271	; 0x4f7
    565e:	e009      	b.n	5674 <thread_unblock_from_wait_queue+0x34>
    DEBUG_ASSERT(arch_ints_disabled());
    5660:	f7ff f82e 	bl	46c0 <arch_ints_disabled>
    5664:	b940      	cbnz	r0, 5678 <thread_unblock_from_wait_queue+0x38>
    5666:	4b2b      	ldr	r3, [pc, #172]	; (5714 <thread_unblock_from_wait_queue+0xd4>)
    5668:	4928      	ldr	r1, [pc, #160]	; (570c <thread_unblock_from_wait_queue+0xcc>)
    566a:	4a29      	ldr	r2, [pc, #164]	; (5710 <thread_unblock_from_wait_queue+0xd0>)
    566c:	9300      	str	r3, [sp, #0]
    566e:	4628      	mov	r0, r5
    5670:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    5674:	f005 ff1e 	bl	b4b4 <_panic>
    DEBUG_ASSERT(spin_lock_held(&thread_lock));
    5678:	4b27      	ldr	r3, [pc, #156]	; (5718 <thread_unblock_from_wait_queue+0xd8>)
    567a:	681b      	ldr	r3, [r3, #0]
    567c:	b93b      	cbnz	r3, 568e <thread_unblock_from_wait_queue+0x4e>
    567e:	4b27      	ldr	r3, [pc, #156]	; (571c <thread_unblock_from_wait_queue+0xdc>)
    5680:	4628      	mov	r0, r5
    5682:	9300      	str	r3, [sp, #0]
    5684:	4921      	ldr	r1, [pc, #132]	; (570c <thread_unblock_from_wait_queue+0xcc>)
    5686:	4a22      	ldr	r2, [pc, #136]	; (5710 <thread_unblock_from_wait_queue+0xd0>)
    5688:	f240 43f9 	movw	r3, #1273	; 0x4f9
    568c:	e7f2      	b.n	5674 <thread_unblock_from_wait_queue+0x34>

    if (t->state != THREAD_BLOCKED)
    568e:	7e23      	ldrb	r3, [r4, #24]
    5690:	2b03      	cmp	r3, #3
    5692:	d123      	bne.n	56dc <thread_unblock_from_wait_queue+0x9c>
        return ERR_NOT_BLOCKED;

    DEBUG_ASSERT(t->blocking_wait_queue != NULL);
    5694:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5696:	b93b      	cbnz	r3, 56a8 <thread_unblock_from_wait_queue+0x68>
    5698:	4b21      	ldr	r3, [pc, #132]	; (5720 <thread_unblock_from_wait_queue+0xe0>)
    569a:	4628      	mov	r0, r5
    569c:	9300      	str	r3, [sp, #0]
    569e:	491b      	ldr	r1, [pc, #108]	; (570c <thread_unblock_from_wait_queue+0xcc>)
    56a0:	4a1b      	ldr	r2, [pc, #108]	; (5710 <thread_unblock_from_wait_queue+0xd0>)
    56a2:	f240 43fe 	movw	r3, #1278	; 0x4fe
    56a6:	e7e5      	b.n	5674 <thread_unblock_from_wait_queue+0x34>
    DEBUG_ASSERT(t->blocking_wait_queue->magic == WAIT_QUEUE_MAGIC);
    56a8:	681a      	ldr	r2, [r3, #0]
    56aa:	4b1e      	ldr	r3, [pc, #120]	; (5724 <thread_unblock_from_wait_queue+0xe4>)
    56ac:	429a      	cmp	r2, r3
    56ae:	d007      	beq.n	56c0 <thread_unblock_from_wait_queue+0x80>
    56b0:	4b1d      	ldr	r3, [pc, #116]	; (5728 <thread_unblock_from_wait_queue+0xe8>)
    56b2:	4628      	mov	r0, r5
    56b4:	9300      	str	r3, [sp, #0]
    56b6:	4915      	ldr	r1, [pc, #84]	; (570c <thread_unblock_from_wait_queue+0xcc>)
    56b8:	4a15      	ldr	r2, [pc, #84]	; (5710 <thread_unblock_from_wait_queue+0xd0>)
    56ba:	f240 43ff 	movw	r3, #1279	; 0x4ff
    56be:	e7d9      	b.n	5674 <thread_unblock_from_wait_queue+0x34>
    item->prev = item->next = 0;
}

static inline bool list_in_list(struct list_node *item)
{
    if (item->prev == 0 && item->next == 0)
    56c0:	68e3      	ldr	r3, [r4, #12]
    DEBUG_ASSERT(list_in_list(&t->queue_node));
    56c2:	f104 000c 	add.w	r0, r4, #12
    56c6:	b963      	cbnz	r3, 56e2 <thread_unblock_from_wait_queue+0xa2>
    56c8:	6923      	ldr	r3, [r4, #16]
    56ca:	b953      	cbnz	r3, 56e2 <thread_unblock_from_wait_queue+0xa2>
    56cc:	4b17      	ldr	r3, [pc, #92]	; (572c <thread_unblock_from_wait_queue+0xec>)
    56ce:	4628      	mov	r0, r5
    56d0:	9300      	str	r3, [sp, #0]
    56d2:	490e      	ldr	r1, [pc, #56]	; (570c <thread_unblock_from_wait_queue+0xcc>)
    56d4:	4a0e      	ldr	r2, [pc, #56]	; (5710 <thread_unblock_from_wait_queue+0xd0>)
    56d6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    56da:	e7cb      	b.n	5674 <thread_unblock_from_wait_queue+0x34>
    DEBUG_ASSERT(t->magic == THREAD_MAGIC);
    DEBUG_ASSERT(arch_ints_disabled());
    DEBUG_ASSERT(spin_lock_held(&thread_lock));

    if (t->state != THREAD_BLOCKED)
        return ERR_NOT_BLOCKED;
    56dc:	f06f 000b 	mvn.w	r0, #11
    56e0:	e00e      	b.n	5700 <thread_unblock_from_wait_queue+0xc0>

    DEBUG_ASSERT(t->blocking_wait_queue != NULL);
    DEBUG_ASSERT(t->blocking_wait_queue->magic == WAIT_QUEUE_MAGIC);
    DEBUG_ASSERT(list_in_list(&t->queue_node));

    list_delete(&t->queue_node);
    56e2:	f7fe ffdb 	bl	469c <list_delete>
    t->blocking_wait_queue->count--;
    56e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    t->blocking_wait_queue = NULL;
    56e8:	2500      	movs	r5, #0
    DEBUG_ASSERT(t->blocking_wait_queue != NULL);
    DEBUG_ASSERT(t->blocking_wait_queue->magic == WAIT_QUEUE_MAGIC);
    DEBUG_ASSERT(list_in_list(&t->queue_node));

    list_delete(&t->queue_node);
    t->blocking_wait_queue->count--;
    56ea:	68da      	ldr	r2, [r3, #12]
    t->blocking_wait_queue = NULL;
    t->state = THREAD_READY;
    t->wait_queue_block_ret = wait_queue_error;
    insert_in_run_queue_head(t);
    56ec:	4620      	mov	r0, r4
    DEBUG_ASSERT(t->blocking_wait_queue != NULL);
    DEBUG_ASSERT(t->blocking_wait_queue->magic == WAIT_QUEUE_MAGIC);
    DEBUG_ASSERT(list_in_list(&t->queue_node));

    list_delete(&t->queue_node);
    t->blocking_wait_queue->count--;
    56ee:	3a01      	subs	r2, #1
    56f0:	60da      	str	r2, [r3, #12]
    t->blocking_wait_queue = NULL;
    t->state = THREAD_READY;
    56f2:	2301      	movs	r3, #1
    DEBUG_ASSERT(t->blocking_wait_queue->magic == WAIT_QUEUE_MAGIC);
    DEBUG_ASSERT(list_in_list(&t->queue_node));

    list_delete(&t->queue_node);
    t->blocking_wait_queue->count--;
    t->blocking_wait_queue = NULL;
    56f4:	6265      	str	r5, [r4, #36]	; 0x24
    t->state = THREAD_READY;
    56f6:	7623      	strb	r3, [r4, #24]
    t->wait_queue_block_ret = wait_queue_error;
    56f8:	62a6      	str	r6, [r4, #40]	; 0x28
    insert_in_run_queue_head(t);
    56fa:	f7ff f939 	bl	4970 <insert_in_run_queue_head>
    mp_reschedule(MP_CPU_ALL_BUT_LOCAL, 0);

    return NO_ERROR;
    56fe:	4628      	mov	r0, r5
}
    5700:	b002      	add	sp, #8
    5702:	bd70      	pop	{r4, r5, r6, r15}
    5704:	74687264 	.word	0x74687264
    5708:	00010bfc 	.word	0x00010bfc
    570c:	0001076e 	.word	0x0001076e
    5710:	00010b6e 	.word	0x00010b6e
    5714:	0000ff09 	.word	0x0000ff09
    5718:	200008d4 	.word	0x200008d4
    571c:	00010b7e 	.word	0x00010b7e
    5720:	00010ec6 	.word	0x00010ec6
    5724:	77616974 	.word	0x77616974
    5728:	00010ee5 	.word	0x00010ee5
    572c:	00010c2f 	.word	0x00010c2f

00005730 <wait_queue_timeout_handler>:
{
    *wait = (wait_queue_t)WAIT_QUEUE_INITIAL_VALUE(*wait);
}

static enum handler_return wait_queue_timeout_handler(timer_t *timer, lk_time_t now, void *arg)
{
    5730:	b513      	push	{r0, r1, r4, r14}
    thread_t *thread = (thread_t *)arg;

    DEBUG_ASSERT(thread->magic == THREAD_MAGIC);
    5732:	6813      	ldr	r3, [r2, #0]
    5734:	490d      	ldr	r1, [pc, #52]	; (576c <wait_queue_timeout_handler+0x3c>)
    5736:	4670      	mov	r0, r14
    5738:	428b      	cmp	r3, r1
    573a:	d007      	beq.n	574c <wait_queue_timeout_handler+0x1c>
    573c:	4b0c      	ldr	r3, [pc, #48]	; (5770 <wait_queue_timeout_handler+0x40>)
    573e:	490d      	ldr	r1, [pc, #52]	; (5774 <wait_queue_timeout_handler+0x44>)
    5740:	9300      	str	r3, [sp, #0]
    5742:	4a0d      	ldr	r2, [pc, #52]	; (5778 <wait_queue_timeout_handler+0x48>)
    5744:	f240 4326 	movw	r3, #1062	; 0x426
    5748:	f005 feb4 	bl	b4b4 <_panic>
    574c:	4c0b      	ldr	r4, [pc, #44]	; (577c <wait_queue_timeout_handler+0x4c>)
    574e:	2301      	movs	r3, #1

    spin_lock(&thread_lock);

    enum handler_return ret = INT_NO_RESCHEDULE;
    if (thread_unblock_from_wait_queue(thread, ERR_TIMED_OUT) >= NO_ERROR) {
    5750:	4610      	mov	r0, r2
    5752:	f06f 010c 	mvn.w	r1, #12
    5756:	6023      	str	r3, [r4, #0]
    5758:	f7ff ff72 	bl	5640 <thread_unblock_from_wait_queue>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    575c:	2300      	movs	r3, #0
    }

    spin_unlock(&thread_lock);

    return ret;
}
    575e:	4298      	cmp	r0, r3
    5760:	bfb4      	ite	lt
    5762:	2000      	movlt	r0, #0
    5764:	2001      	movge	r0, #1
    5766:	6023      	str	r3, [r4, #0]
    5768:	b002      	add	sp, #8
    576a:	bd10      	pop	{r4, r15}
    576c:	74687264 	.word	0x74687264
    5770:	00010c70 	.word	0x00010c70
    5774:	0001076e 	.word	0x0001076e
    5778:	00010b6e 	.word	0x00010b6e
    577c:	200008d4 	.word	0x200008d4

00005780 <insert_timer_in_queue.constprop.3>:
void timer_initialize(timer_t *timer)
{
    *timer = (timer_t)TIMER_INITIAL_VALUE(*timer);
}

static void insert_timer_in_queue(uint cpu, timer_t *timer)
    5780:	b537      	push	{r0, r1, r2, r4, r5, r14}
    5782:	4603      	mov	r3, r0
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    5784:	f3ef 8110 	mrs	r1, PRIMASK
{
    timer_t *entry;

    DEBUG_ASSERT(arch_ints_disabled());
    5788:	07c9      	lsls	r1, r1, #31
    578a:	d407      	bmi.n	579c <insert_timer_in_queue.constprop.3+0x1c>
    578c:	4b12      	ldr	r3, [pc, #72]	; (57d8 <insert_timer_in_queue.constprop.3+0x58>)
    578e:	4670      	mov	r0, r14
    5790:	9300      	str	r3, [sp, #0]
    5792:	4912      	ldr	r1, [pc, #72]	; (57dc <insert_timer_in_queue.constprop.3+0x5c>)
    5794:	4a12      	ldr	r2, [pc, #72]	; (57e0 <insert_timer_in_queue.constprop.3+0x60>)
    5796:	2348      	movs	r3, #72	; 0x48
    5798:	f005 fe8c 	bl	b4b4 <_panic>

    LTRACEF("timer %p, cpu %u, scheduled %u, periodic %u\n", timer, cpu, timer->scheduled_time, timer->periodic_time);

    list_for_every_entry(&timers[cpu].timer_queue, entry, timer_t, node) {
    579c:	4911      	ldr	r1, [pc, #68]	; (57e4 <insert_timer_in_queue.constprop.3+0x64>)
    579e:	684a      	ldr	r2, [r1, #4]
    57a0:	3a04      	subs	r2, #4
    57a2:	1d10      	adds	r0, r2, #4
    57a4:	4288      	cmp	r0, r1
    57a6:	d00e      	beq.n	57c6 <insert_timer_in_queue.constprop.3+0x46>
        if (TIME_GT(entry->scheduled_time, timer->scheduled_time)) {
    57a8:	68d5      	ldr	r5, [r2, #12]
    57aa:	68dc      	ldr	r4, [r3, #12]
    57ac:	1b2c      	subs	r4, r5, r4
    57ae:	2c00      	cmp	r4, #0
    57b0:	dd07      	ble.n	57c2 <insert_timer_in_queue.constprop.3+0x42>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    57b2:	6854      	ldr	r4, [r2, #4]
            list_add_before(&entry->node, &timer->node);
    57b4:	1d19      	adds	r1, r3, #4
    57b6:	605c      	str	r4, [r3, #4]
    item->next = list;
    57b8:	6098      	str	r0, [r3, #8]
    list->prev->next = item;
    57ba:	6853      	ldr	r3, [r2, #4]
    57bc:	6059      	str	r1, [r3, #4]
    list->prev = item;
    57be:	6051      	str	r1, [r2, #4]
    57c0:	e007      	b.n	57d2 <insert_timer_in_queue.constprop.3+0x52>

    DEBUG_ASSERT(arch_ints_disabled());

    LTRACEF("timer %p, cpu %u, scheduled %u, periodic %u\n", timer, cpu, timer->scheduled_time, timer->periodic_time);

    list_for_every_entry(&timers[cpu].timer_queue, entry, timer_t, node) {
    57c2:	6892      	ldr	r2, [r2, #8]
    57c4:	e7ec      	b.n	57a0 <insert_timer_in_queue.constprop.3+0x20>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    57c6:	6808      	ldr	r0, [r1, #0]
            return;
        }
    }

    /* walked off the end of the list */
    list_add_tail(&timers[cpu].timer_queue, &timer->node);
    57c8:	1d1a      	adds	r2, r3, #4
    57ca:	6058      	str	r0, [r3, #4]
    item->next = list;
    57cc:	6099      	str	r1, [r3, #8]
    list->prev->next = item;
    list->prev = item;
    57ce:	600a      	str	r2, [r1, #0]

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    item->next = list;
    list->prev->next = item;
    57d0:	6042      	str	r2, [r0, #4]
}
    57d2:	b003      	add	sp, #12
    57d4:	bd30      	pop	{r4, r5, r15}
    57d6:	bf00      	nop
    57d8:	0000ff09 	.word	0x0000ff09
    57dc:	0001076e 	.word	0x0001076e
    57e0:	00010f33 	.word	0x00010f33
    57e4:	200008e0 	.word	0x200008e0

000057e8 <timer_tick>:
    spin_unlock_irqrestore(&timer_lock, state);
}

/* called at interrupt time to process any pending timers */
static enum handler_return timer_tick(void *arg, lk_time_t now)
{
    57e8:	e92d 47f3 	stmdb	r13!, {r0, r1, r4, r5, r6, r7, r8, r9, r10, r14}
    57ec:	46f0      	mov	r8, r14
    57ee:	460f      	mov	r7, r1
    57f0:	f3ef 8310 	mrs	r3, PRIMASK
    timer_t *timer;
    enum handler_return ret = INT_NO_RESCHEDULE;

    DEBUG_ASSERT(arch_ints_disabled());
    57f4:	07d8      	lsls	r0, r3, #31
    57f6:	d406      	bmi.n	5806 <timer_tick+0x1e>
    57f8:	4b2f      	ldr	r3, [pc, #188]	; (58b8 <timer_tick+0xd0>)
    57fa:	4670      	mov	r0, r14
    57fc:	9300      	str	r3, [sp, #0]
    57fe:	492f      	ldr	r1, [pc, #188]	; (58bc <timer_tick+0xd4>)
    5800:	4a2f      	ldr	r2, [pc, #188]	; (58c0 <timer_tick+0xd8>)
    5802:	23dd      	movs	r3, #221	; 0xdd
    5804:	e01f      	b.n	5846 <timer_tick+0x5e>

    THREAD_STATS_INC(timer_ints);
    5806:	4b2f      	ldr	r3, [pc, #188]	; (58c4 <timer_tick+0xdc>)

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5808:	4e2f      	ldr	r6, [pc, #188]	; (58c8 <timer_tick+0xe0>)
    580a:	6a5a      	ldr	r2, [r3, #36]	; 0x24

/* called at interrupt time to process any pending timers */
static enum handler_return timer_tick(void *arg, lk_time_t now)
{
    timer_t *timer;
    enum handler_return ret = INT_NO_RESCHEDULE;
    580c:	2500      	movs	r5, #0

    DEBUG_ASSERT(arch_ints_disabled());

    THREAD_STATS_INC(timer_ints);
    580e:	3201      	adds	r2, #1
    5810:	625a      	str	r2, [r3, #36]	; 0x24
    5812:	2201      	movs	r2, #1
    5814:	6032      	str	r2, [r6, #0]
    5816:	4699      	mov	r9, r3
    __t;\
})

static inline struct list_node *list_peek_head(struct list_node *list)
{
    if (list->next != list) {
    5818:	4a2c      	ldr	r2, [pc, #176]	; (58cc <timer_tick+0xe4>)
    581a:	6853      	ldr	r3, [r2, #4]
    581c:	4293      	cmp	r3, r2
    581e:	d040      	beq.n	58a2 <timer_tick+0xba>

    spin_lock(&timer_lock);

    for (;;) {
        /* see if there's an event to process */
        timer = list_peek_head_type(&timers[cpu].timer_queue, timer_t, node);
    5820:	2b00      	cmp	r3, #0
    5822:	d03e      	beq.n	58a2 <timer_tick+0xba>
        if (likely(timer == 0))
    5824:	1f1c      	subs	r4, r3, #4
    5826:	d03c      	beq.n	58a2 <timer_tick+0xba>
            break;
        LTRACEF("next item on timer queue %p at %u now %u (%p, arg %p)\n", timer, timer->scheduled_time, now, timer->callback, timer->arg);
        if (likely(TIME_LT(now, timer->scheduled_time)))
    5828:	68e2      	ldr	r2, [r4, #12]
    582a:	1aba      	subs	r2, r7, r2
    582c:	2a00      	cmp	r2, #0
    582e:	db38      	blt.n	58a2 <timer_tick+0xba>
            break;

        /* process it */
        LTRACEF("timer %p\n", timer);
        DEBUG_ASSERT(timer && timer->magic == TIMER_MAGIC);
    5830:	f853 2c04 	ldr.w	r2, [r3, #-4]
    5834:	4b26      	ldr	r3, [pc, #152]	; (58d0 <timer_tick+0xe8>)
    5836:	429a      	cmp	r2, r3
    5838:	d007      	beq.n	584a <timer_tick+0x62>
    583a:	4b26      	ldr	r3, [pc, #152]	; (58d4 <timer_tick+0xec>)
    583c:	491f      	ldr	r1, [pc, #124]	; (58bc <timer_tick+0xd4>)
    583e:	4a20      	ldr	r2, [pc, #128]	; (58c0 <timer_tick+0xd8>)
    5840:	9300      	str	r3, [sp, #0]
    5842:	4640      	mov	r0, r8
    5844:	23f3      	movs	r3, #243	; 0xf3
    5846:	f005 fe35 	bl	b4b4 <_panic>

#define list_add_before(entry, new_entry) list_add_tail(entry, new_entry)

static inline void list_delete(struct list_node *item)
{
    item->next->prev = item->prev;
    584a:	68a3      	ldr	r3, [r4, #8]
    584c:	6862      	ldr	r2, [r4, #4]

        bool periodic = timer->periodic_time > 0;

        LTRACEF("timer %p firing callback %p, arg %p\n", timer, timer->callback, timer->arg);
        KEVLOG_TIMER_CALL(timer->callback, timer->arg);
        if (timer->callback(timer, now, timer->arg) == INT_RESCHEDULE)
    584e:	4620      	mov	r0, r4
    5850:	601a      	str	r2, [r3, #0]
    item->prev->next = item->next;
    5852:	6862      	ldr	r2, [r4, #4]
    5854:	4639      	mov	r1, r7
    5856:	6053      	str	r3, [r2, #4]
    item->prev = item->next = 0;
    5858:	2300      	movs	r3, #0
    585a:	60a3      	str	r3, [r4, #8]
    585c:	6063      	str	r3, [r4, #4]
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    585e:	6033      	str	r3, [r6, #0]
        /* we pulled it off the list, release the list lock to handle it */
        spin_unlock(&timer_lock);

        LTRACEF("dequeued timer %p, scheduled %u periodic %u\n", timer, timer->scheduled_time, timer->periodic_time);

        THREAD_STATS_INC(timers);
    5860:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28

        bool periodic = timer->periodic_time > 0;

        LTRACEF("timer %p firing callback %p, arg %p\n", timer, timer->callback, timer->arg);
        KEVLOG_TIMER_CALL(timer->callback, timer->arg);
        if (timer->callback(timer, now, timer->arg) == INT_RESCHEDULE)
    5864:	69a2      	ldr	r2, [r4, #24]
        /* we pulled it off the list, release the list lock to handle it */
        spin_unlock(&timer_lock);

        LTRACEF("dequeued timer %p, scheduled %u periodic %u\n", timer, timer->scheduled_time, timer->periodic_time);

        THREAD_STATS_INC(timers);
    5866:	3301      	adds	r3, #1
    5868:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28

        bool periodic = timer->periodic_time > 0;

        LTRACEF("timer %p firing callback %p, arg %p\n", timer, timer->callback, timer->arg);
        KEVLOG_TIMER_CALL(timer->callback, timer->arg);
        if (timer->callback(timer, now, timer->arg) == INT_RESCHEDULE)
    586c:	6963      	ldr	r3, [r4, #20]

        LTRACEF("dequeued timer %p, scheduled %u periodic %u\n", timer, timer->scheduled_time, timer->periodic_time);

        THREAD_STATS_INC(timers);

        bool periodic = timer->periodic_time > 0;
    586e:	f8d4 a010 	ldr.w	r10, [r4, #16]

        LTRACEF("timer %p firing callback %p, arg %p\n", timer, timer->callback, timer->arg);
        KEVLOG_TIMER_CALL(timer->callback, timer->arg);
        if (timer->callback(timer, now, timer->arg) == INT_RESCHEDULE)
    5872:	4798      	blx	r3

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5874:	2301      	movs	r3, #1
            ret = INT_RESCHEDULE;
    5876:	2801      	cmp	r0, #1
    5878:	bf08      	it	eq
    587a:	2501      	moveq	r5, #1
    587c:	6033      	str	r3, [r6, #0]
        spin_lock(&timer_lock);

        /* if it was a periodic timer and it hasn't been requeued
         * by the callback put it back in the list
         */
        if (periodic && !list_in_list(&timer->node) && timer->periodic_time > 0) {
    587e:	f1ba 0f00 	cmp.w	r10, #0
    5882:	d0c9      	beq.n	5818 <timer_tick+0x30>
    item->prev = item->next = 0;
}

static inline bool list_in_list(struct list_node *item)
{
    if (item->prev == 0 && item->next == 0)
    5884:	6863      	ldr	r3, [r4, #4]
    5886:	2b00      	cmp	r3, #0
    5888:	d1c6      	bne.n	5818 <timer_tick+0x30>
    588a:	68a3      	ldr	r3, [r4, #8]
    588c:	2b00      	cmp	r3, #0
    588e:	d1c3      	bne.n	5818 <timer_tick+0x30>
    5890:	6923      	ldr	r3, [r4, #16]
    5892:	2b00      	cmp	r3, #0
    5894:	d0c0      	beq.n	5818 <timer_tick+0x30>
            LTRACEF("periodic timer, period %u\n", timer->periodic_time);
            timer->scheduled_time = now + timer->periodic_time;
    5896:	443b      	add	r3, r7
    5898:	60e3      	str	r3, [r4, #12]
            insert_timer_in_queue(cpu, timer);
    589a:	4620      	mov	r0, r4
    589c:	f7ff ff70 	bl	5780 <insert_timer_in_queue.constprop.3>
    58a0:	e7ba      	b.n	5818 <timer_tick+0x30>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    58a2:	2300      	movs	r3, #0
    58a4:	6033      	str	r3, [r6, #0]
    /* release the timer lock before calling the tick handler */
    spin_unlock(&timer_lock);

    /* let the scheduler have a shot to do quantum expiration, etc */
    /* in case of dynamic timer, the scheduler will set up a periodic timer */
    if (thread_timer_tick() == INT_RESCHEDULE)
    58a6:	f7ff fa87 	bl	4db8 <thread_timer_tick>
        ret = INT_RESCHEDULE;
    58aa:	2801      	cmp	r0, #1
    58ac:	bf08      	it	eq
    58ae:	2501      	moveq	r5, #1
#endif

    return ret;
}
    58b0:	4628      	mov	r0, r5
    58b2:	b002      	add	sp, #8
    58b4:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
    58b8:	0000ff09 	.word	0x0000ff09
    58bc:	0001076e 	.word	0x0001076e
    58c0:	00010f33 	.word	0x00010f33
    58c4:	20000728 	.word	0x20000728
    58c8:	20000900 	.word	0x20000900
    58cc:	200008e0 	.word	0x200008e0
    58d0:	74696d72 	.word	0x74696d72
    58d4:	00010f42 	.word	0x00010f42

000058d8 <arch_interrupt_save.constprop.5>:
    58d8:	f3ef 8310 	mrs	r3, PRIMASK

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    if ((flags & SPIN_LOCK_FLAG_IRQ) && !arch_ints_disabled()) {
    58dc:	07db      	lsls	r3, r3, #31
    58de:	d402      	bmi.n	58e6 <arch_interrupt_save.constprop.5+0xe>
    __asm__ volatile("cpsie i");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
    58e0:	b672      	cpsid	i
        state |= SPIN_LOCK_STATE_RESTORE_IRQ;
    58e2:	2301      	movs	r3, #1
    58e4:	e000      	b.n	58e8 <arch_interrupt_save.constprop.5+0x10>
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    58e6:	2300      	movs	r3, #0
    }
    if ((flags & SPIN_LOCK_FLAG_FIQ) && !arch_fiqs_disabled()) {
        state |= SPIN_LOCK_STATE_RESTORE_FIQ;
        arch_disable_fiqs();
    }
    *statep = state;
    58e8:	6003      	str	r3, [r0, #0]
    58ea:	4770      	bx	r14

000058ec <timer_set>:
    /* walked off the end of the list */
    list_add_tail(&timers[cpu].timer_queue, &timer->node);
}

static void timer_set(timer_t *timer, lk_time_t delay, lk_time_t period, timer_callback callback, void *arg)
{
    58ec:	e92d 41ff 	stmdb	r13!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r14}
    58f0:	4617      	mov	r7, r2
    58f2:	461d      	mov	r5, r3
    lk_time_t now;

    LTRACEF("timer %p, delay %u, period %u, callback %p, arg %p\n", timer, delay, period, callback, arg);

    DEBUG_ASSERT(timer->magic == TIMER_MAGIC);
    58f4:	6802      	ldr	r2, [r0, #0]
    58f6:	4b17      	ldr	r3, [pc, #92]	; (5954 <timer_set+0x68>)
    /* walked off the end of the list */
    list_add_tail(&timers[cpu].timer_queue, &timer->node);
}

static void timer_set(timer_t *timer, lk_time_t delay, lk_time_t period, timer_callback callback, void *arg)
{
    58f8:	4604      	mov	r4, r0
    lk_time_t now;

    LTRACEF("timer %p, delay %u, period %u, callback %p, arg %p\n", timer, delay, period, callback, arg);

    DEBUG_ASSERT(timer->magic == TIMER_MAGIC);
    58fa:	429a      	cmp	r2, r3
    /* walked off the end of the list */
    list_add_tail(&timers[cpu].timer_queue, &timer->node);
}

static void timer_set(timer_t *timer, lk_time_t delay, lk_time_t period, timer_callback callback, void *arg)
{
    58fc:	4688      	mov	r8, r1
    lk_time_t now;

    LTRACEF("timer %p, delay %u, period %u, callback %p, arg %p\n", timer, delay, period, callback, arg);

    DEBUG_ASSERT(timer->magic == TIMER_MAGIC);
    58fe:	d007      	beq.n	5910 <timer_set+0x24>
    5900:	4b15      	ldr	r3, [pc, #84]	; (5958 <timer_set+0x6c>)
    5902:	4670      	mov	r0, r14
    5904:	9300      	str	r3, [sp, #0]
    5906:	4915      	ldr	r1, [pc, #84]	; (595c <timer_set+0x70>)
    5908:	4a15      	ldr	r2, [pc, #84]	; (5960 <timer_set+0x74>)
    590a:	235d      	movs	r3, #93	; 0x5d
    590c:	f005 fdd2 	bl	b4b4 <_panic>
    5910:	6843      	ldr	r3, [r0, #4]
    5912:	b90b      	cbnz	r3, 5918 <timer_set+0x2c>
    5914:	6886      	ldr	r6, [r0, #8]
    5916:	b126      	cbz	r6, 5922 <timer_set+0x36>

    if (list_in_list(&timer->node)) {
        panic("timer %p already in list\n", timer);
    5918:	4670      	mov	r0, r14
    591a:	4912      	ldr	r1, [pc, #72]	; (5964 <timer_set+0x78>)
    591c:	4622      	mov	r2, r4
    591e:	f005 fdc9 	bl	b4b4 <_panic>
    }

    now = current_time();
    5922:	f7fe fa6f 	bl	3e04 <current_time>
    timer->scheduled_time = now + delay;
    timer->periodic_time = period;
    timer->callback = callback;
    timer->arg = arg;
    5926:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (list_in_list(&timer->node)) {
        panic("timer %p already in list\n", timer);
    }

    now = current_time();
    timer->scheduled_time = now + delay;
    5928:	4440      	add	r0, r8
    592a:	60e0      	str	r0, [r4, #12]
    timer->periodic_time = period;
    timer->callback = callback;
    592c:	6165      	str	r5, [r4, #20]
    timer->arg = arg;
    592e:	61a3      	str	r3, [r4, #24]
    5930:	a803      	add	r0, sp, #12

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5932:	4d0d      	ldr	r5, [pc, #52]	; (5968 <timer_set+0x7c>)
        panic("timer %p already in list\n", timer);
    }

    now = current_time();
    timer->scheduled_time = now + delay;
    timer->periodic_time = period;
    5934:	6127      	str	r7, [r4, #16]
    5936:	f7ff ffcf 	bl	58d8 <arch_interrupt_save.constprop.5>
    593a:	2301      	movs	r3, #1

    spin_lock_saved_state_t state;
    spin_lock_irqsave(&timer_lock, state);

    uint cpu = arch_curr_cpu_num();
    insert_timer_in_queue(cpu, timer);
    593c:	4620      	mov	r0, r4
    593e:	602b      	str	r3, [r5, #0]
    5940:	f7ff ff1e 	bl	5780 <insert_timer_in_queue.constprop.3>
static inline void
arch_interrupt_restore(spin_lock_saved_state_t old_state, spin_lock_save_flags_t flags)
{
    if ((flags & SPIN_LOCK_FLAG_FIQ) && (old_state & SPIN_LOCK_STATE_RESTORE_FIQ))
        arch_enable_fiqs();
    if ((flags & SPIN_LOCK_FLAG_IRQ) && (old_state & SPIN_LOCK_STATE_RESTORE_IRQ))
    5944:	9b03      	ldr	r3, [sp, #12]
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5946:	602e      	str	r6, [r5, #0]
static inline void
arch_interrupt_restore(spin_lock_saved_state_t old_state, spin_lock_save_flags_t flags)
{
    if ((flags & SPIN_LOCK_FLAG_FIQ) && (old_state & SPIN_LOCK_STATE_RESTORE_FIQ))
        arch_enable_fiqs();
    if ((flags & SPIN_LOCK_FLAG_IRQ) && (old_state & SPIN_LOCK_STATE_RESTORE_IRQ))
    5948:	07da      	lsls	r2, r3, #31
    594a:	d500      	bpl.n	594e <timer_set+0x62>

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
    594c:	b662      	cpsie	i
        platform_set_oneshot_timer(timer_tick, NULL, delay);
    }
#endif

    spin_unlock_irqrestore(&timer_lock, state);
}
    594e:	b004      	add	sp, #16
    5950:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    5954:	74696d72 	.word	0x74696d72
    5958:	00010f4b 	.word	0x00010f4b
    595c:	0001076e 	.word	0x0001076e
    5960:	00010f33 	.word	0x00010f33
    5964:	00010f67 	.word	0x00010f67
    5968:	20000900 	.word	0x20000900

0000596c <timer_initialize>:
/**
 * @brief  Initialize a timer object
 */
void timer_initialize(timer_t *timer)
{
    *timer = (timer_t)TIMER_INITIAL_VALUE(*timer);
    596c:	4b04      	ldr	r3, [pc, #16]	; (5980 <timer_initialize+0x14>)
    596e:	6003      	str	r3, [r0, #0]
    5970:	2300      	movs	r3, #0
    5972:	6043      	str	r3, [r0, #4]
    5974:	6083      	str	r3, [r0, #8]
    5976:	60c3      	str	r3, [r0, #12]
    5978:	6103      	str	r3, [r0, #16]
    597a:	6143      	str	r3, [r0, #20]
    597c:	6183      	str	r3, [r0, #24]
    597e:	4770      	bx	r14
    5980:	74696d72 	.word	0x74696d72

00005984 <timer_set_oneshot>:
 *
 * The timer function is declared as:
 *   enum handler_return callback(struct timer *, lk_time_t now, void *arg) { ... }
 */
void timer_set_oneshot(timer_t *timer, lk_time_t delay, timer_callback callback, void *arg)
{
    5984:	b513      	push	{r0, r1, r4, r14}
    5986:	4614      	mov	r4, r2
    if (delay == 0)
        delay = 1;
    timer_set(timer, delay, 0, callback, arg);
    5988:	9300      	str	r3, [sp, #0]
    598a:	2900      	cmp	r1, #0
    598c:	bf08      	it	eq
    598e:	2101      	moveq	r1, #1
    5990:	2200      	movs	r2, #0
    5992:	4623      	mov	r3, r4
    5994:	f7ff ffaa 	bl	58ec <timer_set>
}
    5998:	b002      	add	sp, #8
    599a:	bd10      	pop	{r4, r15}

0000599c <timer_set_periodic>:
 *
 * The timer function is declared as:
 *   enum handler_return callback(struct timer *, lk_time_t now, void *arg) { ... }
 */
void timer_set_periodic(timer_t *timer, lk_time_t period, timer_callback callback, void *arg)
{
    599c:	b513      	push	{r0, r1, r4, r14}
    599e:	4614      	mov	r4, r2
    if (period == 0)
        period = 1;
    59a0:	2900      	cmp	r1, #0
    59a2:	bf08      	it	eq
    59a4:	2101      	moveq	r1, #1
    timer_set(timer, period, period, callback, arg);
    59a6:	9300      	str	r3, [sp, #0]
    59a8:	460a      	mov	r2, r1
    59aa:	4623      	mov	r3, r4
    59ac:	f7ff ff9e 	bl	58ec <timer_set>
}
    59b0:	b002      	add	sp, #8
    59b2:	bd10      	pop	{r4, r15}

000059b4 <timer_cancel>:

/**
 * @brief  Cancel a pending timer
 */
void timer_cancel(timer_t *timer)
{
    59b4:	b51f      	push	{r0, r1, r2, r3, r4, r14}
    DEBUG_ASSERT(timer->magic == TIMER_MAGIC);
    59b6:	6803      	ldr	r3, [r0, #0]
    59b8:	4a14      	ldr	r2, [pc, #80]	; (5a0c <timer_cancel+0x58>)

/**
 * @brief  Cancel a pending timer
 */
void timer_cancel(timer_t *timer)
{
    59ba:	4604      	mov	r4, r0
    DEBUG_ASSERT(timer->magic == TIMER_MAGIC);
    59bc:	4293      	cmp	r3, r2
    59be:	d007      	beq.n	59d0 <timer_cancel+0x1c>
    59c0:	4b13      	ldr	r3, [pc, #76]	; (5a10 <timer_cancel+0x5c>)
    59c2:	4670      	mov	r0, r14
    59c4:	9300      	str	r3, [sp, #0]
    59c6:	4913      	ldr	r1, [pc, #76]	; (5a14 <timer_cancel+0x60>)
    59c8:	4a13      	ldr	r2, [pc, #76]	; (5a18 <timer_cancel+0x64>)
    59ca:	23ab      	movs	r3, #171	; 0xab
    59cc:	f005 fd72 	bl	b4b4 <_panic>
    59d0:	a803      	add	r0, sp, #12
    59d2:	f7ff ff81 	bl	58d8 <arch_interrupt_save.constprop.5>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    59d6:	4b11      	ldr	r3, [pc, #68]	; (5a1c <timer_cancel+0x68>)
    59d8:	2201      	movs	r2, #1
    59da:	601a      	str	r2, [r3, #0]
    59dc:	6862      	ldr	r2, [r4, #4]
    59de:	4619      	mov	r1, r3
    59e0:	68a3      	ldr	r3, [r4, #8]
    59e2:	b952      	cbnz	r2, 59fa <timer_cancel+0x46>
    59e4:	b94b      	cbnz	r3, 59fa <timer_cancel+0x46>
        list_delete(&timer->node);

    /* to keep it from being reinserted into the queue if called from
     * periodic timer callback.
     */
    timer->periodic_time = 0;
    59e6:	2300      	movs	r3, #0
    59e8:	6123      	str	r3, [r4, #16]
    timer->callback = NULL;
    59ea:	6163      	str	r3, [r4, #20]
    timer->arg = NULL;
    59ec:	61a3      	str	r3, [r4, #24]
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    59ee:	600b      	str	r3, [r1, #0]
static inline void
arch_interrupt_restore(spin_lock_saved_state_t old_state, spin_lock_save_flags_t flags)
{
    if ((flags & SPIN_LOCK_FLAG_FIQ) && (old_state & SPIN_LOCK_STATE_RESTORE_FIQ))
        arch_enable_fiqs();
    if ((flags & SPIN_LOCK_FLAG_IRQ) && (old_state & SPIN_LOCK_STATE_RESTORE_IRQ))
    59f0:	9b03      	ldr	r3, [sp, #12]
    59f2:	07d8      	lsls	r0, r3, #31
    59f4:	d508      	bpl.n	5a08 <timer_cancel+0x54>
    59f6:	b662      	cpsie	i
    59f8:	e006      	b.n	5a08 <timer_cancel+0x54>

#define list_add_before(entry, new_entry) list_add_tail(entry, new_entry)

static inline void list_delete(struct list_node *item)
{
    item->next->prev = item->prev;
    59fa:	601a      	str	r2, [r3, #0]
    item->prev->next = item->next;
    59fc:	6862      	ldr	r2, [r4, #4]
    59fe:	6053      	str	r3, [r2, #4]
    item->prev = item->next = 0;
    5a00:	2300      	movs	r3, #0
    5a02:	60a3      	str	r3, [r4, #8]
    5a04:	6063      	str	r3, [r4, #4]
    5a06:	e7ee      	b.n	59e6 <timer_cancel+0x32>
        platform_set_oneshot_timer(timer_tick, NULL, delay);
    }
#endif

    spin_unlock_irqrestore(&timer_lock, state);
}
    5a08:	b004      	add	sp, #16
    5a0a:	bd10      	pop	{r4, r15}
    5a0c:	74696d72 	.word	0x74696d72
    5a10:	00010f4b 	.word	0x00010f4b
    5a14:	0001076e 	.word	0x0001076e
    5a18:	00010f33 	.word	0x00010f33
    5a1c:	20000900 	.word	0x20000900

00005a20 <timer_init>:
    return ret;
}

void timer_init(void)
{
    timer_lock = SPIN_LOCK_INITIAL_VALUE;
    5a20:	4b04      	ldr	r3, [pc, #16]	; (5a34 <timer_init+0x14>)
    5a22:	2100      	movs	r1, #0
    5a24:	6019      	str	r1, [r3, #0]
#define LIST_INITIAL_VALUE(list) { &(list), &(list) }
#define LIST_INITIAL_CLEARED_VALUE { NULL, NULL }

static inline void list_initialize(struct list_node *list)
{
    list->prev = list->next = list;
    5a26:	4b04      	ldr	r3, [pc, #16]	; (5a38 <timer_init+0x18>)
    for (uint i = 0; i < SMP_MAX_CPUS; i++) {
        list_initialize(&timers[i].timer_queue);
    }
#if !PLATFORM_HAS_DYNAMIC_TIMER
    /* register for a periodic timer tick */
    platform_set_periodic_timer(timer_tick, NULL, 10); /* 10ms */
    5a28:	4804      	ldr	r0, [pc, #16]	; (5a3c <timer_init+0x1c>)
    5a2a:	605b      	str	r3, [r3, #4]
    5a2c:	601b      	str	r3, [r3, #0]
    5a2e:	220a      	movs	r2, #10
    5a30:	f7fe b9a6 	b.w	3d80 <platform_set_periodic_timer>
    5a34:	20000900 	.word	0x20000900
    5a38:	200008e0 	.word	0x200008e0
    5a3c:	000057e9 	.word	0x000057e9

00005a40 <sem_init>:
#include <kernel/semaphore.h>
#include <kernel/thread.h>

void sem_init(semaphore_t *sem, unsigned int value)
{
    *sem = (semaphore_t)SEMAPHORE_INITIAL_VALUE(*sem, value);
    5a40:	4a05      	ldr	r2, [pc, #20]	; (5a58 <sem_init+0x18>)
    5a42:	f100 030c 	add.w	r3, r0, #12
    5a46:	6002      	str	r2, [r0, #0]
    5a48:	4a04      	ldr	r2, [pc, #16]	; (5a5c <sem_init+0x1c>)
    5a4a:	60c3      	str	r3, [r0, #12]
    5a4c:	6103      	str	r3, [r0, #16]
    5a4e:	2300      	movs	r3, #0
    5a50:	6041      	str	r1, [r0, #4]
    5a52:	6082      	str	r2, [r0, #8]
    5a54:	6143      	str	r3, [r0, #20]
    5a56:	4770      	bx	r14
    5a58:	73656d61 	.word	0x73656d61
    5a5c:	77616974 	.word	0x77616974

00005a60 <sem_destroy>:
}

void sem_destroy(semaphore_t *sem)
{
    5a60:	b573      	push	{r0, r1, r4, r5, r6, r14}
    5a62:	4606      	mov	r6, r0

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5a64:	4c08      	ldr	r4, [pc, #32]	; (5a88 <sem_destroy+0x28>)
    5a66:	a801      	add	r0, sp, #4
    THREAD_LOCK(state);
    sem->count = 0;
    5a68:	2500      	movs	r5, #0
    5a6a:	f7fe fc27 	bl	42bc <arch_interrupt_save.constprop.1>
    5a6e:	2101      	movs	r1, #1
    wait_queue_destroy(&sem->wait, true);
    5a70:	f106 0008 	add.w	r0, r6, #8
}

void sem_destroy(semaphore_t *sem)
{
    THREAD_LOCK(state);
    sem->count = 0;
    5a74:	6075      	str	r5, [r6, #4]
    5a76:	6021      	str	r1, [r4, #0]
    wait_queue_destroy(&sem->wait, true);
    5a78:	f7ff fda2 	bl	55c0 <wait_queue_destroy>
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    5a7c:	9801      	ldr	r0, [sp, #4]
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5a7e:	6025      	str	r5, [r4, #0]
    5a80:	f7fe fc00 	bl	4284 <arch_interrupt_restore.constprop.0>
    THREAD_UNLOCK(state);
}
    5a84:	b002      	add	sp, #8
    5a86:	bd70      	pop	{r4, r5, r6, r15}
    5a88:	200008d4 	.word	0x200008d4

00005a8c <sem_post>:

int sem_post(semaphore_t *sem, bool resched)
{
    5a8c:	b573      	push	{r0, r1, r4, r5, r6, r14}
    5a8e:	4604      	mov	r4, r0
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    5a90:	a801      	add	r0, sp, #4
    5a92:	460e      	mov	r6, r1
    5a94:	f7fe fc12 	bl	42bc <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5a98:	4b0c      	ldr	r3, [pc, #48]	; (5acc <sem_post+0x40>)
    5a9a:	2201      	movs	r2, #1
    5a9c:	601a      	str	r2, [r3, #0]

    /*
     * If the count is or was negative then a thread is waiting for a resource, otherwise
     * it's safe to just increase the count available with no downsides
     */
    if (unlikely(++sem->count <= 0))
    5a9e:	6862      	ldr	r2, [r4, #4]
    5aa0:	461d      	mov	r5, r3
    5aa2:	3201      	adds	r2, #1
    5aa4:	2a00      	cmp	r2, #0
    5aa6:	6062      	str	r2, [r4, #4]
    THREAD_UNLOCK(state);
}

int sem_post(semaphore_t *sem, bool resched)
{
    int ret = 0;
    5aa8:	bfc8      	it	gt
    5aaa:	2400      	movgt	r4, #0

    /*
     * If the count is or was negative then a thread is waiting for a resource, otherwise
     * it's safe to just increase the count available with no downsides
     */
    if (unlikely(++sem->count <= 0))
    5aac:	dc06      	bgt.n	5abc <sem_post+0x30>
        ret = wait_queue_wake_one(&sem->wait, resched, NO_ERROR);
    5aae:	f104 0008 	add.w	r0, r4, #8
    5ab2:	4631      	mov	r1, r6
    5ab4:	2200      	movs	r2, #0
    5ab6:	f7ff fbd7 	bl	5268 <wait_queue_wake_one>
    5aba:	4604      	mov	r4, r0
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5abc:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    5abe:	9801      	ldr	r0, [sp, #4]
    5ac0:	602b      	str	r3, [r5, #0]
    5ac2:	f7fe fbdf 	bl	4284 <arch_interrupt_restore.constprop.0>

    THREAD_UNLOCK(state);

    return ret;
}
    5ac6:	4620      	mov	r0, r4
    5ac8:	b002      	add	sp, #8
    5aca:	bd70      	pop	{r4, r5, r6, r15}
    5acc:	200008d4 	.word	0x200008d4

00005ad0 <sem_wait>:

status_t sem_wait(semaphore_t *sem)
{
    5ad0:	b537      	push	{r0, r1, r2, r4, r5, r14}
    5ad2:	4604      	mov	r4, r0
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    5ad4:	a801      	add	r0, sp, #4
    5ad6:	f7fe fbf1 	bl	42bc <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5ada:	4b0d      	ldr	r3, [pc, #52]	; (5b10 <sem_wait+0x40>)
    5adc:	2201      	movs	r2, #1
    5ade:	601a      	str	r2, [r3, #0]

    /*
     * If there are no resources available then we need to
     * sit in the wait queue until sem_post adds some.
     */
    if (unlikely(--sem->count < 0))
    5ae0:	6862      	ldr	r2, [r4, #4]
    5ae2:	461d      	mov	r5, r3
    5ae4:	3a01      	subs	r2, #1
    5ae6:	2a00      	cmp	r2, #0
    5ae8:	6062      	str	r2, [r4, #4]
    return ret;
}

status_t sem_wait(semaphore_t *sem)
{
    status_t ret = NO_ERROR;
    5aea:	bfa8      	it	ge
    5aec:	2400      	movge	r4, #0

    /*
     * If there are no resources available then we need to
     * sit in the wait queue until sem_post adds some.
     */
    if (unlikely(--sem->count < 0))
    5aee:	da06      	bge.n	5afe <sem_wait+0x2e>
        ret = wait_queue_block(&sem->wait, INFINITE_TIME);
    5af0:	f104 0008 	add.w	r0, r4, #8
    5af4:	f04f 31ff 	mov.w	r1, #4294967295
    5af8:	f7ff faac 	bl	5054 <wait_queue_block>
    5afc:	4604      	mov	r4, r0
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5afe:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    5b00:	9801      	ldr	r0, [sp, #4]
    5b02:	602b      	str	r3, [r5, #0]
    5b04:	f7fe fbbe 	bl	4284 <arch_interrupt_restore.constprop.0>

    THREAD_UNLOCK(state);
    return ret;
}
    5b08:	4620      	mov	r0, r4
    5b0a:	b003      	add	sp, #12
    5b0c:	bd30      	pop	{r4, r5, r15}
    5b0e:	bf00      	nop
    5b10:	200008d4 	.word	0x200008d4

00005b14 <buf_write>:
{
    return buf->avail == valpow2(buf->log2);
}

static status_t buf_write(port_buf_t *buf, const port_packet_t *packets, size_t count)
{
    5b14:	b5f0      	push	{r4, r5, r6, r7, r14}
    if (buf->avail < count)
    5b16:	6846      	ldr	r6, [r0, #4]
{
    return buf->avail == valpow2(buf->log2);
}

static status_t buf_write(port_buf_t *buf, const port_packet_t *packets, size_t count)
{
    5b18:	4603      	mov	r3, r0
    if (buf->avail < count)
    5b1a:	4296      	cmp	r6, r2
{
    return buf->avail == valpow2(buf->log2);
}

static status_t buf_write(port_buf_t *buf, const port_packet_t *packets, size_t count)
{
    5b1c:	468c      	mov	r12, r1
    if (buf->avail < count)
    5b1e:	d319      	bcc.n	5b54 <buf_write+0x40>
    5b20:	2400      	movs	r4, #0
        return ERR_NOT_ENOUGH_BUFFER;

    for (size_t ix = 0; ix != count; ix++) {
    5b22:	4294      	cmp	r4, r2
    5b24:	d012      	beq.n	5b4c <buf_write+0x38>
        buf->packet[buf->tail] = packets[ix];
    5b26:	68df      	ldr	r7, [r3, #12]
    5b28:	eb0c 01c4 	add.w	r1, r12, r4, lsl #3
    5b2c:	6808      	ldr	r0, [r1, #0]
    5b2e:	1cbd      	adds	r5, r7, #2
    5b30:	6849      	ldr	r1, [r1, #4]
    5b32:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    5b36:	c503      	stmia	r5!, {r0, r1}
    return val >> divp2;
}

static inline __ALWAYS_INLINE uint modpow2(uint val, uint modp2)
{
    return val & ((1UL << modp2) - 1);
    5b38:	6818      	ldr	r0, [r3, #0]
    5b3a:	2101      	movs	r1, #1
    5b3c:	fa01 f000 	lsl.w	r0, r1, r0
        buf->tail = modpow2(++buf->tail, buf->log2);
    5b40:	440f      	add	r7, r1
    5b42:	3801      	subs	r0, #1
    5b44:	4007      	ands	r7, r0
    5b46:	60df      	str	r7, [r3, #12]
static status_t buf_write(port_buf_t *buf, const port_packet_t *packets, size_t count)
{
    if (buf->avail < count)
        return ERR_NOT_ENOUGH_BUFFER;

    for (size_t ix = 0; ix != count; ix++) {
    5b48:	440c      	add	r4, r1
    5b4a:	e7ea      	b.n	5b22 <buf_write+0xe>
        buf->packet[buf->tail] = packets[ix];
        buf->tail = modpow2(++buf->tail, buf->log2);
    }
    buf->avail -= count;
    5b4c:	1b34      	subs	r4, r6, r4
    5b4e:	605c      	str	r4, [r3, #4]
    return NO_ERROR;
    5b50:	2000      	movs	r0, #0
    5b52:	bdf0      	pop	{r4, r5, r6, r7, r15}
}

static status_t buf_write(port_buf_t *buf, const port_packet_t *packets, size_t count)
{
    if (buf->avail < count)
        return ERR_NOT_ENOUGH_BUFFER;
    5b54:	f06f 0008 	mvn.w	r0, #8
        buf->packet[buf->tail] = packets[ix];
        buf->tail = modpow2(++buf->tail, buf->log2);
    }
    buf->avail -= count;
    return NO_ERROR;
}
    5b58:	bdf0      	pop	{r4, r5, r6, r7, r15}

00005b5a <make_buf>:

static struct list_node write_port_list;


static port_buf_t *make_buf(uint pk_count)
{
    5b5a:	b510      	push	{r4, r14}
    5b5c:	4604      	mov	r4, r0
    uint size = sizeof(port_buf_t) + ((pk_count - 1) * sizeof(port_packet_t));
    5b5e:	3002      	adds	r0, #2
    port_buf_t *buf = (port_buf_t *) malloc(size);
    5b60:	00c0      	lsls	r0, r0, #3
    5b62:	f005 fddf 	bl	b724 <malloc>
    if (!buf)
    5b66:	b158      	cbz	r0, 5b80 <make_buf+0x26>
    return ((val - 1) & val) == 0;
}

static inline __ALWAYS_INLINE uint log2_uint(uint val)
{
    if (val == 0)
    5b68:	b124      	cbz	r4, 5b74 <make_buf+0x1a>
        return 0; // undefined

    return (sizeof(val) * 8) - 1 - __builtin_clz(val);
    5b6a:	fab4 f384 	clz	r3, r4
    5b6e:	f1c3 031f 	rsb	r3, r3, #31
    5b72:	e000      	b.n	5b76 <make_buf+0x1c>
}

static inline __ALWAYS_INLINE uint log2_uint(uint val)
{
    if (val == 0)
        return 0; // undefined
    5b74:	4623      	mov	r3, r4
        return NULL;
    buf->log2 = log2_uint(pk_count);
    5b76:	6003      	str	r3, [r0, #0]
    buf->head = buf->tail = 0;
    5b78:	2300      	movs	r3, #0
    5b7a:	60c3      	str	r3, [r0, #12]
    5b7c:	6083      	str	r3, [r0, #8]
    buf->avail = pk_count;
    5b7e:	6044      	str	r4, [r0, #4]
    return buf;
}
    5b80:	bd10      	pop	{r4, r15}

00005b82 <read_no_lock>:

    return status;
}

static inline status_t read_no_lock(read_port_t *rp, lk_time_t timeout, port_result_t *result)
{
    5b82:	b5f8      	push	{r3, r4, r5, r6, r7, r14}
    5b84:	4604      	mov	r4, r0
    5b86:	460d      	mov	r5, r1
    5b88:	4616      	mov	r6, r2
    status_t status = buf_read(rp->buf, result);
    5b8a:	6963      	ldr	r3, [r4, #20]
    return (sizeof(val) * 8) - 1 - __builtin_clz(val);
}

static inline __ALWAYS_INLINE uint valpow2(uint valp2)
{
    return 1U << valp2;
    5b8c:	2201      	movs	r2, #1
    5b8e:	6819      	ldr	r1, [r3, #0]
    5b90:	fa02 f001 	lsl.w	r0, r2, r1
    return NO_ERROR;
}

static status_t buf_read(port_buf_t *buf, port_result_t *pr)
{
    if (buf_is_empty(buf))
    5b94:	6859      	ldr	r1, [r3, #4]
    5b96:	4281      	cmp	r1, r0
    5b98:	d013      	beq.n	5bc2 <read_no_lock+0x40>
        return ERR_NO_MSG;
    pr->packet = buf->packet[buf->head];
    5b9a:	6899      	ldr	r1, [r3, #8]
    5b9c:	1d37      	adds	r7, r6, #4
    5b9e:	3102      	adds	r1, #2
    5ba0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    5ba4:	c903      	ldmia	r1, {r0, r1}
    5ba6:	e887 0003 	stmia.w	r7, {r0, r1}
    return val >> divp2;
}

static inline __ALWAYS_INLINE uint modpow2(uint val, uint modp2)
{
    return val & ((1UL << modp2) - 1);
    5baa:	6819      	ldr	r1, [r3, #0]
    buf->head = modpow2(++buf->head, buf->log2);
    ++buf->avail;
    return NO_ERROR;
    5bac:	2000      	movs	r0, #0
    5bae:	408a      	lsls	r2, r1
static status_t buf_read(port_buf_t *buf, port_result_t *pr)
{
    if (buf_is_empty(buf))
        return ERR_NO_MSG;
    pr->packet = buf->packet[buf->head];
    buf->head = modpow2(++buf->head, buf->log2);
    5bb0:	6899      	ldr	r1, [r3, #8]
    5bb2:	3a01      	subs	r2, #1
    5bb4:	3101      	adds	r1, #1
    5bb6:	4011      	ands	r1, r2
    ++buf->avail;
    5bb8:	685a      	ldr	r2, [r3, #4]
static status_t buf_read(port_buf_t *buf, port_result_t *pr)
{
    if (buf_is_empty(buf))
        return ERR_NO_MSG;
    pr->packet = buf->packet[buf->head];
    buf->head = modpow2(++buf->head, buf->log2);
    5bba:	6099      	str	r1, [r3, #8]
    ++buf->avail;
    5bbc:	3201      	adds	r2, #1
    5bbe:	605a      	str	r2, [r3, #4]
    5bc0:	e001      	b.n	5bc6 <read_no_lock+0x44>
}

static status_t buf_read(port_buf_t *buf, port_result_t *pr)
{
    if (buf_is_empty(buf))
        return ERR_NO_MSG;
    5bc2:	f06f 0003 	mvn.w	r0, #3
}

static inline status_t read_no_lock(read_port_t *rp, lk_time_t timeout, port_result_t *result)
{
    status_t status = buf_read(rp->buf, result);
    result->ctx = rp->ctx;
    5bc6:	69a3      	ldr	r3, [r4, #24]
    5bc8:	6033      	str	r3, [r6, #0]

    if (status != ERR_NO_MSG)
    5bca:	1d03      	adds	r3, r0, #4
    5bcc:	d10a      	bne.n	5be4 <read_no_lock+0x62>
        return status;

    // early return allows compiler to elide the rest for the group read case.
    if (!timeout)
    5bce:	b13d      	cbz	r5, 5be0 <read_no_lock+0x5e>
        return ERR_TIMED_OUT;

    status_t wr = wait_queue_block(&rp->wait, timeout);
    5bd0:	f104 001c 	add.w	r0, r4, #28
    5bd4:	4629      	mov	r1, r5
    5bd6:	f7ff fa3d 	bl	5054 <wait_queue_block>
    if (wr != NO_ERROR)
    5bda:	2800      	cmp	r0, #0
    5bdc:	d0d5      	beq.n	5b8a <read_no_lock+0x8>
    5bde:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
    if (status != ERR_NO_MSG)
        return status;

    // early return allows compiler to elide the rest for the group read case.
    if (!timeout)
        return ERR_TIMED_OUT;
    5be0:	f06f 000c 	mvn.w	r0, #12
    status_t wr = wait_queue_block(&rp->wait, timeout);
    if (wr != NO_ERROR)
        return wr;
    // recursive tail call is usually optimized away with a goto.
    return read_no_lock(rp, timeout, result);
}
    5be4:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
	...

00005be8 <port_init>:
    5be8:	4b01      	ldr	r3, [pc, #4]	; (5bf0 <port_init+0x8>)
    5bea:	605b      	str	r3, [r3, #4]
    5bec:	601b      	str	r3, [r3, #0]
    5bee:	4770      	bx	r14
    5bf0:	20000904 	.word	0x20000904

00005bf4 <port_create>:
{
    list_initialize(&write_port_list);
}

status_t port_create(const char *name, port_mode_t mode, port_t *port)
{
    5bf4:	e92d 47f3 	stmdb	r13!, {r0, r1, r4, r5, r6, r7, r8, r9, r10, r14}
    5bf8:	4689      	mov	r9, r1
    5bfa:	4617      	mov	r7, r2
    if (!name || !port)
    5bfc:	4682      	mov	r10, r0
    5bfe:	2800      	cmp	r0, #0
    5c00:	d063      	beq.n	5cca <port_create+0xd6>
    5c02:	2a00      	cmp	r2, #0
    5c04:	d061      	beq.n	5cca <port_create+0xd6>
    if (mode & PORT_MODE_BROADCAST) {
        if (mode & PORT_MODE_BIG_BUFFER)
            return ERR_INVALID_ARGS;
    }

    if (strlen(name) >= PORT_NAME_LEN)
    5c06:	f006 fe8a 	bl	c91e <strlen>
    5c0a:	280b      	cmp	r0, #11
    5c0c:	d85d      	bhi.n	5cca <port_create+0xd6>
        return ERR_INVALID_ARGS;

    // lookup for existing port, return that if found.
    write_port_t *wp = NULL;
    THREAD_LOCK(state1);
    list_for_every_entry(&write_port_list, wp, write_port_t, node) {
    5c0e:	4d34      	ldr	r5, [pc, #208]	; (5ce0 <port_create+0xec>)
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    5c10:	4668      	mov	r0, r13
    5c12:	f7fe fb5d 	bl	42d0 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5c16:	4b33      	ldr	r3, [pc, #204]	; (5ce4 <port_create+0xf0>)
    5c18:	686c      	ldr	r4, [r5, #4]
    5c1a:	2201      	movs	r2, #1
    5c1c:	601a      	str	r2, [r3, #0]
    5c1e:	3c04      	subs	r4, #4
    5c20:	4698      	mov	r8, r3
    5c22:	1d23      	adds	r3, r4, #4
    5c24:	429d      	cmp	r5, r3
    5c26:	d018      	beq.n	5c5a <port_create+0x66>
        if (strcmp(wp->name, name) == 0) {
    5c28:	f104 0019 	add.w	r0, r4, #25
    5c2c:	4651      	mov	r1, r10
    5c2e:	f006 fe52 	bl	c8d6 <strcmp>
    5c32:	b978      	cbnz	r0, 5c54 <port_create+0x60>
            // can't return closed ports.
            if (wp->magic == WRITEPORT_MAGIC_X)
    5c34:	6823      	ldr	r3, [r4, #0]
                wp = NULL;
    5c36:	4a2c      	ldr	r2, [pc, #176]	; (5ce8 <port_create+0xf4>)
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5c38:	f8c8 0000 	str.w	r0, [r8]
    5c3c:	4293      	cmp	r3, r2
    5c3e:	bf08      	it	eq
    5c40:	2400      	moveq	r4, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    5c42:	9800      	ldr	r0, [sp, #0]
    5c44:	f7fe fb22 	bl	428c <arch_interrupt_restore.constprop.0>
            THREAD_UNLOCK(state1);
            if (wp) {
    5c48:	2c00      	cmp	r4, #0
    5c4a:	d041      	beq.n	5cd0 <port_create+0xdc>
                *port = (void *) wp;
    5c4c:	603c      	str	r4, [r7, #0]
                return ERR_ALREADY_EXISTS;
    5c4e:	f06f 000d 	mvn.w	r0, #13
    5c52:	e042      	b.n	5cda <port_create+0xe6>
        return ERR_INVALID_ARGS;

    // lookup for existing port, return that if found.
    write_port_t *wp = NULL;
    THREAD_LOCK(state1);
    list_for_every_entry(&write_port_list, wp, write_port_t, node) {
    5c54:	68a4      	ldr	r4, [r4, #8]
    5c56:	3c04      	subs	r4, #4
    5c58:	e7e3      	b.n	5c22 <port_create+0x2e>
    5c5a:	9800      	ldr	r0, [sp, #0]
    5c5c:	2600      	movs	r6, #0
    5c5e:	f8c8 6000 	str.w	r6, [r8]
    5c62:	f7fe fb13 	bl	428c <arch_interrupt_restore.constprop.0>
        }
    }
    THREAD_UNLOCK(state1);

    // not found, create the write port and the circular buffer.
    wp = calloc(1, sizeof(write_port_t));
    5c66:	2001      	movs	r0, #1
    5c68:	2128      	movs	r1, #40	; 0x28
    5c6a:	f005 fd9d 	bl	b7a8 <calloc>
    if (!wp)
    5c6e:	4604      	mov	r4, r0
    5c70:	2800      	cmp	r0, #0
    5c72:	d030      	beq.n	5cd6 <port_create+0xe2>
        return ERR_NO_MEMORY;

    wp->magic = WRITEPORT_MAGIC_W;
    5c74:	4b1d      	ldr	r3, [pc, #116]	; (5cec <port_create+0xf8>)
    wp->mode = mode;
    5c76:	f880 9018 	strb.w	r9, [r0, #24]
    // not found, create the write port and the circular buffer.
    wp = calloc(1, sizeof(write_port_t));
    if (!wp)
        return ERR_NO_MEMORY;

    wp->magic = WRITEPORT_MAGIC_W;
    5c7a:	6003      	str	r3, [r0, #0]
    wp->mode = mode;
    strlcpy(wp->name, name, sizeof(wp->name));
    5c7c:	4651      	mov	r1, r10
    5c7e:	220c      	movs	r2, #12
    5c80:	3019      	adds	r0, #25
    5c82:	f006 fe35 	bl	c8f0 <strlcpy>
    list_initialize(&wp->rp_list);
    5c86:	f104 0310 	add.w	r3, r4, #16

    uint size = (mode & PORT_MODE_BIG_BUFFER) ?  PORT_BUFF_SIZE_BIG : PORT_BUFF_SIZE;
    5c8a:	f019 0f02 	tst.w	r9, #2
    5c8e:	6163      	str	r3, [r4, #20]
    5c90:	6123      	str	r3, [r4, #16]
    wp->buf = make_buf(size);
    5c92:	bf0c      	ite	eq
    5c94:	2008      	moveq	r0, #8
    5c96:	2040      	movne	r0, #64	; 0x40
    5c98:	f7ff ff5f 	bl	5b5a <make_buf>
    5c9c:	60e0      	str	r0, [r4, #12]
    if (!wp->buf) {
    5c9e:	b918      	cbnz	r0, 5ca8 <port_create+0xb4>
        free(wp);
    5ca0:	4620      	mov	r0, r4
    5ca2:	f005 fdcf 	bl	b844 <free>
    5ca6:	e016      	b.n	5cd6 <port_create+0xe2>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    5ca8:	a801      	add	r0, sp, #4
    5caa:	f7fe fb11 	bl	42d0 <arch_interrupt_save.constprop.1>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    5cae:	682a      	ldr	r2, [r5, #0]
    }

    // todo: race condtion! a port with the same name could have been created
    // by another thread at is point.
    THREAD_LOCK(state2);
    list_add_tail(&write_port_list, &wp->node);
    5cb0:	1d23      	adds	r3, r4, #4
    5cb2:	6062      	str	r2, [r4, #4]
    item->next = list;
    5cb4:	60a5      	str	r5, [r4, #8]
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    5cb6:	9801      	ldr	r0, [sp, #4]
    list->prev->next = item;
    5cb8:	6053      	str	r3, [r2, #4]
    list->prev = item;
    5cba:	602b      	str	r3, [r5, #0]
    5cbc:	f8c8 6000 	str.w	r6, [r8]
    5cc0:	f7fe fae4 	bl	428c <arch_interrupt_restore.constprop.0>
    THREAD_UNLOCK(state2);

    *port = (void *)wp;
    5cc4:	603c      	str	r4, [r7, #0]
    return NO_ERROR;
    5cc6:	4630      	mov	r0, r6
    5cc8:	e007      	b.n	5cda <port_create+0xe6>
}

status_t port_create(const char *name, port_mode_t mode, port_t *port)
{
    if (!name || !port)
        return ERR_INVALID_ARGS;
    5cca:	f06f 0007 	mvn.w	r0, #7
    5cce:	e004      	b.n	5cda <port_create+0xe6>
            THREAD_UNLOCK(state1);
            if (wp) {
                *port = (void *) wp;
                return ERR_ALREADY_EXISTS;
            } else {
                return ERR_BUSY;
    5cd0:	f06f 0020 	mvn.w	r0, #32
    5cd4:	e001      	b.n	5cda <port_create+0xe6>
    THREAD_UNLOCK(state1);

    // not found, create the write port and the circular buffer.
    wp = calloc(1, sizeof(write_port_t));
    if (!wp)
        return ERR_NO_MEMORY;
    5cd6:	f06f 0004 	mvn.w	r0, #4
    list_add_tail(&write_port_list, &wp->node);
    THREAD_UNLOCK(state2);

    *port = (void *)wp;
    return NO_ERROR;
}
    5cda:	b002      	add	sp, #8
    5cdc:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
    5ce0:	20000904 	.word	0x20000904
    5ce4:	200008d4 	.word	0x200008d4
    5ce8:	70727478 	.word	0x70727478
    5cec:	70727477 	.word	0x70727477

00005cf0 <port_open>:

status_t port_open(const char *name, void *ctx, port_t *port)
{
    5cf0:	e92d 47f3 	stmdb	r13!, {r0, r1, r4, r5, r6, r7, r8, r9, r10, r14}
    5cf4:	460d      	mov	r5, r1
    5cf6:	4617      	mov	r7, r2
    if (!name || !port)
    5cf8:	4680      	mov	r8, r0
    5cfa:	2800      	cmp	r0, #0
    5cfc:	d06a      	beq.n	5dd4 <port_open+0xe4>
    5cfe:	2a00      	cmp	r2, #0
    5d00:	d068      	beq.n	5dd4 <port_open+0xe4>
        return ERR_INVALID_ARGS;

    // assume success; create the read port and buffer now.
    read_port_t *rp = calloc(1, sizeof(read_port_t));
    5d02:	2001      	movs	r0, #1
    5d04:	2134      	movs	r1, #52	; 0x34
    5d06:	f005 fd4f 	bl	b7a8 <calloc>
    if (!rp)
    5d0a:	4604      	mov	r4, r0
    5d0c:	2800      	cmp	r0, #0
    5d0e:	d064      	beq.n	5dda <port_open+0xea>
        return ERR_NO_MEMORY;

    rp->magic = READPORT_MAGIC;
    5d10:	4a34      	ldr	r2, [pc, #208]	; (5de4 <port_open+0xf4>)
    5d12:	f840 2b1c 	str.w	r2, [r0], #28
    wait_queue_init(&rp->wait);
    5d16:	f7ff f993 	bl	5040 <wait_queue_init>
    rp->ctx = ctx;
    5d1a:	61a5      	str	r5, [r4, #24]

    // |buf| might not be needed, but we always allocate outside the lock.
    // this buffer is only needed for broadcast ports, but we don't know
    // that here.
    port_buf_t *buf = make_buf(PORT_BUFF_SIZE);
    5d1c:	2008      	movs	r0, #8
    5d1e:	f7ff ff1c 	bl	5b5a <make_buf>
    if (!buf) {
    5d22:	4606      	mov	r6, r0
    5d24:	b918      	cbnz	r0, 5d2e <port_open+0x3e>
        free(rp);
    5d26:	4620      	mov	r0, r4
    5d28:	f005 fd8c 	bl	b844 <free>
    5d2c:	e055      	b.n	5dda <port_open+0xea>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    5d2e:	a801      	add	r0, sp, #4
    5d30:	f7fe face 	bl	42d0 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5d34:	4a2c      	ldr	r2, [pc, #176]	; (5de8 <port_open+0xf8>)
    5d36:	2301      	movs	r3, #1
    5d38:	6013      	str	r3, [r2, #0]
    // find the named write port and associate it with read port.
    status_t rc = ERR_NOT_FOUND;

    THREAD_LOCK(state);
    write_port_t *wp = NULL;
    list_for_every_entry(&write_port_list, wp, write_port_t, node) {
    5d3a:	4b2c      	ldr	r3, [pc, #176]	; (5dec <port_open+0xfc>)
    5d3c:	4691      	mov	r9, r2
    5d3e:	685d      	ldr	r5, [r3, #4]
    5d40:	469a      	mov	r10, r3
    5d42:	3d04      	subs	r5, #4
    5d44:	1d2b      	adds	r3, r5, #4
    5d46:	459a      	cmp	r10, r3
    5d48:	d02d      	beq.n	5da6 <port_open+0xb6>
        if (strcmp(wp->name, name) == 0) {
    5d4a:	f105 0019 	add.w	r0, r5, #25
    5d4e:	4641      	mov	r1, r8
    5d50:	f006 fdc1 	bl	c8d6 <strcmp>
    5d54:	4603      	mov	r3, r0
    5d56:	bb18      	cbnz	r0, 5da0 <port_open+0xb0>
            // found; add read port to write port list.
            rp->wport = wp;
            if (wp->buf) {
    5d58:	68e8      	ldr	r0, [r5, #12]
    THREAD_LOCK(state);
    write_port_t *wp = NULL;
    list_for_every_entry(&write_port_list, wp, write_port_t, node) {
        if (strcmp(wp->name, name) == 0) {
            // found; add read port to write port list.
            rp->wport = wp;
    5d5a:	62e5      	str	r5, [r4, #44]	; 0x2c
            if (wp->buf) {
    5d5c:	b178      	cbz	r0, 5d7e <port_open+0x8e>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    5d5e:	4629      	mov	r1, r5
    5d60:	f851 2f10 	ldr.w	r2, [r1, #16]!
                // this is the first read port; transfer the circular buffer.
                list_add_tail(&wp->rp_list, &rp->w_node);
    5d64:	f104 0e04 	add.w	r14, r4, #4
    5d68:	6062      	str	r2, [r4, #4]
    item->next = list;
    list->prev->next = item;
    5d6a:	692a      	ldr	r2, [r5, #16]
#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    item->next = list;
    5d6c:	60a1      	str	r1, [r4, #8]
    list->prev->next = item;
    5d6e:	f8c2 e004 	str.w	r14, [r2, #4]
    list->prev = item;
    5d72:	f8c5 e010 	str.w	r14, [r5, #16]
                rp->buf = wp->buf;
    5d76:	6160      	str	r0, [r4, #20]
                wp->buf = NULL;
    5d78:	60eb      	str	r3, [r5, #12]
                rc = NO_ERROR;
    5d7a:	461d      	mov	r5, r3
    5d7c:	e018      	b.n	5db0 <port_open+0xc0>
            } else if (buf) {
                // not first read port.
                if (wp->mode & PORT_MODE_UNICAST) {
    5d7e:	7e2b      	ldrb	r3, [r5, #24]
    5d80:	f013 0101 	ands.w	r1, r3, #1
    5d84:	d112      	bne.n	5dac <port_open+0xbc>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    5d86:	462b      	mov	r3, r5
    5d88:	f853 2f10 	ldr.w	r2, [r3, #16]!
                    // cannot add a second listener.
                    rc = ERR_NOT_ALLOWED;
                    break;
                }
                // use the new (small) circular buffer.
                list_add_tail(&wp->rp_list, &rp->w_node);
    5d8c:	1d20      	adds	r0, r4, #4
    5d8e:	6062      	str	r2, [r4, #4]
    item->next = list;
    list->prev->next = item;
    5d90:	692a      	ldr	r2, [r5, #16]
#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    item->next = list;
    5d92:	60a3      	str	r3, [r4, #8]
    list->prev->next = item;
    5d94:	6050      	str	r0, [r2, #4]
    list->prev = item;
    5d96:	6128      	str	r0, [r5, #16]
                rp->buf = buf;
    5d98:	6166      	str	r6, [r4, #20]
                buf = NULL;
    5d9a:	460d      	mov	r5, r1
                rc = NO_ERROR;
    5d9c:	460e      	mov	r6, r1
    5d9e:	e007      	b.n	5db0 <port_open+0xc0>
    // find the named write port and associate it with read port.
    status_t rc = ERR_NOT_FOUND;

    THREAD_LOCK(state);
    write_port_t *wp = NULL;
    list_for_every_entry(&write_port_list, wp, write_port_t, node) {
    5da0:	68ad      	ldr	r5, [r5, #8]
    5da2:	3d04      	subs	r5, #4
    5da4:	e7ce      	b.n	5d44 <port_open+0x54>
        free(rp);
        return ERR_NO_MEMORY;
    }

    // find the named write port and associate it with read port.
    status_t rc = ERR_NOT_FOUND;
    5da6:	f06f 0501 	mvn.w	r5, #1
    5daa:	e001      	b.n	5db0 <port_open+0xc0>
                rc = NO_ERROR;
            } else if (buf) {
                // not first read port.
                if (wp->mode & PORT_MODE_UNICAST) {
                    // cannot add a second listener.
                    rc = ERR_NOT_ALLOWED;
    5dac:	f06f 0510 	mvn.w	r5, #16
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5db0:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    5db2:	9801      	ldr	r0, [sp, #4]
    5db4:	f8c9 3000 	str.w	r3, [r9]
    5db8:	f7fe fa68 	bl	428c <arch_interrupt_restore.constprop.0>
            break;
        }
    }
    THREAD_UNLOCK(state);

    if (buf)
    5dbc:	b116      	cbz	r6, 5dc4 <port_open+0xd4>
        free(buf);
    5dbe:	4630      	mov	r0, r6
    5dc0:	f005 fd40 	bl	b844 <free>

    if (rc == NO_ERROR) {
    5dc4:	b90d      	cbnz	r5, 5dca <port_open+0xda>
        *port = (void *)rp;
    5dc6:	603c      	str	r4, [r7, #0]
    5dc8:	e002      	b.n	5dd0 <port_open+0xe0>
    } else {
        free(rp);
    5dca:	4620      	mov	r0, r4
    5dcc:	f005 fd3a 	bl	b844 <free>
    5dd0:	4628      	mov	r0, r5
    5dd2:	e004      	b.n	5dde <port_open+0xee>
}

status_t port_open(const char *name, void *ctx, port_t *port)
{
    if (!name || !port)
        return ERR_INVALID_ARGS;
    5dd4:	f06f 0007 	mvn.w	r0, #7
    5dd8:	e001      	b.n	5dde <port_open+0xee>

    // assume success; create the read port and buffer now.
    read_port_t *rp = calloc(1, sizeof(read_port_t));
    if (!rp)
        return ERR_NO_MEMORY;
    5dda:	f06f 0004 	mvn.w	r0, #4
        *port = (void *)rp;
    } else {
        free(rp);
    }
    return rc;
}
    5dde:	b002      	add	sp, #8
    5de0:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
    5de4:	70727472 	.word	0x70727472
    5de8:	200008d4 	.word	0x200008d4
    5dec:	20000904 	.word	0x20000904

00005df0 <port_group>:

status_t port_group(port_t *ports, size_t count, port_t *group)
{
    if (count > MAX_PORT_GROUP_COUNT)
    5df0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    }
    return rc;
}

status_t port_group(port_t *ports, size_t count, port_t *group)
{
    5df4:	e92d 43f7 	stmdb	r13!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r14}
    5df8:	4607      	mov	r7, r0
    5dfa:	460e      	mov	r6, r1
    5dfc:	4690      	mov	r8, r2
    if (count > MAX_PORT_GROUP_COUNT)
    5dfe:	d851      	bhi.n	5ea4 <port_group+0xb4>
        return ERR_TOO_BIG;

    // Allow empty port groups.
    if (count && !ports)
    5e00:	b109      	cbz	r1, 5e06 <port_group+0x16>
    5e02:	2800      	cmp	r0, #0
    5e04:	d051      	beq.n	5eaa <port_group+0xba>
        return ERR_INVALID_ARGS;

    if (!group)
    5e06:	f1b8 0f00 	cmp.w	r8, #0
    5e0a:	d04e      	beq.n	5eaa <port_group+0xba>
        return ERR_INVALID_ARGS;

    // assume success; create port group now.
    port_group_t *pg = calloc(1, sizeof(port_group_t));
    5e0c:	2001      	movs	r0, #1
    5e0e:	211c      	movs	r1, #28
    5e10:	f005 fcca 	bl	b7a8 <calloc>
    if (!pg)
    5e14:	4604      	mov	r4, r0
    5e16:	2800      	cmp	r0, #0
    5e18:	d04a      	beq.n	5eb0 <port_group+0xc0>
        return ERR_NO_MEMORY;

    pg->magic = PORTGROUP_MAGIC;
    5e1a:	4b28      	ldr	r3, [pc, #160]	; (5ebc <port_group+0xcc>)
    wait_queue_init(&pg->wait);
    list_initialize(&pg->rp_list);
    5e1c:	f104 0914 	add.w	r9, r4, #20
    // assume success; create port group now.
    port_group_t *pg = calloc(1, sizeof(port_group_t));
    if (!pg)
        return ERR_NO_MEMORY;

    pg->magic = PORTGROUP_MAGIC;
    5e20:	f840 3b04 	str.w	r3, [r0], #4
    wait_queue_init(&pg->wait);
    5e24:	f7ff f90c 	bl	5040 <wait_queue_init>
#define LIST_INITIAL_VALUE(list) { &(list), &(list) }
#define LIST_INITIAL_CLEARED_VALUE { NULL, NULL }

static inline void list_initialize(struct list_node *list)
{
    list->prev = list->next = list;
    5e28:	f8c4 9018 	str.w	r9, [r4, #24]
    5e2c:	f8c4 9014 	str.w	r9, [r4, #20]
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    5e30:	a801      	add	r0, sp, #4
    5e32:	f7fe fa4d 	bl	42d0 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5e36:	4922      	ldr	r1, [pc, #136]	; (5ec0 <port_group+0xd0>)
    5e38:	2301      	movs	r3, #1
    5e3a:	600b      	str	r3, [r1, #0]
    list_initialize(&pg->rp_list);

    status_t rc = NO_ERROR;

    THREAD_LOCK(state);
    for (size_t ix = 0; ix != count; ix++) {
    5e3c:	2500      	movs	r5, #0
    5e3e:	42b5      	cmp	r5, r6
    5e40:	d021      	beq.n	5e86 <port_group+0x96>
        read_port_t *rp = (read_port_t *)ports[ix];
    5e42:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        if ((rp->magic != READPORT_MAGIC) || rp->gport) {
    5e46:	481f      	ldr	r0, [pc, #124]	; (5ec4 <port_group+0xd4>)
    5e48:	681a      	ldr	r2, [r3, #0]
    5e4a:	4282      	cmp	r2, r0
    5e4c:	d001      	beq.n	5e52 <port_group+0x62>
    }
    return rc;
}

status_t port_group(port_t *ports, size_t count, port_t *group)
{
    5e4e:	2300      	movs	r3, #0
    5e50:	e00e      	b.n	5e70 <port_group+0x80>
    status_t rc = NO_ERROR;

    THREAD_LOCK(state);
    for (size_t ix = 0; ix != count; ix++) {
        read_port_t *rp = (read_port_t *)ports[ix];
        if ((rp->magic != READPORT_MAGIC) || rp->gport) {
    5e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    5e54:	2a00      	cmp	r2, #0
    5e56:	d1fa      	bne.n	5e4e <port_group+0x5e>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    5e58:	6962      	ldr	r2, [r4, #20]
            rc = ERR_BAD_HANDLE;
            break;
        }
        // link port group and read port.
        rp->gport = pg;
        list_add_tail(&pg->rp_list, &rp->g_node);
    5e5a:	f103 000c 	add.w	r0, r3, #12
    5e5e:	60da      	str	r2, [r3, #12]
            }
            rc = ERR_BAD_HANDLE;
            break;
        }
        // link port group and read port.
        rp->gport = pg;
    5e60:	631c      	str	r4, [r3, #48]	; 0x30
    item->next = list;
    5e62:	f8c3 9010 	str.w	r9, [r3, #16]
    list->prev->next = item;
    5e66:	6963      	ldr	r3, [r4, #20]
    list_initialize(&pg->rp_list);

    status_t rc = NO_ERROR;

    THREAD_LOCK(state);
    for (size_t ix = 0; ix != count; ix++) {
    5e68:	3501      	adds	r5, #1
    5e6a:	6058      	str	r0, [r3, #4]
    list->prev = item;
    5e6c:	6160      	str	r0, [r4, #20]
    5e6e:	e7e6      	b.n	5e3e <port_group+0x4e>
        read_port_t *rp = (read_port_t *)ports[ix];
        if ((rp->magic != READPORT_MAGIC) || rp->gport) {
            // wrong type of port, or port already part of a group,
            // in any case, undo the changes to the previous read ports.
            for (size_t jx = 0; jx != ix; jx++) {
    5e70:	42ab      	cmp	r3, r5
    5e72:	d005      	beq.n	5e80 <port_group+0x90>
                ((read_port_t *)ports[jx])->gport = NULL;
    5e74:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
    5e78:	2000      	movs	r0, #0
    5e7a:	6310      	str	r0, [r2, #48]	; 0x30
    for (size_t ix = 0; ix != count; ix++) {
        read_port_t *rp = (read_port_t *)ports[ix];
        if ((rp->magic != READPORT_MAGIC) || rp->gport) {
            // wrong type of port, or port already part of a group,
            // in any case, undo the changes to the previous read ports.
            for (size_t jx = 0; jx != ix; jx++) {
    5e7c:	3301      	adds	r3, #1
    5e7e:	e7f7      	b.n	5e70 <port_group+0x80>
                ((read_port_t *)ports[jx])->gport = NULL;
            }
            rc = ERR_BAD_HANDLE;
    5e80:	f06f 0529 	mvn.w	r5, #41	; 0x29
    5e84:	e000      	b.n	5e88 <port_group+0x98>

    pg->magic = PORTGROUP_MAGIC;
    wait_queue_init(&pg->wait);
    list_initialize(&pg->rp_list);

    status_t rc = NO_ERROR;
    5e86:	2500      	movs	r5, #0
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5e88:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    5e8a:	9801      	ldr	r0, [sp, #4]
    5e8c:	600b      	str	r3, [r1, #0]
    5e8e:	f7fe f9fd 	bl	428c <arch_interrupt_restore.constprop.0>
        rp->gport = pg;
        list_add_tail(&pg->rp_list, &rp->g_node);
    }
    THREAD_UNLOCK(state);

    if (rc == NO_ERROR) {
    5e92:	b915      	cbnz	r5, 5e9a <port_group+0xaa>
        *group = (port_t *)pg;
    5e94:	f8c8 4000 	str.w	r4, [r8]
    5e98:	e002      	b.n	5ea0 <port_group+0xb0>
    } else {
        free(pg);
    5e9a:	4620      	mov	r0, r4
    5e9c:	f005 fcd2 	bl	b844 <free>
    5ea0:	4628      	mov	r0, r5
    5ea2:	e007      	b.n	5eb4 <port_group+0xc4>
}

status_t port_group(port_t *ports, size_t count, port_t *group)
{
    if (count > MAX_PORT_GROUP_COUNT)
        return ERR_TOO_BIG;
    5ea4:	f06f 0018 	mvn.w	r0, #24
    5ea8:	e004      	b.n	5eb4 <port_group+0xc4>

    // Allow empty port groups.
    if (count && !ports)
        return ERR_INVALID_ARGS;
    5eaa:	f06f 0007 	mvn.w	r0, #7
    5eae:	e001      	b.n	5eb4 <port_group+0xc4>
        return ERR_INVALID_ARGS;

    // assume success; create port group now.
    port_group_t *pg = calloc(1, sizeof(port_group_t));
    if (!pg)
        return ERR_NO_MEMORY;
    5eb0:	f06f 0004 	mvn.w	r0, #4
        *group = (port_t *)pg;
    } else {
        free(pg);
    }
    return rc;
}
    5eb4:	b003      	add	sp, #12
    5eb6:	e8bd 83f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r15}
    5eba:	bf00      	nop
    5ebc:	70727467 	.word	0x70727467
    5ec0:	200008d4 	.word	0x200008d4
    5ec4:	70727472 	.word	0x70727472

00005ec8 <port_group_add>:

status_t port_group_add(port_t group, port_t port)
{
    5ec8:	b573      	push	{r0, r1, r4, r5, r6, r14}
    5eca:	4604      	mov	r4, r0
    if (!port || !group)
    5ecc:	460d      	mov	r5, r1
    5ece:	2900      	cmp	r1, #0
    5ed0:	d041      	beq.n	5f56 <port_group_add+0x8e>
    5ed2:	2800      	cmp	r0, #0
    5ed4:	d03f      	beq.n	5f56 <port_group_add+0x8e>
        return ERR_INVALID_ARGS;

    // Make sure the user has actually passed in a port group and a read-port.
    port_group_t *pg = (port_group_t *)group;
    if (pg->magic != PORTGROUP_MAGIC)
    5ed6:	6803      	ldr	r3, [r0, #0]
    5ed8:	4a22      	ldr	r2, [pc, #136]	; (5f64 <port_group_add+0x9c>)
    5eda:	4293      	cmp	r3, r2
    5edc:	d13b      	bne.n	5f56 <port_group_add+0x8e>
        return ERR_INVALID_ARGS;

    read_port_t *rp = (read_port_t *)port;
    if (rp->magic != READPORT_MAGIC || rp->gport)
    5ede:	680b      	ldr	r3, [r1, #0]
    5ee0:	320b      	adds	r2, #11
    5ee2:	4293      	cmp	r3, r2
    5ee4:	d13a      	bne.n	5f5c <port_group_add+0x94>
    5ee6:	6b0e      	ldr	r6, [r1, #48]	; 0x30
    5ee8:	2e00      	cmp	r6, #0
    5eea:	d137      	bne.n	5f5c <port_group_add+0x94>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    5eec:	a801      	add	r0, sp, #4
    5eee:	f7fe f9ef 	bl	42d0 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5ef2:	491d      	ldr	r1, [pc, #116]	; (5f68 <port_group_add+0xa0>)
    5ef4:	2301      	movs	r3, #1
    5ef6:	600b      	str	r3, [r1, #0]

static inline size_t list_length(struct list_node *list)
{
    size_t cnt = 0;
    struct list_node *node = list;
    list_for_every(list, node) {
    5ef8:	69a3      	ldr	r3, [r4, #24]
    return (list->next == list) ? true : false;
}

static inline size_t list_length(struct list_node *list)
{
    size_t cnt = 0;
    5efa:	4632      	mov	r2, r6
        return ERR_BAD_HANDLE;

    status_t rc = NO_ERROR;
    THREAD_LOCK(state);

    if (list_length(&pg->rp_list) == MAX_PORT_GROUP_COUNT) {
    5efc:	f104 0014 	add.w	r0, r4, #20
    5f00:	460e      	mov	r6, r1
    struct list_node *node = list;
    list_for_every(list, node) {
    5f02:	4283      	cmp	r3, r0
    5f04:	d002      	beq.n	5f0c <port_group_add+0x44>
        cnt++;
    5f06:	3201      	adds	r2, #1

static inline size_t list_length(struct list_node *list)
{
    size_t cnt = 0;
    struct list_node *node = list;
    list_for_every(list, node) {
    5f08:	685b      	ldr	r3, [r3, #4]
    5f0a:	e7fa      	b.n	5f02 <port_group_add+0x3a>
    5f0c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    5f10:	d016      	beq.n	5f40 <port_group_add+0x78>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    5f12:	6961      	ldr	r1, [r4, #20]
    item->next = list;
    5f14:	612b      	str	r3, [r5, #16]

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    5f16:	60e9      	str	r1, [r5, #12]
    item->next = list;
    list->prev->next = item;
    5f18:	6963      	ldr	r3, [r4, #20]
        rc = ERR_TOO_BIG;
    } else {
        rp->gport = pg;
        list_add_tail(&pg->rp_list, &rp->g_node);
    5f1a:	f105 020c 	add.w	r2, r5, #12
    THREAD_LOCK(state);

    if (list_length(&pg->rp_list) == MAX_PORT_GROUP_COUNT) {
        rc = ERR_TOO_BIG;
    } else {
        rp->gport = pg;
    5f1e:	632c      	str	r4, [r5, #48]	; 0x30
    5f20:	605a      	str	r2, [r3, #4]
        list_add_tail(&pg->rp_list, &rp->g_node);
        
        // If the new read port being added has messages available, try to wake
        // any readers that might be present.
        if (!buf_is_empty(rp->buf)) {
    5f22:	696b      	ldr	r3, [r5, #20]
    list->prev = item;
    5f24:	6162      	str	r2, [r4, #20]
    return (sizeof(val) * 8) - 1 - __builtin_clz(val);
}

static inline __ALWAYS_INLINE uint valpow2(uint valp2)
{
    return 1U << valp2;
    5f26:	681a      	ldr	r2, [r3, #0]
    5f28:	2101      	movs	r1, #1
    5f2a:	fa01 f202 	lsl.w	r2, r1, r2
    5f2e:	685b      	ldr	r3, [r3, #4]
    5f30:	4293      	cmp	r3, r2
    5f32:	d008      	beq.n	5f46 <port_group_add+0x7e>
            wait_queue_wake_one(&pg->wait, false, NO_ERROR);
    5f34:	2100      	movs	r1, #0
    5f36:	1d20      	adds	r0, r4, #4
    5f38:	460a      	mov	r2, r1
    5f3a:	f7ff f995 	bl	5268 <wait_queue_wake_one>
    5f3e:	e002      	b.n	5f46 <port_group_add+0x7e>

    status_t rc = NO_ERROR;
    THREAD_LOCK(state);

    if (list_length(&pg->rp_list) == MAX_PORT_GROUP_COUNT) {
        rc = ERR_TOO_BIG;
    5f40:	f06f 0418 	mvn.w	r4, #24
    5f44:	e000      	b.n	5f48 <port_group_add+0x80>

    read_port_t *rp = (read_port_t *)port;
    if (rp->magic != READPORT_MAGIC || rp->gport)
        return ERR_BAD_HANDLE;

    status_t rc = NO_ERROR;
    5f46:	2400      	movs	r4, #0
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5f48:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    5f4a:	9801      	ldr	r0, [sp, #4]
    5f4c:	6033      	str	r3, [r6, #0]
    5f4e:	f7fe f99d 	bl	428c <arch_interrupt_restore.constprop.0>
        }
    }

    THREAD_UNLOCK(state);

    return rc;
    5f52:	4620      	mov	r0, r4
    5f54:	e004      	b.n	5f60 <port_group_add+0x98>
}

status_t port_group_add(port_t group, port_t port)
{
    if (!port || !group)
        return ERR_INVALID_ARGS;
    5f56:	f06f 0007 	mvn.w	r0, #7
    5f5a:	e001      	b.n	5f60 <port_group_add+0x98>
    if (pg->magic != PORTGROUP_MAGIC)
        return ERR_INVALID_ARGS;

    read_port_t *rp = (read_port_t *)port;
    if (rp->magic != READPORT_MAGIC || rp->gport)
        return ERR_BAD_HANDLE;
    5f5c:	f06f 0029 	mvn.w	r0, #41	; 0x29
    }

    THREAD_UNLOCK(state);

    return rc;
}
    5f60:	b002      	add	sp, #8
    5f62:	bd70      	pop	{r4, r5, r6, r15}
    5f64:	70727467 	.word	0x70727467
    5f68:	200008d4 	.word	0x200008d4

00005f6c <port_group_remove>:

status_t port_group_remove(port_t group, port_t port)
{
    5f6c:	b573      	push	{r0, r1, r4, r5, r6, r14}
    if (!port || !group)
    5f6e:	460c      	mov	r4, r1
    5f70:	2900      	cmp	r1, #0
    5f72:	d032      	beq.n	5fda <port_group_remove+0x6e>
    5f74:	2800      	cmp	r0, #0
    5f76:	d030      	beq.n	5fda <port_group_remove+0x6e>
        return ERR_INVALID_ARGS;

    // Make sure the user has actually passed in a port group and a read-port.
    port_group_t *pg = (port_group_t *)group;
    if (pg->magic != PORTGROUP_MAGIC)
    5f78:	6803      	ldr	r3, [r0, #0]
    5f7a:	4a1a      	ldr	r2, [pc, #104]	; (5fe4 <port_group_remove+0x78>)
    5f7c:	4293      	cmp	r3, r2
    5f7e:	d12c      	bne.n	5fda <port_group_remove+0x6e>
        return ERR_INVALID_ARGS;

    read_port_t *rp = (read_port_t *)port;
    if (rp->magic != READPORT_MAGIC || rp->gport != pg)
    5f80:	680b      	ldr	r3, [r1, #0]
    5f82:	320b      	adds	r2, #11
    5f84:	4293      	cmp	r3, r2
    5f86:	d002      	beq.n	5f8e <port_group_remove+0x22>
        return ERR_BAD_HANDLE;
    5f88:	f06f 0029 	mvn.w	r0, #41	; 0x29
    5f8c:	e027      	b.n	5fde <port_group_remove+0x72>
    port_group_t *pg = (port_group_t *)group;
    if (pg->magic != PORTGROUP_MAGIC)
        return ERR_INVALID_ARGS;

    read_port_t *rp = (read_port_t *)port;
    if (rp->magic != READPORT_MAGIC || rp->gport != pg)
    5f8e:	6b0d      	ldr	r5, [r1, #48]	; 0x30
    5f90:	4285      	cmp	r5, r0
    5f92:	d1f9      	bne.n	5f88 <port_group_remove+0x1c>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    5f94:	a801      	add	r0, sp, #4
    5f96:	f7fe f99b 	bl	42d0 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    5f9a:	4913      	ldr	r1, [pc, #76]	; (5fe8 <port_group_remove+0x7c>)
    5f9c:	2301      	movs	r3, #1
    5f9e:	600b      	str	r3, [r1, #0]

    THREAD_LOCK(state);

    bool found = false;
    read_port_t *current_rp;
    list_for_every_entry(&pg->rp_list, current_rp, read_port_t, g_node) {
    5fa0:	69ab      	ldr	r3, [r5, #24]
    if (rp->magic != READPORT_MAGIC || rp->gport != pg)
        return ERR_BAD_HANDLE;

    THREAD_LOCK(state);

    bool found = false;
    5fa2:	2200      	movs	r2, #0
    read_port_t *current_rp;
    list_for_every_entry(&pg->rp_list, current_rp, read_port_t, g_node) {
    5fa4:	3b0c      	subs	r3, #12
    5fa6:	460e      	mov	r6, r1
    5fa8:	f103 000c 	add.w	r0, r3, #12
    5fac:	f105 0114 	add.w	r1, r5, #20
    5fb0:	4288      	cmp	r0, r1
    5fb2:	d005      	beq.n	5fc0 <port_group_remove+0x54>
        if (current_rp == rp) {
            found = true;
    5fb4:	42a3      	cmp	r3, r4
    5fb6:	bf08      	it	eq
    5fb8:	2201      	moveq	r2, #1

    THREAD_LOCK(state);

    bool found = false;
    read_port_t *current_rp;
    list_for_every_entry(&pg->rp_list, current_rp, read_port_t, g_node) {
    5fba:	691b      	ldr	r3, [r3, #16]
    5fbc:	3b0c      	subs	r3, #12
    5fbe:	e7f3      	b.n	5fa8 <port_group_remove+0x3c>
        if (current_rp == rp) {
            found = true;
        }
    }

    if (!found)
    5fc0:	2a00      	cmp	r2, #0
    5fc2:	d0e1      	beq.n	5f88 <port_group_remove+0x1c>
        return ERR_BAD_HANDLE;

    list_delete(&rp->g_node);
    5fc4:	f104 000c 	add.w	r0, r4, #12
    5fc8:	f7fe fb71 	bl	46ae <list_delete>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    5fcc:	2400      	movs	r4, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    5fce:	9801      	ldr	r0, [sp, #4]
    5fd0:	6034      	str	r4, [r6, #0]
    5fd2:	f7fe f95b 	bl	428c <arch_interrupt_restore.constprop.0>

    THREAD_UNLOCK(state);

    return NO_ERROR;
    5fd6:	4620      	mov	r0, r4
    5fd8:	e001      	b.n	5fde <port_group_remove+0x72>
}

status_t port_group_remove(port_t group, port_t port)
{
    if (!port || !group)
        return ERR_INVALID_ARGS;
    5fda:	f06f 0007 	mvn.w	r0, #7
    list_delete(&rp->g_node);

    THREAD_UNLOCK(state);

    return NO_ERROR;
}
    5fde:	b002      	add	sp, #8
    5fe0:	bd70      	pop	{r4, r5, r6, r15}
    5fe2:	bf00      	nop
    5fe4:	70727467 	.word	0x70727467
    5fe8:	200008d4 	.word	0x200008d4

00005fec <port_write>:

status_t port_write(port_t port, const port_packet_t *pk, size_t count)
{
    5fec:	e92d 47f3 	stmdb	r13!, {r0, r1, r4, r5, r6, r7, r8, r9, r10, r14}
    5ff0:	4688      	mov	r8, r1
    5ff2:	4691      	mov	r9, r2
    if (!port || !pk)
    5ff4:	4606      	mov	r6, r0
    5ff6:	2800      	cmp	r0, #0
    5ff8:	d04e      	beq.n	6098 <port_write+0xac>
    5ffa:	2900      	cmp	r1, #0
    5ffc:	d04c      	beq.n	6098 <port_write+0xac>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    5ffe:	a801      	add	r0, sp, #4
    6000:	f7fe f966 	bl	42d0 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    6004:	4b28      	ldr	r3, [pc, #160]	; (60a8 <port_write+0xbc>)
    6006:	2201      	movs	r2, #1
    6008:	601a      	str	r2, [r3, #0]
        return ERR_INVALID_ARGS;

    write_port_t *wp = (write_port_t *)port;
    THREAD_LOCK(state);
    if (wp->magic != WRITEPORT_MAGIC_W) {
    600a:	4928      	ldr	r1, [pc, #160]	; (60ac <port_write+0xc0>)
    600c:	6832      	ldr	r2, [r6, #0]
    600e:	469a      	mov	r10, r3
    6010:	428a      	cmp	r2, r1
    6012:	d007      	beq.n	6024 <port_write+0x38>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    6014:	2200      	movs	r2, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    6016:	9801      	ldr	r0, [sp, #4]
    6018:	601a      	str	r2, [r3, #0]
    601a:	f7fe f937 	bl	428c <arch_interrupt_restore.constprop.0>
        // wrong port type.
        THREAD_UNLOCK(state);
        return ERR_BAD_HANDLE;
    601e:	f06f 0029 	mvn.w	r0, #41	; 0x29
    6022:	e03d      	b.n	60a0 <port_write+0xb4>
    }

    status_t status = NO_ERROR;
    int awake_count = 0;

    if (wp->buf) {
    6024:	68f0      	ldr	r0, [r6, #12]
    6026:	b130      	cbz	r0, 6036 <port_write+0x4a>
        // there are no read ports, just write to the buffer.
        status = buf_write(wp->buf, pk, count);
    6028:	4641      	mov	r1, r8
    602a:	464a      	mov	r2, r9
    602c:	f7ff fd72 	bl	5b14 <buf_write>
        THREAD_UNLOCK(state);
        return ERR_BAD_HANDLE;
    }

    status_t status = NO_ERROR;
    int awake_count = 0;
    6030:	2500      	movs	r5, #0

    if (wp->buf) {
        // there are no read ports, just write to the buffer.
        status = buf_write(wp->buf, pk, count);
    6032:	4607      	mov	r7, r0
    6034:	e026      	b.n	6084 <port_write+0x98>
    } else {
        // there are read ports. for each, write and attempt to wake a thread
        // from the port group or from the read port itself.
        read_port_t *rp;
        list_for_every_entry(&wp->rp_list, rp, read_port_t, w_node) {
    6036:	6974      	ldr	r4, [r6, #20]
        THREAD_UNLOCK(state);
        return ERR_BAD_HANDLE;
    }

    status_t status = NO_ERROR;
    int awake_count = 0;
    6038:	4605      	mov	r5, r0
        status = buf_write(wp->buf, pk, count);
    } else {
        // there are read ports. for each, write and attempt to wake a thread
        // from the port group or from the read port itself.
        read_port_t *rp;
        list_for_every_entry(&wp->rp_list, rp, read_port_t, w_node) {
    603a:	3c04      	subs	r4, #4
        // wrong port type.
        THREAD_UNLOCK(state);
        return ERR_BAD_HANDLE;
    }

    status_t status = NO_ERROR;
    603c:	4607      	mov	r7, r0
        status = buf_write(wp->buf, pk, count);
    } else {
        // there are read ports. for each, write and attempt to wake a thread
        // from the port group or from the read port itself.
        read_port_t *rp;
        list_for_every_entry(&wp->rp_list, rp, read_port_t, w_node) {
    603e:	1d22      	adds	r2, r4, #4
    6040:	f106 0310 	add.w	r3, r6, #16
    6044:	429a      	cmp	r2, r3
    6046:	d01d      	beq.n	6084 <port_write+0x98>
            if (buf_write(rp->buf, pk, count) < 0) {
    6048:	6960      	ldr	r0, [r4, #20]
    604a:	4641      	mov	r1, r8
    604c:	464a      	mov	r2, r9
    604e:	f7ff fd61 	bl	5b14 <buf_write>
    6052:	2800      	cmp	r0, #0
    6054:	db11      	blt.n	607a <port_write+0x8e>
                status = ERR_PARTIAL_WRITE;
                continue;
            }

            int awaken = 0;
            if (rp->gport) {
    6056:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6058:	b930      	cbnz	r0, 6068 <port_write+0x7c>
                awaken = wait_queue_wake_one(&rp->gport->wait, false, NO_ERROR);
            }
            if (!awaken) {
                awaken = wait_queue_wake_one(&rp->wait, false, NO_ERROR);
    605a:	2100      	movs	r1, #0
    605c:	f104 001c 	add.w	r0, r4, #28
    6060:	460a      	mov	r2, r1
    6062:	f7ff f901 	bl	5268 <wait_queue_wake_one>
    6066:	e006      	b.n	6076 <port_write+0x8a>
                continue;
            }

            int awaken = 0;
            if (rp->gport) {
                awaken = wait_queue_wake_one(&rp->gport->wait, false, NO_ERROR);
    6068:	2100      	movs	r1, #0
    606a:	3004      	adds	r0, #4
    606c:	460a      	mov	r2, r1
    606e:	f7ff f8fb 	bl	5268 <wait_queue_wake_one>
            }
            if (!awaken) {
    6072:	2800      	cmp	r0, #0
    6074:	d0f1      	beq.n	605a <port_write+0x6e>
                awaken = wait_queue_wake_one(&rp->wait, false, NO_ERROR);
            }

            awake_count += awaken;
    6076:	4405      	add	r5, r0
    6078:	e001      	b.n	607e <port_write+0x92>
        // from the port group or from the read port itself.
        read_port_t *rp;
        list_for_every_entry(&wp->rp_list, rp, read_port_t, w_node) {
            if (buf_write(rp->buf, pk, count) < 0) {
                // buffer full.
                status = ERR_PARTIAL_WRITE;
    607a:	f06f 072b 	mvn.w	r7, #43	; 0x2b
        status = buf_write(wp->buf, pk, count);
    } else {
        // there are read ports. for each, write and attempt to wake a thread
        // from the port group or from the read port itself.
        read_port_t *rp;
        list_for_every_entry(&wp->rp_list, rp, read_port_t, w_node) {
    607e:	68a4      	ldr	r4, [r4, #8]
    6080:	3c04      	subs	r4, #4
    6082:	e7dc      	b.n	603e <port_write+0x52>
    6084:	2300      	movs	r3, #0
    6086:	9801      	ldr	r0, [sp, #4]
    6088:	f8ca 3000 	str.w	r3, [r10]
    608c:	f7fe f8fe 	bl	428c <arch_interrupt_restore.constprop.0>
    }

    THREAD_UNLOCK(state);

#if RESCHEDULE_POLICY
    if (awake_count)
    6090:	b12d      	cbz	r5, 609e <port_write+0xb2>
        thread_yield();
    6092:	f7fe fdb1 	bl	4bf8 <thread_yield>
    6096:	e002      	b.n	609e <port_write+0xb2>
}

status_t port_write(port_t port, const port_packet_t *pk, size_t count)
{
    if (!port || !pk)
        return ERR_INVALID_ARGS;
    6098:	f06f 0007 	mvn.w	r0, #7
    609c:	e000      	b.n	60a0 <port_write+0xb4>
#if RESCHEDULE_POLICY
    if (awake_count)
        thread_yield();
#endif

    return status;
    609e:	4638      	mov	r0, r7
}
    60a0:	b002      	add	sp, #8
    60a2:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
    60a6:	bf00      	nop
    60a8:	200008d4 	.word	0x200008d4
    60ac:	70727477 	.word	0x70727477

000060b0 <port_read>:
    // recursive tail call is usually optimized away with a goto.
    return read_no_lock(rp, timeout, result);
}

status_t port_read(port_t port, lk_time_t timeout, port_result_t *result)
{
    60b0:	e92d 43f7 	stmdb	r13!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r14}
    60b4:	4688      	mov	r8, r1
    60b6:	4617      	mov	r7, r2
    if (!port || !result)
    60b8:	4604      	mov	r4, r0
    60ba:	2800      	cmp	r0, #0
    60bc:	d03b      	beq.n	6136 <port_read+0x86>
    60be:	2a00      	cmp	r2, #0
    60c0:	d039      	beq.n	6136 <port_read+0x86>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    60c2:	a801      	add	r0, sp, #4
    60c4:	f7fe f904 	bl	42d0 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    60c8:	4a1d      	ldr	r2, [pc, #116]	; (6140 <port_read+0x90>)
    60ca:	2301      	movs	r3, #1
    60cc:	6013      	str	r3, [r2, #0]

    status_t rc = ERR_GENERIC;
    read_port_t *rp = (read_port_t *)port;

    THREAD_LOCK(state);
    if (rp->magic == READPORT_MAGIC) {
    60ce:	491d      	ldr	r1, [pc, #116]	; (6144 <port_read+0x94>)
    60d0:	6823      	ldr	r3, [r4, #0]
    60d2:	4691      	mov	r9, r2
    60d4:	428b      	cmp	r3, r1
    60d6:	d106      	bne.n	60e6 <port_read+0x36>
        // dealing with a single port.
        rc = read_no_lock(rp, timeout, result);
    60d8:	4620      	mov	r0, r4
    60da:	4641      	mov	r1, r8
    60dc:	463a      	mov	r2, r7
    60de:	f7ff fd50 	bl	5b82 <read_no_lock>
    60e2:	4605      	mov	r5, r0
    60e4:	e01f      	b.n	6126 <port_read+0x76>
    } else if (rp->magic == PORTGROUP_MAGIC) {
    60e6:	4a18      	ldr	r2, [pc, #96]	; (6148 <port_read+0x98>)
    60e8:	4293      	cmp	r3, r2
    60ea:	d11a      	bne.n	6122 <port_read+0x72>
        // dealing with a port group.
        port_group_t *pg = (port_group_t *)port;
        do {
            // read each port with no timeout.
            // todo: this order is fixed, probably a bad thing.
            list_for_every_entry(&pg->rp_list, rp, read_port_t, g_node) {
    60ec:	69a6      	ldr	r6, [r4, #24]
    60ee:	3e0c      	subs	r6, #12
    60f0:	f106 020c 	add.w	r2, r6, #12
    60f4:	f104 0314 	add.w	r3, r4, #20
    60f8:	429a      	cmp	r2, r3
    60fa:	d00a      	beq.n	6112 <port_read+0x62>
                rc = read_no_lock(rp, 0, result);
    60fc:	4630      	mov	r0, r6
    60fe:	2100      	movs	r1, #0
    6100:	463a      	mov	r2, r7
    6102:	f7ff fd3e 	bl	5b82 <read_no_lock>
                if (rc != ERR_TIMED_OUT)
    6106:	f110 0f0d 	cmn.w	r0, #13
        port_group_t *pg = (port_group_t *)port;
        do {
            // read each port with no timeout.
            // todo: this order is fixed, probably a bad thing.
            list_for_every_entry(&pg->rp_list, rp, read_port_t, g_node) {
                rc = read_no_lock(rp, 0, result);
    610a:	4605      	mov	r5, r0
                if (rc != ERR_TIMED_OUT)
    610c:	d10b      	bne.n	6126 <port_read+0x76>
        // dealing with a port group.
        port_group_t *pg = (port_group_t *)port;
        do {
            // read each port with no timeout.
            // todo: this order is fixed, probably a bad thing.
            list_for_every_entry(&pg->rp_list, rp, read_port_t, g_node) {
    610e:	6936      	ldr	r6, [r6, #16]
    6110:	e7ed      	b.n	60ee <port_read+0x3e>
                rc = read_no_lock(rp, 0, result);
                if (rc != ERR_TIMED_OUT)
                    goto read_exit;
            }
            // no data, block on the group waitqueue.
            rc = wait_queue_block(&pg->wait, timeout);
    6112:	1d20      	adds	r0, r4, #4
    6114:	4641      	mov	r1, r8
    6116:	f7fe ff9d 	bl	5054 <wait_queue_block>
        } while (rc == NO_ERROR);
    611a:	4605      	mov	r5, r0
    611c:	2800      	cmp	r0, #0
    611e:	d0e5      	beq.n	60ec <port_read+0x3c>
    6120:	e001      	b.n	6126 <port_read+0x76>
    } else {
        // wrong port type.
        rc = ERR_BAD_HANDLE;
    6122:	f06f 0529 	mvn.w	r5, #41	; 0x29
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    6126:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    6128:	9801      	ldr	r0, [sp, #4]
    612a:	f8c9 3000 	str.w	r3, [r9]
    612e:	f7fe f8ad 	bl	428c <arch_interrupt_restore.constprop.0>
    }

read_exit:
    THREAD_UNLOCK(state);
    return rc;
    6132:	4628      	mov	r0, r5
    6134:	e001      	b.n	613a <port_read+0x8a>
}

status_t port_read(port_t port, lk_time_t timeout, port_result_t *result)
{
    if (!port || !result)
        return ERR_INVALID_ARGS;
    6136:	f06f 0007 	mvn.w	r0, #7
    }

read_exit:
    THREAD_UNLOCK(state);
    return rc;
}
    613a:	b003      	add	sp, #12
    613c:	e8bd 83f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r15}
    6140:	200008d4 	.word	0x200008d4
    6144:	70727472 	.word	0x70727472
    6148:	70727467 	.word	0x70727467

0000614c <port_destroy>:

status_t port_destroy(port_t port)
{
    614c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    if (!port)
    614e:	4604      	mov	r4, r0
    6150:	2800      	cmp	r0, #0
    6152:	d03f      	beq.n	61d4 <port_destroy+0x88>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    6154:	a801      	add	r0, sp, #4
    6156:	f7fe f8bb 	bl	42d0 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    615a:	4b20      	ldr	r3, [pc, #128]	; (61dc <port_destroy+0x90>)
    615c:	2201      	movs	r2, #1
    615e:	601a      	str	r2, [r3, #0]

    write_port_t *wp = (write_port_t *) port;
    port_buf_t *buf = NULL;

    THREAD_LOCK(state);
    if (wp->magic != WRITEPORT_MAGIC_X) {
    6160:	491f      	ldr	r1, [pc, #124]	; (61e0 <port_destroy+0x94>)
    6162:	6822      	ldr	r2, [r4, #0]
    6164:	461f      	mov	r7, r3
    6166:	428a      	cmp	r2, r1
    6168:	d007      	beq.n	617a <port_destroy+0x2e>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    616a:	2200      	movs	r2, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    616c:	9801      	ldr	r0, [sp, #4]
    616e:	601a      	str	r2, [r3, #0]
    6170:	f7fe f88c 	bl	428c <arch_interrupt_restore.constprop.0>
        // wrong port type.
        THREAD_UNLOCK(state);
        return ERR_BAD_HANDLE;
    6174:	f06f 0029 	mvn.w	r0, #41	; 0x29
    6178:	e02e      	b.n	61d8 <port_destroy+0x8c>
    }
    // remove self from global named ports list.
    list_delete(&wp->node);
    617a:	1d20      	adds	r0, r4, #4
    617c:	f7fe fa97 	bl	46ae <list_delete>

    if (wp->buf) {
    6180:	68e6      	ldr	r6, [r4, #12]
    6182:	b9ce      	cbnz	r6, 61b8 <port_destroy+0x6c>
        // we have no readers.
        buf = wp->buf;
    } else {
        // for each reader:
        read_port_t *rp;
        list_for_every_entry(&wp->rp_list, rp, read_port_t, w_node) {
    6184:	6965      	ldr	r5, [r4, #20]
    6186:	3d04      	subs	r5, #4
    6188:	1d2a      	adds	r2, r5, #4
    618a:	f104 0310 	add.w	r3, r4, #16
    618e:	429a      	cmp	r2, r3
    6190:	d012      	beq.n	61b8 <port_destroy+0x6c>
            // wake the read and group ports.
            wait_queue_wake_all(&rp->wait, false, ERR_CANCELLED);
    6192:	f105 001c 	add.w	r0, r5, #28
    6196:	2100      	movs	r1, #0
    6198:	f06f 0219 	mvn.w	r2, #25
    619c:	f7ff f8d4 	bl	5348 <wait_queue_wake_all>
            if (rp->gport) {
    61a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
    61a2:	b128      	cbz	r0, 61b0 <port_destroy+0x64>
                wait_queue_wake_all(&rp->gport->wait, false, ERR_CANCELLED);
    61a4:	3004      	adds	r0, #4
    61a6:	2100      	movs	r1, #0
    61a8:	f06f 0219 	mvn.w	r2, #25
    61ac:	f7ff f8cc 	bl	5348 <wait_queue_wake_all>
            }
            // remove self from reader ports.
            rp->wport = NULL;
    61b0:	2300      	movs	r3, #0
    61b2:	62eb      	str	r3, [r5, #44]	; 0x2c
        // we have no readers.
        buf = wp->buf;
    } else {
        // for each reader:
        read_port_t *rp;
        list_for_every_entry(&wp->rp_list, rp, read_port_t, w_node) {
    61b4:	68ad      	ldr	r5, [r5, #8]
    61b6:	e7e6      	b.n	6186 <port_destroy+0x3a>
            // remove self from reader ports.
            rp->wport = NULL;
        }
    }

    wp->magic = 0;
    61b8:	2500      	movs	r5, #0
    61ba:	6025      	str	r5, [r4, #0]
    61bc:	9801      	ldr	r0, [sp, #4]
    61be:	603d      	str	r5, [r7, #0]
    61c0:	f7fe f864 	bl	428c <arch_interrupt_restore.constprop.0>
    THREAD_UNLOCK(state);

    free(buf);
    61c4:	4630      	mov	r0, r6
    61c6:	f005 fb3d 	bl	b844 <free>
    free(wp);
    61ca:	4620      	mov	r0, r4
    61cc:	f005 fb3a 	bl	b844 <free>
    return NO_ERROR;
    61d0:	4628      	mov	r0, r5
    61d2:	e001      	b.n	61d8 <port_destroy+0x8c>
}

status_t port_destroy(port_t port)
{
    if (!port)
        return ERR_INVALID_ARGS;
    61d4:	f06f 0007 	mvn.w	r0, #7
    THREAD_UNLOCK(state);

    free(buf);
    free(wp);
    return NO_ERROR;
}
    61d8:	b003      	add	sp, #12
    61da:	bdf0      	pop	{r4, r5, r6, r7, r15}
    61dc:	200008d4 	.word	0x200008d4
    61e0:	70727478 	.word	0x70727478

000061e4 <port_close>:

status_t port_close(port_t port)
{
    61e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    if (!port)
    61e6:	4604      	mov	r4, r0
    61e8:	2800      	cmp	r0, #0
    61ea:	d05b      	beq.n	62a4 <port_close+0xc0>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    61ec:	a801      	add	r0, sp, #4
    61ee:	f7fe f86f 	bl	42d0 <arch_interrupt_save.constprop.1>

    read_port_t *rp = (read_port_t *) port;
    port_buf_t *buf = NULL;

    THREAD_LOCK(state);
    if (rp->magic == READPORT_MAGIC) {
    61f2:	6822      	ldr	r2, [r4, #0]
    61f4:	482d      	ldr	r0, [pc, #180]	; (62ac <port_close+0xc8>)

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    61f6:	4b2e      	ldr	r3, [pc, #184]	; (62b0 <port_close+0xcc>)
    61f8:	2101      	movs	r1, #1
    61fa:	4282      	cmp	r2, r0
    61fc:	6019      	str	r1, [r3, #0]
    61fe:	461e      	mov	r6, r3
    6200:	d11c      	bne.n	623c <port_close+0x58>
        // dealing with a read port.
        if (rp->wport) {
    6202:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    6204:	b165      	cbz	r5, 6220 <port_close+0x3c>
            // remove self from write port list and reassign the bufer if last.
            list_delete(&rp->w_node);
    6206:	1d20      	adds	r0, r4, #4
    6208:	f7fe fa51 	bl	46ae <list_delete>
            if (list_is_empty(&rp->wport->rp_list)) {
    620c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    620e:	6965      	ldr	r5, [r4, #20]
    6210:	695a      	ldr	r2, [r3, #20]
    6212:	f103 0110 	add.w	r1, r3, #16
    6216:	428a      	cmp	r2, r1
    6218:	d102      	bne.n	6220 <port_close+0x3c>
                rp->wport->buf = rp->buf;
    621a:	60dd      	str	r5, [r3, #12]
                rp->buf = NULL;
    621c:	2500      	movs	r5, #0
    621e:	6165      	str	r5, [r4, #20]
            } else {
                buf = rp->buf;
            }
        }
        if (rp->gport) {
    6220:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6222:	b11b      	cbz	r3, 622c <port_close+0x48>
            // remove self from port group list.
            list_delete(&rp->g_node);
    6224:	f104 000c 	add.w	r0, r4, #12
    6228:	f7fe fa41 	bl	46ae <list_delete>
        }
        // wake up waiters, the return code is ERR_OBJECT_DESTROYED.
        wait_queue_destroy(&rp->wait, true);
    622c:	f104 001c 	add.w	r0, r4, #28
    6230:	2101      	movs	r1, #1
    6232:	f7ff f9c5 	bl	55c0 <wait_queue_destroy>
        rp->magic = 0;
    6236:	2300      	movs	r3, #0
    6238:	6023      	str	r3, [r4, #0]
    623a:	e026      	b.n	628a <port_close+0xa6>

    } else if (rp->magic == PORTGROUP_MAGIC) {
    623c:	481d      	ldr	r0, [pc, #116]	; (62b4 <port_close+0xd0>)
    623e:	4282      	cmp	r2, r0
    6240:	d111      	bne.n	6266 <port_close+0x82>
        // dealing with a port group.
        port_group_t *pg = (port_group_t *) port;
        // wake up waiters.
        wait_queue_destroy(&pg->wait, true);
    6242:	1d20      	adds	r0, r4, #4
    6244:	f7ff f9bc 	bl	55c0 <wait_queue_destroy>
        // remove self from reader ports.
        rp = NULL;
        list_for_every_entry(&pg->rp_list, rp, read_port_t, g_node) {
    6248:	69a3      	ldr	r3, [r4, #24]
    624a:	3b0c      	subs	r3, #12
    624c:	f103 010c 	add.w	r1, r3, #12
    6250:	f104 0214 	add.w	r2, r4, #20
    6254:	4291      	cmp	r1, r2
    6256:	f04f 0500 	mov.w	r5, #0
    625a:	d002      	beq.n	6262 <port_close+0x7e>
            rp->gport = NULL;
    625c:	631d      	str	r5, [r3, #48]	; 0x30
        port_group_t *pg = (port_group_t *) port;
        // wake up waiters.
        wait_queue_destroy(&pg->wait, true);
        // remove self from reader ports.
        rp = NULL;
        list_for_every_entry(&pg->rp_list, rp, read_port_t, g_node) {
    625e:	691b      	ldr	r3, [r3, #16]
    6260:	e7f3      	b.n	624a <port_close+0x66>
            rp->gport = NULL;
        }
        pg->magic = 0;
    6262:	6025      	str	r5, [r4, #0]
    6264:	e011      	b.n	628a <port_close+0xa6>

    } else if (rp->magic == WRITEPORT_MAGIC_W) {
    6266:	4914      	ldr	r1, [pc, #80]	; (62b8 <port_close+0xd4>)
    6268:	2500      	movs	r5, #0
    626a:	428a      	cmp	r2, r1
    626c:	9801      	ldr	r0, [sp, #4]
    626e:	d106      	bne.n	627e <port_close+0x9a>
        // dealing with a write port.
        write_port_t *wp = (write_port_t *) port;
        // mark it as closed. Now it can be read but not written to.
        wp->magic = WRITEPORT_MAGIC_X;
    6270:	4a12      	ldr	r2, [pc, #72]	; (62bc <port_close+0xd8>)
    6272:	6022      	str	r2, [r4, #0]
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    6274:	601d      	str	r5, [r3, #0]
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    6276:	f7fe f809 	bl	428c <arch_interrupt_restore.constprop.0>
        THREAD_UNLOCK(state);
        return NO_ERROR;
    627a:	4628      	mov	r0, r5
    627c:	e014      	b.n	62a8 <port_close+0xc4>
    627e:	601d      	str	r5, [r3, #0]
    6280:	f7fe f804 	bl	428c <arch_interrupt_restore.constprop.0>

    } else {
        THREAD_UNLOCK(state);
        return ERR_BAD_HANDLE;
    6284:	f06f 0029 	mvn.w	r0, #41	; 0x29
    6288:	e00e      	b.n	62a8 <port_close+0xc4>
    628a:	2700      	movs	r7, #0
    628c:	9801      	ldr	r0, [sp, #4]
    628e:	6037      	str	r7, [r6, #0]
    6290:	f7fd fffc 	bl	428c <arch_interrupt_restore.constprop.0>
    }

    THREAD_UNLOCK(state);

    free(buf);
    6294:	4628      	mov	r0, r5
    6296:	f005 fad5 	bl	b844 <free>
    free(port);
    629a:	4620      	mov	r0, r4
    629c:	f005 fad2 	bl	b844 <free>
    return NO_ERROR;
    62a0:	4638      	mov	r0, r7
    62a2:	e001      	b.n	62a8 <port_close+0xc4>
}

status_t port_close(port_t port)
{
    if (!port)
        return ERR_INVALID_ARGS;
    62a4:	f06f 0007 	mvn.w	r0, #7
    THREAD_UNLOCK(state);

    free(buf);
    free(port);
    return NO_ERROR;
}
    62a8:	b003      	add	sp, #12
    62aa:	bdf0      	pop	{r4, r5, r6, r7, r15}
    62ac:	70727472 	.word	0x70727472
    62b0:	200008d4 	.word	0x200008d4
    62b4:	70727467 	.word	0x70727467
    62b8:	70727477 	.word	0x70727477
    62bc:	70727478 	.word	0x70727478

000062c0 <AES_set_encrypt_key>:

/**
 * Expand the cipher key into the encryption key schedule.
 */
int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
			AES_KEY *key) {
    62c0:	b5f0      	push	{r4, r5, r6, r7, r14}

	u32 *rk;
   	int i = 0;
	u32 temp;

	if (!userKey || !key)
    62c2:	2800      	cmp	r0, #0
    62c4:	f000 814e 	beq.w	6564 <AES_set_encrypt_key+0x2a4>
    62c8:	2a00      	cmp	r2, #0
    62ca:	f000 814b 	beq.w	6564 <AES_set_encrypt_key+0x2a4>
		return -1;
	if (bits != 128 && bits != 192 && bits != 256)
    62ce:	f021 0340 	bic.w	r3, r1, #64	; 0x40
    62d2:	2b80      	cmp	r3, #128	; 0x80
    62d4:	d003      	beq.n	62de <AES_set_encrypt_key+0x1e>
    62d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    62da:	f040 8146 	bne.w	656a <AES_set_encrypt_key+0x2aa>
		return -2;

	rk = key->rd_key;

	if (bits==128)
    62de:	2980      	cmp	r1, #128	; 0x80
	if (!userKey || !key)
		return -1;
	if (bits != 128 && bits != 192 && bits != 256)
		return -2;

	rk = key->rd_key;
    62e0:	4613      	mov	r3, r2

	if (bits==128)
    62e2:	d101      	bne.n	62e8 <AES_set_encrypt_key+0x28>
		key->rounds = 10;
    62e4:	240a      	movs	r4, #10
    62e6:	e003      	b.n	62f0 <AES_set_encrypt_key+0x30>
	else if (bits==192)
    62e8:	29c0      	cmp	r1, #192	; 0xc0
		key->rounds = 12;
    62ea:	bf0c      	ite	eq
    62ec:	240c      	moveq	r4, #12
	else
		key->rounds = 14;
    62ee:	240e      	movne	r4, #14
    62f0:	f8c2 40f0 	str.w	r4, [r2, #240]	; 0xf0

	rk[0] = GETU32(userKey     );
    62f4:	7844      	ldrb	r4, [r0, #1]
    62f6:	7885      	ldrb	r5, [r0, #2]
    62f8:	0424      	lsls	r4, r4, #16
    62fa:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    62fe:	78c5      	ldrb	r5, [r0, #3]
	rk[1] = GETU32(userKey +  4);
	rk[2] = GETU32(userKey +  8);
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
    6300:	2980      	cmp	r1, #128	; 0x80
	else if (bits==192)
		key->rounds = 12;
	else
		key->rounds = 14;

	rk[0] = GETU32(userKey     );
    6302:	ea84 0405 	eor.w	r4, r4, r5
    6306:	7805      	ldrb	r5, [r0, #0]
    6308:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
    630c:	6014      	str	r4, [r2, #0]
	rk[1] = GETU32(userKey +  4);
    630e:	7944      	ldrb	r4, [r0, #5]
    6310:	7985      	ldrb	r5, [r0, #6]
    6312:	ea4f 4404 	mov.w	r4, r4, lsl #16
    6316:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    631a:	79c5      	ldrb	r5, [r0, #7]
    631c:	ea84 0405 	eor.w	r4, r4, r5
    6320:	7905      	ldrb	r5, [r0, #4]
    6322:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
    6326:	6054      	str	r4, [r2, #4]
	rk[2] = GETU32(userKey +  8);
    6328:	7a44      	ldrb	r4, [r0, #9]
    632a:	7a85      	ldrb	r5, [r0, #10]
    632c:	ea4f 4404 	mov.w	r4, r4, lsl #16
    6330:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    6334:	7ac5      	ldrb	r5, [r0, #11]
    6336:	ea84 0405 	eor.w	r4, r4, r5
    633a:	7a05      	ldrb	r5, [r0, #8]
    633c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
    6340:	6094      	str	r4, [r2, #8]
	rk[3] = GETU32(userKey + 12);
    6342:	7b44      	ldrb	r4, [r0, #13]
    6344:	7b85      	ldrb	r5, [r0, #14]
    6346:	ea4f 4404 	mov.w	r4, r4, lsl #16
    634a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    634e:	7bc5      	ldrb	r5, [r0, #15]
    6350:	ea84 0405 	eor.w	r4, r4, r5
    6354:	7b05      	ldrb	r5, [r0, #12]
    6356:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
    635a:	60d4      	str	r4, [r2, #12]
	if (bits == 128) {
    635c:	d136      	bne.n	63cc <AES_set_encrypt_key+0x10c>
    635e:	2100      	movs	r1, #0
			rk[4] = rk[0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
    6360:	4883      	ldr	r0, [pc, #524]	; (6570 <AES_set_encrypt_key+0x2b0>)
	rk[1] = GETU32(userKey +  4);
	rk[2] = GETU32(userKey +  8);
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		for (;;) {
			temp  = rk[3];
    6362:	68da      	ldr	r2, [r3, #12]
			rk[4] = rk[0] ^
    6364:	580d      	ldr	r5, [r1, r0]
    6366:	6818      	ldr	r0, [r3, #0]
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    6368:	b2d4      	uxtb	r4, r2
	rk[2] = GETU32(userKey +  8);
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		for (;;) {
			temp  = rk[3];
			rk[4] = rk[0] ^
    636a:	4045      	eors	r5, r0
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    636c:	4881      	ldr	r0, [pc, #516]	; (6574 <AES_set_encrypt_key+0x2b4>)
    636e:	3104      	adds	r1, #4
    6370:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
			rk[6] = rk[2] ^ rk[5];
			rk[7] = rk[3] ^ rk[6];
			if (++i == 10) {
    6374:	2928      	cmp	r1, #40	; 0x28
		for (;;) {
			temp  = rk[3];
			rk[4] = rk[0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    6376:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		for (;;) {
			temp  = rk[3];
			rk[4] = rk[0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
    637a:	ea85 0504 	eor.w	r5, r5, r4
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
    637e:	ea4f 6412 	mov.w	r4, r2, lsr #24
    6382:	f810 4024 	ldrb.w	r4, [r0, r4, lsl #2]
	if (bits == 128) {
		for (;;) {
			temp  = rk[3];
			rk[4] = rk[0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
    6386:	ea85 0504 	eor.w	r5, r5, r4
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		for (;;) {
			temp  = rk[3];
			rk[4] = rk[0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
    638a:	f3c2 4407 	ubfx	r4, r2, #16, #8
    638e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    6392:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    6396:	ea85 0504 	eor.w	r5, r5, r4
	if (bits == 128) {
		for (;;) {
			temp  = rk[3];
			rk[4] = rk[0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
    639a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    639e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    63a2:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
    63a6:	ea85 0004 	eor.w	r0, r5, r4
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
    63aa:	685c      	ldr	r4, [r3, #4]
	rk[2] = GETU32(userKey +  8);
	rk[3] = GETU32(userKey + 12);
	if (bits == 128) {
		for (;;) {
			temp  = rk[3];
			rk[4] = rk[0] ^
    63ac:	6118      	str	r0, [r3, #16]
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
    63ae:	ea80 0004 	eor.w	r0, r0, r4
			rk[6] = rk[2] ^ rk[5];
    63b2:	689c      	ldr	r4, [r3, #8]
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
    63b4:	6158      	str	r0, [r3, #20]
			rk[6] = rk[2] ^ rk[5];
    63b6:	ea80 0004 	eor.w	r0, r0, r4
			rk[7] = rk[3] ^ rk[6];
    63ba:	ea80 0202 	eor.w	r2, r0, r2
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[5] = rk[1] ^ rk[4];
			rk[6] = rk[2] ^ rk[5];
    63be:	6198      	str	r0, [r3, #24]
			rk[7] = rk[3] ^ rk[6];
    63c0:	61da      	str	r2, [r3, #28]
			if (++i == 10) {
    63c2:	d101      	bne.n	63c8 <AES_set_encrypt_key+0x108>
				return 0;
    63c4:	2000      	movs	r0, #0
    63c6:	bdf0      	pop	{r4, r5, r6, r7, r15}
			}
			rk += 4;
    63c8:	3310      	adds	r3, #16
		}
    63ca:	e7c9      	b.n	6360 <AES_set_encrypt_key+0xa0>
	}
	rk[4] = GETU32(userKey + 16);
    63cc:	7c44      	ldrb	r4, [r0, #17]
    63ce:	7c85      	ldrb	r5, [r0, #18]
    63d0:	0424      	lsls	r4, r4, #16
    63d2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    63d6:	7cc5      	ldrb	r5, [r0, #19]
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
    63d8:	29c0      	cmp	r1, #192	; 0xc0
				return 0;
			}
			rk += 4;
		}
	}
	rk[4] = GETU32(userKey + 16);
    63da:	ea84 0405 	eor.w	r4, r4, r5
    63de:	7c05      	ldrb	r5, [r0, #16]
    63e0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
    63e4:	6114      	str	r4, [r2, #16]
	rk[5] = GETU32(userKey + 20);
    63e6:	7d44      	ldrb	r4, [r0, #21]
    63e8:	7d85      	ldrb	r5, [r0, #22]
    63ea:	ea4f 4404 	mov.w	r4, r4, lsl #16
    63ee:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    63f2:	7dc5      	ldrb	r5, [r0, #23]
    63f4:	ea84 0405 	eor.w	r4, r4, r5
    63f8:	7d05      	ldrb	r5, [r0, #20]
    63fa:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
    63fe:	6154      	str	r4, [r2, #20]
	if (bits == 192) {
    6400:	d13a      	bne.n	6478 <AES_set_encrypt_key+0x1b8>
    6402:	2100      	movs	r1, #0
			rk[ 6] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
    6404:	485a      	ldr	r0, [pc, #360]	; (6570 <AES_set_encrypt_key+0x2b0>)
	}
	rk[4] = GETU32(userKey + 16);
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
		for (;;) {
			temp = rk[ 5];
    6406:	695a      	ldr	r2, [r3, #20]
			rk[ 6] = rk[ 0] ^
    6408:	580d      	ldr	r5, [r1, r0]
    640a:	6818      	ldr	r0, [r3, #0]
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    640c:	b2d4      	uxtb	r4, r2
	rk[4] = GETU32(userKey + 16);
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
		for (;;) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
    640e:	4045      	eors	r5, r0
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    6410:	4858      	ldr	r0, [pc, #352]	; (6574 <AES_set_encrypt_key+0x2b4>)
    6412:	3104      	adds	r1, #4
    6414:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 7] = rk[ 1] ^ rk[ 6];
			rk[ 8] = rk[ 2] ^ rk[ 7];
			rk[ 9] = rk[ 3] ^ rk[ 8];
			if (++i == 8) {
    6418:	2920      	cmp	r1, #32
		for (;;) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    641a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
		for (;;) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
    641e:	ea85 0504 	eor.w	r5, r5, r4
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
    6422:	ea4f 6412 	mov.w	r4, r2, lsr #24
    6426:	f810 4024 	ldrb.w	r4, [r0, r4, lsl #2]
	if (bits == 192) {
		for (;;) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
    642a:	ea85 0504 	eor.w	r5, r5, r4
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
		for (;;) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
    642e:	f3c2 4407 	ubfx	r4, r2, #16, #8
    6432:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    6436:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    643a:	ea85 0504 	eor.w	r5, r5, r4
	if (bits == 192) {
		for (;;) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
    643e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    6442:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    6446:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
    644a:	ea85 0004 	eor.w	r0, r5, r4
				rcon[i];
			rk[ 7] = rk[ 1] ^ rk[ 6];
    644e:	685c      	ldr	r4, [r3, #4]
	rk[4] = GETU32(userKey + 16);
	rk[5] = GETU32(userKey + 20);
	if (bits == 192) {
		for (;;) {
			temp = rk[ 5];
			rk[ 6] = rk[ 0] ^
    6450:	6198      	str	r0, [r3, #24]
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 7] = rk[ 1] ^ rk[ 6];
    6452:	ea80 0004 	eor.w	r0, r0, r4
			rk[ 8] = rk[ 2] ^ rk[ 7];
    6456:	689c      	ldr	r4, [r3, #8]
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 7] = rk[ 1] ^ rk[ 6];
    6458:	61d8      	str	r0, [r3, #28]
			rk[ 8] = rk[ 2] ^ rk[ 7];
    645a:	ea80 0004 	eor.w	r0, r0, r4
			rk[ 9] = rk[ 3] ^ rk[ 8];
    645e:	68dc      	ldr	r4, [r3, #12]
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 7] = rk[ 1] ^ rk[ 6];
			rk[ 8] = rk[ 2] ^ rk[ 7];
    6460:	6218      	str	r0, [r3, #32]
			rk[ 9] = rk[ 3] ^ rk[ 8];
    6462:	ea80 0004 	eor.w	r0, r0, r4
    6466:	6258      	str	r0, [r3, #36]	; 0x24
			if (++i == 8) {
    6468:	d0ac      	beq.n	63c4 <AES_set_encrypt_key+0x104>
				return 0;
			}
			rk[10] = rk[ 4] ^ rk[ 9];
    646a:	691c      	ldr	r4, [r3, #16]
			rk[11] = rk[ 5] ^ rk[10];
			rk += 6;
    646c:	3318      	adds	r3, #24
			rk[ 8] = rk[ 2] ^ rk[ 7];
			rk[ 9] = rk[ 3] ^ rk[ 8];
			if (++i == 8) {
				return 0;
			}
			rk[10] = rk[ 4] ^ rk[ 9];
    646e:	4060      	eors	r0, r4
			rk[11] = rk[ 5] ^ rk[10];
    6470:	4042      	eors	r2, r0
			rk[ 8] = rk[ 2] ^ rk[ 7];
			rk[ 9] = rk[ 3] ^ rk[ 8];
			if (++i == 8) {
				return 0;
			}
			rk[10] = rk[ 4] ^ rk[ 9];
    6472:	6118      	str	r0, [r3, #16]
			rk[11] = rk[ 5] ^ rk[10];
    6474:	615a      	str	r2, [r3, #20]
			rk += 6;
		}
    6476:	e7c5      	b.n	6404 <AES_set_encrypt_key+0x144>
	}
	rk[6] = GETU32(userKey + 24);
    6478:	7e44      	ldrb	r4, [r0, #25]
    647a:	7e85      	ldrb	r5, [r0, #26]
    647c:	0424      	lsls	r4, r4, #16
    647e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    6482:	7ec5      	ldrb	r5, [r0, #27]
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
    6484:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
			rk[10] = rk[ 4] ^ rk[ 9];
			rk[11] = rk[ 5] ^ rk[10];
			rk += 6;
		}
	}
	rk[6] = GETU32(userKey + 24);
    6488:	ea84 0405 	eor.w	r4, r4, r5
    648c:	7e05      	ldrb	r5, [r0, #24]
    648e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
    6492:	6194      	str	r4, [r2, #24]
	rk[7] = GETU32(userKey + 28);
    6494:	7f44      	ldrb	r4, [r0, #29]
    6496:	7f85      	ldrb	r5, [r0, #30]
    6498:	ea4f 4404 	mov.w	r4, r4, lsl #16
    649c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    64a0:	7fc5      	ldrb	r5, [r0, #31]
    64a2:	7f00      	ldrb	r0, [r0, #28]
    64a4:	ea84 0405 	eor.w	r4, r4, r5
    64a8:	ea44 6000 	orr.w	r0, r4, r0, lsl #24
    64ac:	61d0      	str	r0, [r2, #28]
	if (bits == 256) {
    64ae:	d189      	bne.n	63c4 <AES_set_encrypt_key+0x104>
    64b0:	2400      	movs	r4, #0
			rk[ 8] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
    64b2:	4a2f      	ldr	r2, [pc, #188]	; (6570 <AES_set_encrypt_key+0x2b0>)
	}
	rk[6] = GETU32(userKey + 24);
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
		for (;;) {
			temp = rk[ 7];
    64b4:	69d9      	ldr	r1, [r3, #28]
			rk[ 8] = rk[ 0] ^
    64b6:	58a5      	ldr	r5, [r4, r2]
    64b8:	681a      	ldr	r2, [r3, #0]
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    64ba:	b2c8      	uxtb	r0, r1
	rk[6] = GETU32(userKey + 24);
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
		for (;;) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
    64bc:	4055      	eors	r5, r2
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    64be:	4a2d      	ldr	r2, [pc, #180]	; (6574 <AES_set_encrypt_key+0x2b4>)
    64c0:	3404      	adds	r4, #4
    64c2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
			rk[10] = rk[ 2] ^ rk[ 9];
			rk[11] = rk[ 3] ^ rk[10];
			if (++i == 7) {
    64c6:	2c1c      	cmp	r4, #28
		for (;;) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    64c8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
		for (;;) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
    64cc:	ea85 0000 	eor.w	r0, r5, r0
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
    64d0:	ea4f 6511 	mov.w	r5, r1, lsr #24
    64d4:	f812 5025 	ldrb.w	r5, [r2, r5, lsl #2]
	if (bits == 256) {
		for (;;) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
    64d8:	ea80 0005 	eor.w	r0, r0, r5
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
		for (;;) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
    64dc:	f3c1 4507 	ubfx	r5, r1, #16, #8
    64e0:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
    64e4:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
    64e8:	ea80 0005 	eor.w	r0, r0, r5
	if (bits == 256) {
		for (;;) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
    64ec:	f3c1 2507 	ubfx	r5, r1, #8, #8
    64f0:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
    64f4:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
    64f8:	ea80 0005 	eor.w	r0, r0, r5
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
    64fc:	685d      	ldr	r5, [r3, #4]
	rk[6] = GETU32(userKey + 24);
	rk[7] = GETU32(userKey + 28);
	if (bits == 256) {
		for (;;) {
			temp = rk[ 7];
			rk[ 8] = rk[ 0] ^
    64fe:	6218      	str	r0, [r3, #32]
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
    6500:	ea80 0005 	eor.w	r0, r0, r5
			rk[10] = rk[ 2] ^ rk[ 9];
    6504:	689d      	ldr	r5, [r3, #8]
				(Te4[(temp >> 16) & 0xff] & 0xff000000) ^
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
    6506:	6258      	str	r0, [r3, #36]	; 0x24
			rk[10] = rk[ 2] ^ rk[ 9];
    6508:	ea80 0005 	eor.w	r0, r0, r5
			rk[11] = rk[ 3] ^ rk[10];
    650c:	68dd      	ldr	r5, [r3, #12]
				(Te4[(temp >>  8) & 0xff] & 0x00ff0000) ^
				(Te4[(temp      ) & 0xff] & 0x0000ff00) ^
				(Te4[(temp >> 24)       ] & 0x000000ff) ^
				rcon[i];
			rk[ 9] = rk[ 1] ^ rk[ 8];
			rk[10] = rk[ 2] ^ rk[ 9];
    650e:	6298      	str	r0, [r3, #40]	; 0x28
			rk[11] = rk[ 3] ^ rk[10];
    6510:	ea80 0005 	eor.w	r0, r0, r5
    6514:	62d8      	str	r0, [r3, #44]	; 0x2c
			if (++i == 7) {
    6516:	f43f af55 	beq.w	63c4 <AES_set_encrypt_key+0x104>
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te4[(temp >> 24)       ] & 0xff000000) ^
    651a:	0e05      	lsrs	r5, r0, #24
    651c:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
				(Te4[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te4[(temp >>  8) & 0xff] & 0x0000ff00) ^
				(Te4[(temp      ) & 0xff] & 0x000000ff);
    6520:	b2c5      	uxtb	r5, r0
    6522:	f812 7025 	ldrb.w	r7, [r2, r5, lsl #2]
			if (++i == 7) {
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te4[(temp >> 24)       ] & 0xff000000) ^
    6526:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
    652a:	691d      	ldr	r5, [r3, #16]
			rk[11] = rk[ 3] ^ rk[10];
			if (++i == 7) {
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
    652c:	407e      	eors	r6, r7
				(Te4[(temp >> 24)       ] & 0xff000000) ^
    652e:	4075      	eors	r5, r6
				(Te4[(temp >> 16) & 0xff] & 0x00ff0000) ^
    6530:	f3c0 4607 	ubfx	r6, r0, #16, #8
    6534:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
				(Te4[(temp >>  8) & 0xff] & 0x0000ff00) ^
    6538:	f3c0 2007 	ubfx	r0, r0, #8, #8
    653c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te4[(temp >> 24)       ] & 0xff000000) ^
				(Te4[(temp >> 16) & 0xff] & 0x00ff0000) ^
    6540:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
				(Te4[(temp >>  8) & 0xff] & 0x0000ff00) ^
    6544:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
				(Te4[(temp >> 24)       ] & 0xff000000) ^
				(Te4[(temp >> 16) & 0xff] & 0x00ff0000) ^
    6548:	4075      	eors	r5, r6
				(Te4[(temp >>  8) & 0xff] & 0x0000ff00) ^
    654a:	ea85 0200 	eor.w	r2, r5, r0
				(Te4[(temp      ) & 0xff] & 0x000000ff);
			rk[13] = rk[ 5] ^ rk[12];
    654e:	6958      	ldr	r0, [r3, #20]
			rk[11] = rk[ 3] ^ rk[10];
			if (++i == 7) {
				return 0;
			}
			temp = rk[11];
			rk[12] = rk[ 4] ^
    6550:	631a      	str	r2, [r3, #48]	; 0x30
				(Te4[(temp >> 24)       ] & 0xff000000) ^
				(Te4[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te4[(temp >>  8) & 0xff] & 0x0000ff00) ^
				(Te4[(temp      ) & 0xff] & 0x000000ff);
			rk[13] = rk[ 5] ^ rk[12];
    6552:	4042      	eors	r2, r0
			rk[14] = rk[ 6] ^ rk[13];
    6554:	6998      	ldr	r0, [r3, #24]
			rk[12] = rk[ 4] ^
				(Te4[(temp >> 24)       ] & 0xff000000) ^
				(Te4[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te4[(temp >>  8) & 0xff] & 0x0000ff00) ^
				(Te4[(temp      ) & 0xff] & 0x000000ff);
			rk[13] = rk[ 5] ^ rk[12];
    6556:	635a      	str	r2, [r3, #52]	; 0x34
			rk[14] = rk[ 6] ^ rk[13];
    6558:	4042      	eors	r2, r0
			rk[15] = rk[ 7] ^ rk[14];
    655a:	4051      	eors	r1, r2
				(Te4[(temp >> 24)       ] & 0xff000000) ^
				(Te4[(temp >> 16) & 0xff] & 0x00ff0000) ^
				(Te4[(temp >>  8) & 0xff] & 0x0000ff00) ^
				(Te4[(temp      ) & 0xff] & 0x000000ff);
			rk[13] = rk[ 5] ^ rk[12];
			rk[14] = rk[ 6] ^ rk[13];
    655c:	639a      	str	r2, [r3, #56]	; 0x38
			rk[15] = rk[ 7] ^ rk[14];
    655e:	63d9      	str	r1, [r3, #60]	; 0x3c

			rk += 8;
    6560:	3320      	adds	r3, #32
        	}
    6562:	e7a6      	b.n	64b2 <AES_set_encrypt_key+0x1f2>
	u32 *rk;
   	int i = 0;
	u32 temp;

	if (!userKey || !key)
		return -1;
    6564:	f04f 30ff 	mov.w	r0, #4294967295
    6568:	bdf0      	pop	{r4, r5, r6, r7, r15}
	if (bits != 128 && bits != 192 && bits != 256)
		return -2;
    656a:	f06f 0001 	mvn.w	r0, #1

			rk += 8;
        	}
	}
	return 0;
}
    656e:	bdf0      	pop	{r4, r5, r6, r7, r15}
    6570:	000113cc 	.word	0x000113cc
    6574:	00011ff4 	.word	0x00011ff4

00006578 <AES_encrypt>:
/*
 * Encrypt a single block
 * in and out can overlap
 */
void AES_encrypt(const unsigned char *in, unsigned char *out,
		 const AES_KEY *key) {
    6578:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    657c:	b087      	sub	sp, #28
	u32 s0, s1, s2, s3, t0, t1, t2, t3;
#ifndef FULL_UNROLL
	int r;
#endif /* ?FULL_UNROLL */

	if(!(in && out && key)) return;
    657e:	2800      	cmp	r0, #0
    6580:	f000 81ba 	beq.w	68f8 <AES_encrypt+0x380>
    6584:	2900      	cmp	r1, #0
    6586:	f000 81b7 	beq.w	68f8 <AES_encrypt+0x380>
    658a:	2a00      	cmp	r2, #0
    658c:	f000 81b4 	beq.w	68f8 <AES_encrypt+0x380>

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
    6590:	78c4      	ldrb	r4, [r0, #3]
    6592:	6813      	ldr	r3, [r2, #0]
    6594:	7807      	ldrb	r7, [r0, #0]
    6596:	4063      	eors	r3, r4
    6598:	7884      	ldrb	r4, [r0, #2]
	s1 = GETU32(in +  4) ^ rk[1];
    659a:	f890 a007 	ldrb.w	r10, [r0, #7]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
    659e:	ea83 2304 	eor.w	r3, r3, r4, lsl #8
    65a2:	7844      	ldrb	r4, [r0, #1]
	s1 = GETU32(in +  4) ^ rk[1];
	s2 = GETU32(in +  8) ^ rk[2];
	s3 = GETU32(in + 12) ^ rk[3];
    65a4:	f890 900f 	ldrb.w	r9, [r0, #15]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
    65a8:	ea83 4304 	eor.w	r3, r3, r4, lsl #16
    65ac:	ea83 6707 	eor.w	r7, r3, r7, lsl #24
	s1 = GETU32(in +  4) ^ rk[1];
    65b0:	6853      	ldr	r3, [r2, #4]

	/*
	 * map byte array block to cipher state
	 * and add initial round key:
	 */
	s0 = GETU32(in     ) ^ rk[0];
    65b2:	9703      	str	r7, [sp, #12]
	s1 = GETU32(in +  4) ^ rk[1];
    65b4:	ea8a 0303 	eor.w	r3, r10, r3
    65b8:	f890 a006 	ldrb.w	r10, [r0, #6]
    65bc:	7907      	ldrb	r7, [r0, #4]
    65be:	ea83 230a 	eor.w	r3, r3, r10, lsl #8
    65c2:	f890 a005 	ldrb.w	r10, [r0, #5]
    65c6:	ea83 4a0a 	eor.w	r10, r3, r10, lsl #16
    65ca:	ea8a 6a07 	eor.w	r10, r10, r7, lsl #24
	s2 = GETU32(in +  8) ^ rk[2];
    65ce:	6893      	ldr	r3, [r2, #8]
    65d0:	7ac7      	ldrb	r7, [r0, #11]
    65d2:	407b      	eors	r3, r7
    65d4:	7a87      	ldrb	r7, [r0, #10]
    65d6:	ea83 2307 	eor.w	r3, r3, r7, lsl #8
    65da:	7a47      	ldrb	r7, [r0, #9]
    65dc:	ea83 4707 	eor.w	r7, r3, r7, lsl #16
    65e0:	7a03      	ldrb	r3, [r0, #8]
    65e2:	ea87 6303 	eor.w	r3, r7, r3, lsl #24
    65e6:	9301      	str	r3, [sp, #4]
	s3 = GETU32(in + 12) ^ rk[3];
    65e8:	68d3      	ldr	r3, [r2, #12]
    65ea:	ea89 0303 	eor.w	r3, r9, r3
    65ee:	f890 900e 	ldrb.w	r9, [r0, #14]
    65f2:	ea83 2309 	eor.w	r3, r3, r9, lsl #8
    65f6:	f890 900d 	ldrb.w	r9, [r0, #13]
    65fa:	ea83 4909 	eor.w	r9, r3, r9, lsl #16
    65fe:	7b03      	ldrb	r3, [r0, #12]
    6600:	ea89 6903 	eor.w	r9, r9, r3, lsl #24
    rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    6604:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    6608:	105b      	asrs	r3, r3, #1
    660a:	9305      	str	r3, [sp, #20]
    660c:	9304      	str	r3, [sp, #16]
#ifndef FULL_UNROLL
	int r;
#endif /* ?FULL_UNROLL */

	if(!(in && out && key)) return;
	rk = key->rd_key;
    660e:	4613      	mov	r3, r2
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
    6610:	9803      	ldr	r0, [sp, #12]
    6612:	f8df c2fc 	ldr.w	r12, [r15, #764]	; 6910 <AES_encrypt+0x398>
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
    6616:	4eba      	ldr	r6, [pc, #744]	; (6900 <AES_encrypt+0x388>)
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
    6618:	0e04      	lsrs	r4, r0, #24
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
    661a:	fa5f f089 	uxtb.w	r0, r9
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
    661e:	f85c 4024 	ldr.w	r4, [r12, r4, lsl #2]
    6622:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
            Te1[(s1 >> 16) & 0xff] ^
    6626:	4db7      	ldr	r5, [pc, #732]	; (6904 <AES_encrypt+0x38c>)
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
    6628:	ea84 0800 	eor.w	r8, r4, r0
            Te1[(s1 >> 16) & 0xff] ^
    662c:	6918      	ldr	r0, [r3, #16]
    662e:	f3ca 4407 	ubfx	r4, r10, #16, #8
            Te2[(s2 >>  8) & 0xff] ^
    6632:	f855 4024 	ldr.w	r4, [r5, r4, lsl #2]
    6636:	9f01      	ldr	r7, [sp, #4]
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
    6638:	ea88 0000 	eor.w	r0, r8, r0
            Te2[(s2 >>  8) & 0xff] ^
    663c:	ea80 0804 	eor.w	r8, r0, r4
    6640:	4cb1      	ldr	r4, [pc, #708]	; (6908 <AES_encrypt+0x390>)
    6642:	f3c7 2007 	ubfx	r0, r7, #8, #8
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
    6646:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
    664a:	f8dd b00c 	ldr.w	r11, [r13, #12]
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
    for (;;) {
        t0 =
    664e:	ea88 0000 	eor.w	r0, r8, r0
    6652:	9002      	str	r0, [sp, #8]
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
    6654:	ea4f 681a 	mov.w	r8, r10, lsr #24
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
    6658:	fa5f f08b 	uxtb.w	r0, r11
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
    665c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
    6660:	f85c 8028 	ldr.w	r8, [r12, r8, lsl #2]
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
    6664:	ea4f 6b17 	mov.w	r11, r7, lsr #24
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
    6668:	ea88 0800 	eor.w	r8, r8, r0
            Te1[(s2 >> 16) & 0xff] ^
    666c:	6958      	ldr	r0, [r3, #20]
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
    666e:	f85c b02b 	ldr.w	r11, [r12, r11, lsl #2]
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
    6672:	ea88 0800 	eor.w	r8, r8, r0
    6676:	f3c7 4007 	ubfx	r0, r7, #16, #8
            Te2[(s3 >>  8) & 0xff] ^
    667a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
    667e:	699f      	ldr	r7, [r3, #24]
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
    6680:	ea88 0800 	eor.w	r8, r8, r0
    6684:	f3c9 2007 	ubfx	r0, r9, #8, #8
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
    6688:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
            Te3[(s2      ) & 0xff] ^
            rk[7];

        rk += 8;
    668c:	3320      	adds	r3, #32
            Te0[(s0 >> 24)       ] ^
            Te1[(s1 >> 16) & 0xff] ^
            Te2[(s2 >>  8) & 0xff] ^
            Te3[(s3      ) & 0xff] ^
            rk[4];
        t1 =
    668e:	ea88 0000 	eor.w	r0, r8, r0
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
    6692:	fa5f f88a 	uxtb.w	r8, r10
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
    6696:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
    669a:	f3ca 2a07 	ubfx	r10, r10, #8, #8
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
            Te0[(s2 >> 24)       ] ^
    669e:	ea8b 0808 	eor.w	r8, r11, r8
            Te1[(s3 >> 16) & 0xff] ^
    66a2:	f3c9 4b07 	ubfx	r11, r9, #16, #8
    66a6:	ea88 0807 	eor.w	r8, r8, r7
            Te2[(s0 >>  8) & 0xff] ^
    66aa:	f855 b02b 	ldr.w	r11, [r5, r11, lsl #2]
    66ae:	9f03      	ldr	r7, [sp, #12]
    66b0:	ea88 080b 	eor.w	r8, r8, r11
    66b4:	f3c7 2b07 	ubfx	r11, r7, #8, #8
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
    66b8:	f854 b02b 	ldr.w	r11, [r4, r11, lsl #2]
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
    66bc:	ea4f 6919 	mov.w	r9, r9, lsr #24
            Te0[(s1 >> 24)       ] ^
            Te1[(s2 >> 16) & 0xff] ^
            Te2[(s3 >>  8) & 0xff] ^
            Te3[(s0      ) & 0xff] ^
            rk[5];
        t2 =
    66c0:	ea88 080b 	eor.w	r8, r8, r11
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
            Te3[(s2      ) & 0xff] ^
    66c4:	f8dd b004 	ldr.w	r11, [r13, #4]
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
    66c8:	f85c 9029 	ldr.w	r9, [r12, r9, lsl #2]
            Te1[(s0 >> 16) & 0xff] ^
            Te2[(s1 >>  8) & 0xff] ^
            Te3[(s2      ) & 0xff] ^
    66cc:	fa5f f78b 	uxtb.w	r7, r11
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
    66d0:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
            Te1[(s0 >> 16) & 0xff] ^
    66d4:	f8dd b00c 	ldr.w	r11, [r13, #12]
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
            Te0[(s3 >> 24)       ] ^
    66d8:	ea89 0907 	eor.w	r9, r9, r7
            Te1[(s0 >> 16) & 0xff] ^
    66dc:	f853 7c04 	ldr.w	r7, [r3, #-4]
    66e0:	ea89 0707 	eor.w	r7, r9, r7
    66e4:	f3cb 4907 	ubfx	r9, r11, #16, #8
            Te2[(s1 >>  8) & 0xff] ^
    66e8:	f855 9029 	ldr.w	r9, [r5, r9, lsl #2]
    66ec:	ea87 0909 	eor.w	r9, r7, r9
            Te0[(s2 >> 24)       ] ^
            Te1[(s3 >> 16) & 0xff] ^
            Te2[(s0 >>  8) & 0xff] ^
            Te3[(s1      ) & 0xff] ^
            rk[6];
        t3 =
    66f0:	f854 702a 	ldr.w	r7, [r4, r10, lsl #2]
    66f4:	f8dd a008 	ldr.w	r10, [r13, #8]
    66f8:	ea89 0907 	eor.w	r9, r9, r7
            Te2[(s1 >>  8) & 0xff] ^
            Te3[(s2      ) & 0xff] ^
            rk[7];

        rk += 8;
        if (--r == 0) {
    66fc:	9f04      	ldr	r7, [sp, #16]
    66fe:	3f01      	subs	r7, #1
    6700:	9704      	str	r7, [sp, #16]
    6702:	ea4f 671a 	mov.w	r7, r10, lsr #24
    6706:	fa5f fa89 	uxtb.w	r10, r9
    670a:	d069      	beq.n	67e0 <AES_encrypt+0x268>
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
    670c:	f85c 7027 	ldr.w	r7, [r12, r7, lsl #2]
    6710:	f856 a02a 	ldr.w	r10, [r6, r10, lsl #2]
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
    6714:	f8dd b008 	ldr.w	r11, [r13, #8]
        if (--r == 0) {
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
    6718:	ea87 0a0a 	eor.w	r10, r7, r10
            Te1[(t1 >> 16) & 0xff] ^
    671c:	681f      	ldr	r7, [r3, #0]
    671e:	ea8a 0a07 	eor.w	r10, r10, r7
    6722:	f3c0 4707 	ubfx	r7, r0, #16, #8
            Te2[(t2 >>  8) & 0xff] ^
    6726:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    672a:	ea8a 0a07 	eor.w	r10, r10, r7
    672e:	f3c8 2707 	ubfx	r7, r8, #8, #8
        rk += 8;
        if (--r == 0) {
            break;
        }

        s0 =
    6732:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
    6736:	ea8a 0707 	eor.w	r7, r10, r7
    673a:	9703      	str	r7, [sp, #12]
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
    673c:	ea4f 6a10 	mov.w	r10, r0, lsr #24
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
    6740:	fa5f f78b 	uxtb.w	r7, r11
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
    6744:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
    6748:	f85c a02a 	ldr.w	r10, [r12, r10, lsl #2]
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
    674c:	ea4f 6b18 	mov.w	r11, r8, lsr #24
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
    6750:	ea8a 0a07 	eor.w	r10, r10, r7
            Te1[(t2 >> 16) & 0xff] ^
    6754:	685f      	ldr	r7, [r3, #4]
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
    6756:	f85c b02b 	ldr.w	r11, [r12, r11, lsl #2]
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
    675a:	ea8a 0a07 	eor.w	r10, r10, r7
    675e:	f3c8 4707 	ubfx	r7, r8, #16, #8
            Te2[(t3 >>  8) & 0xff] ^
    6762:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
            Te2[(t1 >>  8) & 0xff] ^
            Te3[(t2      ) & 0xff] ^
    6766:	fa5f f888 	uxtb.w	r8, r8
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
    676a:	ea8a 0a07 	eor.w	r10, r10, r7
    676e:	f3c9 2707 	ubfx	r7, r9, #8, #8
            Te0[(t0 >> 24)       ] ^
            Te1[(t1 >> 16) & 0xff] ^
            Te2[(t2 >>  8) & 0xff] ^
            Te3[(t3      ) & 0xff] ^
            rk[0];
        s1 =
    6772:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
    6776:	ea8a 0a07 	eor.w	r10, r10, r7
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
    677a:	b2c7      	uxtb	r7, r0
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
    677c:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
    6780:	f856 6028 	ldr.w	r6, [r6, r8, lsl #2]
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
    6784:	ea8b 0b07 	eor.w	r11, r11, r7
            Te1[(t3 >> 16) & 0xff] ^
    6788:	689f      	ldr	r7, [r3, #8]
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
            Te2[(t1 >>  8) & 0xff] ^
    678a:	f3c0 2007 	ubfx	r0, r0, #8, #8
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
    678e:	ea8b 0b07 	eor.w	r11, r11, r7
    6792:	f3c9 4707 	ubfx	r7, r9, #16, #8
            Te2[(t0 >>  8) & 0xff] ^
    6796:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
    679a:	ea4f 6919 	mov.w	r9, r9, lsr #24
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
    679e:	ea8b 0707 	eor.w	r7, r11, r7
    67a2:	f8dd b008 	ldr.w	r11, [r13, #8]
    67a6:	9701      	str	r7, [sp, #4]
    67a8:	f3cb 2707 	ubfx	r7, r11, #8, #8
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
    67ac:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
    67b0:	f8dd b004 	ldr.w	r11, [r13, #4]
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
    67b4:	f85c c029 	ldr.w	r12, [r12, r9, lsl #2]
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
    67b8:	ea8b 0707 	eor.w	r7, r11, r7
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
    67bc:	ea8c 0c06 	eor.w	r12, r12, r6
            Te0[(t1 >> 24)       ] ^
            Te1[(t2 >> 16) & 0xff] ^
            Te2[(t3 >>  8) & 0xff] ^
            Te3[(t0      ) & 0xff] ^
            rk[1];
        s2 =
    67c0:	9701      	str	r7, [sp, #4]
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
    67c2:	68de      	ldr	r6, [r3, #12]
    67c4:	9f02      	ldr	r7, [sp, #8]
    67c6:	ea8c 0c06 	eor.w	r12, r12, r6
    67ca:	f3c7 4607 	ubfx	r6, r7, #16, #8
            Te2[(t1 >>  8) & 0xff] ^
    67ce:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
    67d2:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
            Te2[(t1 >>  8) & 0xff] ^
    67d6:	ea8c 0906 	eor.w	r9, r12, r6
            Te0[(t2 >> 24)       ] ^
            Te1[(t3 >> 16) & 0xff] ^
            Te2[(t0 >>  8) & 0xff] ^
            Te3[(t1      ) & 0xff] ^
            rk[2];
        s3 =
    67da:	ea89 0900 	eor.w	r9, r9, r0
            Te0[(t3 >> 24)       ] ^
            Te1[(t0 >> 16) & 0xff] ^
            Te2[(t1 >>  8) & 0xff] ^
            Te3[(t2      ) & 0xff] ^
            rk[3];
    }
    67de:	e717      	b.n	6610 <AES_encrypt+0x98>
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te4[(t0 >> 24)       ] & 0xff000000) ^
    67e0:	4b4a      	ldr	r3, [pc, #296]	; (690c <AES_encrypt+0x394>)
    67e2:	f8dd b014 	ldr.w	r11, [r13, #20]
    67e6:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
    67ea:	ea4f 154b 	mov.w	r5, r11, lsl #5
		(Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t3      ) & 0xff] & 0x000000ff) ^
    67ee:	f813 702a 	ldrb.w	r7, [r3, r10, lsl #2]
    67f2:	1954      	adds	r4, r2, r5
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te4[(t0 >> 24)       ] & 0xff000000) ^
    67f4:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
		(Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
    67f8:	5955      	ldr	r5, [r2, r5]
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te4[(t0 >> 24)       ] & 0xff000000) ^
    67fa:	407e      	eors	r6, r7
		(Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
    67fc:	ea86 0205 	eor.w	r2, r6, r5
    6800:	f3c0 4507 	ubfx	r5, r0, #16, #8
    6804:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
	PUTU32(out     , s0);
	s1 =
		(Te4[(t1 >> 24)       ] & 0xff000000) ^
		(Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t0      ) & 0xff] & 0x000000ff) ^
    6808:	9e02      	ldr	r6, [sp, #8]
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te4[(t0 >> 24)       ] & 0xff000000) ^
		(Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
    680a:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
		(Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
    680e:	406a      	eors	r2, r5
    6810:	f3c8 2507 	ubfx	r5, r8, #8, #8
    6814:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te4[(t2 >> 24)       ] & 0xff000000) ^
		(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
    6818:	9f02      	ldr	r7, [sp, #8]
	 * map cipher state to byte array block:
	 */
	s0 =
		(Te4[(t0 >> 24)       ] & 0xff000000) ^
		(Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
    681a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
#endif /* ?FULL_UNROLL */
    /*
	 * apply last round and
	 * map cipher state to byte array block:
	 */
	s0 =
    681e:	406a      	eors	r2, r5
		(Te4[(t0 >> 24)       ] & 0xff000000) ^
		(Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
    6820:	0a15      	lsrs	r5, r2, #8
    6822:	70ca      	strb	r2, [r1, #3]
    6824:	708d      	strb	r5, [r1, #2]
    6826:	0c15      	lsrs	r5, r2, #16
    6828:	0e12      	lsrs	r2, r2, #24
    682a:	700a      	strb	r2, [r1, #0]
	s1 =
		(Te4[(t1 >> 24)       ] & 0xff000000) ^
    682c:	0e02      	lsrs	r2, r0, #24
		(Te4[(t0 >> 24)       ] & 0xff000000) ^
		(Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
    682e:	704d      	strb	r5, [r1, #1]
	s1 =
		(Te4[(t1 >> 24)       ] & 0xff000000) ^
    6830:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
		(Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t0      ) & 0xff] & 0x000000ff) ^
    6834:	b2f2      	uxtb	r2, r6
    6836:	f813 6022 	ldrb.w	r6, [r3, r2, lsl #2]
		(Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
	s1 =
		(Te4[(t1 >> 24)       ] & 0xff000000) ^
    683a:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
		(Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
    683e:	6862      	ldr	r2, [r4, #4]
		(Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
	s1 =
		(Te4[(t1 >> 24)       ] & 0xff000000) ^
    6840:	4075      	eors	r5, r6
		(Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
    6842:	406a      	eors	r2, r5
    6844:	f3c8 4507 	ubfx	r5, r8, #16, #8
    6848:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    684c:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
		(Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
    6850:	406a      	eors	r2, r5
    6852:	f3c9 2507 	ubfx	r5, r9, #8, #8
    6856:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    685a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
		(Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t2 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t3      ) & 0xff] & 0x000000ff) ^
		rk[0];
	PUTU32(out     , s0);
	s1 =
    685e:	406a      	eors	r2, r5
		(Te4[(t1 >> 24)       ] & 0xff000000) ^
		(Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
    6860:	0a15      	lsrs	r5, r2, #8
    6862:	71ca      	strb	r2, [r1, #7]
    6864:	718d      	strb	r5, [r1, #6]
    6866:	0c15      	lsrs	r5, r2, #16
    6868:	0e12      	lsrs	r2, r2, #24
    686a:	710a      	strb	r2, [r1, #4]
	s2 =
		(Te4[(t2 >> 24)       ] & 0xff000000) ^
    686c:	ea4f 6218 	mov.w	r2, r8, lsr #24
		(Te4[(t1 >> 24)       ] & 0xff000000) ^
		(Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
    6870:	714d      	strb	r5, [r1, #5]
	s2 =
		(Te4[(t2 >> 24)       ] & 0xff000000) ^
    6872:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
		(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t1      ) & 0xff] & 0x000000ff) ^
    6876:	b2c2      	uxtb	r2, r0
    6878:	f813 6022 	ldrb.w	r6, [r3, r2, lsl #2]
		(Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te4[(t2 >> 24)       ] & 0xff000000) ^
    687c:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
		(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
    6880:	68a2      	ldr	r2, [r4, #8]
		(Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te4[(t2 >> 24)       ] & 0xff000000) ^
    6882:	4075      	eors	r5, r6
		(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
    6884:	406a      	eors	r2, r5
    6886:	f3c9 4507 	ubfx	r5, r9, #16, #8
    688a:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
		(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
		(Te4[(t3 >> 24)       ] & 0xff000000) ^
    688e:	ea4f 6919 	mov.w	r9, r9, lsr #24
		(Te4[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te4[(t2 >> 24)       ] & 0xff000000) ^
		(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
    6892:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
		(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
    6896:	406a      	eors	r2, r5
    6898:	f3c7 2507 	ubfx	r5, r7, #8, #8
    689c:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
	PUTU32(out +  8, s2);
	s3 =
		(Te4[(t3 >> 24)       ] & 0xff000000) ^
		(Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t2      ) & 0xff] & 0x000000ff) ^
    68a0:	fa5f f888 	uxtb.w	r8, r8
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
		(Te4[(t2 >> 24)       ] & 0xff000000) ^
		(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
    68a4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
		(Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t3 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t0      ) & 0xff] & 0x000000ff) ^
		rk[1];
	PUTU32(out +  4, s1);
	s2 =
    68a8:	406a      	eors	r2, r5
		(Te4[(t2 >> 24)       ] & 0xff000000) ^
		(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
    68aa:	0a15      	lsrs	r5, r2, #8
    68ac:	728d      	strb	r5, [r1, #10]
    68ae:	0c15      	lsrs	r5, r2, #16
    68b0:	72ca      	strb	r2, [r1, #11]
    68b2:	724d      	strb	r5, [r1, #9]
    68b4:	0e12      	lsrs	r2, r2, #24
	s3 =
		(Te4[(t3 >> 24)       ] & 0xff000000) ^
    68b6:	f853 5029 	ldr.w	r5, [r3, r9, lsl #2]
		(Te4[(t2 >> 24)       ] & 0xff000000) ^
		(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
    68ba:	720a      	strb	r2, [r1, #8]
	s3 =
		(Te4[(t3 >> 24)       ] & 0xff000000) ^
		(Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t2      ) & 0xff] & 0x000000ff) ^
    68bc:	f813 2028 	ldrb.w	r2, [r3, r8, lsl #2]
		(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
		(Te4[(t3 >> 24)       ] & 0xff000000) ^
    68c0:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
    68c4:	4055      	eors	r5, r2
		(Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
    68c6:	68e2      	ldr	r2, [r4, #12]
		(Te4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
    68c8:	f3c0 2007 	ubfx	r0, r0, #8, #8
		(Te4[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
		(Te4[(t3 >> 24)       ] & 0xff000000) ^
		(Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
    68cc:	ea85 0402 	eor.w	r4, r5, r2
    68d0:	f3c7 4207 	ubfx	r2, r7, #16, #8
    68d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    68d8:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
		(Te4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
    68dc:	4054      	eors	r4, r2
    68de:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    68e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
		(Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t0 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t1      ) & 0xff] & 0x000000ff) ^
		rk[2];
	PUTU32(out +  8, s2);
	s3 =
    68e6:	ea84 0302 	eor.w	r3, r4, r2
		(Te4[(t3 >> 24)       ] & 0xff000000) ^
		(Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^
		(Te4[(t1 >>  8) & 0xff] & 0x0000ff00) ^
		(Te4[(t2      ) & 0xff] & 0x000000ff) ^
		rk[3];
	PUTU32(out + 12, s3);
    68ea:	0a1a      	lsrs	r2, r3, #8
    68ec:	73cb      	strb	r3, [r1, #15]
    68ee:	738a      	strb	r2, [r1, #14]
    68f0:	0c1a      	lsrs	r2, r3, #16
    68f2:	0e1b      	lsrs	r3, r3, #24
    68f4:	734a      	strb	r2, [r1, #13]
    68f6:	730b      	strb	r3, [r1, #12]
}
    68f8:	b007      	add	sp, #28
    68fa:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    68fe:	bf00      	nop
    6900:	00010fcc 	.word	0x00010fcc
    6904:	000117f4 	.word	0x000117f4
    6908:	00011bf4 	.word	0x00011bf4
    690c:	00011ff4 	.word	0x00011ff4
    6910:	000113f4 	.word	0x000113f4

00006914 <aes_bench>:
    }
    return 0;
}

static int aes_bench(int argc, const cmd_args *argv)
{
    6914:	b570      	push	{r4, r5, r6, r14}
    6916:	b0c2      	sub	sp, #264	; 0x108
    int i;
    AES_KEY aes_key;
    uint8_t ciphertext[AES_BLOCK_SIZE];
#define ITER 1000

    memset(ciphertext, 0, sizeof(ciphertext));
    6918:	a801      	add	r0, sp, #4
    691a:	2100      	movs	r1, #0
    691c:	2210      	movs	r2, #16
    691e:	f005 f99b 	bl	bc58 <memset>
static inline uint32_t arch_cycle_count(void)
{
#if ARM_ISA_ARMV7M
#if ENABLE_CYCLE_COUNTER
#define DWT_CYCCNT (0xE0001004)
    return *REG32(DWT_CYCCNT);
    6922:	4b15      	ldr	r3, [pc, #84]	; (6978 <aes_bench+0x64>)
    6924:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    6928:	681e      	ldr	r6, [r3, #0]

    c = arch_cycle_count();

    for (i = 0; i < ITER; i++) {
        AES_set_encrypt_key(key, 128, &aes_key);
    692a:	4814      	ldr	r0, [pc, #80]	; (697c <aes_bench+0x68>)
    692c:	2180      	movs	r1, #128	; 0x80
    692e:	aa05      	add	r2, sp, #20
    6930:	f7ff fcc6 	bl	62c0 <AES_set_encrypt_key>

    memset(ciphertext, 0, sizeof(ciphertext));

    c = arch_cycle_count();

    for (i = 0; i < ITER; i++) {
    6934:	3c01      	subs	r4, #1
    6936:	d1f8      	bne.n	692a <aes_bench+0x16>
    6938:	4d0f      	ldr	r5, [pc, #60]	; (6978 <aes_bench+0x64>)
        AES_set_encrypt_key(key, 128, &aes_key);
    }

    c = arch_cycle_count() - c;
    printf("%u cycles to set encryption key\n", c / ITER);
    693a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    693e:	682b      	ldr	r3, [r5, #0]
    6940:	480f      	ldr	r0, [pc, #60]	; (6980 <aes_bench+0x6c>)

    for (i = 0; i < ITER; i++) {
        AES_set_encrypt_key(key, 128, &aes_key);
    }

    c = arch_cycle_count() - c;
    6942:	1b99      	subs	r1, r3, r6
    printf("%u cycles to set encryption key\n", c / ITER);
    6944:	fbb1 f1f4 	udiv	r1, r1, r4
    6948:	f005 ff9e 	bl	c888 <_printf>
    694c:	682d      	ldr	r5, [r5, #0]

    c = arch_cycle_count();
    for (i = 0; i < ITER; i++) {
        AES_encrypt(plaintext, ciphertext, &aes_key);
    694e:	480d      	ldr	r0, [pc, #52]	; (6984 <aes_bench+0x70>)
    6950:	a901      	add	r1, sp, #4
    6952:	aa05      	add	r2, sp, #20
    6954:	f7ff fe10 	bl	6578 <AES_encrypt>

    c = arch_cycle_count() - c;
    printf("%u cycles to set encryption key\n", c / ITER);

    c = arch_cycle_count();
    for (i = 0; i < ITER; i++) {
    6958:	3c01      	subs	r4, #1
    695a:	d1f8      	bne.n	694e <aes_bench+0x3a>
    695c:	4b06      	ldr	r3, [pc, #24]	; (6978 <aes_bench+0x64>)
        AES_encrypt(plaintext, ciphertext, &aes_key);
    }
    c = arch_cycle_count() - c;

    printf("%u cycles to encrypt block of 16 bytes\n", c / ITER);
    695e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    6962:	681b      	ldr	r3, [r3, #0]
    6964:	4808      	ldr	r0, [pc, #32]	; (6988 <aes_bench+0x74>)

    c = arch_cycle_count();
    for (i = 0; i < ITER; i++) {
        AES_encrypt(plaintext, ciphertext, &aes_key);
    }
    c = arch_cycle_count() - c;
    6966:	1b5d      	subs	r5, r3, r5

    printf("%u cycles to encrypt block of 16 bytes\n", c / ITER);
    6968:	fbb5 f1f1 	udiv	r1, r5, r1
    696c:	f005 ff8c 	bl	c888 <_printf>

    return 0;
}
    6970:	4620      	mov	r0, r4
    6972:	b042      	add	sp, #264	; 0x108
    6974:	bd70      	pop	{r4, r5, r6, r15}
    6976:	bf00      	nop
    6978:	e0001004 	.word	0xe0001004
    697c:	00012598 	.word	0x00012598
    6980:	00012420 	.word	0x00012420
    6984:	00012410 	.word	0x00012410
    6988:	00012441 	.word	0x00012441

0000698c <aes_command>:
    0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
    0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a
};

static int aes_command(int argc, const cmd_args *argv)
{
    698c:	b530      	push	{r4, r5, r14}
    AES_KEY aes_key;
    uint8_t ciphertext[AES_BLOCK_SIZE];

    TRACEF("Testing AES encryption.\n");
    698e:	492c      	ldr	r1, [pc, #176]	; (6a40 <aes_command+0xb4>)
    0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
    0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a
};

static int aes_command(int argc, const cmd_args *argv)
{
    6990:	b0c5      	sub	sp, #276	; 0x114
    AES_KEY aes_key;
    uint8_t ciphertext[AES_BLOCK_SIZE];

    TRACEF("Testing AES encryption.\n");
    memset(ciphertext, 0, sizeof(ciphertext));
    6992:	2410      	movs	r4, #16
static int aes_command(int argc, const cmd_args *argv)
{
    AES_KEY aes_key;
    uint8_t ciphertext[AES_BLOCK_SIZE];

    TRACEF("Testing AES encryption.\n");
    6994:	2228      	movs	r2, #40	; 0x28
    6996:	482b      	ldr	r0, [pc, #172]	; (6a44 <aes_command+0xb8>)
    6998:	f005 ff76 	bl	c888 <_printf>
    memset(ciphertext, 0, sizeof(ciphertext));
    699c:	2100      	movs	r1, #0
    699e:	4622      	mov	r2, r4
    69a0:	a803      	add	r0, sp, #12
    69a2:	f005 f959 	bl	bc58 <memset>
    AES_set_encrypt_key(key, 128, &aes_key);
    69a6:	aa07      	add	r2, sp, #28
    69a8:	2180      	movs	r1, #128	; 0x80
    69aa:	4827      	ldr	r0, [pc, #156]	; (6a48 <aes_command+0xbc>)
    69ac:	f7ff fc88 	bl	62c0 <AES_set_encrypt_key>
    lk_bigtime_t start = current_time_hires();
    69b0:	f7fd fa74 	bl	3e9c <current_time_hires>
    AES_encrypt(plaintext, ciphertext, &aes_key);
    69b4:	aa07      	add	r2, sp, #28
    uint8_t ciphertext[AES_BLOCK_SIZE];

    TRACEF("Testing AES encryption.\n");
    memset(ciphertext, 0, sizeof(ciphertext));
    AES_set_encrypt_key(key, 128, &aes_key);
    lk_bigtime_t start = current_time_hires();
    69b6:	4605      	mov	r5, r0
    AES_encrypt(plaintext, ciphertext, &aes_key);
    69b8:	a903      	add	r1, sp, #12
    69ba:	4824      	ldr	r0, [pc, #144]	; (6a4c <aes_command+0xc0>)
    69bc:	f7ff fddc 	bl	6578 <AES_encrypt>
    lk_bigtime_t end = current_time_hires();
    69c0:	f7fd fa6c 	bl	3e9c <current_time_hires>
    int elapsed = end - start;
    69c4:	1b43      	subs	r3, r0, r5
    TRACEF("Elapsed time: %d us for 16 bytes (%d.%03d us per byte)\n",
    69c6:	fb93 f2f4 	sdiv	r2, r3, r4
    69ca:	9200      	str	r2, [sp, #0]
    69cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    69d0:	fb02 f103 	mul.w	r1, r2, r3
    69d4:	fb91 f1f4 	sdiv	r1, r1, r4
    69d8:	fb91 f0f2 	sdiv	r0, r1, r2
    69dc:	fb02 1210 	mls	r2, r2, r0, r1
           elapsed, elapsed / AES_BLOCK_SIZE,
           ((elapsed * 1000) / AES_BLOCK_SIZE) % 1000);
    int not_equal = memcmp(expected_ciphertext, ciphertext, AES_BLOCK_SIZE);
    69e0:	4d1b      	ldr	r5, [pc, #108]	; (6a50 <aes_command+0xc4>)
    AES_set_encrypt_key(key, 128, &aes_key);
    lk_bigtime_t start = current_time_hires();
    AES_encrypt(plaintext, ciphertext, &aes_key);
    lk_bigtime_t end = current_time_hires();
    int elapsed = end - start;
    TRACEF("Elapsed time: %d us for 16 bytes (%d.%03d us per byte)\n",
    69e2:	9201      	str	r2, [sp, #4]
    69e4:	4916      	ldr	r1, [pc, #88]	; (6a40 <aes_command+0xb4>)
    69e6:	2231      	movs	r2, #49	; 0x31
    69e8:	481a      	ldr	r0, [pc, #104]	; (6a54 <aes_command+0xc8>)
    69ea:	f005 ff4d 	bl	c888 <_printf>
           elapsed, elapsed / AES_BLOCK_SIZE,
           ((elapsed * 1000) / AES_BLOCK_SIZE) % 1000);
    int not_equal = memcmp(expected_ciphertext, ciphertext, AES_BLOCK_SIZE);
    69ee:	4628      	mov	r0, r5
    69f0:	a903      	add	r1, sp, #12
    69f2:	4622      	mov	r2, r4
    69f4:	f005 ff60 	bl	c8b8 <memcmp>
    if (not_equal) {
    69f8:	b1c8      	cbz	r0, 6a2e <aes_command+0xa2>
        TRACEF("Encryption failed.  Expected:\n");
    69fa:	4911      	ldr	r1, [pc, #68]	; (6a40 <aes_command+0xb4>)
    69fc:	2234      	movs	r2, #52	; 0x34
    69fe:	4816      	ldr	r0, [pc, #88]	; (6a58 <aes_command+0xcc>)
    6a00:	f005 ff42 	bl	c888 <_printf>
    6a04:	2300      	movs	r3, #0
    6a06:	4628      	mov	r0, r5
    6a08:	4621      	mov	r1, r4
    6a0a:	462a      	mov	r2, r5
    6a0c:	f004 fdc8 	bl	b5a0 <hexdump8_ex>
        hexdump8(expected_ciphertext, sizeof(expected_ciphertext));
        TRACEF("Actual:\n");
    6a10:	490b      	ldr	r1, [pc, #44]	; (6a40 <aes_command+0xb4>)
    6a12:	2236      	movs	r2, #54	; 0x36
    6a14:	4811      	ldr	r0, [pc, #68]	; (6a5c <aes_command+0xd0>)
    6a16:	f005 ff37 	bl	c888 <_printf>
    6a1a:	a803      	add	r0, sp, #12
    6a1c:	4602      	mov	r2, r0
    6a1e:	4621      	mov	r1, r4
    6a20:	2300      	movs	r3, #0
    6a22:	f004 fdbd 	bl	b5a0 <hexdump8_ex>
        hexdump8(ciphertext, sizeof(ciphertext));
        TRACEF("FAILED AES encryption\n");
    6a26:	480e      	ldr	r0, [pc, #56]	; (6a60 <aes_command+0xd4>)
    6a28:	4905      	ldr	r1, [pc, #20]	; (6a40 <aes_command+0xb4>)
    6a2a:	2238      	movs	r2, #56	; 0x38
    6a2c:	e002      	b.n	6a34 <aes_command+0xa8>
    } else {
        TRACEF("PASSED AES encryption\n");
    6a2e:	480d      	ldr	r0, [pc, #52]	; (6a64 <aes_command+0xd8>)
    6a30:	4903      	ldr	r1, [pc, #12]	; (6a40 <aes_command+0xb4>)
    6a32:	223a      	movs	r2, #58	; 0x3a
    6a34:	f005 ff28 	bl	c888 <_printf>
    }
    return 0;
}
    6a38:	2000      	movs	r0, #0
    6a3a:	b045      	add	sp, #276	; 0x114
    6a3c:	bd30      	pop	{r4, r5, r15}
    6a3e:	bf00      	nop
    6a40:	000123f4 	.word	0x000123f4
    6a44:	00012469 	.word	0x00012469
    6a48:	00012598 	.word	0x00012598
    6a4c:	00012410 	.word	0x00012410
    6a50:	00012400 	.word	0x00012400
    6a54:	00012489 	.word	0x00012489
    6a58:	000124c8 	.word	0x000124c8
    6a5c:	000124ee 	.word	0x000124ee
    6a60:	000124fe 	.word	0x000124fe
    6a64:	0001251c 	.word	0x0001251c

00006a68 <arch_interrupt_restore.constprop.1>:
static inline void
arch_interrupt_restore(spin_lock_saved_state_t old_state, spin_lock_save_flags_t flags)
{
    if ((flags & SPIN_LOCK_FLAG_FIQ) && (old_state & SPIN_LOCK_STATE_RESTORE_FIQ))
        arch_enable_fiqs();
    if ((flags & SPIN_LOCK_FLAG_IRQ) && (old_state & SPIN_LOCK_STATE_RESTORE_IRQ))
    6a68:	07c3      	lsls	r3, r0, #31
    6a6a:	d500      	bpl.n	6a6e <arch_interrupt_restore.constprop.1+0x6>

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
    6a6c:	b662      	cpsie	i
    6a6e:	4770      	bx	r14

00006a70 <arch_interrupt_save.constprop.2>:
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    6a70:	f3ef 8310 	mrs	r3, PRIMASK

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    if ((flags & SPIN_LOCK_FLAG_IRQ) && !arch_ints_disabled()) {
    6a74:	07da      	lsls	r2, r3, #31
    6a76:	d402      	bmi.n	6a7e <arch_interrupt_save.constprop.2+0xe>
    __asm__ volatile("cpsie i");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
    6a78:	b672      	cpsid	i
        state |= SPIN_LOCK_STATE_RESTORE_IRQ;
    6a7a:	2301      	movs	r3, #1
    6a7c:	e000      	b.n	6a80 <arch_interrupt_save.constprop.2+0x10>
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    6a7e:	2300      	movs	r3, #0
    }
    if ((flags & SPIN_LOCK_FLAG_FIQ) && !arch_fiqs_disabled()) {
        state |= SPIN_LOCK_STATE_RESTORE_FIQ;
        arch_disable_fiqs();
    }
    *statep = state;
    6a80:	6003      	str	r3, [r0, #0]
    6a82:	4770      	bx	r14

00006a84 <cbuf_initialize_etc>:
{
    cbuf_initialize_etc(cbuf, len, malloc(len));
}

void cbuf_initialize_etc(cbuf_t *cbuf, size_t len, void *buf)
{
    6a84:	b537      	push	{r0, r1, r2, r4, r5, r14}
    DEBUG_ASSERT(cbuf);
    6a86:	4604      	mov	r4, r0
    6a88:	b930      	cbnz	r0, 6a98 <cbuf_initialize_etc+0x14>
    6a8a:	4b15      	ldr	r3, [pc, #84]	; (6ae0 <cbuf_initialize_etc+0x5c>)
    6a8c:	4670      	mov	r0, r14
    6a8e:	9300      	str	r3, [sp, #0]
    6a90:	4914      	ldr	r1, [pc, #80]	; (6ae4 <cbuf_initialize_etc+0x60>)
    6a92:	4a15      	ldr	r2, [pc, #84]	; (6ae8 <cbuf_initialize_etc+0x64>)
    6a94:	232d      	movs	r3, #45	; 0x2d
    6a96:	e006      	b.n	6aa6 <cbuf_initialize_etc+0x22>
    DEBUG_ASSERT(len > 0);
    6a98:	b939      	cbnz	r1, 6aaa <cbuf_initialize_etc+0x26>
    6a9a:	4b14      	ldr	r3, [pc, #80]	; (6aec <cbuf_initialize_etc+0x68>)
    6a9c:	4911      	ldr	r1, [pc, #68]	; (6ae4 <cbuf_initialize_etc+0x60>)
    6a9e:	4a12      	ldr	r2, [pc, #72]	; (6ae8 <cbuf_initialize_etc+0x64>)
    6aa0:	9300      	str	r3, [sp, #0]
    6aa2:	4670      	mov	r0, r14
    6aa4:	232e      	movs	r3, #46	; 0x2e
    6aa6:	f004 fd05 	bl	b4b4 <_panic>
__BEGIN_CDECLS;

/* routines for dealing with power of 2 values for efficiency */
static inline __ALWAYS_INLINE bool ispow2(uint val)
{
    return ((val - 1) & val) == 0;
    6aaa:	1e4d      	subs	r5, r1, #1
    DEBUG_ASSERT(ispow2(len));
    6aac:	400d      	ands	r5, r1
    6aae:	d006      	beq.n	6abe <cbuf_initialize_etc+0x3a>
    6ab0:	4b0f      	ldr	r3, [pc, #60]	; (6af0 <cbuf_initialize_etc+0x6c>)
    6ab2:	4670      	mov	r0, r14
    6ab4:	9300      	str	r3, [sp, #0]
    6ab6:	490b      	ldr	r1, [pc, #44]	; (6ae4 <cbuf_initialize_etc+0x60>)
    6ab8:	4a0b      	ldr	r2, [pc, #44]	; (6ae8 <cbuf_initialize_etc+0x64>)
    6aba:	232f      	movs	r3, #47	; 0x2f
    6abc:	e7f3      	b.n	6aa6 <cbuf_initialize_etc+0x22>
static inline __ALWAYS_INLINE uint log2_uint(uint val)
{
    if (val == 0)
        return 0; // undefined

    return (sizeof(val) * 8) - 1 - __builtin_clz(val);
    6abe:	fab1 f181 	clz	r1, r1
    6ac2:	f1c1 011f 	rsb	r1, r1, #31

    cbuf->head = 0;
    cbuf->tail = 0;
    cbuf->len_pow2 = log2_uint(len);
    6ac6:	6081      	str	r1, [r0, #8]
    cbuf->buf = buf;
    6ac8:	60c2      	str	r2, [r0, #12]
{
    DEBUG_ASSERT(cbuf);
    DEBUG_ASSERT(len > 0);
    DEBUG_ASSERT(ispow2(len));

    cbuf->head = 0;
    6aca:	6005      	str	r5, [r0, #0]
    cbuf->tail = 0;
    6acc:	6045      	str	r5, [r0, #4]
    cbuf->len_pow2 = log2_uint(len);
    cbuf->buf = buf;
    event_init(&cbuf->event, false, 0);
    6ace:	4629      	mov	r1, r5
    6ad0:	3010      	adds	r0, #16
    6ad2:	462a      	mov	r2, r5
    6ad4:	f7fd fc06 	bl	42e4 <event_init>
typedef unsigned long spin_lock_saved_state_t;
typedef unsigned long spin_lock_save_flags_t;

static inline void arch_spin_lock_init(spin_lock_t *lock)
{
    *lock = SPIN_LOCK_INITIAL_VALUE;
    6ad8:	62e5      	str	r5, [r4, #44]	; 0x2c
    spin_lock_init(&cbuf->lock);

    LTRACEF("len %zd, len_pow2 %u\n", len, cbuf->len_pow2);
}
    6ada:	b003      	add	sp, #12
    6adc:	bd30      	pop	{r4, r5, r15}
    6ade:	bf00      	nop
    6ae0:	0000f715 	.word	0x0000f715
    6ae4:	0001076e 	.word	0x0001076e
    6ae8:	000125a8 	.word	0x000125a8
    6aec:	000125b8 	.word	0x000125b8
    6af0:	000125c0 	.word	0x000125c0

00006af4 <cbuf_initialize>:

#define INC_POINTER(cbuf, ptr, inc) \
    modpow2(((ptr) + (inc)), (cbuf)->len_pow2)

void cbuf_initialize(cbuf_t *cbuf, size_t len)
{
    6af4:	b538      	push	{r3, r4, r5, r14}
    6af6:	4605      	mov	r5, r0
    cbuf_initialize_etc(cbuf, len, malloc(len));
    6af8:	4608      	mov	r0, r1

#define INC_POINTER(cbuf, ptr, inc) \
    modpow2(((ptr) + (inc)), (cbuf)->len_pow2)

void cbuf_initialize(cbuf_t *cbuf, size_t len)
{
    6afa:	460c      	mov	r4, r1
    cbuf_initialize_etc(cbuf, len, malloc(len));
    6afc:	f004 fe12 	bl	b724 <malloc>
    6b00:	4621      	mov	r1, r4
    6b02:	4602      	mov	r2, r0
    6b04:	4628      	mov	r0, r5
}
    6b06:	e8bd 4038 	ldmia.w	r13!, {r3, r4, r5, r14}
#define INC_POINTER(cbuf, ptr, inc) \
    modpow2(((ptr) + (inc)), (cbuf)->len_pow2)

void cbuf_initialize(cbuf_t *cbuf, size_t len)
{
    cbuf_initialize_etc(cbuf, len, malloc(len));
    6b0a:	f7ff bfbb 	b.w	6a84 <cbuf_initialize_etc>

00006b0e <cbuf_space_avail>:
    return val >> divp2;
}

static inline __ALWAYS_INLINE uint modpow2(uint val, uint modp2)
{
    return val & ((1UL << modp2) - 1);
    6b0e:	6883      	ldr	r3, [r0, #8]
    6b10:	2201      	movs	r2, #1
    6b12:	fa02 f303 	lsl.w	r3, r2, r3
    LTRACEF("len %zd, len_pow2 %u\n", len, cbuf->len_pow2);
}

size_t cbuf_space_avail(cbuf_t *cbuf)
{
    uint consumed = modpow2((uint)(cbuf->head - cbuf->tail), cbuf->len_pow2);
    6b16:	e890 0006 	ldmia.w	r0, {r1, r2}
    6b1a:	3b01      	subs	r3, #1
    6b1c:	1a88      	subs	r0, r1, r2
    return valpow2(cbuf->len_pow2) - consumed - 1;
}
    6b1e:	ea23 0000 	bic.w	r0, r3, r0
    6b22:	4770      	bx	r14

00006b24 <cbuf_write>:
{
    return modpow2((uint)(cbuf->head - cbuf->tail), cbuf->len_pow2);
}

size_t cbuf_write(cbuf_t *cbuf, const void *_buf, size_t len, bool canreschedule)
{
    6b24:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    6b28:	4689      	mov	r9, r1
    6b2a:	b085      	sub	sp, #20
    6b2c:	4692      	mov	r10, r2
    6b2e:	469b      	mov	r11, r3
    const char *buf = (const char *)_buf;

    LTRACEF("len %zd\n", len);

    DEBUG_ASSERT(cbuf);
    6b30:	4604      	mov	r4, r0
    6b32:	b930      	cbnz	r0, 6b42 <cbuf_write+0x1e>
    6b34:	4b36      	ldr	r3, [pc, #216]	; (6c10 <cbuf_write+0xec>)
    6b36:	4670      	mov	r0, r14
    6b38:	9300      	str	r3, [sp, #0]
    6b3a:	4936      	ldr	r1, [pc, #216]	; (6c14 <cbuf_write+0xf0>)
    6b3c:	4a36      	ldr	r2, [pc, #216]	; (6c18 <cbuf_write+0xf4>)
    6b3e:	234c      	movs	r3, #76	; 0x4c
    6b40:	e00b      	b.n	6b5a <cbuf_write+0x36>
    return (sizeof(val) * 8) - 1 - __builtin_clz(val);
}

static inline __ALWAYS_INLINE uint valpow2(uint valp2)
{
    return 1U << valp2;
    6b42:	6883      	ldr	r3, [r0, #8]
    6b44:	2501      	movs	r5, #1
    6b46:	fa05 f303 	lsl.w	r3, r5, r3
    DEBUG_ASSERT(len < valpow2(cbuf->len_pow2));
    6b4a:	429a      	cmp	r2, r3
    6b4c:	d307      	bcc.n	6b5e <cbuf_write+0x3a>
    6b4e:	4b33      	ldr	r3, [pc, #204]	; (6c1c <cbuf_write+0xf8>)
    6b50:	4930      	ldr	r1, [pc, #192]	; (6c14 <cbuf_write+0xf0>)
    6b52:	4a31      	ldr	r2, [pc, #196]	; (6c18 <cbuf_write+0xf4>)
    6b54:	9300      	str	r3, [sp, #0]
    6b56:	4670      	mov	r0, r14
    6b58:	234d      	movs	r3, #77	; 0x4d
    6b5a:	f004 fcab 	bl	b4b4 <_panic>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    6b5e:	a803      	add	r0, sp, #12
    6b60:	f7ff ff86 	bl	6a70 <arch_interrupt_save.constprop.2>

    spin_lock_saved_state_t state;
    spin_lock_irqsave(&cbuf->lock, state);

    size_t write_len;
    size_t pos = 0;
    6b64:	2700      	movs	r7, #0

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    6b66:	62e5      	str	r5, [r4, #44]	; 0x2c

    while (pos < len && cbuf_space_avail(cbuf) > 0) {
    6b68:	4557      	cmp	r7, r10
    6b6a:	e894 0140 	ldmia.w	r4, {r6, r8}
    6b6e:	d307      	bcc.n	6b80 <cbuf_write+0x5c>

        cbuf->head = INC_POINTER(cbuf, cbuf->head, write_len);
        pos += write_len;
    }

    if (cbuf->head != cbuf->tail)
    6b70:	4546      	cmp	r6, r8
    6b72:	d03e      	beq.n	6bf2 <cbuf_write+0xce>
        event_signal(&cbuf->event, false);
    6b74:	f104 0010 	add.w	r0, r4, #16
    6b78:	2100      	movs	r1, #0
    6b7a:	f7fd fc2b 	bl	43d4 <event_signal>
    6b7e:	e038      	b.n	6bf2 <cbuf_write+0xce>
    spin_lock_irqsave(&cbuf->lock, state);

    size_t write_len;
    size_t pos = 0;

    while (pos < len && cbuf_space_avail(cbuf) > 0) {
    6b80:	4620      	mov	r0, r4
    6b82:	f7ff ffc4 	bl	6b0e <cbuf_space_avail>
    6b86:	2800      	cmp	r0, #0
    6b88:	d0f2      	beq.n	6b70 <cbuf_write+0x4c>
        if (cbuf->head >= cbuf->tail) {
    6b8a:	4546      	cmp	r6, r8
    6b8c:	ebc7 030a 	rsb	r3, r7, r10
    6b90:	d30c      	bcc.n	6bac <cbuf_write+0x88>
    6b92:	2101      	movs	r1, #1
    6b94:	68a2      	ldr	r2, [r4, #8]
            if (cbuf->tail == 0) {
    6b96:	f1b8 0f00 	cmp.w	r8, #0
    6b9a:	d104      	bne.n	6ba6 <cbuf_write+0x82>
    6b9c:	fa01 f202 	lsl.w	r2, r1, r2
                // Special case - if tail is at position 0, we can't write all
                // the way to the end of the buffer. Otherwise, head ends up at
                // 0, head == tail, and buffer is considered "empty" again.
                write_len =
                    MIN(valpow2(cbuf->len_pow2) - cbuf->head - 1, len - pos);
    6ba0:	43f5      	mvns	r5, r6
    6ba2:	4415      	add	r5, r2
    6ba4:	e005      	b.n	6bb2 <cbuf_write+0x8e>
    6ba6:	fa01 f502 	lsl.w	r5, r1, r2
    6baa:	e001      	b.n	6bb0 <cbuf_write+0x8c>
                write_len =
                    MIN(valpow2(cbuf->len_pow2) - cbuf->head, len - pos);
            }
        } else {
            // Write from head to tail-1.
            write_len = MIN(cbuf->tail - cbuf->head - 1, len - pos);
    6bac:	f108 35ff 	add.w	r5, r8, #4294967295
    6bb0:	1bad      	subs	r5, r5, r6
    6bb2:	42ab      	cmp	r3, r5
    6bb4:	bf38      	it	cc
    6bb6:	461d      	movcc	r5, r3
        }

        // if it's full, abort and return how much we've written
        if (write_len == 0) {
    6bb8:	2d00      	cmp	r5, #0
    6bba:	d0d9      	beq.n	6b70 <cbuf_write+0x4c>
    6bbc:	68e0      	ldr	r0, [r4, #12]
            break;
        }

        if (NULL == buf) {
            memset(cbuf->buf + cbuf->head, 0, write_len);
    6bbe:	4430      	add	r0, r6
        // if it's full, abort and return how much we've written
        if (write_len == 0) {
            break;
        }

        if (NULL == buf) {
    6bc0:	f1b9 0f00 	cmp.w	r9, #0
    6bc4:	d104      	bne.n	6bd0 <cbuf_write+0xac>
            memset(cbuf->buf + cbuf->head, 0, write_len);
    6bc6:	4649      	mov	r1, r9
    6bc8:	462a      	mov	r2, r5
    6bca:	f005 f845 	bl	bc58 <memset>
    6bce:	e004      	b.n	6bda <cbuf_write+0xb6>
        } else {
            memcpy(cbuf->buf + cbuf->head, buf + pos, write_len);
    6bd0:	eb09 0107 	add.w	r1, r9, r7
    6bd4:	462a      	mov	r2, r5
    6bd6:	f004 fff8 	bl	bbca <memcpy>
        }

        cbuf->head = INC_POINTER(cbuf, cbuf->head, write_len);
    6bda:	6823      	ldr	r3, [r4, #0]
    return val >> divp2;
}

static inline __ALWAYS_INLINE uint modpow2(uint val, uint modp2)
{
    return val & ((1UL << modp2) - 1);
    6bdc:	2201      	movs	r2, #1
    6bde:	18e9      	adds	r1, r5, r3
    6be0:	68a3      	ldr	r3, [r4, #8]
        pos += write_len;
    6be2:	442f      	add	r7, r5
    6be4:	fa02 f303 	lsl.w	r3, r2, r3
    6be8:	1e5a      	subs	r2, r3, #1
    6bea:	ea01 0302 	and.w	r3, r1, r2
            memset(cbuf->buf + cbuf->head, 0, write_len);
        } else {
            memcpy(cbuf->buf + cbuf->head, buf + pos, write_len);
        }

        cbuf->head = INC_POINTER(cbuf, cbuf->head, write_len);
    6bee:	6023      	str	r3, [r4, #0]
    6bf0:	e7ba      	b.n	6b68 <cbuf_write+0x44>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    6bf2:	2300      	movs	r3, #0
    6bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    6bf6:	9803      	ldr	r0, [sp, #12]
    6bf8:	f7ff ff36 	bl	6a68 <arch_interrupt_restore.constprop.1>
        event_signal(&cbuf->event, false);

    spin_unlock_irqrestore(&cbuf->lock, state);

    // XXX convert to only rescheduling if
    if (canreschedule)
    6bfc:	f1bb 0f00 	cmp.w	r11, #0
    6c00:	d001      	beq.n	6c06 <cbuf_write+0xe2>
        thread_preempt();
    6c02:	f7fe f889 	bl	4d18 <thread_preempt>

    return pos;
}
    6c06:	4638      	mov	r0, r7
    6c08:	b005      	add	sp, #20
    6c0a:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    6c0e:	bf00      	nop
    6c10:	0000f715 	.word	0x0000f715
    6c14:	0001076e 	.word	0x0001076e
    6c18:	000125a8 	.word	0x000125a8
    6c1c:	000125cc 	.word	0x000125cc

00006c20 <cbuf_read>:

size_t cbuf_read(cbuf_t *cbuf, void *_buf, size_t buflen, bool block)
{
    6c20:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    6c24:	46f3      	mov	r11, r14
    6c26:	b085      	sub	sp, #20
    6c28:	4688      	mov	r8, r1
    6c2a:	4691      	mov	r9, r2
    6c2c:	469a      	mov	r10, r3
    char *buf = (char *)_buf;

    DEBUG_ASSERT(cbuf);
    6c2e:	4604      	mov	r4, r0
    6c30:	b9d0      	cbnz	r0, 6c68 <cbuf_read+0x48>
    6c32:	4b31      	ldr	r3, [pc, #196]	; (6cf8 <cbuf_read+0xd8>)
    6c34:	4670      	mov	r0, r14
    6c36:	9300      	str	r3, [sp, #0]
    6c38:	4930      	ldr	r1, [pc, #192]	; (6cfc <cbuf_read+0xdc>)
    6c3a:	4a31      	ldr	r2, [pc, #196]	; (6d00 <cbuf_read+0xe0>)
    6c3c:	2386      	movs	r3, #134	; 0x86
    6c3e:	e04f      	b.n	6ce0 <cbuf_read+0xc0>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    6c40:	a803      	add	r0, sp, #12
    6c42:	f7ff ff15 	bl	6a70 <arch_interrupt_save.constprop.2>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    6c46:	2301      	movs	r3, #1
    6c48:	62e3      	str	r3, [r4, #44]	; 0x2c
    spin_lock_saved_state_t state;
    spin_lock_irqsave(&cbuf->lock, state);

    // see if there's data available
    size_t ret = 0;
    if (cbuf->tail != cbuf->head) {
    6c4a:	6862      	ldr	r2, [r4, #4]
    6c4c:	6823      	ldr	r3, [r4, #0]
    6c4e:	2500      	movs	r5, #0
    6c50:	429a      	cmp	r2, r3
    6c52:	d132      	bne.n	6cba <cbuf_read+0x9a>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    6c54:	2300      	movs	r3, #0
    6c56:	62e3      	str	r3, [r4, #44]	; 0x2c
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    6c58:	9803      	ldr	r0, [sp, #12]
    6c5a:	f7ff ff05 	bl	6a68 <arch_interrupt_restore.constprop.1>
    }

    spin_unlock_irqrestore(&cbuf->lock, state);

    // we apparently blocked but raced with another thread and found no data, retry
    if (block && ret == 0)
    6c5e:	f1ba 0f00 	cmp.w	r10, #0
    6c62:	d044      	beq.n	6cee <cbuf_read+0xce>
    6c64:	2d00      	cmp	r5, #0
    6c66:	d142      	bne.n	6cee <cbuf_read+0xce>
    DEBUG_ASSERT(cbuf);

retry:
    // block on the cbuf outside of the lock, which may
    // unblock us early and we'll have to double check below
    if (block)
    6c68:	f1ba 0f00 	cmp.w	r10, #0
    6c6c:	d0e8      	beq.n	6c40 <cbuf_read+0x20>
    6c6e:	f104 0010 	add.w	r0, r4, #16
    6c72:	f04f 31ff 	mov.w	r1, #4294967295
    6c76:	f7fd fb73 	bl	4360 <event_wait_timeout>
    6c7a:	e7e1      	b.n	6c40 <cbuf_read+0x20>
    if (cbuf->tail != cbuf->head) {
        size_t pos = 0;

        // loop until we've read everything we need
        // at most this will make two passes to deal with wraparound
        while (pos < buflen && cbuf->tail != cbuf->head) {
    6c7c:	429e      	cmp	r6, r3
    6c7e:	d020      	beq.n	6cc2 <cbuf_read+0xa2>
            size_t read_len;
            if (cbuf->head > cbuf->tail) {
    6c80:	42b3      	cmp	r3, r6
    6c82:	ebc5 0209 	rsb	r2, r5, r9
    6c86:	d91f      	bls.n	6cc8 <cbuf_read+0xa8>
                // simple case where there is no wraparound
                read_len = MIN(cbuf->head - cbuf->tail, buflen - pos);
    6c88:	1b9f      	subs	r7, r3, r6
    6c8a:	42ba      	cmp	r2, r7
    6c8c:	bf38      	it	cc
    6c8e:	4617      	movcc	r7, r2
                // read to the end of buffer in this pass
                read_len = MIN(valpow2(cbuf->len_pow2) - cbuf->tail, buflen - pos);
            }

            // Only perform the copy if a buf was supplied
            if (NULL != buf) {
    6c90:	f1b8 0f00 	cmp.w	r8, #0
    6c94:	d006      	beq.n	6ca4 <cbuf_read+0x84>
                memcpy(buf + pos, cbuf->buf + cbuf->tail, read_len);
    6c96:	68e1      	ldr	r1, [r4, #12]
    6c98:	eb08 0005 	add.w	r0, r8, r5
    6c9c:	4431      	add	r1, r6
    6c9e:	463a      	mov	r2, r7
    6ca0:	f004 ff93 	bl	bbca <memcpy>
            }

            cbuf->tail = INC_POINTER(cbuf, cbuf->tail, read_len);
    6ca4:	6863      	ldr	r3, [r4, #4]
    6ca6:	2201      	movs	r2, #1
    6ca8:	18f9      	adds	r1, r7, r3
    6caa:	68a3      	ldr	r3, [r4, #8]
            pos += read_len;
    6cac:	443d      	add	r5, r7
    6cae:	fa02 f303 	lsl.w	r3, r2, r3
    6cb2:	1e5a      	subs	r2, r3, #1
    6cb4:	ea01 0302 	and.w	r3, r1, r2
            // Only perform the copy if a buf was supplied
            if (NULL != buf) {
                memcpy(buf + pos, cbuf->buf + cbuf->tail, read_len);
            }

            cbuf->tail = INC_POINTER(cbuf, cbuf->tail, read_len);
    6cb8:	6063      	str	r3, [r4, #4]
    if (cbuf->tail != cbuf->head) {
        size_t pos = 0;

        // loop until we've read everything we need
        // at most this will make two passes to deal with wraparound
        while (pos < buflen && cbuf->tail != cbuf->head) {
    6cba:	454d      	cmp	r5, r9
    6cbc:	e894 0048 	ldmia.w	r4, {r3, r6}
    6cc0:	d3dc      	bcc.n	6c7c <cbuf_read+0x5c>

            cbuf->tail = INC_POINTER(cbuf, cbuf->tail, read_len);
            pos += read_len;
        }

        if (cbuf->tail == cbuf->head) {
    6cc2:	429e      	cmp	r6, r3
    6cc4:	d1c6      	bne.n	6c54 <cbuf_read+0x34>
    6cc6:	e004      	b.n	6cd2 <cbuf_read+0xb2>
    return (sizeof(val) * 8) - 1 - __builtin_clz(val);
}

static inline __ALWAYS_INLINE uint valpow2(uint valp2)
{
    return 1U << valp2;
    6cc8:	68a3      	ldr	r3, [r4, #8]
    6cca:	2701      	movs	r7, #1
    6ccc:	409f      	lsls	r7, r3
            if (cbuf->head > cbuf->tail) {
                // simple case where there is no wraparound
                read_len = MIN(cbuf->head - cbuf->tail, buflen - pos);
            } else {
                // read to the end of buffer in this pass
                read_len = MIN(valpow2(cbuf->len_pow2) - cbuf->tail, buflen - pos);
    6cce:	1bbf      	subs	r7, r7, r6
    6cd0:	e7db      	b.n	6c8a <cbuf_read+0x6a>
            cbuf->tail = INC_POINTER(cbuf, cbuf->tail, read_len);
            pos += read_len;
        }

        if (cbuf->tail == cbuf->head) {
            DEBUG_ASSERT(pos > 0);
    6cd2:	b93d      	cbnz	r5, 6ce4 <cbuf_read+0xc4>
    6cd4:	4b0b      	ldr	r3, [pc, #44]	; (6d04 <cbuf_read+0xe4>)
    6cd6:	4909      	ldr	r1, [pc, #36]	; (6cfc <cbuf_read+0xdc>)
    6cd8:	4a09      	ldr	r2, [pc, #36]	; (6d00 <cbuf_read+0xe0>)
    6cda:	9300      	str	r3, [sp, #0]
    6cdc:	4658      	mov	r0, r11
    6cde:	23ac      	movs	r3, #172	; 0xac
    6ce0:	f004 fbe8 	bl	b4b4 <_panic>
            // we've emptied the buffer, unsignal the event
            event_unsignal(&cbuf->event);
    6ce4:	f104 0010 	add.w	r0, r4, #16
    6ce8:	f7fd fbb0 	bl	444c <event_unsignal>
    6cec:	e7b2      	b.n	6c54 <cbuf_read+0x34>
    // we apparently blocked but raced with another thread and found no data, retry
    if (block && ret == 0)
        goto retry;

    return ret;
}
    6cee:	4628      	mov	r0, r5
    6cf0:	b005      	add	sp, #20
    6cf2:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    6cf6:	bf00      	nop
    6cf8:	0000f715 	.word	0x0000f715
    6cfc:	0001076e 	.word	0x0001076e
    6d00:	000125a8 	.word	0x000125a8
    6d04:	000125ea 	.word	0x000125ea

00006d08 <cbuf_write_char>:
    spin_unlock_irqrestore(&cbuf->lock, state);
    return ret;
}

size_t cbuf_write_char(cbuf_t *cbuf, char c, bool canreschedule)
{
    6d08:	b5f0      	push	{r4, r5, r6, r7, r14}
    6d0a:	460e      	mov	r6, r1
    6d0c:	b085      	sub	sp, #20
    6d0e:	4617      	mov	r7, r2
    DEBUG_ASSERT(cbuf);
    6d10:	4604      	mov	r4, r0
    6d12:	b938      	cbnz	r0, 6d24 <cbuf_write_char+0x1c>
    6d14:	4b16      	ldr	r3, [pc, #88]	; (6d70 <cbuf_write_char+0x68>)
    6d16:	4670      	mov	r0, r14
    6d18:	9300      	str	r3, [sp, #0]
    6d1a:	4916      	ldr	r1, [pc, #88]	; (6d74 <cbuf_write_char+0x6c>)
    6d1c:	4a16      	ldr	r2, [pc, #88]	; (6d78 <cbuf_write_char+0x70>)
    6d1e:	23db      	movs	r3, #219	; 0xdb
    6d20:	f004 fbc8 	bl	b4b4 <_panic>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    6d24:	a803      	add	r0, sp, #12

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    6d26:	2501      	movs	r5, #1
    6d28:	f7ff fea2 	bl	6a70 <arch_interrupt_save.constprop.2>
    6d2c:	62e5      	str	r5, [r4, #44]	; 0x2c

    spin_lock_saved_state_t state;
    spin_lock_irqsave(&cbuf->lock, state);

    size_t ret = 0;
    if (cbuf_space_avail(cbuf) > 0) {
    6d2e:	4620      	mov	r0, r4
    6d30:	f7ff feed 	bl	6b0e <cbuf_space_avail>
    6d34:	b198      	cbz	r0, 6d5e <cbuf_write_char+0x56>
        cbuf->buf[cbuf->head] = c;
    6d36:	6823      	ldr	r3, [r4, #0]
    6d38:	68e0      	ldr	r0, [r4, #12]
    6d3a:	54c6      	strb	r6, [r0, r3]
    return val >> divp2;
}

static inline __ALWAYS_INLINE uint modpow2(uint val, uint modp2)
{
    return val & ((1UL << modp2) - 1);
    6d3c:	68a3      	ldr	r3, [r4, #8]

        cbuf->head = INC_POINTER(cbuf, cbuf->head, 1);
    6d3e:	6820      	ldr	r0, [r4, #0]
    6d40:	fa05 f303 	lsl.w	r3, r5, r3
    6d44:	4428      	add	r0, r5
    6d46:	3b01      	subs	r3, #1
    6d48:	4003      	ands	r3, r0
        ret = 1;

        if (cbuf->head != cbuf->tail)
    6d4a:	6860      	ldr	r0, [r4, #4]

    size_t ret = 0;
    if (cbuf_space_avail(cbuf) > 0) {
        cbuf->buf[cbuf->head] = c;

        cbuf->head = INC_POINTER(cbuf, cbuf->head, 1);
    6d4c:	6023      	str	r3, [r4, #0]
        ret = 1;

        if (cbuf->head != cbuf->tail)
    6d4e:	4283      	cmp	r3, r0
    6d50:	d006      	beq.n	6d60 <cbuf_write_char+0x58>
            event_signal(&cbuf->event, canreschedule);
    6d52:	f104 0010 	add.w	r0, r4, #16
    6d56:	4639      	mov	r1, r7
    6d58:	f7fd fb3c 	bl	43d4 <event_signal>
    6d5c:	e000      	b.n	6d60 <cbuf_write_char+0x58>
    DEBUG_ASSERT(cbuf);

    spin_lock_saved_state_t state;
    spin_lock_irqsave(&cbuf->lock, state);

    size_t ret = 0;
    6d5e:	4605      	mov	r5, r0
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    6d60:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    6d62:	9803      	ldr	r0, [sp, #12]
    6d64:	62e3      	str	r3, [r4, #44]	; 0x2c
    6d66:	f7ff fe7f 	bl	6a68 <arch_interrupt_restore.constprop.1>
    }

    spin_unlock_irqrestore(&cbuf->lock, state);

    return ret;
}
    6d6a:	4628      	mov	r0, r5
    6d6c:	b005      	add	sp, #20
    6d6e:	bdf0      	pop	{r4, r5, r6, r7, r15}
    6d70:	0000f715 	.word	0x0000f715
    6d74:	0001076e 	.word	0x0001076e
    6d78:	000125a8 	.word	0x000125a8

00006d7c <cbuf_read_char>:

size_t cbuf_read_char(cbuf_t *cbuf, char *c, bool block)
{
    6d7c:	b5f0      	push	{r4, r5, r6, r7, r14}
    6d7e:	460e      	mov	r6, r1
    6d80:	b085      	sub	sp, #20
    6d82:	4617      	mov	r7, r2
    DEBUG_ASSERT(cbuf);
    6d84:	4604      	mov	r4, r0
    6d86:	b930      	cbnz	r0, 6d96 <cbuf_read_char+0x1a>
    6d88:	4b1f      	ldr	r3, [pc, #124]	; (6e08 <cbuf_read_char+0x8c>)
    6d8a:	4670      	mov	r0, r14
    6d8c:	9300      	str	r3, [sp, #0]
    6d8e:	491f      	ldr	r1, [pc, #124]	; (6e0c <cbuf_read_char+0x90>)
    6d90:	4a1f      	ldr	r2, [pc, #124]	; (6e10 <cbuf_read_char+0x94>)
    6d92:	23f2      	movs	r3, #242	; 0xf2
    6d94:	e006      	b.n	6da4 <cbuf_read_char+0x28>
    DEBUG_ASSERT(c);
    6d96:	b939      	cbnz	r1, 6da8 <cbuf_read_char+0x2c>
    6d98:	4b1e      	ldr	r3, [pc, #120]	; (6e14 <cbuf_read_char+0x98>)
    6d9a:	491c      	ldr	r1, [pc, #112]	; (6e0c <cbuf_read_char+0x90>)
    6d9c:	4a1c      	ldr	r2, [pc, #112]	; (6e10 <cbuf_read_char+0x94>)
    6d9e:	9300      	str	r3, [sp, #0]
    6da0:	4670      	mov	r0, r14
    6da2:	23f3      	movs	r3, #243	; 0xf3
    6da4:	f004 fb86 	bl	b4b4 <_panic>

retry:
    if (block)
    6da8:	b12f      	cbz	r7, 6db6 <cbuf_read_char+0x3a>
    6daa:	f104 0010 	add.w	r0, r4, #16
    6dae:	f04f 31ff 	mov.w	r1, #4294967295
    6db2:	f7fd fad5 	bl	4360 <event_wait_timeout>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    6db6:	a803      	add	r0, sp, #12
    6db8:	f7ff fe5a 	bl	6a70 <arch_interrupt_save.constprop.2>
    spin_lock_saved_state_t state;
    spin_lock_irqsave(&cbuf->lock, state);

    // see if there's data available
    size_t ret = 0;
    if (cbuf->tail != cbuf->head) {
    6dbc:	e894 000c 	ldmia.w	r4, {r2, r3}

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    6dc0:	2501      	movs	r5, #1
    6dc2:	4293      	cmp	r3, r2
    6dc4:	62e5      	str	r5, [r4, #44]	; 0x2c

    spin_lock_saved_state_t state;
    spin_lock_irqsave(&cbuf->lock, state);

    // see if there's data available
    size_t ret = 0;
    6dc6:	bf08      	it	eq
    6dc8:	2500      	moveq	r5, #0
    if (cbuf->tail != cbuf->head) {
    6dca:	d011      	beq.n	6df0 <cbuf_read_char+0x74>

        *c = cbuf->buf[cbuf->tail];
    6dcc:	68e2      	ldr	r2, [r4, #12]
    6dce:	5cd3      	ldrb	r3, [r2, r3]
    6dd0:	7033      	strb	r3, [r6, #0]
    6dd2:	68a3      	ldr	r3, [r4, #8]
        cbuf->tail = INC_POINTER(cbuf, cbuf->tail, 1);
    6dd4:	6862      	ldr	r2, [r4, #4]
    6dd6:	fa05 f303 	lsl.w	r3, r5, r3
    6dda:	442a      	add	r2, r5
    6ddc:	3b01      	subs	r3, #1
    6dde:	4013      	ands	r3, r2

        if (cbuf->tail == cbuf->head) {
    6de0:	6822      	ldr	r2, [r4, #0]
    // see if there's data available
    size_t ret = 0;
    if (cbuf->tail != cbuf->head) {

        *c = cbuf->buf[cbuf->tail];
        cbuf->tail = INC_POINTER(cbuf, cbuf->tail, 1);
    6de2:	6063      	str	r3, [r4, #4]

        if (cbuf->tail == cbuf->head) {
    6de4:	4293      	cmp	r3, r2
    6de6:	d103      	bne.n	6df0 <cbuf_read_char+0x74>
            // we've emptied the buffer, unsignal the event
            event_unsignal(&cbuf->event);
    6de8:	f104 0010 	add.w	r0, r4, #16
    6dec:	f7fd fb2e 	bl	444c <event_unsignal>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    6df0:	2300      	movs	r3, #0
    6df2:	62e3      	str	r3, [r4, #44]	; 0x2c
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    6df4:	9803      	ldr	r0, [sp, #12]
    6df6:	f7ff fe37 	bl	6a68 <arch_interrupt_restore.constprop.1>
        ret = 1;
    }

    spin_unlock_irqrestore(&cbuf->lock, state);

    if (block && ret == 0)
    6dfa:	b117      	cbz	r7, 6e02 <cbuf_read_char+0x86>
    6dfc:	2d00      	cmp	r5, #0
    6dfe:	d0d3      	beq.n	6da8 <cbuf_read_char+0x2c>
    6e00:	2501      	movs	r5, #1
        goto retry;

    return ret;
}
    6e02:	4628      	mov	r0, r5
    6e04:	b005      	add	sp, #20
    6e06:	bdf0      	pop	{r4, r5, r6, r7, r15}
    6e08:	0000f715 	.word	0x0000f715
    6e0c:	0001076e 	.word	0x0001076e
    6e10:	000125a8 	.word	0x000125a8
    6e14:	0000e466 	.word	0x0000e466

00006e18 <adler32>:
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
    6e18:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
    adler &= 0xffff;

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
    6e1c:	2a01      	cmp	r2, #1
{
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
    6e1e:	ea4f 4410 	mov.w	r4, r0, lsr #16
/* ========================================================================= */
uLong ZEXPORT adler32(adler, buf, len)
    uLong adler;
    const Bytef *buf;
    uInt len;
{
    6e22:	b089      	sub	sp, #36	; 0x24
    unsigned long sum2;
    unsigned n;

    /* split Adler-32 into component sums */
    sum2 = (adler >> 16) & 0xffff;
    adler &= 0xffff;
    6e24:	b280      	uxth	r0, r0

    /* in case user likes doing a byte at a time, keep it fast */
    if (len == 1) {
    6e26:	d110      	bne.n	6e4a <adler32+0x32>
        adler += buf[0];
    6e28:	780b      	ldrb	r3, [r1, #0]
    6e2a:	4418      	add	r0, r3
        if (adler >= BASE)
    6e2c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    6e30:	4298      	cmp	r0, r3
            adler -= BASE;
    6e32:	bf84      	itt	hi
    6e34:	f5a0 407f 	subhi.w	r0, r0, #65280	; 0xff00
    6e38:	38f1      	subhi	r0, #241	; 0xf1
        sum2 += adler;
    6e3a:	4404      	add	r4, r0
        if (sum2 >= BASE)
    6e3c:	429c      	cmp	r4, r3
    6e3e:	f240 80e4 	bls.w	700a <adler32+0x1f2>
            sum2 -= BASE;
    6e42:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
    6e46:	3cf1      	subs	r4, #241	; 0xf1
    6e48:	e0df      	b.n	700a <adler32+0x1f2>
        return adler | (sum2 << 16);
    }

    /* initial Adler-32 value (deferred check for len == 1 speed) */
    if (buf == Z_NULL)
    6e4a:	2900      	cmp	r1, #0
    6e4c:	f000 80e0 	beq.w	7010 <adler32+0x1f8>
        return 1L;

    /* in case short lengths are provided, keep it somewhat fast */
    if (len < 16) {
    6e50:	2a0f      	cmp	r2, #15
    6e52:	d86e      	bhi.n	6f32 <adler32+0x11a>
    6e54:	440a      	add	r2, r1
        while (len--) {
    6e56:	4291      	cmp	r1, r2
    6e58:	d004      	beq.n	6e64 <adler32+0x4c>
            adler += *buf++;
    6e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
    6e5e:	4418      	add	r0, r3
            sum2 += adler;
    6e60:	4404      	add	r4, r0
    6e62:	e7f8      	b.n	6e56 <adler32+0x3e>
        }
        if (adler >= BASE)
    6e64:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    6e68:	4298      	cmp	r0, r3
            adler -= BASE;
    6e6a:	bf84      	itt	hi
    6e6c:	f5a0 407f 	subhi.w	r0, r0, #65280	; 0xff00
    6e70:	38f1      	subhi	r0, #241	; 0xf1
        MOD28(sum2);            /* only added so many BASE's */
    6e72:	f64f 73f1 	movw	r3, #65521	; 0xfff1
    6e76:	e0c4      	b.n	7002 <adler32+0x1ea>
    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
        len -= NMAX;
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
    6e78:	f893 a000 	ldrb.w	r10, [r3]
    6e7c:	f893 b001 	ldrb.w	r11, [r3, #1]
    6e80:	4482      	add	r10, r0
    6e82:	f893 9002 	ldrb.w	r9, [r3, #2]
    6e86:	f893 8003 	ldrb.w	r8, [r3, #3]
    6e8a:	44d3      	add	r11, r10
    6e8c:	7918      	ldrb	r0, [r3, #4]
    6e8e:	44d9      	add	r9, r11
    6e90:	44c8      	add	r8, r9
    6e92:	4440      	add	r0, r8
    6e94:	9000      	str	r0, [sp, #0]
    6e96:	9d00      	ldr	r5, [sp, #0]
    6e98:	7958      	ldrb	r0, [r3, #5]
    6e9a:	44da      	add	r10, r11
    6e9c:	44ca      	add	r10, r9
    6e9e:	4405      	add	r5, r0
    6ea0:	44c2      	add	r10, r8
    6ea2:	7998      	ldrb	r0, [r3, #6]
    6ea4:	f8dd 8000 	ldr.w	r8, [r13]
    6ea8:	9501      	str	r5, [sp, #4]
    6eaa:	44c2      	add	r10, r8
    6eac:	4405      	add	r5, r0
    6eae:	f8dd 8004 	ldr.w	r8, [r13, #4]
    6eb2:	79d8      	ldrb	r0, [r3, #7]
    6eb4:	9502      	str	r5, [sp, #8]
    6eb6:	44c2      	add	r10, r8
    6eb8:	4405      	add	r5, r0
    6eba:	f8dd 8008 	ldr.w	r8, [r13, #8]
    6ebe:	7a18      	ldrb	r0, [r3, #8]
    6ec0:	9503      	str	r5, [sp, #12]
    6ec2:	44c2      	add	r10, r8
    6ec4:	4405      	add	r5, r0
    6ec6:	f8dd 800c 	ldr.w	r8, [r13, #12]
    6eca:	7a58      	ldrb	r0, [r3, #9]
    6ecc:	9504      	str	r5, [sp, #16]
    6ece:	f893 c00a 	ldrb.w	r12, [r3, #10]
    6ed2:	4405      	add	r5, r0
    6ed4:	44c2      	add	r10, r8
    6ed6:	f8dd 8010 	ldr.w	r8, [r13, #16]
    6eda:	9505      	str	r5, [sp, #20]
    6edc:	44c2      	add	r10, r8
    6ede:	4465      	add	r5, r12
    6ee0:	f8dd 8014 	ldr.w	r8, [r13, #20]
    6ee4:	9506      	str	r5, [sp, #24]
    6ee6:	f893 c00b 	ldrb.w	r12, [r3, #11]
    6eea:	44c2      	add	r10, r8
    6eec:	f8dd 8018 	ldr.w	r8, [r13, #24]
    6ef0:	7b1f      	ldrb	r7, [r3, #12]
    6ef2:	44ac      	add	r12, r5
    6ef4:	7b5e      	ldrb	r6, [r3, #13]
    6ef6:	44c2      	add	r10, r8
    6ef8:	4467      	add	r7, r12
    6efa:	7b9d      	ldrb	r5, [r3, #14]
    6efc:	44d4      	add	r12, r10
    6efe:	443e      	add	r6, r7
    6f00:	7bd8      	ldrb	r0, [r3, #15]
    6f02:	4467      	add	r7, r12
    6f04:	4435      	add	r5, r6
    6f06:	443e      	add	r6, r7
    6f08:	4428      	add	r0, r5
    6f0a:	4435      	add	r5, r6
    6f0c:	4405      	add	r5, r0
    6f0e:	442c      	add	r4, r5
            buf += 16;
        } while (--n);
    6f10:	9d07      	ldr	r5, [sp, #28]
    while (len >= NMAX) {
        len -= NMAX;
        n = NMAX / 16;          /* NMAX is divisible by 16 */
        do {
            DO16(buf);          /* 16 sums unrolled */
            buf += 16;
    6f12:	3310      	adds	r3, #16
        } while (--n);
    6f14:	42ab      	cmp	r3, r5
    6f16:	d1af      	bne.n	6e78 <adler32+0x60>
        MOD(adler);
    6f18:	f64f 73f1 	movw	r3, #65521	; 0xfff1
    6f1c:	fbb0 f5f3 	udiv	r5, r0, r3
    6f20:	fb03 0015 	mls	r0, r3, r5, r0
        MOD(sum2);
    6f24:	fbb4 f5f3 	udiv	r5, r4, r3
    6f28:	fb03 4415 	mls	r4, r3, r5, r4
    6f2c:	f501 51ad 	add.w	r1, r1, #5536	; 0x15a0
    6f30:	3110      	adds	r1, #16
        MOD28(sum2);            /* only added so many BASE's */
        return adler | (sum2 << 16);
    }

    /* do length NMAX blocks -- requires just one modulo operation */
    while (len >= NMAX) {
    6f32:	f241 53af 	movw	r3, #5551	; 0x15af
    6f36:	429a      	cmp	r2, r3
    6f38:	d908      	bls.n	6f4c <adler32+0x134>
    6f3a:	f501 53ad 	add.w	r3, r1, #5536	; 0x15a0
    6f3e:	3310      	adds	r3, #16
        len -= NMAX;
    6f40:	f5a2 52ad 	sub.w	r2, r2, #5536	; 0x15a0
    6f44:	9307      	str	r3, [sp, #28]
    6f46:	3a10      	subs	r2, #16
    6f48:	460b      	mov	r3, r1
    6f4a:	e795      	b.n	6e78 <adler32+0x60>
    6f4c:	460b      	mov	r3, r1
        MOD(adler);
        MOD(sum2);
    }

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
    6f4e:	2a00      	cmp	r2, #0
    6f50:	d05b      	beq.n	700a <adler32+0x1f2>
    6f52:	189d      	adds	r5, r3, r2
    6f54:	1a6d      	subs	r5, r5, r1
        while (len >= 16) {
    6f56:	2d0f      	cmp	r5, #15
    6f58:	d940      	bls.n	6fdc <adler32+0x1c4>
            len -= 16;
            DO16(buf);
    6f5a:	780d      	ldrb	r5, [r1, #0]
            buf += 16;
    6f5c:	3110      	adds	r1, #16

    /* do remaining bytes (less than NMAX, still just one modulo) */
    if (len) {                  /* avoid modulos if none remaining */
        while (len >= 16) {
            len -= 16;
            DO16(buf);
    6f5e:	4428      	add	r0, r5
    6f60:	f811 5c0f 	ldrb.w	r5, [r1, #-15]
    6f64:	4404      	add	r4, r0
    6f66:	4428      	add	r0, r5
    6f68:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
    6f6c:	4404      	add	r4, r0
    6f6e:	4428      	add	r0, r5
    6f70:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
    6f74:	4404      	add	r4, r0
    6f76:	4428      	add	r0, r5
    6f78:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
    6f7c:	4404      	add	r4, r0
    6f7e:	4428      	add	r0, r5
    6f80:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
    6f84:	4404      	add	r4, r0
    6f86:	4428      	add	r0, r5
    6f88:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
    6f8c:	4404      	add	r4, r0
    6f8e:	4428      	add	r0, r5
    6f90:	f811 5c09 	ldrb.w	r5, [r1, #-9]
    6f94:	4404      	add	r4, r0
    6f96:	4428      	add	r0, r5
    6f98:	f811 5c08 	ldrb.w	r5, [r1, #-8]
    6f9c:	4404      	add	r4, r0
    6f9e:	4428      	add	r0, r5
    6fa0:	f811 5c07 	ldrb.w	r5, [r1, #-7]
    6fa4:	4404      	add	r4, r0
    6fa6:	4428      	add	r0, r5
    6fa8:	f811 5c06 	ldrb.w	r5, [r1, #-6]
    6fac:	4404      	add	r4, r0
    6fae:	4428      	add	r0, r5
    6fb0:	f811 5c05 	ldrb.w	r5, [r1, #-5]
    6fb4:	4404      	add	r4, r0
    6fb6:	4428      	add	r0, r5
    6fb8:	f811 5c04 	ldrb.w	r5, [r1, #-4]
    6fbc:	4404      	add	r4, r0
    6fbe:	4428      	add	r0, r5
    6fc0:	f811 5c03 	ldrb.w	r5, [r1, #-3]
    6fc4:	4404      	add	r4, r0
    6fc6:	4428      	add	r0, r5
    6fc8:	f811 5c02 	ldrb.w	r5, [r1, #-2]
    6fcc:	4404      	add	r4, r0
    6fce:	4428      	add	r0, r5
    6fd0:	f811 5c01 	ldrb.w	r5, [r1, #-1]
    6fd4:	4404      	add	r4, r0
    6fd6:	4428      	add	r0, r5
    6fd8:	4404      	add	r4, r0
    6fda:	e7ba      	b.n	6f52 <adler32+0x13a>
    6fdc:	f022 010f 	bic.w	r1, r2, #15
    6fe0:	440b      	add	r3, r1
    6fe2:	f002 020f 	and.w	r2, r2, #15
    6fe6:	441a      	add	r2, r3
            buf += 16;
        }
        while (len--) {
    6fe8:	4293      	cmp	r3, r2
    6fea:	d004      	beq.n	6ff6 <adler32+0x1de>
            adler += *buf++;
    6fec:	f813 1b01 	ldrb.w	r1, [r3], #1
    6ff0:	4408      	add	r0, r1
            sum2 += adler;
    6ff2:	4404      	add	r4, r0
    6ff4:	e7f8      	b.n	6fe8 <adler32+0x1d0>
        }
        MOD(adler);
    6ff6:	f64f 73f1 	movw	r3, #65521	; 0xfff1
    6ffa:	fbb0 f2f3 	udiv	r2, r0, r3
    6ffe:	fb03 0012 	mls	r0, r3, r2, r0
        MOD(sum2);
    7002:	fbb4 f2f3 	udiv	r2, r4, r3
    7006:	fb03 4412 	mls	r4, r3, r2, r4
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
    700a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
    700e:	e000      	b.n	7012 <adler32+0x1fa>
        return adler | (sum2 << 16);
    }

    /* initial Adler-32 value (deferred check for len == 1 speed) */
    if (buf == Z_NULL)
        return 1L;
    7010:	2001      	movs	r0, #1
        MOD(sum2);
    }

    /* return recombined sums */
    return adler | (sum2 << 16);
}
    7012:	b009      	add	sp, #36	; 0x24
    7014:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}

00007018 <update_crc16>:
  * buf: the data on which to apply the checksum
  * length: the number of bytes of data in 'buf' to be calculated.
  */
unsigned short update_crc16(unsigned short crc, const unsigned char *buf,
			   unsigned int length)
{
    7018:	b510      	push	{r4, r14}
	unsigned int i;
	for (i = 0; i < length; i++) {
    701a:	2300      	movs	r3, #0
    701c:	4293      	cmp	r3, r2
    701e:	d00e      	beq.n	703e <update_crc16+0x26>
		crc = (unsigned char) (crc >> 8) | (crc << 8);
		crc ^= buf[i];
    7020:	5ccc      	ldrb	r4, [r1, r3]
    7022:	ba40      	rev16	r0, r0
    7024:	b280      	uxth	r0, r0
    7026:	4060      	eors	r0, r4
		crc ^= (unsigned char) (crc & 0xff) >> 4;
    7028:	f3c0 1403 	ubfx	r4, r0, #4, #4
    702c:	4060      	eors	r0, r4
		crc ^= (crc << 8) << 4;
    702e:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
    7032:	b280      	uxth	r0, r0
		crc ^= ((crc & 0xff) << 4) << 1;
    7034:	b2c4      	uxtb	r4, r0
    7036:	ea80 1044 	eor.w	r0, r0, r4, lsl #5
  */
unsigned short update_crc16(unsigned short crc, const unsigned char *buf,
			   unsigned int length)
{
	unsigned int i;
	for (i = 0; i < length; i++) {
    703a:	3301      	adds	r3, #1
    703c:	e7ee      	b.n	701c <update_crc16+0x4>
		crc ^= (unsigned char) (crc & 0xff) >> 4;
		crc ^= (crc << 8) << 4;
		crc ^= ((crc & 0xff) << 4) << 1;
	}
	return crc;
}
    703e:	bd10      	pop	{r4, r15}

00007040 <crc16>:
  * Computes a CRC, starting with an initialization value.
  * buf: the data on which to apply the checksum
  * length: the number of bytes of data in 'buf' to be calculated.
  */
unsigned short crc16(const unsigned char *buf, unsigned int length)
{
    7040:	4603      	mov	r3, r0
    7042:	460a      	mov	r2, r1
	unsigned short crc = CRC16_INIT_VALUE;
	return update_crc16(crc, buf, length);
    7044:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7048:	4619      	mov	r1, r3
    704a:	f7ff bfe5 	b.w	7018 <update_crc16>
	...

00007050 <crc32>:
/* ========================================================================= */
unsigned long ZEXPORT crc32(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    uInt len;
{
    7050:	b530      	push	{r4, r5, r14}
    if (buf == Z_NULL) return 0UL;
    7052:	2900      	cmp	r1, #0
    7054:	d05b      	beq.n	710e <crc32+0xbe>
            return crc32_little(crc, buf, len);
        else
            return crc32_big(crc, buf, len);
    }
#endif /* BYFOUR */
    crc = crc ^ 0xffffffffUL;
    7056:	43c5      	mvns	r5, r0
    while (len >= 8) {
    7058:	460b      	mov	r3, r1
    705a:	1888      	adds	r0, r1, r2
    705c:	1ac0      	subs	r0, r0, r3
    705e:	2807      	cmp	r0, #7
    7060:	d941      	bls.n	70e6 <crc32+0x96>
        DO8;
    7062:	7818      	ldrb	r0, [r3, #0]
    7064:	4c2b      	ldr	r4, [pc, #172]	; (7114 <crc32+0xc4>)
    7066:	4068      	eors	r0, r5
    7068:	b2c0      	uxtb	r0, r0
    706a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    706e:	3308      	adds	r3, #8
    7070:	ea80 2515 	eor.w	r5, r0, r5, lsr #8
    7074:	f813 0c07 	ldrb.w	r0, [r3, #-7]
    7078:	4068      	eors	r0, r5
    707a:	b2c0      	uxtb	r0, r0
    707c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    7080:	ea80 2515 	eor.w	r5, r0, r5, lsr #8
    7084:	f813 0c06 	ldrb.w	r0, [r3, #-6]
    7088:	4068      	eors	r0, r5
    708a:	b2c0      	uxtb	r0, r0
    708c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    7090:	ea80 2515 	eor.w	r5, r0, r5, lsr #8
    7094:	f813 0c05 	ldrb.w	r0, [r3, #-5]
    7098:	4068      	eors	r0, r5
    709a:	b2c0      	uxtb	r0, r0
    709c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    70a0:	ea80 2515 	eor.w	r5, r0, r5, lsr #8
    70a4:	f813 0c04 	ldrb.w	r0, [r3, #-4]
    70a8:	4068      	eors	r0, r5
    70aa:	b2c0      	uxtb	r0, r0
    70ac:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    70b0:	ea80 2515 	eor.w	r5, r0, r5, lsr #8
    70b4:	f813 0c03 	ldrb.w	r0, [r3, #-3]
    70b8:	4068      	eors	r0, r5
    70ba:	b2c0      	uxtb	r0, r0
    70bc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    70c0:	ea80 2515 	eor.w	r5, r0, r5, lsr #8
    70c4:	f813 0c02 	ldrb.w	r0, [r3, #-2]
    70c8:	4068      	eors	r0, r5
    70ca:	b2c0      	uxtb	r0, r0
    70cc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    70d0:	ea80 2515 	eor.w	r5, r0, r5, lsr #8
    70d4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
    70d8:	4068      	eors	r0, r5
    70da:	b2c0      	uxtb	r0, r0
    70dc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    70e0:	ea80 2515 	eor.w	r5, r0, r5, lsr #8
    70e4:	e7b9      	b.n	705a <crc32+0xa>
    70e6:	f022 0307 	bic.w	r3, r2, #7
        len -= 8;
    }
    if (len) do {
    70ea:	f012 0207 	ands.w	r2, r2, #7
    70ee:	4419      	add	r1, r3
    70f0:	d00b      	beq.n	710a <crc32+0xba>
    70f2:	440a      	add	r2, r1
        DO1;
    70f4:	f811 0b01 	ldrb.w	r0, [r1], #1
    70f8:	4b06      	ldr	r3, [pc, #24]	; (7114 <crc32+0xc4>)
    70fa:	4068      	eors	r0, r5
    70fc:	b2c0      	uxtb	r0, r0
    70fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    } while (--len);
    7102:	4291      	cmp	r1, r2
    while (len >= 8) {
        DO8;
        len -= 8;
    }
    if (len) do {
        DO1;
    7104:	ea83 2515 	eor.w	r5, r3, r5, lsr #8
    } while (--len);
    7108:	d1f4      	bne.n	70f4 <crc32+0xa4>
    return crc ^ 0xffffffffUL;
    710a:	43e8      	mvns	r0, r5
    710c:	bd30      	pop	{r4, r5, r15}
unsigned long ZEXPORT crc32(crc, buf, len)
    unsigned long crc;
    const unsigned char FAR *buf;
    uInt len;
{
    if (buf == Z_NULL) return 0UL;
    710e:	4608      	mov	r0, r1
    }
    if (len) do {
        DO1;
    } while (--len);
    return crc ^ 0xffffffffUL;
}
    7110:	bd30      	pop	{r4, r5, r15}
    7112:	bf00      	nop
    7114:	0001261c 	.word	0x0001261c

00007118 <cmd_cksum_bench>:

    return 0;
}

static int cmd_cksum_bench(int argc, const cmd_args *argv)
{
    7118:	e92d 43f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r14}
#define BUFSIZE 0x1000
#define ITER 16384
    void *buf;
    bool freebuf;

    if (argc > 1) {
    711c:	2801      	cmp	r0, #1

    return 0;
}

static int cmd_cksum_bench(int argc, const cmd_args *argv)
{
    711e:	b085      	sub	sp, #20
#define BUFSIZE 0x1000
#define ITER 16384
    void *buf;
    bool freebuf;

    if (argc > 1) {
    7120:	dd02      	ble.n	7128 <cmd_cksum_bench+0x10>
        buf = argv[1].p;
    7122:	69ce      	ldr	r6, [r1, #28]
        freebuf = false;
    7124:	2700      	movs	r7, #0
    7126:	e005      	b.n	7134 <cmd_cksum_bench+0x1c>
    } else {
        buf = malloc(BUFSIZE);
    7128:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    712c:	f004 fafa 	bl	b724 <malloc>
        freebuf = true;
    7130:	2701      	movs	r7, #1

    if (argc > 1) {
        buf = argv[1].p;
        freebuf = false;
    } else {
        buf = malloc(BUFSIZE);
    7132:	4606      	mov	r6, r0
        freebuf = true;
    }

    if (!buf)
    7134:	2e00      	cmp	r6, #0
    7136:	d059      	beq.n	71ec <cmd_cksum_bench+0xd4>
        return -1;

    lk_bigtime_t t;
    uint32_t crc;

    printf("buffer at %p, size %u\n", buf, BUFSIZE);
    7138:	4631      	mov	r1, r6
    713a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    713e:	482f      	ldr	r0, [pc, #188]	; (71fc <cmd_cksum_bench+0xe4>)
    7140:	f005 fba2 	bl	c888 <_printf>

    t = current_time_hires();
    7144:	f7fc feaa 	bl	3e9c <current_time_hires>
    7148:	f44f 4880 	mov.w	r8, #16384	; 0x4000
    714c:	4604      	mov	r4, r0
    714e:	460d      	mov	r5, r1
    crc = 0;
    7150:	2000      	movs	r0, #0
    for (int i = 0; i < ITER; i++) {
        crc = crc32(crc, buf, BUFSIZE);
    7152:	4631      	mov	r1, r6
    7154:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    7158:	f7ff ff7a 	bl	7050 <crc32>

    printf("buffer at %p, size %u\n", buf, BUFSIZE);

    t = current_time_hires();
    crc = 0;
    for (int i = 0; i < ITER; i++) {
    715c:	f1b8 0801 	subs.w	r8, r8, #1
    7160:	d1f7      	bne.n	7152 <cmd_cksum_bench+0x3a>
        crc = crc32(crc, buf, BUFSIZE);
    }
    t = current_time_hires() - t;
    7162:	f7fc fe9b 	bl	3e9c <current_time_hires>

    printf("took %llu usecs to crc32 %d bytes (%lld bytes/sec)\n", t, BUFSIZE * ITER, (BUFSIZE * ITER) * 1000000ULL / t);
    7166:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    t = current_time_hires();
    crc = 0;
    for (int i = 0; i < ITER; i++) {
        crc = crc32(crc, buf, BUFSIZE);
    }
    t = current_time_hires() - t;
    716a:	1b04      	subs	r4, r0, r4
    716c:	eb61 0505 	sbc.w	r5, r1, r5

    printf("took %llu usecs to crc32 %d bytes (%lld bytes/sec)\n", t, BUFSIZE * ITER, (BUFSIZE * ITER) * 1000000ULL / t);
    7170:	4622      	mov	r2, r4
    7172:	9300      	str	r3, [sp, #0]
    7174:	2000      	movs	r0, #0
    7176:	462b      	mov	r3, r5
    7178:	f643 5109 	movw	r1, #15625	; 0x3d09
    717c:	f006 fe42 	bl	de04 <__aeabi_uldivmod>
    7180:	4622      	mov	r2, r4
    7182:	e9cd 0102 	strd	r0, r1, [r13, #8]
    7186:	462b      	mov	r3, r5
    7188:	481d      	ldr	r0, [pc, #116]	; (7200 <cmd_cksum_bench+0xe8>)
    718a:	f005 fb7d 	bl	c888 <_printf>
    thread_sleep(500);
    718e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    7192:	f7fd fe23 	bl	4ddc <thread_sleep>

    t = current_time_hires();
    7196:	f7fc fe81 	bl	3e9c <current_time_hires>
    719a:	f44f 4980 	mov.w	r9, #16384	; 0x4000
    719e:	4604      	mov	r4, r0
    71a0:	460d      	mov	r5, r1
    crc = 0;
    71a2:	4640      	mov	r0, r8
    for (int i = 0; i < ITER; i++) {
        crc = adler32(crc, buf, BUFSIZE);
    71a4:	4631      	mov	r1, r6
    71a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    71aa:	f7ff fe35 	bl	6e18 <adler32>
    printf("took %llu usecs to crc32 %d bytes (%lld bytes/sec)\n", t, BUFSIZE * ITER, (BUFSIZE * ITER) * 1000000ULL / t);
    thread_sleep(500);

    t = current_time_hires();
    crc = 0;
    for (int i = 0; i < ITER; i++) {
    71ae:	f1b9 0901 	subs.w	r9, r9, #1
    71b2:	d1f7      	bne.n	71a4 <cmd_cksum_bench+0x8c>
        crc = adler32(crc, buf, BUFSIZE);
    }
    t = current_time_hires() - t;
    71b4:	f7fc fe72 	bl	3e9c <current_time_hires>

    printf("took %llu usecs to adler32 %d bytes (%lld bytes/sec)\n", t, BUFSIZE * ITER, (BUFSIZE * ITER) * 1000000ULL / t);
    71b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    t = current_time_hires();
    crc = 0;
    for (int i = 0; i < ITER; i++) {
        crc = adler32(crc, buf, BUFSIZE);
    }
    t = current_time_hires() - t;
    71bc:	1b04      	subs	r4, r0, r4
    71be:	eb61 0505 	sbc.w	r5, r1, r5

    printf("took %llu usecs to adler32 %d bytes (%lld bytes/sec)\n", t, BUFSIZE * ITER, (BUFSIZE * ITER) * 1000000ULL / t);
    71c2:	9300      	str	r3, [sp, #0]
    71c4:	4622      	mov	r2, r4
    71c6:	462b      	mov	r3, r5
    71c8:	2000      	movs	r0, #0
    71ca:	f643 5109 	movw	r1, #15625	; 0x3d09
    71ce:	f006 fe19 	bl	de04 <__aeabi_uldivmod>
    71d2:	4622      	mov	r2, r4
    71d4:	e9cd 0102 	strd	r0, r1, [r13, #8]
    71d8:	462b      	mov	r3, r5
    71da:	480a      	ldr	r0, [pc, #40]	; (7204 <cmd_cksum_bench+0xec>)
    71dc:	f005 fb54 	bl	c888 <_printf>

    if (freebuf)
    71e0:	b13f      	cbz	r7, 71f2 <cmd_cksum_bench+0xda>
        free(buf);
    71e2:	4630      	mov	r0, r6
    71e4:	f004 fb2e 	bl	b844 <free>
    return 0;
    71e8:	4648      	mov	r0, r9
    71ea:	e003      	b.n	71f4 <cmd_cksum_bench+0xdc>
        buf = malloc(BUFSIZE);
        freebuf = true;
    }

    if (!buf)
        return -1;
    71ec:	f04f 30ff 	mov.w	r0, #4294967295
    71f0:	e000      	b.n	71f4 <cmd_cksum_bench+0xdc>

    printf("took %llu usecs to adler32 %d bytes (%lld bytes/sec)\n", t, BUFSIZE * ITER, (BUFSIZE * ITER) * 1000000ULL / t);

    if (freebuf)
        free(buf);
    return 0;
    71f2:	4638      	mov	r0, r7
}
    71f4:	b005      	add	sp, #20
    71f6:	e8bd 83f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r15}
    71fa:	bf00      	nop
    71fc:	00012a1c 	.word	0x00012a1c
    7200:	00012a33 	.word	0x00012a33
    7204:	00012a67 	.word	0x00012a67

00007208 <cmd_crc32>:
    return 0;
}

static int cmd_crc32(int argc, const cmd_args *argv)
{
    if (argc < 3) {
    7208:	2802      	cmp	r0, #2

    return 0;
}

static int cmd_crc32(int argc, const cmd_args *argv)
{
    720a:	b510      	push	{r4, r14}
    720c:	460c      	mov	r4, r1
    if (argc < 3) {
    720e:	dc09      	bgt.n	7224 <cmd_crc32+0x1c>
        printf("not enough arguments\n");
    7210:	480a      	ldr	r0, [pc, #40]	; (723c <cmd_crc32+0x34>)
    7212:	f005 fb39 	bl	c888 <_printf>
        printf("usage: %s <address> <size>\n", argv[0].str);
    7216:	6821      	ldr	r1, [r4, #0]
    7218:	4809      	ldr	r0, [pc, #36]	; (7240 <cmd_crc32+0x38>)
    721a:	f005 fb35 	bl	c888 <_printf>
    721e:	f04f 30ff 	mov.w	r0, #4294967295
    7222:	bd10      	pop	{r4, r15}
        return -1;
    }

    uint32_t crc = crc32(0, argv[1].p, argv[2].u);
    7224:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7226:	69c9      	ldr	r1, [r1, #28]
    7228:	2000      	movs	r0, #0
    722a:	f7ff ff11 	bl	7050 <crc32>
    722e:	4601      	mov	r1, r0

    printf("0x%x\n", crc);
    7230:	4804      	ldr	r0, [pc, #16]	; (7244 <cmd_crc32+0x3c>)
    7232:	f005 fb29 	bl	c888 <_printf>

    return 0;
    7236:	2000      	movs	r0, #0
}
    7238:	bd10      	pop	{r4, r15}
    723a:	bf00      	nop
    723c:	0000f1c9 	.word	0x0000f1c9
    7240:	00012a9d 	.word	0x00012a9d
    7244:	0000e495 	.word	0x0000e495

00007248 <cmd_adler32>:

static int cmd_adler32(int argc, const cmd_args *argv)
{
    if (argc < 3) {
    7248:	2802      	cmp	r0, #2

    return 0;
}

static int cmd_adler32(int argc, const cmd_args *argv)
{
    724a:	b510      	push	{r4, r14}
    724c:	460c      	mov	r4, r1
    if (argc < 3) {
    724e:	dc09      	bgt.n	7264 <cmd_adler32+0x1c>
        printf("not enough arguments\n");
    7250:	480a      	ldr	r0, [pc, #40]	; (727c <cmd_adler32+0x34>)
    7252:	f005 fb19 	bl	c888 <_printf>
        printf("usage: %s <address> <size>\n", argv[0].str);
    7256:	6821      	ldr	r1, [r4, #0]
    7258:	4809      	ldr	r0, [pc, #36]	; (7280 <cmd_adler32+0x38>)
    725a:	f005 fb15 	bl	c888 <_printf>
    725e:	f04f 30ff 	mov.w	r0, #4294967295
    7262:	bd10      	pop	{r4, r15}
        return -1;
    }

    uint32_t crc = adler32(0, argv[1].p, argv[2].u);
    7264:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7266:	69c9      	ldr	r1, [r1, #28]
    7268:	2000      	movs	r0, #0
    726a:	f7ff fdd5 	bl	6e18 <adler32>
    726e:	4601      	mov	r1, r0

    printf("0x%x\n", crc);
    7270:	4804      	ldr	r0, [pc, #16]	; (7284 <cmd_adler32+0x3c>)
    7272:	f005 fb09 	bl	c888 <_printf>

    return 0;
    7276:	2000      	movs	r0, #0
}
    7278:	bd10      	pop	{r4, r15}
    727a:	bf00      	nop
    727c:	0000f1c9 	.word	0x0000f1c9
    7280:	00012a9d 	.word	0x00012a9d
    7284:	0000e495 	.word	0x0000e495

00007288 <cmd_crc16>:
#endif
STATIC_COMMAND_END(crc);

static int cmd_crc16(int argc, const cmd_args *argv)
{
    if (argc < 3) {
    7288:	2802      	cmp	r0, #2
STATIC_COMMAND("bench_cksum", "benchmark the checksum routines", &cmd_cksum_bench)
#endif
STATIC_COMMAND_END(crc);

static int cmd_crc16(int argc, const cmd_args *argv)
{
    728a:	b510      	push	{r4, r14}
    728c:	460c      	mov	r4, r1
    if (argc < 3) {
    728e:	dc09      	bgt.n	72a4 <cmd_crc16+0x1c>
        printf("not enough arguments\n");
    7290:	4809      	ldr	r0, [pc, #36]	; (72b8 <cmd_crc16+0x30>)
    7292:	f005 faf9 	bl	c888 <_printf>
        printf("usage: %s <address> <size>\n", argv[0].str);
    7296:	6821      	ldr	r1, [r4, #0]
    7298:	4808      	ldr	r0, [pc, #32]	; (72bc <cmd_crc16+0x34>)
    729a:	f005 faf5 	bl	c888 <_printf>
    729e:	f04f 30ff 	mov.w	r0, #4294967295
    72a2:	bd10      	pop	{r4, r15}
        return -1;
    }

    uint16_t crc = crc16(argv[1].p, argv[2].u);
    72a4:	69c8      	ldr	r0, [r1, #28]
    72a6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    72a8:	f7ff feca 	bl	7040 <crc16>
    72ac:	4601      	mov	r1, r0

    printf("0x%hx\n", crc);
    72ae:	4804      	ldr	r0, [pc, #16]	; (72c0 <cmd_crc16+0x38>)
    72b0:	f005 faea 	bl	c888 <_printf>

    return 0;
    72b4:	2000      	movs	r0, #0
}
    72b6:	bd10      	pop	{r4, r15}
    72b8:	0000f1c9 	.word	0x0000f1c9
    72bc:	00012a9d 	.word	0x00012a9d
    72c0:	00012ab9 	.word	0x00012ab9

000072c4 <cmd_sleep>:

static int cmd_sleep(int argc, const cmd_args *argv)
{
    lk_time_t t = 1000; /* default to 1 second */

    if (argc >= 2) {
    72c4:	2801      	cmp	r0, #1

    return 0;
}

static int cmd_sleep(int argc, const cmd_args *argv)
{
    72c6:	b510      	push	{r4, r14}
    lk_time_t t = 1000; /* default to 1 second */

    if (argc >= 2) {
    72c8:	dd09      	ble.n	72de <cmd_sleep+0x1a>
        t = argv[1].u;
    72ca:	698c      	ldr	r4, [r1, #24]
        if (!strcmp(argv[0].str, "sleep"))
    72cc:	6808      	ldr	r0, [r1, #0]
    72ce:	4907      	ldr	r1, [pc, #28]	; (72ec <cmd_sleep+0x28>)
    72d0:	f005 fb01 	bl	c8d6 <strcmp>
    72d4:	b928      	cbnz	r0, 72e2 <cmd_sleep+0x1e>
            t *= 1000;
    72d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    72da:	435c      	muls	r4, r3
    72dc:	e001      	b.n	72e2 <cmd_sleep+0x1e>
    return 0;
}

static int cmd_sleep(int argc, const cmd_args *argv)
{
    lk_time_t t = 1000; /* default to 1 second */
    72de:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
        t = argv[1].u;
        if (!strcmp(argv[0].str, "sleep"))
            t *= 1000;
    }

    thread_sleep(t);
    72e2:	4620      	mov	r0, r4
    72e4:	f7fd fd7a 	bl	4ddc <thread_sleep>

    return 0;
}
    72e8:	2000      	movs	r0, #0
    72ea:	bd10      	pop	{r4, r15}
    72ec:	00012b40 	.word	0x00012b40

000072f0 <cmd_fill_mem>:

static int cmd_fill_mem(int argc, const cmd_args *argv)
{
    int size;

    if (argc < 4) {
    72f0:	2803      	cmp	r0, #3

    return 0;
}

static int cmd_fill_mem(int argc, const cmd_args *argv)
{
    72f2:	b538      	push	{r3, r4, r5, r14}
    72f4:	460c      	mov	r4, r1
    int size;

    if (argc < 4) {
    72f6:	dc07      	bgt.n	7308 <cmd_fill_mem+0x18>
        printf("not enough arguments\n");
    72f8:	481a      	ldr	r0, [pc, #104]	; (7364 <cmd_fill_mem+0x74>)
    72fa:	f005 fac5 	bl	c888 <_printf>
        printf("%s <address> <len> <val>\n", argv[0].str);
    72fe:	6821      	ldr	r1, [r4, #0]
    7300:	4819      	ldr	r0, [pc, #100]	; (7368 <cmd_fill_mem+0x78>)
    7302:	f005 fac1 	bl	c888 <_printf>
    7306:	e019      	b.n	733c <cmd_fill_mem+0x4c>
        return -1;
    }

    if (strcmp(argv[0].str, "fw") == 0) {
    7308:	680d      	ldr	r5, [r1, #0]
    730a:	4918      	ldr	r1, [pc, #96]	; (736c <cmd_fill_mem+0x7c>)
    730c:	4628      	mov	r0, r5
    730e:	f005 fae2 	bl	c8d6 <strcmp>
    7312:	b140      	cbz	r0, 7326 <cmd_fill_mem+0x36>
        size = 4;
    } else if (strcmp(argv[0].str, "fh") == 0) {
    7314:	4628      	mov	r0, r5
    7316:	4916      	ldr	r1, [pc, #88]	; (7370 <cmd_fill_mem+0x80>)
    7318:	f005 fadd 	bl	c8d6 <strcmp>
        size = 2;
    731c:	2800      	cmp	r0, #0
    731e:	bf14      	ite	ne
    7320:	2001      	movne	r0, #1
    7322:	2002      	moveq	r0, #2
    7324:	e000      	b.n	7328 <cmd_fill_mem+0x38>
        printf("%s <address> <len> <val>\n", argv[0].str);
        return -1;
    }

    if (strcmp(argv[0].str, "fw") == 0) {
        size = 4;
    7326:	2004      	movs	r0, #4
        size = 2;
    } else {
        size = 1;
    }

    unsigned long address = argv[1].u;
    7328:	69a3      	ldr	r3, [r4, #24]
    unsigned long len = argv[2].u;
    unsigned long stop = address + len;
    732a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    732c:	1899      	adds	r1, r3, r2
    unsigned int val = argv[3].u;
    732e:	6c22      	ldr	r2, [r4, #64]	; 0x40

    if ((address & (size - 1)) != 0) {
    7330:	1e44      	subs	r4, r0, #1
    7332:	421c      	tst	r4, r3
    7334:	d00b      	beq.n	734e <cmd_fill_mem+0x5e>
        printf("unaligned address, cannot modify\n");
    7336:	480f      	ldr	r0, [pc, #60]	; (7374 <cmd_fill_mem+0x84>)
    7338:	f005 faa6 	bl	c888 <_printf>
        return -1;
    733c:	f04f 30ff 	mov.w	r0, #4294967295
    7340:	bd38      	pop	{r3, r4, r5, r15}
    }

    for ( ; address < stop; address += size) {
        switch (size) {
    7342:	2802      	cmp	r0, #2
    7344:	d00a      	beq.n	735c <cmd_fill_mem+0x6c>
    7346:	2804      	cmp	r0, #4
    7348:	d104      	bne.n	7354 <cmd_fill_mem+0x64>
            case 4:
                *(uint32_t *)address = (uint32_t)val;
    734a:	601a      	str	r2, [r3, #0]
    if ((address & (size - 1)) != 0) {
        printf("unaligned address, cannot modify\n");
        return -1;
    }

    for ( ; address < stop; address += size) {
    734c:	4403      	add	r3, r0
    734e:	428b      	cmp	r3, r1
    7350:	d3f7      	bcc.n	7342 <cmd_fill_mem+0x52>
    7352:	e005      	b.n	7360 <cmd_fill_mem+0x70>
        switch (size) {
    7354:	2801      	cmp	r0, #1
    7356:	d1f9      	bne.n	734c <cmd_fill_mem+0x5c>
                break;
            case 2:
                *(uint16_t *)address = (uint16_t)val;
                break;
            case 1:
                *(uint8_t *)address = (uint8_t)val;
    7358:	701a      	strb	r2, [r3, #0]
                break;
    735a:	e7f7      	b.n	734c <cmd_fill_mem+0x5c>
        switch (size) {
            case 4:
                *(uint32_t *)address = (uint32_t)val;
                break;
            case 2:
                *(uint16_t *)address = (uint16_t)val;
    735c:	801a      	strh	r2, [r3, #0]
                break;
    735e:	e7f5      	b.n	734c <cmd_fill_mem+0x5c>
                *(uint8_t *)address = (uint8_t)val;
                break;
        }
    }

    return 0;
    7360:	2000      	movs	r0, #0
}
    7362:	bd38      	pop	{r3, r4, r5, r15}
    7364:	0000f1c9 	.word	0x0000f1c9
    7368:	00012b46 	.word	0x00012b46
    736c:	00012b60 	.word	0x00012b60
    7370:	00012b63 	.word	0x00012b63
    7374:	00012b66 	.word	0x00012b66

00007378 <cmd_display_mem>:
{
    /* save the last address and len so we can continue where we left off */
    static unsigned long address;
    static size_t len;

    if (argc < 3 && len == 0) {
    7378:	2802      	cmp	r0, #2
STATIC_COMMAND("sleep", "sleep number of seconds", &cmd_sleep)
STATIC_COMMAND("sleepm", "sleep number of milliseconds", &cmd_sleep)
STATIC_COMMAND_END(mem);

static int cmd_display_mem(int argc, const cmd_args *argv)
{
    737a:	e92d 47f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r14}
    737e:	4680      	mov	r8, r0
    7380:	460c      	mov	r4, r1
    /* save the last address and len so we can continue where we left off */
    static unsigned long address;
    static size_t len;

    if (argc < 3 && len == 0) {
    7382:	dc0a      	bgt.n	739a <cmd_display_mem+0x22>
    7384:	4b44      	ldr	r3, [pc, #272]	; (7498 <cmd_display_mem+0x120>)
    7386:	681b      	ldr	r3, [r3, #0]
    7388:	b93b      	cbnz	r3, 739a <cmd_display_mem+0x22>
        printf("not enough arguments\n");
    738a:	4844      	ldr	r0, [pc, #272]	; (749c <cmd_display_mem+0x124>)
    738c:	f005 fa7c 	bl	c888 <_printf>
        printf("%s [-l] [-b] [address] [length]\n", argv[0].str);
    7390:	6821      	ldr	r1, [r4, #0]
    7392:	4843      	ldr	r0, [pc, #268]	; (74a0 <cmd_display_mem+0x128>)
    7394:	f005 fa78 	bl	c888 <_printf>
    7398:	e042      	b.n	7420 <cmd_display_mem+0xa8>
        return -1;
    }

    int size;
    if (strcmp(argv[0].str, "dw") == 0) {
    739a:	6825      	ldr	r5, [r4, #0]
    739c:	4941      	ldr	r1, [pc, #260]	; (74a4 <cmd_display_mem+0x12c>)
    739e:	4628      	mov	r0, r5
    73a0:	f005 fa99 	bl	c8d6 <strcmp>
    73a4:	b140      	cbz	r0, 73b8 <cmd_display_mem+0x40>
        size = 4;
    } else if (strcmp(argv[0].str, "dh") == 0) {
    73a6:	4628      	mov	r0, r5
    73a8:	493f      	ldr	r1, [pc, #252]	; (74a8 <cmd_display_mem+0x130>)
    73aa:	f005 fa94 	bl	c8d6 <strcmp>
        size = 2;
    73ae:	2800      	cmp	r0, #0
    73b0:	bf14      	ite	ne
    73b2:	2501      	movne	r5, #1
    73b4:	2502      	moveq	r5, #2
    73b6:	e000      	b.n	73ba <cmd_display_mem+0x42>
        return -1;
    }

    int size;
    if (strcmp(argv[0].str, "dw") == 0) {
        size = 4;
    73b8:	2504      	movs	r5, #4
        size = 1;
    }

    uint byte_order = BYTE_ORDER;
    int argindex = 1;
    bool read_address = false;
    73ba:	f04f 0900 	mov.w	r9, #0
    } else {
        size = 1;
    }

    uint byte_order = BYTE_ORDER;
    int argindex = 1;
    73be:	2601      	movs	r6, #1
        size = 2;
    } else {
        size = 1;
    }

    uint byte_order = BYTE_ORDER;
    73c0:	f240 47d2 	movw	r7, #1234	; 0x4d2
    int argindex = 1;
    bool read_address = false;
    while (argc > argindex) {
    73c4:	45b0      	cmp	r8, r6
    73c6:	dd1f      	ble.n	7408 <cmd_display_mem+0x90>
        if (!strcmp(argv[argindex].str, "-l")) {
    73c8:	f8d4 a014 	ldr.w	r10, [r4, #20]
    73cc:	4937      	ldr	r1, [pc, #220]	; (74ac <cmd_display_mem+0x134>)
    73ce:	4650      	mov	r0, r10
    73d0:	f005 fa81 	bl	c8d6 <strcmp>
    73d4:	b180      	cbz	r0, 73f8 <cmd_display_mem+0x80>
            byte_order = LITTLE_ENDIAN;
        } else if (!strcmp(argv[argindex].str, "-b")) {
    73d6:	4650      	mov	r0, r10
    73d8:	4935      	ldr	r1, [pc, #212]	; (74b0 <cmd_display_mem+0x138>)
    73da:	f005 fa7c 	bl	c8d6 <strcmp>
    73de:	b170      	cbz	r0, 73fe <cmd_display_mem+0x86>
    73e0:	69a3      	ldr	r3, [r4, #24]
            byte_order = BIG_ENDIAN;
        } else if (!read_address) {
    73e2:	f1b9 0f00 	cmp.w	r9, #0
    73e6:	d104      	bne.n	73f2 <cmd_display_mem+0x7a>
            address = argv[argindex].u;
    73e8:	4a32      	ldr	r2, [pc, #200]	; (74b4 <cmd_display_mem+0x13c>)
            read_address = true;
    73ea:	f04f 0901 	mov.w	r9, #1
        if (!strcmp(argv[argindex].str, "-l")) {
            byte_order = LITTLE_ENDIAN;
        } else if (!strcmp(argv[argindex].str, "-b")) {
            byte_order = BIG_ENDIAN;
        } else if (!read_address) {
            address = argv[argindex].u;
    73ee:	6013      	str	r3, [r2, #0]
    73f0:	e007      	b.n	7402 <cmd_display_mem+0x8a>
            read_address = true;
        } else {
            len = argv[argindex].u;
    73f2:	4a29      	ldr	r2, [pc, #164]	; (7498 <cmd_display_mem+0x120>)
    73f4:	6013      	str	r3, [r2, #0]
    73f6:	e004      	b.n	7402 <cmd_display_mem+0x8a>
    uint byte_order = BYTE_ORDER;
    int argindex = 1;
    bool read_address = false;
    while (argc > argindex) {
        if (!strcmp(argv[argindex].str, "-l")) {
            byte_order = LITTLE_ENDIAN;
    73f8:	f240 47d2 	movw	r7, #1234	; 0x4d2
    73fc:	e001      	b.n	7402 <cmd_display_mem+0x8a>
        } else if (!strcmp(argv[argindex].str, "-b")) {
            byte_order = BIG_ENDIAN;
    73fe:	f241 07e1 	movw	r7, #4321	; 0x10e1
            read_address = true;
        } else {
            len = argv[argindex].u;
        }

        argindex++;
    7402:	3601      	adds	r6, #1
    7404:	3414      	adds	r4, #20
    7406:	e7dd      	b.n	73c4 <cmd_display_mem+0x4c>
    }

    unsigned long stop = address + len;
    7408:	4c2a      	ldr	r4, [pc, #168]	; (74b4 <cmd_display_mem+0x13c>)
    740a:	4a23      	ldr	r2, [pc, #140]	; (7498 <cmd_display_mem+0x120>)
    740c:	6823      	ldr	r3, [r4, #0]
    740e:	6812      	ldr	r2, [r2, #0]
    int count = 0;

    if ((address & (size - 1)) != 0) {
    7410:	1e6e      	subs	r6, r5, #1
    7412:	401e      	ands	r6, r3
        }

        argindex++;
    }

    unsigned long stop = address + len;
    7414:	eb03 0802 	add.w	r8, r3, r2
    int count = 0;

    if ((address & (size - 1)) != 0) {
    7418:	d022      	beq.n	7460 <cmd_display_mem+0xe8>
        printf("unaligned address, cannot display\n");
    741a:	4827      	ldr	r0, [pc, #156]	; (74b8 <cmd_display_mem+0x140>)
    741c:	f005 fa34 	bl	c888 <_printf>
        return -1;
    7420:	f04f 30ff 	mov.w	r0, #4294967295
    7424:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
        return -1;
    }
#endif

    for ( ; address < stop; address += size) {
        if (count == 0)
    7428:	b916      	cbnz	r6, 7430 <cmd_display_mem+0xb8>
            printf("0x%08lx: ", address);
    742a:	4824      	ldr	r0, [pc, #144]	; (74bc <cmd_display_mem+0x144>)
    742c:	f005 fa2c 	bl	c888 <_printf>
        switch (size) {
    7430:	2d02      	cmp	r5, #2
    7432:	d01f      	beq.n	7474 <cmd_display_mem+0xfc>
    7434:	2d04      	cmp	r5, #4
    7436:	d117      	bne.n	7468 <cmd_display_mem+0xf0>
            case 4: {
                uint32_t val = (byte_order != BYTE_ORDER) ?
                               SWAP_32(*(uint32_t *)address) :
    7438:	f240 43d2 	movw	r3, #1234	; 0x4d2
    743c:	429f      	cmp	r7, r3
    743e:	6823      	ldr	r3, [r4, #0]
    7440:	6819      	ldr	r1, [r3, #0]
    7442:	d000      	beq.n	7446 <cmd_display_mem+0xce>
    7444:	ba09      	rev	r1, r1
                               *(uint32_t *)address;
                printf("%08x ", val);
    7446:	481e      	ldr	r0, [pc, #120]	; (74c0 <cmd_display_mem+0x148>)
                               *(uint16_t *)address;
                printf("%04hx ", val);
                break;
            }
            case 1:
                printf("%02hhx ", *(uint8_t *)address);
    7448:	f005 fa1e 	bl	c888 <_printf>
                break;
        }
        count += size;
    744c:	442e      	add	r6, r5
        if (count == 16) {
    744e:	2e10      	cmp	r6, #16
    7450:	d103      	bne.n	745a <cmd_display_mem+0xe2>
            printf("\n");
    7452:	481c      	ldr	r0, [pc, #112]	; (74c4 <cmd_display_mem+0x14c>)
    7454:	f005 fa18 	bl	c888 <_printf>
            count = 0;
    7458:	2600      	movs	r6, #0
        printf("ERROR: address 0x%lx is unmapped\n", address);
        return -1;
    }
#endif

    for ( ; address < stop; address += size) {
    745a:	6823      	ldr	r3, [r4, #0]
    745c:	442b      	add	r3, r5
    745e:	6023      	str	r3, [r4, #0]
    7460:	6821      	ldr	r1, [r4, #0]
    7462:	4541      	cmp	r1, r8
    7464:	d3e0      	bcc.n	7428 <cmd_display_mem+0xb0>
    7466:	e00f      	b.n	7488 <cmd_display_mem+0x110>
        if (count == 0)
            printf("0x%08lx: ", address);
        switch (size) {
    7468:	2d01      	cmp	r5, #1
    746a:	d1ef      	bne.n	744c <cmd_display_mem+0xd4>
                               *(uint16_t *)address;
                printf("%04hx ", val);
                break;
            }
            case 1:
                printf("%02hhx ", *(uint8_t *)address);
    746c:	6823      	ldr	r3, [r4, #0]
    746e:	4816      	ldr	r0, [pc, #88]	; (74c8 <cmd_display_mem+0x150>)
    7470:	7819      	ldrb	r1, [r3, #0]
    7472:	e7e9      	b.n	7448 <cmd_display_mem+0xd0>
                               *(uint32_t *)address;
                printf("%08x ", val);
                break;
            }
            case 2: {
                uint16_t val = (byte_order != BYTE_ORDER) ?
    7474:	f240 43d2 	movw	r3, #1234	; 0x4d2
    7478:	429f      	cmp	r7, r3
                               SWAP_16(*(uint16_t *)address) :
    747a:	6823      	ldr	r3, [r4, #0]
    747c:	8819      	ldrh	r1, [r3, #0]
                               *(uint32_t *)address;
                printf("%08x ", val);
                break;
            }
            case 2: {
                uint16_t val = (byte_order != BYTE_ORDER) ?
    747e:	d001      	beq.n	7484 <cmd_display_mem+0x10c>
    7480:	ba49      	rev16	r1, r1
    7482:	b289      	uxth	r1, r1
                               SWAP_16(*(uint16_t *)address) :
                               *(uint16_t *)address;
                printf("%04hx ", val);
    7484:	4811      	ldr	r0, [pc, #68]	; (74cc <cmd_display_mem+0x154>)
    7486:	e7df      	b.n	7448 <cmd_display_mem+0xd0>
            printf("\n");
            count = 0;
        }
    }

    if (count != 0)
    7488:	b116      	cbz	r6, 7490 <cmd_display_mem+0x118>
        printf("\n");
    748a:	480e      	ldr	r0, [pc, #56]	; (74c4 <cmd_display_mem+0x14c>)
    748c:	f005 f9fc 	bl	c888 <_printf>

    return 0;
    7490:	2000      	movs	r0, #0
    7492:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
    7496:	bf00      	nop
    7498:	20000910 	.word	0x20000910
    749c:	0000f1c9 	.word	0x0000f1c9
    74a0:	00012b88 	.word	0x00012b88
    74a4:	00012ba9 	.word	0x00012ba9
    74a8:	00012bac 	.word	0x00012bac
    74ac:	00012baf 	.word	0x00012baf
    74b0:	00012bb2 	.word	0x00012bb2
    74b4:	2000090c 	.word	0x2000090c
    74b8:	00012bb5 	.word	0x00012bb5
    74bc:	00012bd8 	.word	0x00012bd8
    74c0:	00012be2 	.word	0x00012be2
    74c4:	0000e7b4 	.word	0x0000e7b4
    74c8:	00012bef 	.word	0x00012bef
    74cc:	00012be8 	.word	0x00012be8

000074d0 <cmd_stackstomp>:

    return 0;
}

static int cmd_stackstomp(int argc, const cmd_args *argv)
{
    74d0:	b5b0      	push	{r4, r5, r7, r14}
    for (size_t i = 0; i < DEFAULT_STACK_SIZE * 2; i++) {
    74d2:	2400      	movs	r4, #0

    return 0;
}

static int cmd_stackstomp(int argc, const cmd_args *argv)
{
    74d4:	af00      	add	r7, sp, #0
    for (size_t i = 0; i < DEFAULT_STACK_SIZE * 2; i++) {
        uint8_t death[i];
    74d6:	1de3      	adds	r3, r4, #7
    74d8:	f023 0307 	bic.w	r3, r3, #7
    74dc:	466d      	mov	r5, r13
    74de:	ebad 0d03 	sub.w	r13, r13, r3

        memset(death, 0xaa, i);
    74e2:	4622      	mov	r2, r4
    74e4:	4668      	mov	r0, r13
    74e6:	21aa      	movs	r1, #170	; 0xaa
    74e8:	f004 fbb6 	bl	bc58 <memset>
    return 0;
}

static int cmd_stackstomp(int argc, const cmd_args *argv)
{
    for (size_t i = 0; i < DEFAULT_STACK_SIZE * 2; i++) {
    74ec:	3401      	adds	r4, #1
        uint8_t death[i];

        memset(death, 0xaa, i);
        thread_sleep(1);
    74ee:	2001      	movs	r0, #1
    74f0:	f7fd fc74 	bl	4ddc <thread_sleep>
    return 0;
}

static int cmd_stackstomp(int argc, const cmd_args *argv)
{
    for (size_t i = 0; i < DEFAULT_STACK_SIZE * 2; i++) {
    74f4:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
    74f8:	46ad      	mov	r13, r5
    74fa:	d1ec      	bne.n	74d6 <cmd_stackstomp+0x6>

        memset(death, 0xaa, i);
        thread_sleep(1);
    }

    printf("survived.\n");
    74fc:	4802      	ldr	r0, [pc, #8]	; (7508 <cmd_stackstomp+0x38>)
    74fe:	f005 f9c3 	bl	c888 <_printf>

    return 0;
}
    7502:	2000      	movs	r0, #0
    7504:	46bd      	mov	r13, r7
    7506:	bdb0      	pop	{r4, r5, r7, r15}
    7508:	00012bf7 	.word	0x00012bf7

0000750c <cmd_crash>:

    return 0;
}

static int cmd_crash(int argc, const cmd_args *argv)
{
    750c:	b508      	push	{r3, r14}
    /* should crash */
    volatile uint32_t *ptr = (void *)1;
    *ptr = 1;
    750e:	2301      	movs	r3, #1
    7510:	601b      	str	r3, [r3, #0]

    /* if it didn't, panic the system */
    panic("crash");
    7512:	4670      	mov	r0, r14
    7514:	4901      	ldr	r1, [pc, #4]	; (751c <cmd_crash+0x10>)
    7516:	f003 ffcd 	bl	b4b4 <_panic>
    751a:	bf00      	nop
    751c:	00012db5 	.word	0x00012db5

00007520 <cmd_memtest>:
    return 0;
}

static int cmd_memtest(int argc, const cmd_args *argv)
{
    if (argc < 3) {
    7520:	2802      	cmp	r0, #2

    return 0;
}

static int cmd_memtest(int argc, const cmd_args *argv)
{
    7522:	b570      	push	{r4, r5, r6, r14}
    7524:	460c      	mov	r4, r1
    if (argc < 3) {
    7526:	dc09      	bgt.n	753c <cmd_memtest+0x1c>
        printf("not enough arguments\n");
    7528:	4817      	ldr	r0, [pc, #92]	; (7588 <cmd_memtest+0x68>)
    752a:	f005 f9ad 	bl	c888 <_printf>
        printf("%s <base> <len>\n", argv[0].str);
    752e:	6821      	ldr	r1, [r4, #0]
    7530:	4816      	ldr	r0, [pc, #88]	; (758c <cmd_memtest+0x6c>)
    7532:	f005 f9a9 	bl	c888 <_printf>
    7536:	f04f 30ff 	mov.w	r0, #4294967295
    753a:	bd70      	pop	{r4, r5, r6, r15}

    uint32_t *ptr;
    size_t len;

    ptr = (uint32_t *)argv[1].u;
    len = (size_t)argv[2].u;
    753c:	6ace      	ldr	r6, [r1, #44]	; 0x2c

    size_t i;
    // write out
    printf("writing first pass...");
    753e:	4814      	ldr	r0, [pc, #80]	; (7590 <cmd_memtest+0x70>)
    }

    uint32_t *ptr;
    size_t len;

    ptr = (uint32_t *)argv[1].u;
    7540:	698d      	ldr	r5, [r1, #24]
    len = (size_t)argv[2].u;

    size_t i;
    // write out
    printf("writing first pass...");
    for (i = 0; i < len / 4; i++) {
    7542:	08b6      	lsrs	r6, r6, #2
    ptr = (uint32_t *)argv[1].u;
    len = (size_t)argv[2].u;

    size_t i;
    // write out
    printf("writing first pass...");
    7544:	f005 f9a0 	bl	c888 <_printf>
    for (i = 0; i < len / 4; i++) {
    7548:	2300      	movs	r3, #0
    754a:	42b3      	cmp	r3, r6
    754c:	d003      	beq.n	7556 <cmd_memtest+0x36>
        ptr[i] = i;
    754e:	f845 3023 	str.w	r3, [r5, r3, lsl #2]
    len = (size_t)argv[2].u;

    size_t i;
    // write out
    printf("writing first pass...");
    for (i = 0; i < len / 4; i++) {
    7552:	3301      	adds	r3, #1
    7554:	e7f9      	b.n	754a <cmd_memtest+0x2a>
        ptr[i] = i;
    }
    printf("done\n");
    7556:	480f      	ldr	r0, [pc, #60]	; (7594 <cmd_memtest+0x74>)
    7558:	f005 f996 	bl	c888 <_printf>

    // verify
    printf("verifying...");
    755c:	480e      	ldr	r0, [pc, #56]	; (7598 <cmd_memtest+0x78>)
    755e:	f005 f993 	bl	c888 <_printf>
    for (i = 0; i < len / 4; i++) {
    7562:	2400      	movs	r4, #0
    7564:	42b4      	cmp	r4, r6
    7566:	d009      	beq.n	757c <cmd_memtest+0x5c>
        if (ptr[i] != i)
    7568:	4629      	mov	r1, r5
    756a:	f855 3b04 	ldr.w	r3, [r5], #4
    756e:	42a3      	cmp	r3, r4
    7570:	d002      	beq.n	7578 <cmd_memtest+0x58>
            printf("error at %p\n", &ptr[i]);
    7572:	480a      	ldr	r0, [pc, #40]	; (759c <cmd_memtest+0x7c>)
    7574:	f005 f988 	bl	c888 <_printf>
    }
    printf("done\n");

    // verify
    printf("verifying...");
    for (i = 0; i < len / 4; i++) {
    7578:	3401      	adds	r4, #1
    757a:	e7f3      	b.n	7564 <cmd_memtest+0x44>
        if (ptr[i] != i)
            printf("error at %p\n", &ptr[i]);
    }
    printf("done\n");
    757c:	4805      	ldr	r0, [pc, #20]	; (7594 <cmd_memtest+0x74>)
    757e:	f005 f983 	bl	c888 <_printf>

    return 0;
    7582:	2000      	movs	r0, #0
}
    7584:	bd70      	pop	{r4, r5, r6, r15}
    7586:	bf00      	nop
    7588:	0000f1c9 	.word	0x0000f1c9
    758c:	00012c02 	.word	0x00012c02
    7590:	00012c13 	.word	0x00012c13
    7594:	0000f998 	.word	0x0000f998
    7598:	00012c29 	.word	0x00012c29
    759c:	00012c36 	.word	0x00012c36

000075a0 <cmd_modify_mem>:

static int cmd_modify_mem(int argc, const cmd_args *argv)
{
    int size;

    if (argc < 3) {
    75a0:	2802      	cmp	r0, #2

    return 0;
}

static int cmd_modify_mem(int argc, const cmd_args *argv)
{
    75a2:	b538      	push	{r3, r4, r5, r14}
    75a4:	460c      	mov	r4, r1
    int size;

    if (argc < 3) {
    75a6:	dc07      	bgt.n	75b8 <cmd_modify_mem+0x18>
        printf("not enough arguments\n");
    75a8:	4817      	ldr	r0, [pc, #92]	; (7608 <cmd_modify_mem+0x68>)
    75aa:	f005 f96d 	bl	c888 <_printf>
        printf("%s <address> <val>\n", argv[0].str);
    75ae:	6821      	ldr	r1, [r4, #0]
    75b0:	4816      	ldr	r0, [pc, #88]	; (760c <cmd_modify_mem+0x6c>)
    75b2:	f005 f969 	bl	c888 <_printf>
    75b6:	e017      	b.n	75e8 <cmd_modify_mem+0x48>
        return -1;
    }

    if (strcmp(argv[0].str, "mw") == 0) {
    75b8:	680d      	ldr	r5, [r1, #0]
    75ba:	4915      	ldr	r1, [pc, #84]	; (7610 <cmd_modify_mem+0x70>)
    75bc:	4628      	mov	r0, r5
    75be:	f005 f98a 	bl	c8d6 <strcmp>
    75c2:	b140      	cbz	r0, 75d6 <cmd_modify_mem+0x36>
        size = 4;
    } else if (strcmp(argv[0].str, "mh") == 0) {
    75c4:	4628      	mov	r0, r5
    75c6:	4913      	ldr	r1, [pc, #76]	; (7614 <cmd_modify_mem+0x74>)
    75c8:	f005 f985 	bl	c8d6 <strcmp>
        size = 2;
    75cc:	2800      	cmp	r0, #0
    75ce:	bf14      	ite	ne
    75d0:	2201      	movne	r2, #1
    75d2:	2202      	moveq	r2, #2
    75d4:	e000      	b.n	75d8 <cmd_modify_mem+0x38>
        printf("%s <address> <val>\n", argv[0].str);
        return -1;
    }

    if (strcmp(argv[0].str, "mw") == 0) {
        size = 4;
    75d6:	2204      	movs	r2, #4
        size = 2;
    } else {
        size = 1;
    }

    unsigned long address = argv[1].u;
    75d8:	69a3      	ldr	r3, [r4, #24]
    unsigned int val = argv[2].u;

    if ((address & (size - 1)) != 0) {
    75da:	1e50      	subs	r0, r2, #1
    75dc:	4018      	ands	r0, r3
    } else {
        size = 1;
    }

    unsigned long address = argv[1].u;
    unsigned int val = argv[2].u;
    75de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

    if ((address & (size - 1)) != 0) {
    75e0:	d005      	beq.n	75ee <cmd_modify_mem+0x4e>
        printf("unaligned address, cannot modify\n");
    75e2:	480d      	ldr	r0, [pc, #52]	; (7618 <cmd_modify_mem+0x78>)
    75e4:	f005 f950 	bl	c888 <_printf>
        return -1;
    75e8:	f04f 30ff 	mov.w	r0, #4294967295
    75ec:	bd38      	pop	{r3, r4, r5, r15}
    }

    switch (size) {
    75ee:	2a02      	cmp	r2, #2
    75f0:	d007      	beq.n	7602 <cmd_modify_mem+0x62>
    75f2:	2a04      	cmp	r2, #4
    75f4:	d003      	beq.n	75fe <cmd_modify_mem+0x5e>
    75f6:	2a01      	cmp	r2, #1
    75f8:	d105      	bne.n	7606 <cmd_modify_mem+0x66>
            break;
        case 2:
            *(uint16_t *)address = (uint16_t)val;
            break;
        case 1:
            *(uint8_t *)address = (uint8_t)val;
    75fa:	7019      	strb	r1, [r3, #0]
            break;
    75fc:	e003      	b.n	7606 <cmd_modify_mem+0x66>
        return -1;
    }

    switch (size) {
        case 4:
            *(uint32_t *)address = (uint32_t)val;
    75fe:	6019      	str	r1, [r3, #0]
            break;
    7600:	bd38      	pop	{r3, r4, r5, r15}
        case 2:
            *(uint16_t *)address = (uint16_t)val;
    7602:	8019      	strh	r1, [r3, #0]
            break;
    7604:	bd38      	pop	{r3, r4, r5, r15}
            *(uint8_t *)address = (uint8_t)val;
            break;
    }

    return 0;
}
    7606:	bd38      	pop	{r3, r4, r5, r15}
    7608:	0000f1c9 	.word	0x0000f1c9
    760c:	00012c43 	.word	0x00012c43
    7610:	00012c57 	.word	0x00012c57
    7614:	00012c5a 	.word	0x00012c5a
    7618:	00012b66 	.word	0x00012b66

0000761c <cmd_chain>:
    return 0;
}

static int cmd_chain(int argc, const cmd_args *argv)
{
    if (argc < 2) {
    761c:	2801      	cmp	r0, #1

    return 0;
}

static int cmd_chain(int argc, const cmd_args *argv)
{
    761e:	b513      	push	{r0, r1, r4, r14}
    7620:	460c      	mov	r4, r1
    if (argc < 2) {
    7622:	dd06      	ble.n	7632 <cmd_chain+0x16>
        printf("not enough arguments\n");
        printf("%s <address>\n", argv[0].str);
        return -1;
    }

    arch_chain_load(argv[1].p, 0, 0, 0, 0);
    7624:	2100      	movs	r1, #0
    7626:	9100      	str	r1, [sp, #0]
    7628:	69e0      	ldr	r0, [r4, #28]
    762a:	460a      	mov	r2, r1
    762c:	460b      	mov	r3, r1
    762e:	f7f9 f891 	bl	754 <arch_chain_load>
}

static int cmd_chain(int argc, const cmd_args *argv)
{
    if (argc < 2) {
        printf("not enough arguments\n");
    7632:	4805      	ldr	r0, [pc, #20]	; (7648 <cmd_chain+0x2c>)
    7634:	f005 f928 	bl	c888 <_printf>
        printf("%s <address>\n", argv[0].str);
    7638:	6821      	ldr	r1, [r4, #0]
    763a:	4804      	ldr	r0, [pc, #16]	; (764c <cmd_chain+0x30>)
    763c:	f005 f924 	bl	c888 <_printf>
    }

    arch_chain_load(argv[1].p, 0, 0, 0, 0);

    return 0;
}
    7640:	f04f 30ff 	mov.w	r0, #4294967295
    7644:	b002      	add	sp, #8
    7646:	bd10      	pop	{r4, r15}
    7648:	0000f1c9 	.word	0x0000f1c9
    764c:	00012c5d 	.word	0x00012c5d

00007650 <cmd_copy_mem>:
    return 0;
}

static int cmd_copy_mem(int argc, const cmd_args *argv)
{
    if (argc < 4) {
    7650:	2803      	cmp	r0, #3

    return 0;
}

static int cmd_copy_mem(int argc, const cmd_args *argv)
{
    7652:	b510      	push	{r4, r14}
    7654:	460c      	mov	r4, r1
    if (argc < 4) {
    7656:	dc09      	bgt.n	766c <cmd_copy_mem+0x1c>
        printf("not enough arguments\n");
    7658:	4808      	ldr	r0, [pc, #32]	; (767c <cmd_copy_mem+0x2c>)
    765a:	f005 f915 	bl	c888 <_printf>
        printf("%s <source address> <target address> <len>\n", argv[0].str);
    765e:	6821      	ldr	r1, [r4, #0]
    7660:	4807      	ldr	r0, [pc, #28]	; (7680 <cmd_copy_mem+0x30>)
    7662:	f005 f911 	bl	c888 <_printf>
    7666:	f04f 30ff 	mov.w	r0, #4294967295
    766a:	bd10      	pop	{r4, r15}

    addr_t source = argv[1].u;
    addr_t target = argv[2].u;
    size_t len = argv[3].u;

    memcpy((void *)target, (const void *)source, len);
    766c:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    766e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    7670:	6989      	ldr	r1, [r1, #24]
    7672:	f004 faaa 	bl	bbca <memcpy>

    return 0;
    7676:	2000      	movs	r0, #0
}
    7678:	bd10      	pop	{r4, r15}
    767a:	bf00      	nop
    767c:	0000f1c9 	.word	0x0000f1c9
    7680:	00012c6b 	.word	0x00012c6b
    7684:	00000000 	.word	0x00000000

00007688 <__kernel_sin>:
S5  = -2.50507602534068634195e-08, /* 0xBE5AE5E6, 0x8A2B9CEB */
S6  =  1.58969099521155010221e-10; /* 0x3DE5D93A, 0x5ACFD57C */

double
__kernel_sin(double x, double y, int iy)
{
    7688:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    768c:	b085      	sub	sp, #20
    768e:	e9cd 2300 	strd	r2, r3, [r13]
    double z,r,v,w;

    z   =  x*x;
    7692:	4602      	mov	r2, r0
    7694:	460b      	mov	r3, r1
S5  = -2.50507602534068634195e-08, /* 0xBE5AE5E6, 0x8A2B9CEB */
S6  =  1.58969099521155010221e-10; /* 0x3DE5D93A, 0x5ACFD57C */

double
__kernel_sin(double x, double y, int iy)
{
    7696:	4682      	mov	r10, r0
    7698:	468b      	mov	r11, r1
    double z,r,v,w;

    z   =  x*x;
    769a:	f005 fdfd 	bl	d298 <__aeabi_dmul>
    w   =  z*z;
    r   =  S2+z*(S3+z*S4) + z*w*(S5+z*S6);
    769e:	a34c      	add	r3, pc, #304	; (adr r3, 77d0 <__kernel_sin+0x148>)
    76a0:	e9d3 2300 	ldrd	r2, r3, [r3]
double
__kernel_sin(double x, double y, int iy)
{
    double z,r,v,w;

    z   =  x*x;
    76a4:	4604      	mov	r4, r0
    76a6:	460d      	mov	r5, r1
    w   =  z*z;
    r   =  S2+z*(S3+z*S4) + z*w*(S5+z*S6);
    76a8:	f005 fdf6 	bl	d298 <__aeabi_dmul>
    76ac:	a34a      	add	r3, pc, #296	; (adr r3, 77d8 <__kernel_sin+0x150>)
    76ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    76b2:	f005 fc3d 	bl	cf30 <__aeabi_dsub>
    76b6:	4602      	mov	r2, r0
    76b8:	460b      	mov	r3, r1
    76ba:	4620      	mov	r0, r4
    76bc:	4629      	mov	r1, r5
    76be:	f005 fdeb 	bl	d298 <__aeabi_dmul>
    76c2:	a347      	add	r3, pc, #284	; (adr r3, 77e0 <__kernel_sin+0x158>)
    76c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    76c8:	f005 fc34 	bl	cf34 <__adddf3>
__kernel_sin(double x, double y, int iy)
{
    double z,r,v,w;

    z   =  x*x;
    w   =  z*z;
    76cc:	4622      	mov	r2, r4
    r   =  S2+z*(S3+z*S4) + z*w*(S5+z*S6);
    76ce:	4680      	mov	r8, r0
    76d0:	4689      	mov	r9, r1
__kernel_sin(double x, double y, int iy)
{
    double z,r,v,w;

    z   =  x*x;
    w   =  z*z;
    76d2:	462b      	mov	r3, r5
    76d4:	4620      	mov	r0, r4
    76d6:	4629      	mov	r1, r5
    76d8:	f005 fdde 	bl	d298 <__aeabi_dmul>
    76dc:	4602      	mov	r2, r0
    76de:	460b      	mov	r3, r1
    r   =  S2+z*(S3+z*S4) + z*w*(S5+z*S6);
    76e0:	4620      	mov	r0, r4
    76e2:	4629      	mov	r1, r5
    76e4:	f005 fdd8 	bl	d298 <__aeabi_dmul>
    76e8:	a33f      	add	r3, pc, #252	; (adr r3, 77e8 <__kernel_sin+0x160>)
    76ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    76ee:	4606      	mov	r6, r0
    76f0:	460f      	mov	r7, r1
    76f2:	4620      	mov	r0, r4
    76f4:	4629      	mov	r1, r5
    76f6:	f005 fdcf 	bl	d298 <__aeabi_dmul>
    76fa:	a33d      	add	r3, pc, #244	; (adr r3, 77f0 <__kernel_sin+0x168>)
    76fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7700:	f005 fc16 	bl	cf30 <__aeabi_dsub>
    7704:	4602      	mov	r2, r0
    7706:	460b      	mov	r3, r1
    7708:	4630      	mov	r0, r6
    770a:	4639      	mov	r1, r7
    770c:	f005 fdc4 	bl	d298 <__aeabi_dmul>
    7710:	4602      	mov	r2, r0
    7712:	460b      	mov	r3, r1
    7714:	4640      	mov	r0, r8
    7716:	4649      	mov	r1, r9
    7718:	f005 fc0c 	bl	cf34 <__adddf3>
    v   =  z*x;
    771c:	465b      	mov	r3, r11
{
    double z,r,v,w;

    z   =  x*x;
    w   =  z*z;
    r   =  S2+z*(S3+z*S4) + z*w*(S5+z*S6);
    771e:	4680      	mov	r8, r0
    7720:	4689      	mov	r9, r1
    v   =  z*x;
    7722:	4620      	mov	r0, r4
    7724:	4629      	mov	r1, r5
    7726:	4652      	mov	r2, r10
    7728:	f005 fdb6 	bl	d298 <__aeabi_dmul>
    if (iy==0) return x+v*(S1+z*r);
    772c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    double z,r,v,w;

    z   =  x*x;
    w   =  z*z;
    r   =  S2+z*(S3+z*S4) + z*w*(S5+z*S6);
    v   =  z*x;
    772e:	4606      	mov	r6, r0
    7730:	460f      	mov	r7, r1
    if (iy==0) return x+v*(S1+z*r);
    7732:	b9bb      	cbnz	r3, 7764 <__kernel_sin+0xdc>
    7734:	4642      	mov	r2, r8
    7736:	464b      	mov	r3, r9
    7738:	4620      	mov	r0, r4
    773a:	4629      	mov	r1, r5
    773c:	f005 fdac 	bl	d298 <__aeabi_dmul>
    7740:	a32d      	add	r3, pc, #180	; (adr r3, 77f8 <__kernel_sin+0x170>)
    7742:	e9d3 2300 	ldrd	r2, r3, [r3]
    7746:	f005 fbf3 	bl	cf30 <__aeabi_dsub>
    774a:	4602      	mov	r2, r0
    774c:	460b      	mov	r3, r1
    774e:	4630      	mov	r0, r6
    7750:	4639      	mov	r1, r7
    7752:	f005 fda1 	bl	d298 <__aeabi_dmul>
    7756:	4602      	mov	r2, r0
    7758:	460b      	mov	r3, r1
    775a:	4650      	mov	r0, r10
    775c:	4659      	mov	r1, r11
    775e:	f005 fbe9 	bl	cf34 <__adddf3>
    7762:	e032      	b.n	77ca <__kernel_sin+0x142>
    else      return x-((z*(half*y-v*r)-y)-v*S1);
    7764:	2200      	movs	r2, #0
    7766:	4b26      	ldr	r3, [pc, #152]	; (7800 <__kernel_sin+0x178>)
    7768:	e9dd 0100 	ldrd	r0, r1, [r13]
    776c:	f005 fd94 	bl	d298 <__aeabi_dmul>
    7770:	4642      	mov	r2, r8
    7772:	e9cd 0102 	strd	r0, r1, [r13, #8]
    7776:	464b      	mov	r3, r9
    7778:	4630      	mov	r0, r6
    777a:	4639      	mov	r1, r7
    777c:	f005 fd8c 	bl	d298 <__aeabi_dmul>
    7780:	4602      	mov	r2, r0
    7782:	460b      	mov	r3, r1
    7784:	e9dd 0102 	ldrd	r0, r1, [r13, #8]
    7788:	f005 fbd2 	bl	cf30 <__aeabi_dsub>
    778c:	4602      	mov	r2, r0
    778e:	460b      	mov	r3, r1
    7790:	4620      	mov	r0, r4
    7792:	4629      	mov	r1, r5
    7794:	f005 fd80 	bl	d298 <__aeabi_dmul>
    7798:	e9dd 2300 	ldrd	r2, r3, [r13]
    779c:	f005 fbc8 	bl	cf30 <__aeabi_dsub>
    77a0:	a315      	add	r3, pc, #84	; (adr r3, 77f8 <__kernel_sin+0x170>)
    77a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    77a6:	4604      	mov	r4, r0
    77a8:	460d      	mov	r5, r1
    77aa:	4630      	mov	r0, r6
    77ac:	4639      	mov	r1, r7
    77ae:	f005 fd73 	bl	d298 <__aeabi_dmul>
    77b2:	4602      	mov	r2, r0
    77b4:	460b      	mov	r3, r1
    77b6:	4620      	mov	r0, r4
    77b8:	4629      	mov	r1, r5
    77ba:	f005 fbbb 	bl	cf34 <__adddf3>
    77be:	4602      	mov	r2, r0
    77c0:	460b      	mov	r3, r1
    77c2:	4650      	mov	r0, r10
    77c4:	4659      	mov	r1, r11
    77c6:	f005 fbb3 	bl	cf30 <__aeabi_dsub>
}
    77ca:	b005      	add	sp, #20
    77cc:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    77d0:	57b1fe7d 	.word	0x57b1fe7d
    77d4:	3ec71de3 	.word	0x3ec71de3
    77d8:	19c161d5 	.word	0x19c161d5
    77dc:	3f2a01a0 	.word	0x3f2a01a0
    77e0:	1110f8a6 	.word	0x1110f8a6
    77e4:	3f811111 	.word	0x3f811111
    77e8:	5acfd57c 	.word	0x5acfd57c
    77ec:	3de5d93a 	.word	0x3de5d93a
    77f0:	8a2b9ceb 	.word	0x8a2b9ceb
    77f4:	3e5ae5e6 	.word	0x3e5ae5e6
    77f8:	55555549 	.word	0x55555549
    77fc:	3fc55555 	.word	0x3fc55555
    7800:	3fe00000 	.word	0x3fe00000
    7804:	f3af 8000 	nop.w

00007808 <sin>:
#include "math_private.h"
#include "e_rem_pio2.c"

double
sin(double x)
{
    7808:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    /* High word of x. */
    GET_HIGH_WORD(ix,x);

    /* |x| ~< pi/4 */
    ix &= 0x7fffffff;
    if (ix <= 0x3fe921fb) {
    780c:	4aa2      	ldr	r2, [pc, #648]	; (7a98 <sin+0x290>)

    /* High word of x. */
    GET_HIGH_WORD(ix,x);

    /* |x| ~< pi/4 */
    ix &= 0x7fffffff;
    780e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    if (ix <= 0x3fe921fb) {
    7812:	4293      	cmp	r3, r2
#include "math_private.h"
#include "e_rem_pio2.c"

double
sin(double x)
{
    7814:	b093      	sub	sp, #76	; 0x4c
    7816:	4607      	mov	r7, r0
    7818:	460e      	mov	r6, r1
    /* High word of x. */
    GET_HIGH_WORD(ix,x);

    /* |x| ~< pi/4 */
    ix &= 0x7fffffff;
    if (ix <= 0x3fe921fb) {
    781a:	dc0e      	bgt.n	783a <sin+0x32>
        if (ix<0x3e500000)          /* |x| < 2**-26 */
    781c:	4a9f      	ldr	r2, [pc, #636]	; (7a9c <sin+0x294>)
    781e:	4293      	cmp	r3, r2
    7820:	dc04      	bgt.n	782c <sin+0x24>
            {if ((int)x==0) return x;}   /* generate inexact */
    7822:	f005 ffd3 	bl	d7cc <__aeabi_d2iz>
    7826:	2800      	cmp	r0, #0
    7828:	f000 82b9 	beq.w	7d9e <sin+0x596>
        return __kernel_sin(x,z,0);
    782c:	2300      	movs	r3, #0
    782e:	9300      	str	r3, [sp, #0]
    7830:	4638      	mov	r0, r7
    7832:	4631      	mov	r1, r6
    7834:	2200      	movs	r2, #0
    7836:	2300      	movs	r3, #0
    7838:	e271      	b.n	7d1e <sin+0x516>
    }

    /* sin(Inf or NaN) is NaN */
    else if (ix>=0x7ff00000) return x-x;
    783a:	4a99      	ldr	r2, [pc, #612]	; (7aa0 <sin+0x298>)
    783c:	4293      	cmp	r3, r2
    783e:	dd04      	ble.n	784a <sin+0x42>
    7840:	4602      	mov	r2, r0
    7842:	460b      	mov	r3, r1
    7844:	f005 fb74 	bl	cf30 <__aeabi_dsub>
    7848:	e2ab      	b.n	7da2 <sin+0x59a>
    ix = hx&0x7fffffff;
#if 0 /* Must be handled in caller. */
    if (ix<=0x3fe921fb)  /* |x| ~<= pi/4 , no need for reduction */
        {y[0] = x; y[1] = 0; return 0;}
#endif
    if (ix <= 0x400f6a7a) {     /* |x| ~<= 5pi/4 */
    784a:	4b96      	ldr	r3, [pc, #600]	; (7aa4 <sin+0x29c>)
    double tx[3],ty[2];
    int32_t e0,i,j,nx,n,ix,hx;
    u_int32_t low;

    GET_HIGH_WORD(hx,x);        /* high word of x */
    ix = hx&0x7fffffff;
    784c:	f021 4c00 	bic.w	r12, r1, #2147483648	; 0x80000000
#if 0 /* Must be handled in caller. */
    if (ix<=0x3fe921fb)  /* |x| ~<= pi/4 , no need for reduction */
        {y[0] = x; y[1] = 0; return 0;}
#endif
    if (ix <= 0x400f6a7a) {     /* |x| ~<= 5pi/4 */
    7850:	459c      	cmp	r12, r3
    double z,w,t,r,fn;
    double tx[3],ty[2];
    int32_t e0,i,j,nx,n,ix,hx;
    u_int32_t low;

    GET_HIGH_WORD(hx,x);        /* high word of x */
    7852:	460d      	mov	r5, r1
    ix = hx&0x7fffffff;
#if 0 /* Must be handled in caller. */
    if (ix<=0x3fe921fb)  /* |x| ~<= pi/4 , no need for reduction */
        {y[0] = x; y[1] = 0; return 0;}
#endif
    if (ix <= 0x400f6a7a) {     /* |x| ~<= 5pi/4 */
    7854:	dc7c      	bgt.n	7950 <sin+0x148>
        if ((ix & 0xfffff) == 0x921fb)  /* |x| ~= pi/2 or 2pi/2 */
    7856:	4b94      	ldr	r3, [pc, #592]	; (7aa8 <sin+0x2a0>)
    7858:	f3c1 0213 	ubfx	r2, r1, #0, #20
    785c:	429a      	cmp	r2, r3
    785e:	f000 8133 	beq.w	7ac8 <sin+0x2c0>
            goto medium;        /* cancellation -- use medium case */
        if (ix <= 0x4002d97c) { /* |x| ~<= 3pi/4 */
    7862:	4b92      	ldr	r3, [pc, #584]	; (7aac <sin+0x2a4>)
    7864:	459c      	cmp	r12, r3
    7866:	dc39      	bgt.n	78dc <sin+0xd4>
            if (hx > 0) {
                z = x - pio2_1; /* one round good to 85 bits */
    7868:	a37b      	add	r3, pc, #492	; (adr r3, 7a58 <sin+0x250>)
    786a:	e9d3 2300 	ldrd	r2, r3, [r3]
#endif
    if (ix <= 0x400f6a7a) {     /* |x| ~<= 5pi/4 */
        if ((ix & 0xfffff) == 0x921fb)  /* |x| ~= pi/2 or 2pi/2 */
            goto medium;        /* cancellation -- use medium case */
        if (ix <= 0x4002d97c) { /* |x| ~<= 3pi/4 */
            if (hx > 0) {
    786e:	2900      	cmp	r1, #0
    7870:	dd19      	ble.n	78a6 <sin+0x9e>
                z = x - pio2_1; /* one round good to 85 bits */
    7872:	f005 fb5d 	bl	cf30 <__aeabi_dsub>
                y[0] = z - pio2_1t;
    7876:	a37a      	add	r3, pc, #488	; (adr r3, 7a60 <sin+0x258>)
    7878:	e9d3 2300 	ldrd	r2, r3, [r3]
    if (ix <= 0x400f6a7a) {     /* |x| ~<= 5pi/4 */
        if ((ix & 0xfffff) == 0x921fb)  /* |x| ~= pi/2 or 2pi/2 */
            goto medium;        /* cancellation -- use medium case */
        if (ix <= 0x4002d97c) { /* |x| ~<= 3pi/4 */
            if (hx > 0) {
                z = x - pio2_1; /* one round good to 85 bits */
    787c:	4604      	mov	r4, r0
    787e:	460d      	mov	r5, r1
                y[0] = z - pio2_1t;
    7880:	f005 fb56 	bl	cf30 <__aeabi_dsub>
    7884:	4683      	mov	r11, r0
    7886:	468a      	mov	r10, r1
                y[1] = (z-y[0])-pio2_1t;
    7888:	4620      	mov	r0, r4
    788a:	4629      	mov	r1, r5
    788c:	465a      	mov	r2, r11
    788e:	4653      	mov	r3, r10
    7890:	f005 fb4e 	bl	cf30 <__aeabi_dsub>
    7894:	a372      	add	r3, pc, #456	; (adr r3, 7a60 <sin+0x258>)
    7896:	e9d3 2300 	ldrd	r2, r3, [r3]
    789a:	f005 fb49 	bl	cf30 <__aeabi_dsub>
    789e:	4605      	mov	r5, r0
    78a0:	460c      	mov	r4, r1
                return 1;
    78a2:	2001      	movs	r0, #1
    78a4:	e22d      	b.n	7d02 <sin+0x4fa>
            } else {
                z = x + pio2_1;
    78a6:	f005 fb45 	bl	cf34 <__adddf3>
                y[0] = z + pio2_1t;
    78aa:	a36d      	add	r3, pc, #436	; (adr r3, 7a60 <sin+0x258>)
    78ac:	e9d3 2300 	ldrd	r2, r3, [r3]
                z = x - pio2_1; /* one round good to 85 bits */
                y[0] = z - pio2_1t;
                y[1] = (z-y[0])-pio2_1t;
                return 1;
            } else {
                z = x + pio2_1;
    78b0:	4604      	mov	r4, r0
    78b2:	460d      	mov	r5, r1
                y[0] = z + pio2_1t;
    78b4:	f005 fb3e 	bl	cf34 <__adddf3>
    78b8:	4683      	mov	r11, r0
    78ba:	468a      	mov	r10, r1
                y[1] = (z-y[0])+pio2_1t;
    78bc:	4620      	mov	r0, r4
    78be:	4629      	mov	r1, r5
    78c0:	465a      	mov	r2, r11
    78c2:	4653      	mov	r3, r10
    78c4:	f005 fb34 	bl	cf30 <__aeabi_dsub>
    78c8:	a365      	add	r3, pc, #404	; (adr r3, 7a60 <sin+0x258>)
    78ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    78ce:	f005 fb31 	bl	cf34 <__adddf3>
    78d2:	4605      	mov	r5, r0
    78d4:	460c      	mov	r4, r1
                return -1;
    78d6:	f04f 30ff 	mov.w	r0, #4294967295
    78da:	e212      	b.n	7d02 <sin+0x4fa>
            }
        } else {
            if (hx > 0) {
    78dc:	2900      	cmp	r1, #0
                z = x - 2*pio2_1;
    78de:	a362      	add	r3, pc, #392	; (adr r3, 7a68 <sin+0x260>)
    78e0:	e9d3 2300 	ldrd	r2, r3, [r3]
                y[0] = z + pio2_1t;
                y[1] = (z-y[0])+pio2_1t;
                return -1;
            }
        } else {
            if (hx > 0) {
    78e4:	dd19      	ble.n	791a <sin+0x112>
                z = x - 2*pio2_1;
    78e6:	f005 fb23 	bl	cf30 <__aeabi_dsub>
                y[0] = z - 2*pio2_1t;
    78ea:	a361      	add	r3, pc, #388	; (adr r3, 7a70 <sin+0x268>)
    78ec:	e9d3 2300 	ldrd	r2, r3, [r3]
                y[1] = (z-y[0])+pio2_1t;
                return -1;
            }
        } else {
            if (hx > 0) {
                z = x - 2*pio2_1;
    78f0:	4604      	mov	r4, r0
    78f2:	460d      	mov	r5, r1
                y[0] = z - 2*pio2_1t;
    78f4:	f005 fb1c 	bl	cf30 <__aeabi_dsub>
    78f8:	4683      	mov	r11, r0
    78fa:	468a      	mov	r10, r1
                y[1] = (z-y[0])-2*pio2_1t;
    78fc:	4620      	mov	r0, r4
    78fe:	4629      	mov	r1, r5
    7900:	465a      	mov	r2, r11
    7902:	4653      	mov	r3, r10
    7904:	f005 fb14 	bl	cf30 <__aeabi_dsub>
    7908:	a359      	add	r3, pc, #356	; (adr r3, 7a70 <sin+0x268>)
    790a:	e9d3 2300 	ldrd	r2, r3, [r3]
    790e:	f005 fb0f 	bl	cf30 <__aeabi_dsub>
    7912:	4605      	mov	r5, r0
    7914:	460c      	mov	r4, r1
                return 2;
    7916:	2002      	movs	r0, #2
    7918:	e1f3      	b.n	7d02 <sin+0x4fa>
            } else {
                z = x + 2*pio2_1;
    791a:	f005 fb0b 	bl	cf34 <__adddf3>
                y[0] = z + 2*pio2_1t;
    791e:	a354      	add	r3, pc, #336	; (adr r3, 7a70 <sin+0x268>)
    7920:	e9d3 2300 	ldrd	r2, r3, [r3]
                z = x - 2*pio2_1;
                y[0] = z - 2*pio2_1t;
                y[1] = (z-y[0])-2*pio2_1t;
                return 2;
            } else {
                z = x + 2*pio2_1;
    7924:	4604      	mov	r4, r0
    7926:	460d      	mov	r5, r1
                y[0] = z + 2*pio2_1t;
    7928:	f005 fb04 	bl	cf34 <__adddf3>
    792c:	4683      	mov	r11, r0
    792e:	468a      	mov	r10, r1
                y[1] = (z-y[0])+2*pio2_1t;
    7930:	4620      	mov	r0, r4
    7932:	4629      	mov	r1, r5
    7934:	465a      	mov	r2, r11
    7936:	4653      	mov	r3, r10
    7938:	f005 fafa 	bl	cf30 <__aeabi_dsub>
    793c:	a34c      	add	r3, pc, #304	; (adr r3, 7a70 <sin+0x268>)
    793e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7942:	f005 faf7 	bl	cf34 <__adddf3>
    7946:	4605      	mov	r5, r0
    7948:	460c      	mov	r4, r1
                return -2;
    794a:	f06f 0001 	mvn.w	r0, #1
    794e:	e1d8      	b.n	7d02 <sin+0x4fa>
            }
        }
    }
    if (ix <= 0x401c463b) {     /* |x| ~<= 9pi/4 */
    7950:	4b57      	ldr	r3, [pc, #348]	; (7ab0 <sin+0x2a8>)
    7952:	459c      	cmp	r12, r3
    7954:	f300 80b4 	bgt.w	7ac0 <sin+0x2b8>
        if (ix <= 0x4015fdbc) { /* |x| ~<= 7pi/4 */
    7958:	4b56      	ldr	r3, [pc, #344]	; (7ab4 <sin+0x2ac>)
    795a:	459c      	cmp	r12, r3
    795c:	dc3d      	bgt.n	79da <sin+0x1d2>
            if (ix == 0x4012d97c)   /* |x| ~= 3pi/2 */
    795e:	4b56      	ldr	r3, [pc, #344]	; (7ab8 <sin+0x2b0>)
    7960:	459c      	cmp	r12, r3
    7962:	f000 80b1 	beq.w	7ac8 <sin+0x2c0>
                goto medium;
            if (hx > 0) {
                z = x - 3*pio2_1;
    7966:	a344      	add	r3, pc, #272	; (adr r3, 7a78 <sin+0x270>)
    7968:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
    if (ix <= 0x401c463b) {     /* |x| ~<= 9pi/4 */
        if (ix <= 0x4015fdbc) { /* |x| ~<= 7pi/4 */
            if (ix == 0x4012d97c)   /* |x| ~= 3pi/2 */
                goto medium;
            if (hx > 0) {
    796c:	2900      	cmp	r1, #0
    796e:	dd19      	ble.n	79a4 <sin+0x19c>
                z = x - 3*pio2_1;
    7970:	f005 fade 	bl	cf30 <__aeabi_dsub>
                y[0] = z - 3*pio2_1t;
    7974:	a342      	add	r3, pc, #264	; (adr r3, 7a80 <sin+0x278>)
    7976:	e9d3 2300 	ldrd	r2, r3, [r3]
    if (ix <= 0x401c463b) {     /* |x| ~<= 9pi/4 */
        if (ix <= 0x4015fdbc) { /* |x| ~<= 7pi/4 */
            if (ix == 0x4012d97c)   /* |x| ~= 3pi/2 */
                goto medium;
            if (hx > 0) {
                z = x - 3*pio2_1;
    797a:	4604      	mov	r4, r0
    797c:	460d      	mov	r5, r1
                y[0] = z - 3*pio2_1t;
    797e:	f005 fad7 	bl	cf30 <__aeabi_dsub>
    7982:	4683      	mov	r11, r0
    7984:	468a      	mov	r10, r1
                y[1] = (z-y[0])-3*pio2_1t;
    7986:	4620      	mov	r0, r4
    7988:	4629      	mov	r1, r5
    798a:	465a      	mov	r2, r11
    798c:	4653      	mov	r3, r10
    798e:	f005 facf 	bl	cf30 <__aeabi_dsub>
    7992:	a33b      	add	r3, pc, #236	; (adr r3, 7a80 <sin+0x278>)
    7994:	e9d3 2300 	ldrd	r2, r3, [r3]
    7998:	f005 faca 	bl	cf30 <__aeabi_dsub>
    799c:	4605      	mov	r5, r0
    799e:	460c      	mov	r4, r1
                return 3;
    79a0:	2003      	movs	r0, #3
    79a2:	e1ae      	b.n	7d02 <sin+0x4fa>
            } else {
                z = x + 3*pio2_1;
    79a4:	f005 fac6 	bl	cf34 <__adddf3>
                y[0] = z + 3*pio2_1t;
    79a8:	a335      	add	r3, pc, #212	; (adr r3, 7a80 <sin+0x278>)
    79aa:	e9d3 2300 	ldrd	r2, r3, [r3]
                z = x - 3*pio2_1;
                y[0] = z - 3*pio2_1t;
                y[1] = (z-y[0])-3*pio2_1t;
                return 3;
            } else {
                z = x + 3*pio2_1;
    79ae:	4604      	mov	r4, r0
    79b0:	460d      	mov	r5, r1
                y[0] = z + 3*pio2_1t;
    79b2:	f005 fabf 	bl	cf34 <__adddf3>
    79b6:	4683      	mov	r11, r0
    79b8:	468a      	mov	r10, r1
                y[1] = (z-y[0])+3*pio2_1t;
    79ba:	4620      	mov	r0, r4
    79bc:	4629      	mov	r1, r5
    79be:	465a      	mov	r2, r11
    79c0:	4653      	mov	r3, r10
    79c2:	f005 fab5 	bl	cf30 <__aeabi_dsub>
    79c6:	a32e      	add	r3, pc, #184	; (adr r3, 7a80 <sin+0x278>)
    79c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    79cc:	f005 fab2 	bl	cf34 <__adddf3>
    79d0:	4605      	mov	r5, r0
    79d2:	460c      	mov	r4, r1
                return -3;
    79d4:	f06f 0002 	mvn.w	r0, #2
    79d8:	e193      	b.n	7d02 <sin+0x4fa>
            }
        } else {
            if (ix == 0x401921fb)   /* |x| ~= 4pi/2 */
    79da:	4b38      	ldr	r3, [pc, #224]	; (7abc <sin+0x2b4>)
    79dc:	459c      	cmp	r12, r3
    79de:	d073      	beq.n	7ac8 <sin+0x2c0>
                goto medium;
            if (hx > 0) {
                z = x - 4*pio2_1;
    79e0:	a329      	add	r3, pc, #164	; (adr r3, 7a88 <sin+0x280>)
    79e2:	e9d3 2300 	ldrd	r2, r3, [r3]
                return -3;
            }
        } else {
            if (ix == 0x401921fb)   /* |x| ~= 4pi/2 */
                goto medium;
            if (hx > 0) {
    79e6:	2900      	cmp	r1, #0
    79e8:	dd19      	ble.n	7a1e <sin+0x216>
                z = x - 4*pio2_1;
    79ea:	f005 faa1 	bl	cf30 <__aeabi_dsub>
                y[0] = z - 4*pio2_1t;
    79ee:	a328      	add	r3, pc, #160	; (adr r3, 7a90 <sin+0x288>)
    79f0:	e9d3 2300 	ldrd	r2, r3, [r3]
            }
        } else {
            if (ix == 0x401921fb)   /* |x| ~= 4pi/2 */
                goto medium;
            if (hx > 0) {
                z = x - 4*pio2_1;
    79f4:	4604      	mov	r4, r0
    79f6:	460d      	mov	r5, r1
                y[0] = z - 4*pio2_1t;
    79f8:	f005 fa9a 	bl	cf30 <__aeabi_dsub>
    79fc:	4683      	mov	r11, r0
    79fe:	468a      	mov	r10, r1
                y[1] = (z-y[0])-4*pio2_1t;
    7a00:	4620      	mov	r0, r4
    7a02:	4629      	mov	r1, r5
    7a04:	465a      	mov	r2, r11
    7a06:	4653      	mov	r3, r10
    7a08:	f005 fa92 	bl	cf30 <__aeabi_dsub>
    7a0c:	a320      	add	r3, pc, #128	; (adr r3, 7a90 <sin+0x288>)
    7a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    7a12:	f005 fa8d 	bl	cf30 <__aeabi_dsub>
    7a16:	4605      	mov	r5, r0
    7a18:	460c      	mov	r4, r1
                return 4;
    7a1a:	2004      	movs	r0, #4
    7a1c:	e171      	b.n	7d02 <sin+0x4fa>
            } else {
                z = x + 4*pio2_1;
    7a1e:	f005 fa89 	bl	cf34 <__adddf3>
                y[0] = z + 4*pio2_1t;
    7a22:	a31b      	add	r3, pc, #108	; (adr r3, 7a90 <sin+0x288>)
    7a24:	e9d3 2300 	ldrd	r2, r3, [r3]
                z = x - 4*pio2_1;
                y[0] = z - 4*pio2_1t;
                y[1] = (z-y[0])-4*pio2_1t;
                return 4;
            } else {
                z = x + 4*pio2_1;
    7a28:	4604      	mov	r4, r0
    7a2a:	460d      	mov	r5, r1
                y[0] = z + 4*pio2_1t;
    7a2c:	f005 fa82 	bl	cf34 <__adddf3>
    7a30:	4683      	mov	r11, r0
    7a32:	468a      	mov	r10, r1
                y[1] = (z-y[0])+4*pio2_1t;
    7a34:	4620      	mov	r0, r4
    7a36:	4629      	mov	r1, r5
    7a38:	465a      	mov	r2, r11
    7a3a:	4653      	mov	r3, r10
    7a3c:	f005 fa78 	bl	cf30 <__aeabi_dsub>
    7a40:	a313      	add	r3, pc, #76	; (adr r3, 7a90 <sin+0x288>)
    7a42:	e9d3 2300 	ldrd	r2, r3, [r3]
    7a46:	f005 fa75 	bl	cf34 <__adddf3>
    7a4a:	4605      	mov	r5, r0
    7a4c:	460c      	mov	r4, r1
                return -4;
    7a4e:	f06f 0003 	mvn.w	r0, #3
    7a52:	e156      	b.n	7d02 <sin+0x4fa>
    7a54:	f3af 8000 	nop.w
    7a58:	54400000 	.word	0x54400000
    7a5c:	3ff921fb 	.word	0x3ff921fb
    7a60:	1a626331 	.word	0x1a626331
    7a64:	3dd0b461 	.word	0x3dd0b461
    7a68:	54400000 	.word	0x54400000
    7a6c:	400921fb 	.word	0x400921fb
    7a70:	1a626331 	.word	0x1a626331
    7a74:	3de0b461 	.word	0x3de0b461
    7a78:	7f300000 	.word	0x7f300000
    7a7c:	4012d97c 	.word	0x4012d97c
    7a80:	a79394ca 	.word	0xa79394ca
    7a84:	3de90e91 	.word	0x3de90e91
    7a88:	54400000 	.word	0x54400000
    7a8c:	401921fb 	.word	0x401921fb
    7a90:	1a626331 	.word	0x1a626331
    7a94:	3df0b461 	.word	0x3df0b461
    7a98:	3fe921fb 	.word	0x3fe921fb
    7a9c:	3e4fffff 	.word	0x3e4fffff
    7aa0:	7fefffff 	.word	0x7fefffff
    7aa4:	400f6a7a 	.word	0x400f6a7a
    7aa8:	000921fb 	.word	0x000921fb
    7aac:	4002d97c 	.word	0x4002d97c
    7ab0:	401c463b 	.word	0x401c463b
    7ab4:	4015fdbc 	.word	0x4015fdbc
    7ab8:	4012d97c 	.word	0x4012d97c
    7abc:	401921fb 	.word	0x401921fb
            }
        }
    }
    if (ix<0x413921fb) { /* |x| ~< 2^20*(pi/2), medium size */
    7ac0:	4ba7      	ldr	r3, [pc, #668]	; (7d60 <sin+0x558>)
    7ac2:	459c      	cmp	r12, r3
    7ac4:	f300 80c0 	bgt.w	7c48 <sin+0x440>
medium:
        /* Use a specialized rint() to get fn.  Assume round-to-nearest. */
        STRICT_ASSIGN(double,fn,x*invpio2+0x1.8p52);
    7ac8:	a397      	add	r3, pc, #604	; (adr r3, 7d28 <sin+0x520>)
    7aca:	e9d3 2300 	ldrd	r2, r3, [r3]
    7ace:	4638      	mov	r0, r7
    7ad0:	4631      	mov	r1, r6
    7ad2:	f8cd c00c 	str.w	r12, [r13, #12]
    7ad6:	f005 fbdf 	bl	d298 <__aeabi_dmul>
    7ada:	2200      	movs	r2, #0
    7adc:	4ba1      	ldr	r3, [pc, #644]	; (7d64 <sin+0x55c>)
    7ade:	f005 fa29 	bl	cf34 <__adddf3>
        fn = fn-0x1.8p52;
    7ae2:	2200      	movs	r2, #0
    7ae4:	4b9f      	ldr	r3, [pc, #636]	; (7d64 <sin+0x55c>)
    7ae6:	f005 fa23 	bl	cf30 <__aeabi_dsub>
    7aea:	4680      	mov	r8, r0
    7aec:	4689      	mov	r9, r1
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
    7aee:	f005 fe6d 	bl	d7cc <__aeabi_d2iz>
#endif
        r  = x-fn*pio2_1;
    7af2:	a38f      	add	r3, pc, #572	; (adr r3, 7d30 <sin+0x528>)
    7af4:	e9d3 2300 	ldrd	r2, r3, [r3]
        STRICT_ASSIGN(double,fn,x*invpio2+0x1.8p52);
        fn = fn-0x1.8p52;
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
    7af8:	9007      	str	r0, [sp, #28]
#endif
        r  = x-fn*pio2_1;
    7afa:	4649      	mov	r1, r9
    7afc:	4640      	mov	r0, r8
    7afe:	f005 fbcb 	bl	d298 <__aeabi_dmul>
    7b02:	4602      	mov	r2, r0
    7b04:	460b      	mov	r3, r1
    7b06:	4638      	mov	r0, r7
    7b08:	4631      	mov	r1, r6
    7b0a:	f005 fa11 	bl	cf30 <__aeabi_dsub>
        w  = fn*pio2_1t;    /* 1st round good to 85 bit */
    7b0e:	a38a      	add	r3, pc, #552	; (adr r3, 7d38 <sin+0x530>)
    7b10:	e9d3 2300 	ldrd	r2, r3, [r3]
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
#endif
        r  = x-fn*pio2_1;
    7b14:	4604      	mov	r4, r0
    7b16:	460d      	mov	r5, r1
        w  = fn*pio2_1t;    /* 1st round good to 85 bit */
    7b18:	4640      	mov	r0, r8
    7b1a:	4649      	mov	r1, r9
    7b1c:	f005 fbbc 	bl	d298 <__aeabi_dmul>
    7b20:	4606      	mov	r6, r0
    7b22:	460f      	mov	r7, r1
        {
            u_int32_t high;
            j  = ix>>20;
            y[0] = r-w;
    7b24:	463b      	mov	r3, r7
    7b26:	4620      	mov	r0, r4
    7b28:	4629      	mov	r1, r5
    7b2a:	4632      	mov	r2, r6
    7b2c:	f005 fa00 	bl	cf30 <__aeabi_dsub>
#endif
        r  = x-fn*pio2_1;
        w  = fn*pio2_1t;    /* 1st round good to 85 bit */
        {
            u_int32_t high;
            j  = ix>>20;
    7b30:	f8dd c00c 	ldr.w	r12, [r13, #12]
            y[0] = r-w;
            GET_HIGH_WORD(high,y[0]);
            i = j-((high>>20)&0x7ff);
    7b34:	f3c1 530a 	ubfx	r3, r1, #20, #11
#endif
        r  = x-fn*pio2_1;
        w  = fn*pio2_1t;    /* 1st round good to 85 bit */
        {
            u_int32_t high;
            j  = ix>>20;
    7b38:	ea4f 5c2c 	mov.w	r12, r12, asr #20
            y[0] = r-w;
            GET_HIGH_WORD(high,y[0]);
            i = j-((high>>20)&0x7ff);
    7b3c:	ebc3 030c 	rsb	r3, r3, r12
            if (i>16) { /* 2nd iteration needed, good to 118 */
    7b40:	2b10      	cmp	r3, #16
        r  = x-fn*pio2_1;
        w  = fn*pio2_1t;    /* 1st round good to 85 bit */
        {
            u_int32_t high;
            j  = ix>>20;
            y[0] = r-w;
    7b42:	4683      	mov	r11, r0
    7b44:	468a      	mov	r10, r1
            GET_HIGH_WORD(high,y[0]);
            i = j-((high>>20)&0x7ff);
            if (i>16) { /* 2nd iteration needed, good to 118 */
    7b46:	dd71      	ble.n	7c2c <sin+0x424>
                t  = r;
                w  = fn*pio2_2;
    7b48:	a37d      	add	r3, pc, #500	; (adr r3, 7d40 <sin+0x538>)
    7b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b4e:	4640      	mov	r0, r8
    7b50:	4649      	mov	r1, r9
    7b52:	f8cd c00c 	str.w	r12, [r13, #12]
    7b56:	f005 fb9f 	bl	d298 <__aeabi_dmul>
    7b5a:	4606      	mov	r6, r0
    7b5c:	460f      	mov	r7, r1
                r  = t-w;
    7b5e:	4632      	mov	r2, r6
    7b60:	463b      	mov	r3, r7
    7b62:	4620      	mov	r0, r4
    7b64:	4629      	mov	r1, r5
    7b66:	f005 f9e3 	bl	cf30 <__aeabi_dsub>
    7b6a:	e9cd 0104 	strd	r0, r1, [r13, #16]
                w  = fn*pio2_2t-((t-r)-w);
    7b6e:	e9dd 2304 	ldrd	r2, r3, [r13, #16]
    7b72:	4620      	mov	r0, r4
    7b74:	4629      	mov	r1, r5
    7b76:	f005 f9db 	bl	cf30 <__aeabi_dsub>
    7b7a:	4632      	mov	r2, r6
    7b7c:	463b      	mov	r3, r7
    7b7e:	f005 f9d7 	bl	cf30 <__aeabi_dsub>
    7b82:	a371      	add	r3, pc, #452	; (adr r3, 7d48 <sin+0x540>)
    7b84:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b88:	4604      	mov	r4, r0
    7b8a:	460d      	mov	r5, r1
    7b8c:	4640      	mov	r0, r8
    7b8e:	4649      	mov	r1, r9
    7b90:	f005 fb82 	bl	d298 <__aeabi_dmul>
    7b94:	4622      	mov	r2, r4
    7b96:	462b      	mov	r3, r5
    7b98:	f005 f9ca 	bl	cf30 <__aeabi_dsub>
    7b9c:	4606      	mov	r6, r0
    7b9e:	460f      	mov	r7, r1
                y[0] = r-w;
    7ba0:	463b      	mov	r3, r7
    7ba2:	e9dd 0104 	ldrd	r0, r1, [r13, #16]
    7ba6:	4632      	mov	r2, r6
    7ba8:	f005 f9c2 	bl	cf30 <__aeabi_dsub>
                GET_HIGH_WORD(high,y[0]);
                i = j-((high>>20)&0x7ff);
    7bac:	f8dd c00c 	ldr.w	r12, [r13, #12]
    7bb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
    7bb4:	ebc3 0c0c 	rsb	r12, r3, r12
                if (i>49)  { /* 3rd iteration need, 151 bits acc */
    7bb8:	f1bc 0f31 	cmp.w	r12, #49	; 0x31
            if (i>16) { /* 2nd iteration needed, good to 118 */
                t  = r;
                w  = fn*pio2_2;
                r  = t-w;
                w  = fn*pio2_2t-((t-r)-w);
                y[0] = r-w;
    7bbc:	4683      	mov	r11, r0
    7bbe:	468a      	mov	r10, r1
                GET_HIGH_WORD(high,y[0]);
                i = j-((high>>20)&0x7ff);
                if (i>49)  { /* 3rd iteration need, 151 bits acc */
    7bc0:	dd32      	ble.n	7c28 <sin+0x420>
                    t  = r; /* will cover all possible cases */
                    w  = fn*pio2_3;
    7bc2:	a363      	add	r3, pc, #396	; (adr r3, 7d50 <sin+0x548>)
    7bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    7bc8:	4640      	mov	r0, r8
    7bca:	4649      	mov	r1, r9
    7bcc:	f005 fb64 	bl	d298 <__aeabi_dmul>
    7bd0:	4606      	mov	r6, r0
    7bd2:	460f      	mov	r7, r1
                    r  = t-w;
    7bd4:	4632      	mov	r2, r6
    7bd6:	463b      	mov	r3, r7
    7bd8:	e9dd 0104 	ldrd	r0, r1, [r13, #16]
    7bdc:	f005 f9a8 	bl	cf30 <__aeabi_dsub>
    7be0:	4604      	mov	r4, r0
    7be2:	460d      	mov	r5, r1
                    w  = fn*pio2_3t-((t-r)-w);
    7be4:	4622      	mov	r2, r4
    7be6:	462b      	mov	r3, r5
    7be8:	e9dd 0104 	ldrd	r0, r1, [r13, #16]
    7bec:	f005 f9a0 	bl	cf30 <__aeabi_dsub>
    7bf0:	4632      	mov	r2, r6
    7bf2:	463b      	mov	r3, r7
    7bf4:	f005 f99c 	bl	cf30 <__aeabi_dsub>
    7bf8:	a357      	add	r3, pc, #348	; (adr r3, 7d58 <sin+0x550>)
    7bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    7bfe:	4606      	mov	r6, r0
    7c00:	460f      	mov	r7, r1
    7c02:	4640      	mov	r0, r8
    7c04:	4649      	mov	r1, r9
    7c06:	f005 fb47 	bl	d298 <__aeabi_dmul>
    7c0a:	4632      	mov	r2, r6
    7c0c:	463b      	mov	r3, r7
    7c0e:	f005 f98f 	bl	cf30 <__aeabi_dsub>
    7c12:	4606      	mov	r6, r0
    7c14:	460f      	mov	r7, r1
                    y[0] = r-w;
    7c16:	4620      	mov	r0, r4
    7c18:	4629      	mov	r1, r5
    7c1a:	4632      	mov	r2, r6
    7c1c:	463b      	mov	r3, r7
    7c1e:	f005 f987 	bl	cf30 <__aeabi_dsub>
    7c22:	4683      	mov	r11, r0
    7c24:	468a      	mov	r10, r1
    7c26:	e001      	b.n	7c2c <sin+0x424>
            GET_HIGH_WORD(high,y[0]);
            i = j-((high>>20)&0x7ff);
            if (i>16) { /* 2nd iteration needed, good to 118 */
                t  = r;
                w  = fn*pio2_2;
                r  = t-w;
    7c28:	e9dd 4504 	ldrd	r4, r5, [r13, #16]
                    w  = fn*pio2_3t-((t-r)-w);
                    y[0] = r-w;
                }
            }
        }
        y[1] = (r-y[0])-w;
    7c2c:	4620      	mov	r0, r4
    7c2e:	4629      	mov	r1, r5
    7c30:	465a      	mov	r2, r11
    7c32:	4653      	mov	r3, r10
    7c34:	f005 f97c 	bl	cf30 <__aeabi_dsub>
    7c38:	4632      	mov	r2, r6
    7c3a:	463b      	mov	r3, r7
    7c3c:	f005 f978 	bl	cf30 <__aeabi_dsub>
    7c40:	4605      	mov	r5, r0
    7c42:	460c      	mov	r4, r1
        return n;
    7c44:	9807      	ldr	r0, [sp, #28]
    7c46:	e05c      	b.n	7d02 <sin+0x4fa>
    }
    /*
     * all other (large) arguments
     */
    if (ix>=0x7ff00000) {       /* x is inf or NaN */
    7c48:	4594      	cmp	r12, r2
        y[0]=y[1]=x-x;
    7c4a:	460b      	mov	r3, r1
    7c4c:	4602      	mov	r2, r0
        return n;
    }
    /*
     * all other (large) arguments
     */
    if (ix>=0x7ff00000) {       /* x is inf or NaN */
    7c4e:	dd07      	ble.n	7c60 <sin+0x458>
        y[0]=y[1]=x-x;
    7c50:	f005 f96e 	bl	cf30 <__aeabi_dsub>
    7c54:	4605      	mov	r5, r0
    7c56:	4683      	mov	r11, r0
    7c58:	460c      	mov	r4, r1
    7c5a:	468a      	mov	r10, r1
        return 0;
    7c5c:	2000      	movs	r0, #0
    7c5e:	e050      	b.n	7d02 <sin+0x4fa>
    }
    /* set z = scalbn(|x|,ilogb(x)-23) */
    GET_LOW_WORD(low,x);
    e0  = (ix>>20)-1046;    /* e0 = ilogb(z)-23; */
    7c60:	ea4f 582c 	mov.w	r8, r12, asr #20
    7c64:	f2a8 4816 	subw	r8, r8, #1046	; 0x416
    INSERT_WORDS(z, ix - ((int32_t)(e0<<20)), low);
    7c68:	ea4f 5308 	mov.w	r3, r8, lsl #20
    7c6c:	ebc3 010c 	rsb	r1, r3, r12
    7c70:	460f      	mov	r7, r1
    7c72:	4606      	mov	r6, r0
    for (i=0; i<2; i++) {
        tx[i] = (double)((int32_t)(z));
    7c74:	f005 fdaa 	bl	d7cc <__aeabi_d2iz>
    7c78:	f005 faa8 	bl	d1cc <__aeabi_i2d>
    7c7c:	4602      	mov	r2, r0
    7c7e:	460b      	mov	r3, r1
        z     = (z-tx[i])*two24;
    7c80:	4630      	mov	r0, r6
    7c82:	4639      	mov	r1, r7
    /* set z = scalbn(|x|,ilogb(x)-23) */
    GET_LOW_WORD(low,x);
    e0  = (ix>>20)-1046;    /* e0 = ilogb(z)-23; */
    INSERT_WORDS(z, ix - ((int32_t)(e0<<20)), low);
    for (i=0; i<2; i++) {
        tx[i] = (double)((int32_t)(z));
    7c84:	e9cd 230c 	strd	r2, r3, [r13, #48]	; 0x30
        z     = (z-tx[i])*two24;
    7c88:	f005 f952 	bl	cf30 <__aeabi_dsub>
    7c8c:	2200      	movs	r2, #0
    7c8e:	4b36      	ldr	r3, [pc, #216]	; (7d68 <sin+0x560>)
    7c90:	f005 fb02 	bl	d298 <__aeabi_dmul>
    7c94:	4606      	mov	r6, r0
    7c96:	460f      	mov	r7, r1
    /* set z = scalbn(|x|,ilogb(x)-23) */
    GET_LOW_WORD(low,x);
    e0  = (ix>>20)-1046;    /* e0 = ilogb(z)-23; */
    INSERT_WORDS(z, ix - ((int32_t)(e0<<20)), low);
    for (i=0; i<2; i++) {
        tx[i] = (double)((int32_t)(z));
    7c98:	f005 fd98 	bl	d7cc <__aeabi_d2iz>
    7c9c:	f005 fa96 	bl	d1cc <__aeabi_i2d>
    7ca0:	4602      	mov	r2, r0
    7ca2:	460b      	mov	r3, r1
        z     = (z-tx[i])*two24;
    7ca4:	4630      	mov	r0, r6
    7ca6:	4639      	mov	r1, r7
    /* set z = scalbn(|x|,ilogb(x)-23) */
    GET_LOW_WORD(low,x);
    e0  = (ix>>20)-1046;    /* e0 = ilogb(z)-23; */
    INSERT_WORDS(z, ix - ((int32_t)(e0<<20)), low);
    for (i=0; i<2; i++) {
        tx[i] = (double)((int32_t)(z));
    7ca8:	e9cd 230e 	strd	r2, r3, [r13, #56]	; 0x38
        z     = (z-tx[i])*two24;
    7cac:	f005 f940 	bl	cf30 <__aeabi_dsub>
    7cb0:	2200      	movs	r2, #0
    7cb2:	4b2d      	ldr	r3, [pc, #180]	; (7d68 <sin+0x560>)
    7cb4:	f005 faf0 	bl	d298 <__aeabi_dmul>
    }
    tx[2] = z;
    7cb8:	e9cd 0110 	strd	r0, r1, [r13, #64]	; 0x40
    nx = 3;
    7cbc:	2603      	movs	r6, #3
    7cbe:	aa0c      	add	r2, sp, #48	; 0x30
    while (tx[nx-1]==zero) nx--; /* skip zero term */
    7cc0:	1e77      	subs	r7, r6, #1
    7cc2:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
    7cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
    7cca:	2200      	movs	r2, #0
    7ccc:	2300      	movs	r3, #0
    7cce:	f005 fd4b 	bl	d768 <__aeabi_dcmpeq>
    7cd2:	b108      	cbz	r0, 7cd8 <sin+0x4d0>
    7cd4:	463e      	mov	r6, r7
    7cd6:	e7f2      	b.n	7cbe <sin+0x4b6>
    n  =  __kernel_rem_pio2(tx,ty,e0,nx,1);
    7cd8:	2301      	movs	r3, #1
    7cda:	9300      	str	r3, [sp, #0]
    7cdc:	4642      	mov	r2, r8
    7cde:	4633      	mov	r3, r6
    7ce0:	a80c      	add	r0, sp, #48	; 0x30
    7ce2:	a908      	add	r1, sp, #32
    7ce4:	f001 f8a0 	bl	8e28 <__kernel_rem_pio2>
    7ce8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    if (hx<0) {y[0] = -ty[0]; y[1] = -ty[1]; return -n;}
    7cea:	2d00      	cmp	r5, #0
    7cec:	aa08      	add	r2, sp, #32
    7cee:	ca2c      	ldmia	r2, {r2, r3, r5}
    7cf0:	bfb8      	it	lt
    7cf2:	f104 4400 	addlt.w	r4, r4, #2147483648	; 0x80000000
    7cf6:	4693      	mov	r11, r2
    7cf8:	bfba      	itte	lt
    7cfa:	f103 4a00 	addlt.w	r10, r3, #2147483648	; 0x80000000
    7cfe:	4240      	neglt	r0, r0
    y[0] = ty[0];
    7d00:	469a      	movge	r10, r3

    /* argument reduction needed */
    else {
        n = __ieee754_rem_pio2(x,y);
        switch (n&3) {
    7d02:	f000 0003 	and.w	r0, r0, #3
    7d06:	2801      	cmp	r0, #1
    7d08:	d030      	beq.n	7d6c <sin+0x564>
    7d0a:	2802      	cmp	r0, #2
    7d0c:	d035      	beq.n	7d7a <sin+0x572>
    7d0e:	2800      	cmp	r0, #0
    7d10:	d13c      	bne.n	7d8c <sin+0x584>
            case 0:
                return  __kernel_sin(y[0],y[1],1);
    7d12:	2301      	movs	r3, #1
    7d14:	9300      	str	r3, [sp, #0]
    7d16:	4658      	mov	r0, r11
    7d18:	4651      	mov	r1, r10
    7d1a:	462a      	mov	r2, r5
    7d1c:	4623      	mov	r3, r4
    7d1e:	f7ff fcb3 	bl	7688 <__kernel_sin>
    7d22:	e03e      	b.n	7da2 <sin+0x59a>
    7d24:	f3af 8000 	nop.w
    7d28:	6dc9c883 	.word	0x6dc9c883
    7d2c:	3fe45f30 	.word	0x3fe45f30
    7d30:	54400000 	.word	0x54400000
    7d34:	3ff921fb 	.word	0x3ff921fb
    7d38:	1a626331 	.word	0x1a626331
    7d3c:	3dd0b461 	.word	0x3dd0b461
    7d40:	1a600000 	.word	0x1a600000
    7d44:	3dd0b461 	.word	0x3dd0b461
    7d48:	2e037073 	.word	0x2e037073
    7d4c:	3ba3198a 	.word	0x3ba3198a
    7d50:	2e000000 	.word	0x2e000000
    7d54:	3ba3198a 	.word	0x3ba3198a
    7d58:	252049c1 	.word	0x252049c1
    7d5c:	397b839a 	.word	0x397b839a
    7d60:	413921fa 	.word	0x413921fa
    7d64:	43380000 	.word	0x43380000
    7d68:	41700000 	.word	0x41700000
            case 1:
                return  __kernel_cos(y[0],y[1]);
    7d6c:	4658      	mov	r0, r11
    7d6e:	4651      	mov	r1, r10
    7d70:	462a      	mov	r2, r5
    7d72:	4623      	mov	r3, r4
    7d74:	f000 fac0 	bl	82f8 <__kernel_cos>
    7d78:	e013      	b.n	7da2 <sin+0x59a>
            case 2:
                return -__kernel_sin(y[0],y[1],1);
    7d7a:	2301      	movs	r3, #1
    7d7c:	9300      	str	r3, [sp, #0]
    7d7e:	4658      	mov	r0, r11
    7d80:	4651      	mov	r1, r10
    7d82:	462a      	mov	r2, r5
    7d84:	4623      	mov	r3, r4
    7d86:	f7ff fc7f 	bl	7688 <__kernel_sin>
    7d8a:	e005      	b.n	7d98 <sin+0x590>
            default:
                return -__kernel_cos(y[0],y[1]);
    7d8c:	4658      	mov	r0, r11
    7d8e:	4651      	mov	r1, r10
    7d90:	462a      	mov	r2, r5
    7d92:	4623      	mov	r3, r4
    7d94:	f000 fab0 	bl	82f8 <__kernel_cos>
    7d98:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    7d9c:	e001      	b.n	7da2 <sin+0x59a>

    /* |x| ~< pi/4 */
    ix &= 0x7fffffff;
    if (ix <= 0x3fe921fb) {
        if (ix<0x3e500000)          /* |x| < 2**-26 */
            {if ((int)x==0) return x;}   /* generate inexact */
    7d9e:	4638      	mov	r0, r7
    7da0:	4631      	mov	r1, r6
                return -__kernel_sin(y[0],y[1],1);
            default:
                return -__kernel_cos(y[0],y[1]);
        }
    }
}
    7da2:	b013      	add	sp, #76	; 0x4c
    7da4:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}

00007da8 <__kernel_cosdf>:
#ifdef INLINE_KERNEL_COSDF
static __inline
#endif
float
__kernel_cosdf(double x)
{
    7da8:	e92d 43f8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r14}
    double r, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    7dac:	4602      	mov	r2, r0
    7dae:	460b      	mov	r3, r1
    7db0:	f005 fa72 	bl	d298 <__aeabi_dmul>
    w = z*z;
    7db4:	4602      	mov	r2, r0
    7db6:	460b      	mov	r3, r1
__kernel_cosdf(double x)
{
    double r, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    7db8:	4604      	mov	r4, r0
    7dba:	460d      	mov	r5, r1
    w = z*z;
    7dbc:	f005 fa6c 	bl	d298 <__aeabi_dmul>
    r = C2+z*C3;
    return ((one+z*C0) + w*C1) + (w*z)*r;
    7dc0:	a321      	add	r3, pc, #132	; (adr r3, 7e48 <__kernel_cosdf+0xa0>)
    7dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
{
    double r, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    7dc6:	4606      	mov	r6, r0
    7dc8:	460f      	mov	r7, r1
    r = C2+z*C3;
    return ((one+z*C0) + w*C1) + (w*z)*r;
    7dca:	4620      	mov	r0, r4
    7dcc:	4629      	mov	r1, r5
    7dce:	f005 fa63 	bl	d298 <__aeabi_dmul>
    7dd2:	2200      	movs	r2, #0
    7dd4:	4b24      	ldr	r3, [pc, #144]	; (7e68 <__kernel_cosdf+0xc0>)
    7dd6:	f005 f8ad 	bl	cf34 <__adddf3>
    7dda:	a31d      	add	r3, pc, #116	; (adr r3, 7e50 <__kernel_cosdf+0xa8>)
    7ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7de0:	4680      	mov	r8, r0
    7de2:	4689      	mov	r9, r1
    7de4:	4630      	mov	r0, r6
    7de6:	4639      	mov	r1, r7
    7de8:	f005 fa56 	bl	d298 <__aeabi_dmul>
    7dec:	4602      	mov	r2, r0
    7dee:	460b      	mov	r3, r1
    7df0:	4640      	mov	r0, r8
    7df2:	4649      	mov	r1, r9
    7df4:	f005 f89e 	bl	cf34 <__adddf3>
    7df8:	4622      	mov	r2, r4
    7dfa:	4680      	mov	r8, r0
    7dfc:	4689      	mov	r9, r1
    7dfe:	462b      	mov	r3, r5
    7e00:	4630      	mov	r0, r6
    7e02:	4639      	mov	r1, r7
    7e04:	f005 fa48 	bl	d298 <__aeabi_dmul>
    double r, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    r = C2+z*C3;
    7e08:	a313      	add	r3, pc, #76	; (adr r3, 7e58 <__kernel_cosdf+0xb0>)
    7e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
    return ((one+z*C0) + w*C1) + (w*z)*r;
    7e0e:	4606      	mov	r6, r0
    7e10:	460f      	mov	r7, r1
    double r, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    r = C2+z*C3;
    7e12:	4620      	mov	r0, r4
    7e14:	4629      	mov	r1, r5
    7e16:	f005 fa3f 	bl	d298 <__aeabi_dmul>
    7e1a:	a311      	add	r3, pc, #68	; (adr r3, 7e60 <__kernel_cosdf+0xb8>)
    7e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
    7e20:	f005 f886 	bl	cf30 <__aeabi_dsub>
    7e24:	4602      	mov	r2, r0
    7e26:	460b      	mov	r3, r1
    return ((one+z*C0) + w*C1) + (w*z)*r;
    7e28:	4630      	mov	r0, r6
    7e2a:	4639      	mov	r1, r7
    7e2c:	f005 fa34 	bl	d298 <__aeabi_dmul>
    7e30:	4602      	mov	r2, r0
    7e32:	460b      	mov	r3, r1
    7e34:	4640      	mov	r0, r8
    7e36:	4649      	mov	r1, r9
    7e38:	f005 f87c 	bl	cf34 <__adddf3>
    7e3c:	f005 fd0e 	bl	d85c <__aeabi_d2f>
}
    7e40:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}
    7e44:	f3af 8000 	nop.w
    7e48:	fd0c5e81 	.word	0xfd0c5e81
    7e4c:	bfdfffff 	.word	0xbfdfffff
    7e50:	e1053a42 	.word	0xe1053a42
    7e54:	3fa55553 	.word	0x3fa55553
    7e58:	e0ee5069 	.word	0xe0ee5069
    7e5c:	3ef99342 	.word	0x3ef99342
    7e60:	e80f1e27 	.word	0xe80f1e27
    7e64:	3f56c087 	.word	0x3f56c087
    7e68:	3ff00000 	.word	0x3ff00000
    7e6c:	f3af 8000 	nop.w

00007e70 <__kernel_cosdf>:
#ifdef INLINE_KERNEL_COSDF
static __inline
#endif
float
__kernel_cosdf(double x)
{
    7e70:	e92d 43f8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r14}
    double r, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    7e74:	4602      	mov	r2, r0
    7e76:	460b      	mov	r3, r1
    7e78:	f005 fa0e 	bl	d298 <__aeabi_dmul>
    w = z*z;
    7e7c:	4602      	mov	r2, r0
    7e7e:	460b      	mov	r3, r1
__kernel_cosdf(double x)
{
    double r, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    7e80:	4604      	mov	r4, r0
    7e82:	460d      	mov	r5, r1
    w = z*z;
    7e84:	f005 fa08 	bl	d298 <__aeabi_dmul>
    r = C2+z*C3;
    return ((one+z*C0) + w*C1) + (w*z)*r;
    7e88:	a321      	add	r3, pc, #132	; (adr r3, 7f10 <__kernel_cosdf+0xa0>)
    7e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
{
    double r, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    7e8e:	4606      	mov	r6, r0
    7e90:	460f      	mov	r7, r1
    r = C2+z*C3;
    return ((one+z*C0) + w*C1) + (w*z)*r;
    7e92:	4620      	mov	r0, r4
    7e94:	4629      	mov	r1, r5
    7e96:	f005 f9ff 	bl	d298 <__aeabi_dmul>
    7e9a:	2200      	movs	r2, #0
    7e9c:	4b24      	ldr	r3, [pc, #144]	; (7f30 <__kernel_cosdf+0xc0>)
    7e9e:	f005 f849 	bl	cf34 <__adddf3>
    7ea2:	a31d      	add	r3, pc, #116	; (adr r3, 7f18 <__kernel_cosdf+0xa8>)
    7ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
    7ea8:	4680      	mov	r8, r0
    7eaa:	4689      	mov	r9, r1
    7eac:	4630      	mov	r0, r6
    7eae:	4639      	mov	r1, r7
    7eb0:	f005 f9f2 	bl	d298 <__aeabi_dmul>
    7eb4:	4602      	mov	r2, r0
    7eb6:	460b      	mov	r3, r1
    7eb8:	4640      	mov	r0, r8
    7eba:	4649      	mov	r1, r9
    7ebc:	f005 f83a 	bl	cf34 <__adddf3>
    7ec0:	4622      	mov	r2, r4
    7ec2:	4680      	mov	r8, r0
    7ec4:	4689      	mov	r9, r1
    7ec6:	462b      	mov	r3, r5
    7ec8:	4630      	mov	r0, r6
    7eca:	4639      	mov	r1, r7
    7ecc:	f005 f9e4 	bl	d298 <__aeabi_dmul>
    double r, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    r = C2+z*C3;
    7ed0:	a313      	add	r3, pc, #76	; (adr r3, 7f20 <__kernel_cosdf+0xb0>)
    7ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
    return ((one+z*C0) + w*C1) + (w*z)*r;
    7ed6:	4606      	mov	r6, r0
    7ed8:	460f      	mov	r7, r1
    double r, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    r = C2+z*C3;
    7eda:	4620      	mov	r0, r4
    7edc:	4629      	mov	r1, r5
    7ede:	f005 f9db 	bl	d298 <__aeabi_dmul>
    7ee2:	a311      	add	r3, pc, #68	; (adr r3, 7f28 <__kernel_cosdf+0xb8>)
    7ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
    7ee8:	f005 f822 	bl	cf30 <__aeabi_dsub>
    7eec:	4602      	mov	r2, r0
    7eee:	460b      	mov	r3, r1
    return ((one+z*C0) + w*C1) + (w*z)*r;
    7ef0:	4630      	mov	r0, r6
    7ef2:	4639      	mov	r1, r7
    7ef4:	f005 f9d0 	bl	d298 <__aeabi_dmul>
    7ef8:	4602      	mov	r2, r0
    7efa:	460b      	mov	r3, r1
    7efc:	4640      	mov	r0, r8
    7efe:	4649      	mov	r1, r9
    7f00:	f005 f818 	bl	cf34 <__adddf3>
    7f04:	f005 fcaa 	bl	d85c <__aeabi_d2f>
}
    7f08:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}
    7f0c:	f3af 8000 	nop.w
    7f10:	fd0c5e81 	.word	0xfd0c5e81
    7f14:	bfdfffff 	.word	0xbfdfffff
    7f18:	e1053a42 	.word	0xe1053a42
    7f1c:	3fa55553 	.word	0x3fa55553
    7f20:	e0ee5069 	.word	0xe0ee5069
    7f24:	3ef99342 	.word	0x3ef99342
    7f28:	e80f1e27 	.word	0xe80f1e27
    7f2c:	3f56c087 	.word	0x3f56c087
    7f30:	3ff00000 	.word	0x3ff00000
    7f34:	f3af 8000 	nop.w

00007f38 <__kernel_sindf>:
#ifdef INLINE_KERNEL_SINDF
static __inline
#endif
float
__kernel_sindf(double x)
{
    7f38:	e92d 43f8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r14}
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    7f3c:	4602      	mov	r2, r0
    7f3e:	460b      	mov	r3, r1
#ifdef INLINE_KERNEL_SINDF
static __inline
#endif
float
__kernel_sindf(double x)
{
    7f40:	4606      	mov	r6, r0
    7f42:	460f      	mov	r7, r1
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    7f44:	f005 f9a8 	bl	d298 <__aeabi_dmul>
    w = z*z;
    r = S3+z*S4;
    s = z*x;
    7f48:	4632      	mov	r2, r6
    7f4a:	463b      	mov	r3, r7
__kernel_sindf(double x)
{
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    7f4c:	4604      	mov	r4, r0
    7f4e:	460d      	mov	r5, r1
    w = z*z;
    r = S3+z*S4;
    s = z*x;
    7f50:	f005 f9a2 	bl	d298 <__aeabi_dmul>
    return (x + s*(S1+z*S2)) + s*w*r;
    7f54:	a322      	add	r3, pc, #136	; (adr r3, 7fe0 <__kernel_sindf+0xa8>)
    7f56:	e9d3 2300 	ldrd	r2, r3, [r3]

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    r = S3+z*S4;
    s = z*x;
    7f5a:	4680      	mov	r8, r0
    7f5c:	4689      	mov	r9, r1
    return (x + s*(S1+z*S2)) + s*w*r;
    7f5e:	4620      	mov	r0, r4
    7f60:	4629      	mov	r1, r5
    7f62:	f005 f999 	bl	d298 <__aeabi_dmul>
    7f66:	a320      	add	r3, pc, #128	; (adr r3, 7fe8 <__kernel_sindf+0xb0>)
    7f68:	e9d3 2300 	ldrd	r2, r3, [r3]
    7f6c:	f004 ffe0 	bl	cf30 <__aeabi_dsub>
    7f70:	4602      	mov	r2, r0
    7f72:	460b      	mov	r3, r1
    7f74:	4640      	mov	r0, r8
    7f76:	4649      	mov	r1, r9
    7f78:	f005 f98e 	bl	d298 <__aeabi_dmul>
    7f7c:	4602      	mov	r2, r0
    7f7e:	460b      	mov	r3, r1
    7f80:	4630      	mov	r0, r6
    7f82:	4639      	mov	r1, r7
    7f84:	f004 ffd6 	bl	cf34 <__adddf3>
{
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    7f88:	4622      	mov	r2, r4
    r = S3+z*S4;
    s = z*x;
    return (x + s*(S1+z*S2)) + s*w*r;
    7f8a:	4606      	mov	r6, r0
    7f8c:	460f      	mov	r7, r1
{
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    7f8e:	462b      	mov	r3, r5
    7f90:	4620      	mov	r0, r4
    7f92:	4629      	mov	r1, r5
    7f94:	f005 f980 	bl	d298 <__aeabi_dmul>
    7f98:	4602      	mov	r2, r0
    7f9a:	460b      	mov	r3, r1
    r = S3+z*S4;
    s = z*x;
    return (x + s*(S1+z*S2)) + s*w*r;
    7f9c:	4640      	mov	r0, r8
    7f9e:	4649      	mov	r1, r9
    7fa0:	f005 f97a 	bl	d298 <__aeabi_dmul>
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    r = S3+z*S4;
    7fa4:	a312      	add	r3, pc, #72	; (adr r3, 7ff0 <__kernel_sindf+0xb8>)
    7fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
    s = z*x;
    return (x + s*(S1+z*S2)) + s*w*r;
    7faa:	4680      	mov	r8, r0
    7fac:	4689      	mov	r9, r1
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    r = S3+z*S4;
    7fae:	4620      	mov	r0, r4
    7fb0:	4629      	mov	r1, r5
    7fb2:	f005 f971 	bl	d298 <__aeabi_dmul>
    7fb6:	a310      	add	r3, pc, #64	; (adr r3, 7ff8 <__kernel_sindf+0xc0>)
    7fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
    7fbc:	f004 ffb8 	bl	cf30 <__aeabi_dsub>
    7fc0:	4602      	mov	r2, r0
    7fc2:	460b      	mov	r3, r1
    s = z*x;
    return (x + s*(S1+z*S2)) + s*w*r;
    7fc4:	4640      	mov	r0, r8
    7fc6:	4649      	mov	r1, r9
    7fc8:	f005 f966 	bl	d298 <__aeabi_dmul>
    7fcc:	4602      	mov	r2, r0
    7fce:	460b      	mov	r3, r1
    7fd0:	4630      	mov	r0, r6
    7fd2:	4639      	mov	r1, r7
    7fd4:	f004 ffae 	bl	cf34 <__adddf3>
    7fd8:	f005 fc40 	bl	d85c <__aeabi_d2f>
}
    7fdc:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}
    7fe0:	896efbb2 	.word	0x896efbb2
    7fe4:	3f811110 	.word	0x3f811110
    7fe8:	54cbac77 	.word	0x54cbac77
    7fec:	3fc55555 	.word	0x3fc55555
    7ff0:	8c3b46a7 	.word	0x8c3b46a7
    7ff4:	3ec6cd87 	.word	0x3ec6cd87
    7ff8:	e2cae774 	.word	0xe2cae774
    7ffc:	3f2a00f9 	.word	0x3f2a00f9

00008000 <__kernel_sindf>:
#ifdef INLINE_KERNEL_SINDF
static __inline
#endif
float
__kernel_sindf(double x)
{
    8000:	e92d 43f8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r14}
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    8004:	4602      	mov	r2, r0
    8006:	460b      	mov	r3, r1
#ifdef INLINE_KERNEL_SINDF
static __inline
#endif
float
__kernel_sindf(double x)
{
    8008:	4606      	mov	r6, r0
    800a:	460f      	mov	r7, r1
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    800c:	f005 f944 	bl	d298 <__aeabi_dmul>
    w = z*z;
    r = S3+z*S4;
    s = z*x;
    8010:	4632      	mov	r2, r6
    8012:	463b      	mov	r3, r7
__kernel_sindf(double x)
{
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    8014:	4604      	mov	r4, r0
    8016:	460d      	mov	r5, r1
    w = z*z;
    r = S3+z*S4;
    s = z*x;
    8018:	f005 f93e 	bl	d298 <__aeabi_dmul>
    return (x + s*(S1+z*S2)) + s*w*r;
    801c:	a322      	add	r3, pc, #136	; (adr r3, 80a8 <__kernel_sindf+0xa8>)
    801e:	e9d3 2300 	ldrd	r2, r3, [r3]

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    r = S3+z*S4;
    s = z*x;
    8022:	4680      	mov	r8, r0
    8024:	4689      	mov	r9, r1
    return (x + s*(S1+z*S2)) + s*w*r;
    8026:	4620      	mov	r0, r4
    8028:	4629      	mov	r1, r5
    802a:	f005 f935 	bl	d298 <__aeabi_dmul>
    802e:	a320      	add	r3, pc, #128	; (adr r3, 80b0 <__kernel_sindf+0xb0>)
    8030:	e9d3 2300 	ldrd	r2, r3, [r3]
    8034:	f004 ff7c 	bl	cf30 <__aeabi_dsub>
    8038:	4602      	mov	r2, r0
    803a:	460b      	mov	r3, r1
    803c:	4640      	mov	r0, r8
    803e:	4649      	mov	r1, r9
    8040:	f005 f92a 	bl	d298 <__aeabi_dmul>
    8044:	4602      	mov	r2, r0
    8046:	460b      	mov	r3, r1
    8048:	4630      	mov	r0, r6
    804a:	4639      	mov	r1, r7
    804c:	f004 ff72 	bl	cf34 <__adddf3>
{
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    8050:	4622      	mov	r2, r4
    r = S3+z*S4;
    s = z*x;
    return (x + s*(S1+z*S2)) + s*w*r;
    8052:	4606      	mov	r6, r0
    8054:	460f      	mov	r7, r1
{
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    8056:	462b      	mov	r3, r5
    8058:	4620      	mov	r0, r4
    805a:	4629      	mov	r1, r5
    805c:	f005 f91c 	bl	d298 <__aeabi_dmul>
    8060:	4602      	mov	r2, r0
    8062:	460b      	mov	r3, r1
    r = S3+z*S4;
    s = z*x;
    return (x + s*(S1+z*S2)) + s*w*r;
    8064:	4640      	mov	r0, r8
    8066:	4649      	mov	r1, r9
    8068:	f005 f916 	bl	d298 <__aeabi_dmul>
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    r = S3+z*S4;
    806c:	a312      	add	r3, pc, #72	; (adr r3, 80b8 <__kernel_sindf+0xb8>)
    806e:	e9d3 2300 	ldrd	r2, r3, [r3]
    s = z*x;
    return (x + s*(S1+z*S2)) + s*w*r;
    8072:	4680      	mov	r8, r0
    8074:	4689      	mov	r9, r1
    double r, s, w, z;

    /* Try to optimize for parallel evaluation as in k_tanf.c. */
    z = x*x;
    w = z*z;
    r = S3+z*S4;
    8076:	4620      	mov	r0, r4
    8078:	4629      	mov	r1, r5
    807a:	f005 f90d 	bl	d298 <__aeabi_dmul>
    807e:	a310      	add	r3, pc, #64	; (adr r3, 80c0 <__kernel_sindf+0xc0>)
    8080:	e9d3 2300 	ldrd	r2, r3, [r3]
    8084:	f004 ff54 	bl	cf30 <__aeabi_dsub>
    8088:	4602      	mov	r2, r0
    808a:	460b      	mov	r3, r1
    s = z*x;
    return (x + s*(S1+z*S2)) + s*w*r;
    808c:	4640      	mov	r0, r8
    808e:	4649      	mov	r1, r9
    8090:	f005 f902 	bl	d298 <__aeabi_dmul>
    8094:	4602      	mov	r2, r0
    8096:	460b      	mov	r3, r1
    8098:	4630      	mov	r0, r6
    809a:	4639      	mov	r1, r7
    809c:	f004 ff4a 	bl	cf34 <__adddf3>
    80a0:	f005 fbdc 	bl	d85c <__aeabi_d2f>
}
    80a4:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}
    80a8:	896efbb2 	.word	0x896efbb2
    80ac:	3f811110 	.word	0x3f811110
    80b0:	54cbac77 	.word	0x54cbac77
    80b4:	3fc55555 	.word	0x3fc55555
    80b8:	8c3b46a7 	.word	0x8c3b46a7
    80bc:	3ec6cd87 	.word	0x3ec6cd87
    80c0:	e2cae774 	.word	0xe2cae774
    80c4:	3f2a00f9 	.word	0x3f2a00f9

000080c8 <sinf>:
s3pio2 = 3*M_PI_2,          /* 0x4012D97C, 0x7F3321D2 */
s4pio2 = 4*M_PI_2;          /* 0x401921FB, 0x54442D18 */

float
sinf(float x)
{
    80c8:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}
    int32_t n, hx, ix;

    GET_FLOAT_WORD(hx,x);
    ix = hx & 0x7fffffff;

    if (ix <= 0x3f490fda) {     /* |x| ~<= pi/4 */
    80cc:	4a82      	ldr	r2, [pc, #520]	; (82d8 <sinf+0x210>)
{
    double y;
    int32_t n, hx, ix;

    GET_FLOAT_WORD(hx,x);
    ix = hx & 0x7fffffff;
    80ce:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000

    if (ix <= 0x3f490fda) {     /* |x| ~<= pi/4 */
    80d2:	4293      	cmp	r3, r2
s3pio2 = 3*M_PI_2,          /* 0x4012D97C, 0x7F3321D2 */
s4pio2 = 4*M_PI_2;          /* 0x401921FB, 0x54442D18 */

float
sinf(float x)
{
    80d4:	b086      	sub	sp, #24
    80d6:	4606      	mov	r6, r0
    int32_t n, hx, ix;

    GET_FLOAT_WORD(hx,x);
    ix = hx & 0x7fffffff;

    if (ix <= 0x3f490fda) {     /* |x| ~<= pi/4 */
    80d8:	dc0b      	bgt.n	80f2 <sinf+0x2a>
        if (ix<0x39800000)      /* |x| < 2**-12 */
    80da:	f1b3 5f66 	cmp.w	r3, #964689920	; 0x39800000
    80de:	da04      	bge.n	80ea <sinf+0x22>
            if (((int)x)==0) return x;  /* x with inexact if x != 0 */
    80e0:	f005 fe6a 	bl	ddb8 <__aeabi_f2iz>
    80e4:	2800      	cmp	r0, #0
    80e6:	f000 80ce 	beq.w	8286 <sinf+0x1be>
        return __kernel_sindf(x);
    80ea:	4630      	mov	r0, r6
    80ec:	f005 f880 	bl	d1f0 <__aeabi_f2d>
    80f0:	e0bd      	b.n	826e <sinf+0x1a6>
    }
    if (ix<=0x407b53d1) {       /* |x| ~<= 5*pi/4 */
    80f2:	4a7a      	ldr	r2, [pc, #488]	; (82dc <sinf+0x214>)
    80f4:	4293      	cmp	r3, r2
    80f6:	dc27      	bgt.n	8148 <sinf+0x80>
        if (ix<=0x4016cbe3) {   /* |x| ~<= 3pi/4 */
    80f8:	4a79      	ldr	r2, [pc, #484]	; (82e0 <sinf+0x218>)
    80fa:	4293      	cmp	r3, r2
    80fc:	dc11      	bgt.n	8122 <sinf+0x5a>
            if (hx>0)
    80fe:	2800      	cmp	r0, #0
    8100:	dd07      	ble.n	8112 <sinf+0x4a>
                return __kernel_cosdf(x - s1pio2);
    8102:	f005 f875 	bl	d1f0 <__aeabi_f2d>
    8106:	a362      	add	r3, pc, #392	; (adr r3, 8290 <sinf+0x1c8>)
    8108:	e9d3 2300 	ldrd	r2, r3, [r3]
    810c:	f004 ff10 	bl	cf30 <__aeabi_dsub>
    8110:	e031      	b.n	8176 <sinf+0xae>
            else
                return -__kernel_cosdf(x + s1pio2);
    8112:	f005 f86d 	bl	d1f0 <__aeabi_f2d>
    8116:	a35e      	add	r3, pc, #376	; (adr r3, 8290 <sinf+0x1c8>)
    8118:	e9d3 2300 	ldrd	r2, r3, [r3]
    811c:	f004 ff0a 	bl	cf34 <__adddf3>
    8120:	e0ac      	b.n	827c <sinf+0x1b4>
        } else
            return __kernel_sindf((hx > 0 ? s2pio2 : -s2pio2) - x);
    8122:	2800      	cmp	r0, #0
    8124:	dd03      	ble.n	812e <sinf+0x66>
    8126:	a55c      	add	r5, pc, #368	; (adr r5, 8298 <sinf+0x1d0>)
    8128:	e9d5 4500 	ldrd	r4, r5, [r5]
    812c:	e002      	b.n	8134 <sinf+0x6c>
    812e:	a55c      	add	r5, pc, #368	; (adr r5, 82a0 <sinf+0x1d8>)
    8130:	e9d5 4500 	ldrd	r4, r5, [r5]
    8134:	4630      	mov	r0, r6
    8136:	f005 f85b 	bl	d1f0 <__aeabi_f2d>
    813a:	4602      	mov	r2, r0
    813c:	460b      	mov	r3, r1
    813e:	4620      	mov	r0, r4
    8140:	4629      	mov	r1, r5
    8142:	f004 fef5 	bl	cf30 <__aeabi_dsub>
    8146:	e092      	b.n	826e <sinf+0x1a6>
    }
    if (ix<=0x40e231d5) {       /* |x| ~<= 9*pi/4 */
    8148:	4a66      	ldr	r2, [pc, #408]	; (82e4 <sinf+0x21c>)
    814a:	4293      	cmp	r3, r2
    814c:	dc26      	bgt.n	819c <sinf+0xd4>
        if (ix<=0x40afeddf) {   /* |x| ~<= 7*pi/4 */
    814e:	4a66      	ldr	r2, [pc, #408]	; (82e8 <sinf+0x220>)
    8150:	4293      	cmp	r3, r2
    8152:	dc15      	bgt.n	8180 <sinf+0xb8>
            if (hx>0)
    8154:	2800      	cmp	r0, #0
    8156:	dd07      	ble.n	8168 <sinf+0xa0>
                return -__kernel_cosdf(x - s3pio2);
    8158:	f005 f84a 	bl	d1f0 <__aeabi_f2d>
    815c:	a352      	add	r3, pc, #328	; (adr r3, 82a8 <sinf+0x1e0>)
    815e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8162:	f004 fee5 	bl	cf30 <__aeabi_dsub>
    8166:	e089      	b.n	827c <sinf+0x1b4>
            else
                return __kernel_cosdf(x + s3pio2);
    8168:	f005 f842 	bl	d1f0 <__aeabi_f2d>
    816c:	a34e      	add	r3, pc, #312	; (adr r3, 82a8 <sinf+0x1e0>)
    816e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8172:	f004 fedf 	bl	cf34 <__adddf3>
                return  __kernel_sindf(-y);
            default:
                return -__kernel_cosdf(y);
        }
    }
}
    8176:	b006      	add	sp, #24
    8178:	e8bd 41f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r14}
    if (ix<=0x40e231d5) {       /* |x| ~<= 9*pi/4 */
        if (ix<=0x40afeddf) {   /* |x| ~<= 7*pi/4 */
            if (hx>0)
                return -__kernel_cosdf(x - s3pio2);
            else
                return __kernel_cosdf(x + s3pio2);
    817c:	f7ff be14 	b.w	7da8 <__kernel_cosdf>
        } else
            return __kernel_sindf(x + (hx > 0 ? -s4pio2 : s4pio2));
    8180:	f005 f836 	bl	d1f0 <__aeabi_f2d>
    8184:	2e00      	cmp	r6, #0
    8186:	dc03      	bgt.n	8190 <sinf+0xc8>
    8188:	a349      	add	r3, pc, #292	; (adr r3, 82b0 <sinf+0x1e8>)
    818a:	e9d3 2300 	ldrd	r2, r3, [r3]
    818e:	e002      	b.n	8196 <sinf+0xce>
    8190:	a349      	add	r3, pc, #292	; (adr r3, 82b8 <sinf+0x1f0>)
    8192:	e9d3 2300 	ldrd	r2, r3, [r3]
    8196:	f004 fecd 	bl	cf34 <__adddf3>
    819a:	e068      	b.n	826e <sinf+0x1a6>
    }

    /* sin(Inf or NaN) is NaN */
    else if (ix>=0x7f800000) return x-x;
    819c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
    81a0:	db03      	blt.n	81aa <sinf+0xe2>
    81a2:	4601      	mov	r1, r0
    81a4:	f005 fbae 	bl	d904 <__aeabi_fsub>
    81a8:	e06e      	b.n	8288 <sinf+0x1c0>
    int32_t e0,n,ix,hx;

    GET_FLOAT_WORD(hx,x);
    ix = hx&0x7fffffff;
    /* 33+53 bit pi is good enough for medium size */
    if (ix<0x4dc90fdb) {    /* |x| ~< 2^28*(pi/2), medium size */
    81aa:	4a50      	ldr	r2, [pc, #320]	; (82ec <sinf+0x224>)
    81ac:	4293      	cmp	r3, r2
    81ae:	dc34      	bgt.n	821a <sinf+0x152>
        /* Use a specialized rint() to get fn.  Assume round-to-nearest. */
        STRICT_ASSIGN(double,fn,x*invpio2+0x1.8p52);
    81b0:	f005 f81e 	bl	d1f0 <__aeabi_f2d>
    81b4:	a342      	add	r3, pc, #264	; (adr r3, 82c0 <sinf+0x1f8>)
    81b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    81ba:	4606      	mov	r6, r0
    81bc:	460f      	mov	r7, r1
    81be:	f005 f86b 	bl	d298 <__aeabi_dmul>
    81c2:	2200      	movs	r2, #0
    81c4:	4b4a      	ldr	r3, [pc, #296]	; (82f0 <sinf+0x228>)
    81c6:	f004 feb5 	bl	cf34 <__adddf3>
        fn = fn-0x1.8p52;
    81ca:	2200      	movs	r2, #0
    81cc:	4b48      	ldr	r3, [pc, #288]	; (82f0 <sinf+0x228>)
    81ce:	f004 feaf 	bl	cf30 <__aeabi_dsub>
    81d2:	4604      	mov	r4, r0
    81d4:	460d      	mov	r5, r1
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
    81d6:	f005 faf9 	bl	d7cc <__aeabi_d2iz>
#endif
        r  = x-fn*pio2_1;
    81da:	a33b      	add	r3, pc, #236	; (adr r3, 82c8 <sinf+0x200>)
    81dc:	e9d3 2300 	ldrd	r2, r3, [r3]
        STRICT_ASSIGN(double,fn,x*invpio2+0x1.8p52);
        fn = fn-0x1.8p52;
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
    81e0:	4680      	mov	r8, r0
#endif
        r  = x-fn*pio2_1;
    81e2:	4629      	mov	r1, r5
    81e4:	4620      	mov	r0, r4
    81e6:	f005 f857 	bl	d298 <__aeabi_dmul>
    81ea:	4602      	mov	r2, r0
    81ec:	460b      	mov	r3, r1
    81ee:	4630      	mov	r0, r6
    81f0:	4639      	mov	r1, r7
    81f2:	f004 fe9d 	bl	cf30 <__aeabi_dsub>
        w  = fn*pio2_1t;
    81f6:	a336      	add	r3, pc, #216	; (adr r3, 82d0 <sinf+0x208>)
    81f8:	e9d3 2300 	ldrd	r2, r3, [r3]
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
#endif
        r  = x-fn*pio2_1;
    81fc:	4606      	mov	r6, r0
    81fe:	460f      	mov	r7, r1
        w  = fn*pio2_1t;
    8200:	4620      	mov	r0, r4
    8202:	4629      	mov	r1, r5
    8204:	f005 f848 	bl	d298 <__aeabi_dmul>
    8208:	4602      	mov	r2, r0
    820a:	460b      	mov	r3, r1
        *y = r-w;
    820c:	4630      	mov	r0, r6
    820e:	4639      	mov	r1, r7
    8210:	f004 fe8e 	bl	cf30 <__aeabi_dsub>
    8214:	4602      	mov	r2, r0
    8216:	460b      	mov	r3, r1
    8218:	e019      	b.n	824e <sinf+0x186>
    if (ix>=0x7f800000) {       /* x is inf or NaN */
        *y=x-x;
        return 0;
    }
    /* set z = scalbn(|x|,ilogb(|x|)-23) */
    e0 = (ix>>23)-150;      /* e0 = ilogb(|x|)-23; */
    821a:	15dd      	asrs	r5, r3, #23
    821c:	3d96      	subs	r5, #150	; 0x96
    SET_FLOAT_WORD(z, ix - ((int32_t)(e0<<23)));
    821e:	05e8      	lsls	r0, r5, #23
    tx[0] = z;
    8220:	1a18      	subs	r0, r3, r0
    8222:	f004 ffe5 	bl	d1f0 <__aeabi_f2d>
    8226:	ab06      	add	r3, sp, #24
    8228:	e963 0104 	strd	r0, r1, [r3, #-16]!
    n  =  __kernel_rem_pio2(tx,ty,e0,1,0);
    822c:	2200      	movs	r2, #0
    822e:	9200      	str	r2, [sp, #0]
    8230:	4618      	mov	r0, r3
    8232:	462a      	mov	r2, r5
    8234:	2301      	movs	r3, #1
    8236:	a904      	add	r1, sp, #16
    8238:	f000 fdf6 	bl	8e28 <__kernel_rem_pio2>
    823c:	9b05      	ldr	r3, [sp, #20]
    if (hx<0) {*y = -ty[0]; return -n;}
    823e:	2e00      	cmp	r6, #0
    8240:	9a04      	ldr	r2, [sp, #16]
    8242:	bfba      	itte	lt
    8244:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
    8248:	f1c0 0800 	rsblt	r8, r0, #0
    *y = ty[0];
    return n;
    824c:	4680      	movge	r8, r0

    /* general argument reduction needed */
    else {
        n = __ieee754_rem_pio2f(x,&y);
        switch (n&3) {
    824e:	f008 0003 	and.w	r0, r8, #3
    8252:	2801      	cmp	r0, #1
    8254:	d005      	beq.n	8262 <sinf+0x19a>
    8256:	2802      	cmp	r0, #2
    8258:	d006      	beq.n	8268 <sinf+0x1a0>
    825a:	b968      	cbnz	r0, 8278 <sinf+0x1b0>
            case 0:
                return  __kernel_sindf(y);
    825c:	4610      	mov	r0, r2
    825e:	4619      	mov	r1, r3
    8260:	e005      	b.n	826e <sinf+0x1a6>
            case 1:
                return  __kernel_cosdf(y);
    8262:	4610      	mov	r0, r2
    8264:	4619      	mov	r1, r3
    8266:	e786      	b.n	8176 <sinf+0xae>
            case 2:
                return  __kernel_sindf(-y);
    8268:	4610      	mov	r0, r2
    826a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
            default:
                return -__kernel_cosdf(y);
        }
    }
}
    826e:	b006      	add	sp, #24
    8270:	e8bd 41f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r14}
            case 0:
                return  __kernel_sindf(y);
            case 1:
                return  __kernel_cosdf(y);
            case 2:
                return  __kernel_sindf(-y);
    8274:	f7ff be60 	b.w	7f38 <__kernel_sindf>
            default:
                return -__kernel_cosdf(y);
    8278:	4610      	mov	r0, r2
    827a:	4619      	mov	r1, r3
    827c:	f7ff fd94 	bl	7da8 <__kernel_cosdf>
    8280:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    8284:	e000      	b.n	8288 <sinf+0x1c0>
    GET_FLOAT_WORD(hx,x);
    ix = hx & 0x7fffffff;

    if (ix <= 0x3f490fda) {     /* |x| ~<= pi/4 */
        if (ix<0x39800000)      /* |x| < 2**-12 */
            if (((int)x)==0) return x;  /* x with inexact if x != 0 */
    8286:	4630      	mov	r0, r6
                return  __kernel_sindf(-y);
            default:
                return -__kernel_cosdf(y);
        }
    }
}
    8288:	b006      	add	sp, #24
    828a:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    828e:	bf00      	nop
    8290:	54442d18 	.word	0x54442d18
    8294:	3ff921fb 	.word	0x3ff921fb
    8298:	54442d18 	.word	0x54442d18
    829c:	400921fb 	.word	0x400921fb
    82a0:	54442d18 	.word	0x54442d18
    82a4:	c00921fb 	.word	0xc00921fb
    82a8:	7f3321d2 	.word	0x7f3321d2
    82ac:	4012d97c 	.word	0x4012d97c
    82b0:	54442d18 	.word	0x54442d18
    82b4:	401921fb 	.word	0x401921fb
    82b8:	54442d18 	.word	0x54442d18
    82bc:	c01921fb 	.word	0xc01921fb
    82c0:	6dc9c883 	.word	0x6dc9c883
    82c4:	3fe45f30 	.word	0x3fe45f30
    82c8:	50000000 	.word	0x50000000
    82cc:	3ff921fb 	.word	0x3ff921fb
    82d0:	611a6263 	.word	0x611a6263
    82d4:	3e5110b4 	.word	0x3e5110b4
    82d8:	3f490fda 	.word	0x3f490fda
    82dc:	407b53d1 	.word	0x407b53d1
    82e0:	4016cbe3 	.word	0x4016cbe3
    82e4:	40e231d5 	.word	0x40e231d5
    82e8:	40afeddf 	.word	0x40afeddf
    82ec:	4dc90fda 	.word	0x4dc90fda
    82f0:	43380000 	.word	0x43380000
    82f4:	f3af 8000 	nop.w

000082f8 <__kernel_cos>:
C5  =  2.08757232129817482790e-09, /* 0x3E21EE9E, 0xBDB4B1C4 */
C6  = -1.13596475577881948265e-11; /* 0xBDA8FAE9, 0xBE8838D4 */

double
__kernel_cos(double x, double y)
{
    82f8:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    82fc:	b087      	sub	sp, #28
    82fe:	e9cd 2302 	strd	r2, r3, [r13, #8]
    double hz,z,r,w;

    z  = x*x;
    8302:	4602      	mov	r2, r0
    8304:	460b      	mov	r3, r1
C5  =  2.08757232129817482790e-09, /* 0x3E21EE9E, 0xBDB4B1C4 */
C6  = -1.13596475577881948265e-11; /* 0xBDA8FAE9, 0xBE8838D4 */

double
__kernel_cos(double x, double y)
{
    8306:	e9cd 0100 	strd	r0, r1, [r13]
    double hz,z,r,w;

    z  = x*x;
    830a:	f004 ffc5 	bl	d298 <__aeabi_dmul>
    w  = z*z;
    830e:	4602      	mov	r2, r0
    8310:	460b      	mov	r3, r1
double
__kernel_cos(double x, double y)
{
    double hz,z,r,w;

    z  = x*x;
    8312:	4604      	mov	r4, r0
    8314:	460d      	mov	r5, r1
    w  = z*z;
    8316:	f004 ffbf 	bl	d298 <__aeabi_dmul>
    r  = z*(C1+z*(C2+z*C3)) + w*w*(C4+z*(C5+z*C6));
    hz = 0.5*z;
    831a:	2200      	movs	r2, #0
__kernel_cos(double x, double y)
{
    double hz,z,r,w;

    z  = x*x;
    w  = z*z;
    831c:	4680      	mov	r8, r0
    831e:	4689      	mov	r9, r1
    r  = z*(C1+z*(C2+z*C3)) + w*w*(C4+z*(C5+z*C6));
    hz = 0.5*z;
    8320:	4620      	mov	r0, r4
    8322:	4629      	mov	r1, r5
    8324:	4b4e      	ldr	r3, [pc, #312]	; (8460 <__kernel_cos+0x168>)
    8326:	f004 ffb7 	bl	d298 <__aeabi_dmul>
    832a:	4606      	mov	r6, r0
    832c:	460f      	mov	r7, r1
    w  = one-hz;
    832e:	4632      	mov	r2, r6
    8330:	463b      	mov	r3, r7
    8332:	2000      	movs	r0, #0
    8334:	494b      	ldr	r1, [pc, #300]	; (8464 <__kernel_cos+0x16c>)
    8336:	f004 fdfb 	bl	cf30 <__aeabi_dsub>
    833a:	4682      	mov	r10, r0
    833c:	468b      	mov	r11, r1
    return w + (((one-w)-hz) + (z*r-x*y));
    833e:	4652      	mov	r2, r10
    8340:	465b      	mov	r3, r11
    8342:	2000      	movs	r0, #0
    8344:	4947      	ldr	r1, [pc, #284]	; (8464 <__kernel_cos+0x16c>)
    8346:	f004 fdf3 	bl	cf30 <__aeabi_dsub>
    834a:	4632      	mov	r2, r6
    834c:	463b      	mov	r3, r7
    834e:	f004 fdef 	bl	cf30 <__aeabi_dsub>
{
    double hz,z,r,w;

    z  = x*x;
    w  = z*z;
    r  = z*(C1+z*(C2+z*C3)) + w*w*(C4+z*(C5+z*C6));
    8352:	a337      	add	r3, pc, #220	; (adr r3, 8430 <__kernel_cos+0x138>)
    8354:	e9d3 2300 	ldrd	r2, r3, [r3]
    hz = 0.5*z;
    w  = one-hz;
    return w + (((one-w)-hz) + (z*r-x*y));
    8358:	e9cd 0104 	strd	r0, r1, [r13, #16]
{
    double hz,z,r,w;

    z  = x*x;
    w  = z*z;
    r  = z*(C1+z*(C2+z*C3)) + w*w*(C4+z*(C5+z*C6));
    835c:	4620      	mov	r0, r4
    835e:	4629      	mov	r1, r5
    8360:	f004 ff9a 	bl	d298 <__aeabi_dmul>
    8364:	a334      	add	r3, pc, #208	; (adr r3, 8438 <__kernel_cos+0x140>)
    8366:	e9d3 2300 	ldrd	r2, r3, [r3]
    836a:	f004 fde1 	bl	cf30 <__aeabi_dsub>
    836e:	4602      	mov	r2, r0
    8370:	460b      	mov	r3, r1
    8372:	4620      	mov	r0, r4
    8374:	4629      	mov	r1, r5
    8376:	f004 ff8f 	bl	d298 <__aeabi_dmul>
    837a:	a331      	add	r3, pc, #196	; (adr r3, 8440 <__kernel_cos+0x148>)
    837c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8380:	f004 fdd8 	bl	cf34 <__adddf3>
    8384:	4602      	mov	r2, r0
    8386:	460b      	mov	r3, r1
    8388:	4620      	mov	r0, r4
    838a:	4629      	mov	r1, r5
    838c:	f004 ff84 	bl	d298 <__aeabi_dmul>
    8390:	4642      	mov	r2, r8
    8392:	4606      	mov	r6, r0
    8394:	460f      	mov	r7, r1
    8396:	464b      	mov	r3, r9
    8398:	4640      	mov	r0, r8
    839a:	4649      	mov	r1, r9
    839c:	f004 ff7c 	bl	d298 <__aeabi_dmul>
    83a0:	a329      	add	r3, pc, #164	; (adr r3, 8448 <__kernel_cos+0x150>)
    83a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    83a6:	4680      	mov	r8, r0
    83a8:	4689      	mov	r9, r1
    83aa:	4620      	mov	r0, r4
    83ac:	4629      	mov	r1, r5
    83ae:	f004 ff73 	bl	d298 <__aeabi_dmul>
    83b2:	a327      	add	r3, pc, #156	; (adr r3, 8450 <__kernel_cos+0x158>)
    83b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    83b8:	f004 fdbc 	bl	cf34 <__adddf3>
    83bc:	4602      	mov	r2, r0
    83be:	460b      	mov	r3, r1
    83c0:	4620      	mov	r0, r4
    83c2:	4629      	mov	r1, r5
    83c4:	f004 ff68 	bl	d298 <__aeabi_dmul>
    83c8:	a323      	add	r3, pc, #140	; (adr r3, 8458 <__kernel_cos+0x160>)
    83ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    83ce:	f004 fdaf 	bl	cf30 <__aeabi_dsub>
    83d2:	4602      	mov	r2, r0
    83d4:	460b      	mov	r3, r1
    83d6:	4640      	mov	r0, r8
    83d8:	4649      	mov	r1, r9
    83da:	f004 ff5d 	bl	d298 <__aeabi_dmul>
    83de:	4602      	mov	r2, r0
    83e0:	460b      	mov	r3, r1
    83e2:	4630      	mov	r0, r6
    83e4:	4639      	mov	r1, r7
    83e6:	f004 fda5 	bl	cf34 <__adddf3>
    83ea:	4602      	mov	r2, r0
    83ec:	460b      	mov	r3, r1
    hz = 0.5*z;
    w  = one-hz;
    return w + (((one-w)-hz) + (z*r-x*y));
    83ee:	4620      	mov	r0, r4
    83f0:	4629      	mov	r1, r5
    83f2:	f004 ff51 	bl	d298 <__aeabi_dmul>
    83f6:	e9dd 2302 	ldrd	r2, r3, [r13, #8]
    83fa:	4604      	mov	r4, r0
    83fc:	460d      	mov	r5, r1
    83fe:	e9dd 0100 	ldrd	r0, r1, [r13]
    8402:	f004 ff49 	bl	d298 <__aeabi_dmul>
    8406:	4602      	mov	r2, r0
    8408:	460b      	mov	r3, r1
    840a:	4620      	mov	r0, r4
    840c:	4629      	mov	r1, r5
    840e:	f004 fd8f 	bl	cf30 <__aeabi_dsub>
    8412:	4602      	mov	r2, r0
    8414:	460b      	mov	r3, r1
    8416:	e9dd 0104 	ldrd	r0, r1, [r13, #16]
    841a:	f004 fd8b 	bl	cf34 <__adddf3>
    841e:	4602      	mov	r2, r0
    8420:	460b      	mov	r3, r1
    8422:	4650      	mov	r0, r10
    8424:	4659      	mov	r1, r11
    8426:	f004 fd85 	bl	cf34 <__adddf3>
}
    842a:	b007      	add	sp, #28
    842c:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    8430:	19cb1590 	.word	0x19cb1590
    8434:	3efa01a0 	.word	0x3efa01a0
    8438:	16c15177 	.word	0x16c15177
    843c:	3f56c16c 	.word	0x3f56c16c
    8440:	5555554c 	.word	0x5555554c
    8444:	3fa55555 	.word	0x3fa55555
    8448:	be8838d4 	.word	0xbe8838d4
    844c:	bda8fae9 	.word	0xbda8fae9
    8450:	bdb4b1c4 	.word	0xbdb4b1c4
    8454:	3e21ee9e 	.word	0x3e21ee9e
    8458:	809c52ad 	.word	0x809c52ad
    845c:	3e927e4f 	.word	0x3e927e4f
    8460:	3fe00000 	.word	0x3fe00000
    8464:	3ff00000 	.word	0x3ff00000

00008468 <cos>:
#include "math_private.h"
#include "e_rem_pio2.c"

double
cos(double x)
{
    8468:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    /* High word of x. */
    GET_HIGH_WORD(ix,x);

    /* |x| ~< pi/4 */
    ix &= 0x7fffffff;
    if (ix <= 0x3fe921fb) {
    846c:	4aa0      	ldr	r2, [pc, #640]	; (86f0 <cos+0x288>)

    /* High word of x. */
    GET_HIGH_WORD(ix,x);

    /* |x| ~< pi/4 */
    ix &= 0x7fffffff;
    846e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    if (ix <= 0x3fe921fb) {
    8472:	4293      	cmp	r3, r2
#include "math_private.h"
#include "e_rem_pio2.c"

double
cos(double x)
{
    8474:	b093      	sub	sp, #76	; 0x4c
    8476:	4604      	mov	r4, r0
    8478:	460d      	mov	r5, r1
    /* High word of x. */
    GET_HIGH_WORD(ix,x);

    /* |x| ~< pi/4 */
    ix &= 0x7fffffff;
    if (ix <= 0x3fe921fb) {
    847a:	dc0c      	bgt.n	8496 <cos+0x2e>
        if (ix<0x3e46a09e)          /* if x < 2**-27 * sqrt(2) */
    847c:	4a9d      	ldr	r2, [pc, #628]	; (86f4 <cos+0x28c>)
    847e:	4293      	cmp	r3, r2
    8480:	dc04      	bgt.n	848c <cos+0x24>
            if (((int)x)==0) return 1.0; /* generate inexact */
    8482:	f005 f9a3 	bl	d7cc <__aeabi_d2iz>
    8486:	2800      	cmp	r0, #0
    8488:	f000 82b2 	beq.w	89f0 <cos+0x588>
        return __kernel_cos(x,z);
    848c:	4620      	mov	r0, r4
    848e:	4629      	mov	r1, r5
    8490:	2200      	movs	r2, #0
    8492:	2300      	movs	r3, #0
    8494:	e26d      	b.n	8972 <cos+0x50a>
    }

    /* cos(Inf or NaN) is NaN */
    else if (ix>=0x7ff00000) return x-x;
    8496:	4a98      	ldr	r2, [pc, #608]	; (86f8 <cos+0x290>)
    8498:	4293      	cmp	r3, r2
    849a:	dd04      	ble.n	84a6 <cos+0x3e>
    849c:	4602      	mov	r2, r0
    849e:	460b      	mov	r3, r1
    84a0:	f004 fd46 	bl	cf30 <__aeabi_dsub>
    84a4:	e2a5      	b.n	89f2 <cos+0x58a>
    ix = hx&0x7fffffff;
#if 0 /* Must be handled in caller. */
    if (ix<=0x3fe921fb)  /* |x| ~<= pi/4 , no need for reduction */
        {y[0] = x; y[1] = 0; return 0;}
#endif
    if (ix <= 0x400f6a7a) {     /* |x| ~<= 5pi/4 */
    84a6:	4b95      	ldr	r3, [pc, #596]	; (86fc <cos+0x294>)
    double tx[3],ty[2];
    int32_t e0,i,j,nx,n,ix,hx;
    u_int32_t low;

    GET_HIGH_WORD(hx,x);        /* high word of x */
    ix = hx&0x7fffffff;
    84a8:	f021 4c00 	bic.w	r12, r1, #2147483648	; 0x80000000
#if 0 /* Must be handled in caller. */
    if (ix<=0x3fe921fb)  /* |x| ~<= pi/4 , no need for reduction */
        {y[0] = x; y[1] = 0; return 0;}
#endif
    if (ix <= 0x400f6a7a) {     /* |x| ~<= 5pi/4 */
    84ac:	459c      	cmp	r12, r3
    double z,w,t,r,fn;
    double tx[3],ty[2];
    int32_t e0,i,j,nx,n,ix,hx;
    u_int32_t low;

    GET_HIGH_WORD(hx,x);        /* high word of x */
    84ae:	460f      	mov	r7, r1
    ix = hx&0x7fffffff;
#if 0 /* Must be handled in caller. */
    if (ix<=0x3fe921fb)  /* |x| ~<= pi/4 , no need for reduction */
        {y[0] = x; y[1] = 0; return 0;}
#endif
    if (ix <= 0x400f6a7a) {     /* |x| ~<= 5pi/4 */
    84b0:	dc7c      	bgt.n	85ac <cos+0x144>
        if ((ix & 0xfffff) == 0x921fb)  /* |x| ~= pi/2 or 2pi/2 */
    84b2:	4b93      	ldr	r3, [pc, #588]	; (8700 <cos+0x298>)
    84b4:	f3c1 0213 	ubfx	r2, r1, #0, #20
    84b8:	429a      	cmp	r2, r3
    84ba:	f000 8131 	beq.w	8720 <cos+0x2b8>
            goto medium;        /* cancellation -- use medium case */
        if (ix <= 0x4002d97c) { /* |x| ~<= 3pi/4 */
    84be:	4b91      	ldr	r3, [pc, #580]	; (8704 <cos+0x29c>)
    84c0:	459c      	cmp	r12, r3
    84c2:	dc39      	bgt.n	8538 <cos+0xd0>
            if (hx > 0) {
                z = x - pio2_1; /* one round good to 85 bits */
    84c4:	a37a      	add	r3, pc, #488	; (adr r3, 86b0 <cos+0x248>)
    84c6:	e9d3 2300 	ldrd	r2, r3, [r3]
#endif
    if (ix <= 0x400f6a7a) {     /* |x| ~<= 5pi/4 */
        if ((ix & 0xfffff) == 0x921fb)  /* |x| ~= pi/2 or 2pi/2 */
            goto medium;        /* cancellation -- use medium case */
        if (ix <= 0x4002d97c) { /* |x| ~<= 3pi/4 */
            if (hx > 0) {
    84ca:	2900      	cmp	r1, #0
    84cc:	dd19      	ble.n	8502 <cos+0x9a>
                z = x - pio2_1; /* one round good to 85 bits */
    84ce:	f004 fd2f 	bl	cf30 <__aeabi_dsub>
                y[0] = z - pio2_1t;
    84d2:	a379      	add	r3, pc, #484	; (adr r3, 86b8 <cos+0x250>)
    84d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    if (ix <= 0x400f6a7a) {     /* |x| ~<= 5pi/4 */
        if ((ix & 0xfffff) == 0x921fb)  /* |x| ~= pi/2 or 2pi/2 */
            goto medium;        /* cancellation -- use medium case */
        if (ix <= 0x4002d97c) { /* |x| ~<= 3pi/4 */
            if (hx > 0) {
                z = x - pio2_1; /* one round good to 85 bits */
    84d8:	4604      	mov	r4, r0
    84da:	460d      	mov	r5, r1
                y[0] = z - pio2_1t;
    84dc:	f004 fd28 	bl	cf30 <__aeabi_dsub>
    84e0:	4683      	mov	r11, r0
    84e2:	468a      	mov	r10, r1
                y[1] = (z-y[0])-pio2_1t;
    84e4:	4620      	mov	r0, r4
    84e6:	4629      	mov	r1, r5
    84e8:	465a      	mov	r2, r11
    84ea:	4653      	mov	r3, r10
    84ec:	f004 fd20 	bl	cf30 <__aeabi_dsub>
    84f0:	a371      	add	r3, pc, #452	; (adr r3, 86b8 <cos+0x250>)
    84f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    84f6:	f004 fd1b 	bl	cf30 <__aeabi_dsub>
    84fa:	4605      	mov	r5, r0
    84fc:	460c      	mov	r4, r1
                return 1;
    84fe:	2001      	movs	r0, #1
    8500:	e22b      	b.n	895a <cos+0x4f2>
            } else {
                z = x + pio2_1;
    8502:	f004 fd17 	bl	cf34 <__adddf3>
                y[0] = z + pio2_1t;
    8506:	a36c      	add	r3, pc, #432	; (adr r3, 86b8 <cos+0x250>)
    8508:	e9d3 2300 	ldrd	r2, r3, [r3]
                z = x - pio2_1; /* one round good to 85 bits */
                y[0] = z - pio2_1t;
                y[1] = (z-y[0])-pio2_1t;
                return 1;
            } else {
                z = x + pio2_1;
    850c:	4604      	mov	r4, r0
    850e:	460d      	mov	r5, r1
                y[0] = z + pio2_1t;
    8510:	f004 fd10 	bl	cf34 <__adddf3>
    8514:	4683      	mov	r11, r0
    8516:	468a      	mov	r10, r1
                y[1] = (z-y[0])+pio2_1t;
    8518:	4620      	mov	r0, r4
    851a:	4629      	mov	r1, r5
    851c:	465a      	mov	r2, r11
    851e:	4653      	mov	r3, r10
    8520:	f004 fd06 	bl	cf30 <__aeabi_dsub>
    8524:	a364      	add	r3, pc, #400	; (adr r3, 86b8 <cos+0x250>)
    8526:	e9d3 2300 	ldrd	r2, r3, [r3]
    852a:	f004 fd03 	bl	cf34 <__adddf3>
    852e:	4605      	mov	r5, r0
    8530:	460c      	mov	r4, r1
                return -1;
    8532:	f04f 30ff 	mov.w	r0, #4294967295
    8536:	e210      	b.n	895a <cos+0x4f2>
            }
        } else {
            if (hx > 0) {
    8538:	2900      	cmp	r1, #0
                z = x - 2*pio2_1;
    853a:	a361      	add	r3, pc, #388	; (adr r3, 86c0 <cos+0x258>)
    853c:	e9d3 2300 	ldrd	r2, r3, [r3]
                y[0] = z + pio2_1t;
                y[1] = (z-y[0])+pio2_1t;
                return -1;
            }
        } else {
            if (hx > 0) {
    8540:	dd19      	ble.n	8576 <cos+0x10e>
                z = x - 2*pio2_1;
    8542:	f004 fcf5 	bl	cf30 <__aeabi_dsub>
                y[0] = z - 2*pio2_1t;
    8546:	a360      	add	r3, pc, #384	; (adr r3, 86c8 <cos+0x260>)
    8548:	e9d3 2300 	ldrd	r2, r3, [r3]
                y[1] = (z-y[0])+pio2_1t;
                return -1;
            }
        } else {
            if (hx > 0) {
                z = x - 2*pio2_1;
    854c:	4604      	mov	r4, r0
    854e:	460d      	mov	r5, r1
                y[0] = z - 2*pio2_1t;
    8550:	f004 fcee 	bl	cf30 <__aeabi_dsub>
    8554:	4683      	mov	r11, r0
    8556:	468a      	mov	r10, r1
                y[1] = (z-y[0])-2*pio2_1t;
    8558:	4620      	mov	r0, r4
    855a:	4629      	mov	r1, r5
    855c:	465a      	mov	r2, r11
    855e:	4653      	mov	r3, r10
    8560:	f004 fce6 	bl	cf30 <__aeabi_dsub>
    8564:	a358      	add	r3, pc, #352	; (adr r3, 86c8 <cos+0x260>)
    8566:	e9d3 2300 	ldrd	r2, r3, [r3]
    856a:	f004 fce1 	bl	cf30 <__aeabi_dsub>
    856e:	4605      	mov	r5, r0
    8570:	460c      	mov	r4, r1
                return 2;
    8572:	2002      	movs	r0, #2
    8574:	e1f1      	b.n	895a <cos+0x4f2>
            } else {
                z = x + 2*pio2_1;
    8576:	f004 fcdd 	bl	cf34 <__adddf3>
                y[0] = z + 2*pio2_1t;
    857a:	a353      	add	r3, pc, #332	; (adr r3, 86c8 <cos+0x260>)
    857c:	e9d3 2300 	ldrd	r2, r3, [r3]
                z = x - 2*pio2_1;
                y[0] = z - 2*pio2_1t;
                y[1] = (z-y[0])-2*pio2_1t;
                return 2;
            } else {
                z = x + 2*pio2_1;
    8580:	4604      	mov	r4, r0
    8582:	460d      	mov	r5, r1
                y[0] = z + 2*pio2_1t;
    8584:	f004 fcd6 	bl	cf34 <__adddf3>
    8588:	4683      	mov	r11, r0
    858a:	468a      	mov	r10, r1
                y[1] = (z-y[0])+2*pio2_1t;
    858c:	4620      	mov	r0, r4
    858e:	4629      	mov	r1, r5
    8590:	465a      	mov	r2, r11
    8592:	4653      	mov	r3, r10
    8594:	f004 fccc 	bl	cf30 <__aeabi_dsub>
    8598:	a34b      	add	r3, pc, #300	; (adr r3, 86c8 <cos+0x260>)
    859a:	e9d3 2300 	ldrd	r2, r3, [r3]
    859e:	f004 fcc9 	bl	cf34 <__adddf3>
    85a2:	4605      	mov	r5, r0
    85a4:	460c      	mov	r4, r1
                return -2;
    85a6:	f06f 0001 	mvn.w	r0, #1
    85aa:	e1d6      	b.n	895a <cos+0x4f2>
            }
        }
    }
    if (ix <= 0x401c463b) {     /* |x| ~<= 9pi/4 */
    85ac:	4b56      	ldr	r3, [pc, #344]	; (8708 <cos+0x2a0>)
    85ae:	459c      	cmp	r12, r3
    85b0:	f300 80b2 	bgt.w	8718 <cos+0x2b0>
        if (ix <= 0x4015fdbc) { /* |x| ~<= 7pi/4 */
    85b4:	4b55      	ldr	r3, [pc, #340]	; (870c <cos+0x2a4>)
    85b6:	459c      	cmp	r12, r3
    85b8:	dc3d      	bgt.n	8636 <cos+0x1ce>
            if (ix == 0x4012d97c)   /* |x| ~= 3pi/2 */
    85ba:	4b55      	ldr	r3, [pc, #340]	; (8710 <cos+0x2a8>)
    85bc:	459c      	cmp	r12, r3
    85be:	f000 80af 	beq.w	8720 <cos+0x2b8>
                goto medium;
            if (hx > 0) {
                z = x - 3*pio2_1;
    85c2:	a343      	add	r3, pc, #268	; (adr r3, 86d0 <cos+0x268>)
    85c4:	e9d3 2300 	ldrd	r2, r3, [r3]
    }
    if (ix <= 0x401c463b) {     /* |x| ~<= 9pi/4 */
        if (ix <= 0x4015fdbc) { /* |x| ~<= 7pi/4 */
            if (ix == 0x4012d97c)   /* |x| ~= 3pi/2 */
                goto medium;
            if (hx > 0) {
    85c8:	2900      	cmp	r1, #0
    85ca:	dd19      	ble.n	8600 <cos+0x198>
                z = x - 3*pio2_1;
    85cc:	f004 fcb0 	bl	cf30 <__aeabi_dsub>
                y[0] = z - 3*pio2_1t;
    85d0:	a341      	add	r3, pc, #260	; (adr r3, 86d8 <cos+0x270>)
    85d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    if (ix <= 0x401c463b) {     /* |x| ~<= 9pi/4 */
        if (ix <= 0x4015fdbc) { /* |x| ~<= 7pi/4 */
            if (ix == 0x4012d97c)   /* |x| ~= 3pi/2 */
                goto medium;
            if (hx > 0) {
                z = x - 3*pio2_1;
    85d6:	4604      	mov	r4, r0
    85d8:	460d      	mov	r5, r1
                y[0] = z - 3*pio2_1t;
    85da:	f004 fca9 	bl	cf30 <__aeabi_dsub>
    85de:	4683      	mov	r11, r0
    85e0:	468a      	mov	r10, r1
                y[1] = (z-y[0])-3*pio2_1t;
    85e2:	4620      	mov	r0, r4
    85e4:	4629      	mov	r1, r5
    85e6:	465a      	mov	r2, r11
    85e8:	4653      	mov	r3, r10
    85ea:	f004 fca1 	bl	cf30 <__aeabi_dsub>
    85ee:	a33a      	add	r3, pc, #232	; (adr r3, 86d8 <cos+0x270>)
    85f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    85f4:	f004 fc9c 	bl	cf30 <__aeabi_dsub>
    85f8:	4605      	mov	r5, r0
    85fa:	460c      	mov	r4, r1
                return 3;
    85fc:	2003      	movs	r0, #3
    85fe:	e1ac      	b.n	895a <cos+0x4f2>
            } else {
                z = x + 3*pio2_1;
    8600:	f004 fc98 	bl	cf34 <__adddf3>
                y[0] = z + 3*pio2_1t;
    8604:	a334      	add	r3, pc, #208	; (adr r3, 86d8 <cos+0x270>)
    8606:	e9d3 2300 	ldrd	r2, r3, [r3]
                z = x - 3*pio2_1;
                y[0] = z - 3*pio2_1t;
                y[1] = (z-y[0])-3*pio2_1t;
                return 3;
            } else {
                z = x + 3*pio2_1;
    860a:	4604      	mov	r4, r0
    860c:	460d      	mov	r5, r1
                y[0] = z + 3*pio2_1t;
    860e:	f004 fc91 	bl	cf34 <__adddf3>
    8612:	4683      	mov	r11, r0
    8614:	468a      	mov	r10, r1
                y[1] = (z-y[0])+3*pio2_1t;
    8616:	4620      	mov	r0, r4
    8618:	4629      	mov	r1, r5
    861a:	465a      	mov	r2, r11
    861c:	4653      	mov	r3, r10
    861e:	f004 fc87 	bl	cf30 <__aeabi_dsub>
    8622:	a32d      	add	r3, pc, #180	; (adr r3, 86d8 <cos+0x270>)
    8624:	e9d3 2300 	ldrd	r2, r3, [r3]
    8628:	f004 fc84 	bl	cf34 <__adddf3>
    862c:	4605      	mov	r5, r0
    862e:	460c      	mov	r4, r1
                return -3;
    8630:	f06f 0002 	mvn.w	r0, #2
    8634:	e191      	b.n	895a <cos+0x4f2>
            }
        } else {
            if (ix == 0x401921fb)   /* |x| ~= 4pi/2 */
    8636:	4b37      	ldr	r3, [pc, #220]	; (8714 <cos+0x2ac>)
    8638:	459c      	cmp	r12, r3
    863a:	d071      	beq.n	8720 <cos+0x2b8>
                goto medium;
            if (hx > 0) {
                z = x - 4*pio2_1;
    863c:	a328      	add	r3, pc, #160	; (adr r3, 86e0 <cos+0x278>)
    863e:	e9d3 2300 	ldrd	r2, r3, [r3]
                return -3;
            }
        } else {
            if (ix == 0x401921fb)   /* |x| ~= 4pi/2 */
                goto medium;
            if (hx > 0) {
    8642:	2900      	cmp	r1, #0
    8644:	dd19      	ble.n	867a <cos+0x212>
                z = x - 4*pio2_1;
    8646:	f004 fc73 	bl	cf30 <__aeabi_dsub>
                y[0] = z - 4*pio2_1t;
    864a:	a327      	add	r3, pc, #156	; (adr r3, 86e8 <cos+0x280>)
    864c:	e9d3 2300 	ldrd	r2, r3, [r3]
            }
        } else {
            if (ix == 0x401921fb)   /* |x| ~= 4pi/2 */
                goto medium;
            if (hx > 0) {
                z = x - 4*pio2_1;
    8650:	4604      	mov	r4, r0
    8652:	460d      	mov	r5, r1
                y[0] = z - 4*pio2_1t;
    8654:	f004 fc6c 	bl	cf30 <__aeabi_dsub>
    8658:	4683      	mov	r11, r0
    865a:	468a      	mov	r10, r1
                y[1] = (z-y[0])-4*pio2_1t;
    865c:	4620      	mov	r0, r4
    865e:	4629      	mov	r1, r5
    8660:	465a      	mov	r2, r11
    8662:	4653      	mov	r3, r10
    8664:	f004 fc64 	bl	cf30 <__aeabi_dsub>
    8668:	a31f      	add	r3, pc, #124	; (adr r3, 86e8 <cos+0x280>)
    866a:	e9d3 2300 	ldrd	r2, r3, [r3]
    866e:	f004 fc5f 	bl	cf30 <__aeabi_dsub>
    8672:	4605      	mov	r5, r0
    8674:	460c      	mov	r4, r1
                return 4;
    8676:	2004      	movs	r0, #4
    8678:	e16f      	b.n	895a <cos+0x4f2>
            } else {
                z = x + 4*pio2_1;
    867a:	f004 fc5b 	bl	cf34 <__adddf3>
                y[0] = z + 4*pio2_1t;
    867e:	a31a      	add	r3, pc, #104	; (adr r3, 86e8 <cos+0x280>)
    8680:	e9d3 2300 	ldrd	r2, r3, [r3]
                z = x - 4*pio2_1;
                y[0] = z - 4*pio2_1t;
                y[1] = (z-y[0])-4*pio2_1t;
                return 4;
            } else {
                z = x + 4*pio2_1;
    8684:	4604      	mov	r4, r0
    8686:	460d      	mov	r5, r1
                y[0] = z + 4*pio2_1t;
    8688:	f004 fc54 	bl	cf34 <__adddf3>
    868c:	4683      	mov	r11, r0
    868e:	468a      	mov	r10, r1
                y[1] = (z-y[0])+4*pio2_1t;
    8690:	4620      	mov	r0, r4
    8692:	4629      	mov	r1, r5
    8694:	465a      	mov	r2, r11
    8696:	4653      	mov	r3, r10
    8698:	f004 fc4a 	bl	cf30 <__aeabi_dsub>
    869c:	a312      	add	r3, pc, #72	; (adr r3, 86e8 <cos+0x280>)
    869e:	e9d3 2300 	ldrd	r2, r3, [r3]
    86a2:	f004 fc47 	bl	cf34 <__adddf3>
    86a6:	4605      	mov	r5, r0
    86a8:	460c      	mov	r4, r1
                return -4;
    86aa:	f06f 0003 	mvn.w	r0, #3
    86ae:	e154      	b.n	895a <cos+0x4f2>
    86b0:	54400000 	.word	0x54400000
    86b4:	3ff921fb 	.word	0x3ff921fb
    86b8:	1a626331 	.word	0x1a626331
    86bc:	3dd0b461 	.word	0x3dd0b461
    86c0:	54400000 	.word	0x54400000
    86c4:	400921fb 	.word	0x400921fb
    86c8:	1a626331 	.word	0x1a626331
    86cc:	3de0b461 	.word	0x3de0b461
    86d0:	7f300000 	.word	0x7f300000
    86d4:	4012d97c 	.word	0x4012d97c
    86d8:	a79394ca 	.word	0xa79394ca
    86dc:	3de90e91 	.word	0x3de90e91
    86e0:	54400000 	.word	0x54400000
    86e4:	401921fb 	.word	0x401921fb
    86e8:	1a626331 	.word	0x1a626331
    86ec:	3df0b461 	.word	0x3df0b461
    86f0:	3fe921fb 	.word	0x3fe921fb
    86f4:	3e46a09d 	.word	0x3e46a09d
    86f8:	7fefffff 	.word	0x7fefffff
    86fc:	400f6a7a 	.word	0x400f6a7a
    8700:	000921fb 	.word	0x000921fb
    8704:	4002d97c 	.word	0x4002d97c
    8708:	401c463b 	.word	0x401c463b
    870c:	4015fdbc 	.word	0x4015fdbc
    8710:	4012d97c 	.word	0x4012d97c
    8714:	401921fb 	.word	0x401921fb
            }
        }
    }
    if (ix<0x413921fb) { /* |x| ~< 2^20*(pi/2), medium size */
    8718:	4ba5      	ldr	r3, [pc, #660]	; (89b0 <cos+0x548>)
    871a:	459c      	cmp	r12, r3
    871c:	f300 80c0 	bgt.w	88a0 <cos+0x438>
medium:
        /* Use a specialized rint() to get fn.  Assume round-to-nearest. */
        STRICT_ASSIGN(double,fn,x*invpio2+0x1.8p52);
    8720:	a395      	add	r3, pc, #596	; (adr r3, 8978 <cos+0x510>)
    8722:	e9d3 2300 	ldrd	r2, r3, [r3]
    8726:	4620      	mov	r0, r4
    8728:	4629      	mov	r1, r5
    872a:	f8cd c00c 	str.w	r12, [r13, #12]
    872e:	f004 fdb3 	bl	d298 <__aeabi_dmul>
    8732:	2200      	movs	r2, #0
    8734:	4b9f      	ldr	r3, [pc, #636]	; (89b4 <cos+0x54c>)
    8736:	f004 fbfd 	bl	cf34 <__adddf3>
        fn = fn-0x1.8p52;
    873a:	2200      	movs	r2, #0
    873c:	4b9d      	ldr	r3, [pc, #628]	; (89b4 <cos+0x54c>)
    873e:	f004 fbf7 	bl	cf30 <__aeabi_dsub>
    8742:	4680      	mov	r8, r0
    8744:	4689      	mov	r9, r1
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
    8746:	f005 f841 	bl	d7cc <__aeabi_d2iz>
#endif
        r  = x-fn*pio2_1;
    874a:	a38d      	add	r3, pc, #564	; (adr r3, 8980 <cos+0x518>)
    874c:	e9d3 2300 	ldrd	r2, r3, [r3]
        STRICT_ASSIGN(double,fn,x*invpio2+0x1.8p52);
        fn = fn-0x1.8p52;
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
    8750:	9007      	str	r0, [sp, #28]
#endif
        r  = x-fn*pio2_1;
    8752:	4649      	mov	r1, r9
    8754:	4640      	mov	r0, r8
    8756:	f004 fd9f 	bl	d298 <__aeabi_dmul>
    875a:	4602      	mov	r2, r0
    875c:	460b      	mov	r3, r1
    875e:	4620      	mov	r0, r4
    8760:	4629      	mov	r1, r5
    8762:	f004 fbe5 	bl	cf30 <__aeabi_dsub>
        w  = fn*pio2_1t;    /* 1st round good to 85 bit */
    8766:	a388      	add	r3, pc, #544	; (adr r3, 8988 <cos+0x520>)
    8768:	e9d3 2300 	ldrd	r2, r3, [r3]
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
#endif
        r  = x-fn*pio2_1;
    876c:	4604      	mov	r4, r0
    876e:	460d      	mov	r5, r1
        w  = fn*pio2_1t;    /* 1st round good to 85 bit */
    8770:	4640      	mov	r0, r8
    8772:	4649      	mov	r1, r9
    8774:	f004 fd90 	bl	d298 <__aeabi_dmul>
    8778:	4606      	mov	r6, r0
    877a:	460f      	mov	r7, r1
        {
            u_int32_t high;
            j  = ix>>20;
            y[0] = r-w;
    877c:	463b      	mov	r3, r7
    877e:	4620      	mov	r0, r4
    8780:	4629      	mov	r1, r5
    8782:	4632      	mov	r2, r6
    8784:	f004 fbd4 	bl	cf30 <__aeabi_dsub>
#endif
        r  = x-fn*pio2_1;
        w  = fn*pio2_1t;    /* 1st round good to 85 bit */
        {
            u_int32_t high;
            j  = ix>>20;
    8788:	f8dd c00c 	ldr.w	r12, [r13, #12]
            y[0] = r-w;
            GET_HIGH_WORD(high,y[0]);
            i = j-((high>>20)&0x7ff);
    878c:	f3c1 530a 	ubfx	r3, r1, #20, #11
#endif
        r  = x-fn*pio2_1;
        w  = fn*pio2_1t;    /* 1st round good to 85 bit */
        {
            u_int32_t high;
            j  = ix>>20;
    8790:	ea4f 5c2c 	mov.w	r12, r12, asr #20
            y[0] = r-w;
            GET_HIGH_WORD(high,y[0]);
            i = j-((high>>20)&0x7ff);
    8794:	ebc3 030c 	rsb	r3, r3, r12
            if (i>16) { /* 2nd iteration needed, good to 118 */
    8798:	2b10      	cmp	r3, #16
        r  = x-fn*pio2_1;
        w  = fn*pio2_1t;    /* 1st round good to 85 bit */
        {
            u_int32_t high;
            j  = ix>>20;
            y[0] = r-w;
    879a:	4683      	mov	r11, r0
    879c:	468a      	mov	r10, r1
            GET_HIGH_WORD(high,y[0]);
            i = j-((high>>20)&0x7ff);
            if (i>16) { /* 2nd iteration needed, good to 118 */
    879e:	dd71      	ble.n	8884 <cos+0x41c>
                t  = r;
                w  = fn*pio2_2;
    87a0:	a37b      	add	r3, pc, #492	; (adr r3, 8990 <cos+0x528>)
    87a2:	e9d3 2300 	ldrd	r2, r3, [r3]
    87a6:	4640      	mov	r0, r8
    87a8:	4649      	mov	r1, r9
    87aa:	f8cd c00c 	str.w	r12, [r13, #12]
    87ae:	f004 fd73 	bl	d298 <__aeabi_dmul>
    87b2:	4606      	mov	r6, r0
    87b4:	460f      	mov	r7, r1
                r  = t-w;
    87b6:	4632      	mov	r2, r6
    87b8:	463b      	mov	r3, r7
    87ba:	4620      	mov	r0, r4
    87bc:	4629      	mov	r1, r5
    87be:	f004 fbb7 	bl	cf30 <__aeabi_dsub>
    87c2:	e9cd 0104 	strd	r0, r1, [r13, #16]
                w  = fn*pio2_2t-((t-r)-w);
    87c6:	e9dd 2304 	ldrd	r2, r3, [r13, #16]
    87ca:	4620      	mov	r0, r4
    87cc:	4629      	mov	r1, r5
    87ce:	f004 fbaf 	bl	cf30 <__aeabi_dsub>
    87d2:	4632      	mov	r2, r6
    87d4:	463b      	mov	r3, r7
    87d6:	f004 fbab 	bl	cf30 <__aeabi_dsub>
    87da:	a36f      	add	r3, pc, #444	; (adr r3, 8998 <cos+0x530>)
    87dc:	e9d3 2300 	ldrd	r2, r3, [r3]
    87e0:	4604      	mov	r4, r0
    87e2:	460d      	mov	r5, r1
    87e4:	4640      	mov	r0, r8
    87e6:	4649      	mov	r1, r9
    87e8:	f004 fd56 	bl	d298 <__aeabi_dmul>
    87ec:	4622      	mov	r2, r4
    87ee:	462b      	mov	r3, r5
    87f0:	f004 fb9e 	bl	cf30 <__aeabi_dsub>
    87f4:	4606      	mov	r6, r0
    87f6:	460f      	mov	r7, r1
                y[0] = r-w;
    87f8:	463b      	mov	r3, r7
    87fa:	e9dd 0104 	ldrd	r0, r1, [r13, #16]
    87fe:	4632      	mov	r2, r6
    8800:	f004 fb96 	bl	cf30 <__aeabi_dsub>
                GET_HIGH_WORD(high,y[0]);
                i = j-((high>>20)&0x7ff);
    8804:	f8dd c00c 	ldr.w	r12, [r13, #12]
    8808:	f3c1 530a 	ubfx	r3, r1, #20, #11
    880c:	ebc3 0c0c 	rsb	r12, r3, r12
                if (i>49)  { /* 3rd iteration need, 151 bits acc */
    8810:	f1bc 0f31 	cmp.w	r12, #49	; 0x31
            if (i>16) { /* 2nd iteration needed, good to 118 */
                t  = r;
                w  = fn*pio2_2;
                r  = t-w;
                w  = fn*pio2_2t-((t-r)-w);
                y[0] = r-w;
    8814:	4683      	mov	r11, r0
    8816:	468a      	mov	r10, r1
                GET_HIGH_WORD(high,y[0]);
                i = j-((high>>20)&0x7ff);
                if (i>49)  { /* 3rd iteration need, 151 bits acc */
    8818:	dd32      	ble.n	8880 <cos+0x418>
                    t  = r; /* will cover all possible cases */
                    w  = fn*pio2_3;
    881a:	a361      	add	r3, pc, #388	; (adr r3, 89a0 <cos+0x538>)
    881c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8820:	4640      	mov	r0, r8
    8822:	4649      	mov	r1, r9
    8824:	f004 fd38 	bl	d298 <__aeabi_dmul>
    8828:	4606      	mov	r6, r0
    882a:	460f      	mov	r7, r1
                    r  = t-w;
    882c:	4632      	mov	r2, r6
    882e:	463b      	mov	r3, r7
    8830:	e9dd 0104 	ldrd	r0, r1, [r13, #16]
    8834:	f004 fb7c 	bl	cf30 <__aeabi_dsub>
    8838:	4604      	mov	r4, r0
    883a:	460d      	mov	r5, r1
                    w  = fn*pio2_3t-((t-r)-w);
    883c:	4622      	mov	r2, r4
    883e:	462b      	mov	r3, r5
    8840:	e9dd 0104 	ldrd	r0, r1, [r13, #16]
    8844:	f004 fb74 	bl	cf30 <__aeabi_dsub>
    8848:	4632      	mov	r2, r6
    884a:	463b      	mov	r3, r7
    884c:	f004 fb70 	bl	cf30 <__aeabi_dsub>
    8850:	a355      	add	r3, pc, #340	; (adr r3, 89a8 <cos+0x540>)
    8852:	e9d3 2300 	ldrd	r2, r3, [r3]
    8856:	4606      	mov	r6, r0
    8858:	460f      	mov	r7, r1
    885a:	4640      	mov	r0, r8
    885c:	4649      	mov	r1, r9
    885e:	f004 fd1b 	bl	d298 <__aeabi_dmul>
    8862:	4632      	mov	r2, r6
    8864:	463b      	mov	r3, r7
    8866:	f004 fb63 	bl	cf30 <__aeabi_dsub>
    886a:	4606      	mov	r6, r0
    886c:	460f      	mov	r7, r1
                    y[0] = r-w;
    886e:	4620      	mov	r0, r4
    8870:	4629      	mov	r1, r5
    8872:	4632      	mov	r2, r6
    8874:	463b      	mov	r3, r7
    8876:	f004 fb5b 	bl	cf30 <__aeabi_dsub>
    887a:	4683      	mov	r11, r0
    887c:	468a      	mov	r10, r1
    887e:	e001      	b.n	8884 <cos+0x41c>
            GET_HIGH_WORD(high,y[0]);
            i = j-((high>>20)&0x7ff);
            if (i>16) { /* 2nd iteration needed, good to 118 */
                t  = r;
                w  = fn*pio2_2;
                r  = t-w;
    8880:	e9dd 4504 	ldrd	r4, r5, [r13, #16]
                    w  = fn*pio2_3t-((t-r)-w);
                    y[0] = r-w;
                }
            }
        }
        y[1] = (r-y[0])-w;
    8884:	4620      	mov	r0, r4
    8886:	4629      	mov	r1, r5
    8888:	465a      	mov	r2, r11
    888a:	4653      	mov	r3, r10
    888c:	f004 fb50 	bl	cf30 <__aeabi_dsub>
    8890:	4632      	mov	r2, r6
    8892:	463b      	mov	r3, r7
    8894:	f004 fb4c 	bl	cf30 <__aeabi_dsub>
    8898:	4605      	mov	r5, r0
    889a:	460c      	mov	r4, r1
        return n;
    889c:	9807      	ldr	r0, [sp, #28]
    889e:	e05c      	b.n	895a <cos+0x4f2>
    }
    /*
     * all other (large) arguments
     */
    if (ix>=0x7ff00000) {       /* x is inf or NaN */
    88a0:	4594      	cmp	r12, r2
    88a2:	dd09      	ble.n	88b8 <cos+0x450>
        y[0]=y[1]=x-x;
    88a4:	4602      	mov	r2, r0
    88a6:	460b      	mov	r3, r1
    88a8:	f004 fb42 	bl	cf30 <__aeabi_dsub>
    88ac:	4605      	mov	r5, r0
    88ae:	4683      	mov	r11, r0
    88b0:	460c      	mov	r4, r1
    88b2:	468a      	mov	r10, r1
        return 0;
    88b4:	2000      	movs	r0, #0
    88b6:	e050      	b.n	895a <cos+0x4f2>
    }
    /* set z = scalbn(|x|,ilogb(x)-23) */
    GET_LOW_WORD(low,x);
    e0  = (ix>>20)-1046;    /* e0 = ilogb(z)-23; */
    88b8:	ea4f 582c 	mov.w	r8, r12, asr #20
    88bc:	f2a8 4816 	subw	r8, r8, #1046	; 0x416
    INSERT_WORDS(z, ix - ((int32_t)(e0<<20)), low);
    88c0:	ea4f 5308 	mov.w	r3, r8, lsl #20
    88c4:	ebc3 010c 	rsb	r1, r3, r12
    88c8:	460d      	mov	r5, r1
    88ca:	4604      	mov	r4, r0
    for (i=0; i<2; i++) {
        tx[i] = (double)((int32_t)(z));
    88cc:	f004 ff7e 	bl	d7cc <__aeabi_d2iz>
    88d0:	f004 fc7c 	bl	d1cc <__aeabi_i2d>
    88d4:	4602      	mov	r2, r0
    88d6:	460b      	mov	r3, r1
        z     = (z-tx[i])*two24;
    88d8:	4620      	mov	r0, r4
    88da:	4629      	mov	r1, r5
    /* set z = scalbn(|x|,ilogb(x)-23) */
    GET_LOW_WORD(low,x);
    e0  = (ix>>20)-1046;    /* e0 = ilogb(z)-23; */
    INSERT_WORDS(z, ix - ((int32_t)(e0<<20)), low);
    for (i=0; i<2; i++) {
        tx[i] = (double)((int32_t)(z));
    88dc:	e9cd 230c 	strd	r2, r3, [r13, #48]	; 0x30
        z     = (z-tx[i])*two24;
    88e0:	f004 fb26 	bl	cf30 <__aeabi_dsub>
    88e4:	2200      	movs	r2, #0
    88e6:	4b34      	ldr	r3, [pc, #208]	; (89b8 <cos+0x550>)
    88e8:	f004 fcd6 	bl	d298 <__aeabi_dmul>
    88ec:	4604      	mov	r4, r0
    88ee:	460d      	mov	r5, r1
    /* set z = scalbn(|x|,ilogb(x)-23) */
    GET_LOW_WORD(low,x);
    e0  = (ix>>20)-1046;    /* e0 = ilogb(z)-23; */
    INSERT_WORDS(z, ix - ((int32_t)(e0<<20)), low);
    for (i=0; i<2; i++) {
        tx[i] = (double)((int32_t)(z));
    88f0:	f004 ff6c 	bl	d7cc <__aeabi_d2iz>
    88f4:	f004 fc6a 	bl	d1cc <__aeabi_i2d>
    88f8:	4602      	mov	r2, r0
    88fa:	460b      	mov	r3, r1
        z     = (z-tx[i])*two24;
    88fc:	4620      	mov	r0, r4
    88fe:	4629      	mov	r1, r5
    /* set z = scalbn(|x|,ilogb(x)-23) */
    GET_LOW_WORD(low,x);
    e0  = (ix>>20)-1046;    /* e0 = ilogb(z)-23; */
    INSERT_WORDS(z, ix - ((int32_t)(e0<<20)), low);
    for (i=0; i<2; i++) {
        tx[i] = (double)((int32_t)(z));
    8900:	e9cd 230e 	strd	r2, r3, [r13, #56]	; 0x38
        z     = (z-tx[i])*two24;
    8904:	f004 fb14 	bl	cf30 <__aeabi_dsub>
    8908:	2200      	movs	r2, #0
    890a:	4b2b      	ldr	r3, [pc, #172]	; (89b8 <cos+0x550>)
    890c:	f004 fcc4 	bl	d298 <__aeabi_dmul>
    }
    tx[2] = z;
    8910:	e9cd 0110 	strd	r0, r1, [r13, #64]	; 0x40
    nx = 3;
    8914:	2403      	movs	r4, #3
    8916:	aa0c      	add	r2, sp, #48	; 0x30
    while (tx[nx-1]==zero) nx--; /* skip zero term */
    8918:	1e65      	subs	r5, r4, #1
    891a:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
    891e:	e9d3 0100 	ldrd	r0, r1, [r3]
    8922:	2200      	movs	r2, #0
    8924:	2300      	movs	r3, #0
    8926:	f004 ff1f 	bl	d768 <__aeabi_dcmpeq>
    892a:	b108      	cbz	r0, 8930 <cos+0x4c8>
    892c:	462c      	mov	r4, r5
    892e:	e7f2      	b.n	8916 <cos+0x4ae>
    n  =  __kernel_rem_pio2(tx,ty,e0,nx,1);
    8930:	2301      	movs	r3, #1
    8932:	9300      	str	r3, [sp, #0]
    8934:	4642      	mov	r2, r8
    8936:	4623      	mov	r3, r4
    8938:	a80c      	add	r0, sp, #48	; 0x30
    893a:	a908      	add	r1, sp, #32
    893c:	f000 fa74 	bl	8e28 <__kernel_rem_pio2>
    8940:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    if (hx<0) {y[0] = -ty[0]; y[1] = -ty[1]; return -n;}
    8942:	2f00      	cmp	r7, #0
    8944:	aa08      	add	r2, sp, #32
    8946:	ca2c      	ldmia	r2, {r2, r3, r5}
    8948:	bfb8      	it	lt
    894a:	f104 4400 	addlt.w	r4, r4, #2147483648	; 0x80000000
    894e:	4693      	mov	r11, r2
    8950:	bfba      	itte	lt
    8952:	f103 4a00 	addlt.w	r10, r3, #2147483648	; 0x80000000
    8956:	4240      	neglt	r0, r0
    y[0] = ty[0];
    8958:	469a      	movge	r10, r3

    /* argument reduction needed */
    else {
        n = __ieee754_rem_pio2(x,y);
        switch (n&3) {
    895a:	f000 0003 	and.w	r0, r0, #3
    895e:	2801      	cmp	r0, #1
    8960:	d02c      	beq.n	89bc <cos+0x554>
    8962:	2802      	cmp	r0, #2
    8964:	d032      	beq.n	89cc <cos+0x564>
    8966:	2800      	cmp	r0, #0
    8968:	d139      	bne.n	89de <cos+0x576>
            case 0:
                return  __kernel_cos(y[0],y[1]);
    896a:	4658      	mov	r0, r11
    896c:	4651      	mov	r1, r10
    896e:	462a      	mov	r2, r5
    8970:	4623      	mov	r3, r4
    8972:	f7ff fcc1 	bl	82f8 <__kernel_cos>
    8976:	e03c      	b.n	89f2 <cos+0x58a>
    8978:	6dc9c883 	.word	0x6dc9c883
    897c:	3fe45f30 	.word	0x3fe45f30
    8980:	54400000 	.word	0x54400000
    8984:	3ff921fb 	.word	0x3ff921fb
    8988:	1a626331 	.word	0x1a626331
    898c:	3dd0b461 	.word	0x3dd0b461
    8990:	1a600000 	.word	0x1a600000
    8994:	3dd0b461 	.word	0x3dd0b461
    8998:	2e037073 	.word	0x2e037073
    899c:	3ba3198a 	.word	0x3ba3198a
    89a0:	2e000000 	.word	0x2e000000
    89a4:	3ba3198a 	.word	0x3ba3198a
    89a8:	252049c1 	.word	0x252049c1
    89ac:	397b839a 	.word	0x397b839a
    89b0:	413921fa 	.word	0x413921fa
    89b4:	43380000 	.word	0x43380000
    89b8:	41700000 	.word	0x41700000
            case 1:
                return -__kernel_sin(y[0],y[1],1);
    89bc:	9000      	str	r0, [sp, #0]
    89be:	4651      	mov	r1, r10
    89c0:	4658      	mov	r0, r11
    89c2:	462a      	mov	r2, r5
    89c4:	4623      	mov	r3, r4
    89c6:	f7fe fe5f 	bl	7688 <__kernel_sin>
    89ca:	e005      	b.n	89d8 <cos+0x570>
            case 2:
                return -__kernel_cos(y[0],y[1]);
    89cc:	4658      	mov	r0, r11
    89ce:	4651      	mov	r1, r10
    89d0:	462a      	mov	r2, r5
    89d2:	4623      	mov	r3, r4
    89d4:	f7ff fc90 	bl	82f8 <__kernel_cos>
    89d8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    89dc:	e009      	b.n	89f2 <cos+0x58a>
            default:
                return  __kernel_sin(y[0],y[1],1);
    89de:	2301      	movs	r3, #1
    89e0:	9300      	str	r3, [sp, #0]
    89e2:	4658      	mov	r0, r11
    89e4:	4651      	mov	r1, r10
    89e6:	462a      	mov	r2, r5
    89e8:	4623      	mov	r3, r4
    89ea:	f7fe fe4d 	bl	7688 <__kernel_sin>
    89ee:	e000      	b.n	89f2 <cos+0x58a>

    /* |x| ~< pi/4 */
    ix &= 0x7fffffff;
    if (ix <= 0x3fe921fb) {
        if (ix<0x3e46a09e)          /* if x < 2**-27 * sqrt(2) */
            if (((int)x)==0) return 1.0; /* generate inexact */
    89f0:	4901      	ldr	r1, [pc, #4]	; (89f8 <cos+0x590>)
                return -__kernel_cos(y[0],y[1]);
            default:
                return  __kernel_sin(y[0],y[1],1);
        }
    }
}
    89f2:	b013      	add	sp, #76	; 0x4c
    89f4:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    89f8:	3ff00000 	.word	0x3ff00000
    89fc:	f3af 8000 	nop.w

00008a00 <cosf>:
c3pio2 = 3*M_PI_2,          /* 0x4012D97C, 0x7F3321D2 */
c4pio2 = 4*M_PI_2;          /* 0x401921FB, 0x54442D18 */

float
cosf(float x)
{
    8a00:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}
    int32_t n, hx, ix;

    GET_FLOAT_WORD(hx,x);
    ix = hx & 0x7fffffff;

    if (ix <= 0x3f490fda) {     /* |x| ~<= pi/4 */
    8a04:	4a82      	ldr	r2, [pc, #520]	; (8c10 <cosf+0x210>)
{
    double y;
    int32_t n, hx, ix;

    GET_FLOAT_WORD(hx,x);
    ix = hx & 0x7fffffff;
    8a06:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000

    if (ix <= 0x3f490fda) {     /* |x| ~<= pi/4 */
    8a0a:	4293      	cmp	r3, r2
c3pio2 = 3*M_PI_2,          /* 0x4012D97C, 0x7F3321D2 */
c4pio2 = 4*M_PI_2;          /* 0x401921FB, 0x54442D18 */

float
cosf(float x)
{
    8a0c:	b086      	sub	sp, #24
    8a0e:	4605      	mov	r5, r0
    double y;
    int32_t n, hx, ix;

    GET_FLOAT_WORD(hx,x);
    8a10:	4604      	mov	r4, r0
    ix = hx & 0x7fffffff;

    if (ix <= 0x3f490fda) {     /* |x| ~<= pi/4 */
    8a12:	dc0b      	bgt.n	8a2c <cosf+0x2c>
        if (ix<0x39800000)      /* |x| < 2**-12 */
    8a14:	f1b3 5f66 	cmp.w	r3, #964689920	; 0x39800000
    8a18:	da04      	bge.n	8a24 <cosf+0x24>
            if (((int)x)==0) return 1.0; /* 1 with inexact if x != 0 */
    8a1a:	f005 f9cd 	bl	ddb8 <__aeabi_f2iz>
    8a1e:	2800      	cmp	r0, #0
    8a20:	f000 80c9 	beq.w	8bb6 <cosf+0x1b6>
        return __kernel_cosdf(x);
    8a24:	4628      	mov	r0, r5
    8a26:	f004 fbe3 	bl	d1f0 <__aeabi_f2d>
    8a2a:	e038      	b.n	8a9e <cosf+0x9e>
    }
    if (ix<=0x407b53d1) {       /* |x| ~<= 5*pi/4 */
    8a2c:	4a79      	ldr	r2, [pc, #484]	; (8c14 <cosf+0x214>)
    8a2e:	4293      	cmp	r3, r2
    8a30:	dc22      	bgt.n	8a78 <cosf+0x78>
        if (ix>0x4016cbe3)      /* |x|  ~> 3*pi/4 */
    8a32:	4a79      	ldr	r2, [pc, #484]	; (8c18 <cosf+0x218>)
    8a34:	4293      	cmp	r3, r2
    8a36:	dd0d      	ble.n	8a54 <cosf+0x54>
            return -__kernel_cosdf(x + (hx > 0 ? -c2pio2 : c2pio2));
    8a38:	f004 fbda 	bl	d1f0 <__aeabi_f2d>
    8a3c:	2d00      	cmp	r5, #0
    8a3e:	dc03      	bgt.n	8a48 <cosf+0x48>
    8a40:	a35f      	add	r3, pc, #380	; (adr r3, 8bc0 <cosf+0x1c0>)
    8a42:	e9d3 2300 	ldrd	r2, r3, [r3]
    8a46:	e002      	b.n	8a4e <cosf+0x4e>
    8a48:	a35f      	add	r3, pc, #380	; (adr r3, 8bc8 <cosf+0x1c8>)
    8a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8a4e:	f004 fa71 	bl	cf34 <__adddf3>
    8a52:	e0a4      	b.n	8b9e <cosf+0x19e>
        else {
            if (hx>0)
    8a54:	2800      	cmp	r0, #0
    8a56:	dd07      	ble.n	8a68 <cosf+0x68>
                return __kernel_sindf(c1pio2 - x);
    8a58:	f004 fbca 	bl	d1f0 <__aeabi_f2d>
    8a5c:	4602      	mov	r2, r0
    8a5e:	460b      	mov	r3, r1
    8a60:	a15b      	add	r1, pc, #364	; (adr r1, 8bd0 <cosf+0x1d0>)
    8a62:	e9d1 0100 	ldrd	r0, r1, [r1]
    8a66:	e02e      	b.n	8ac6 <cosf+0xc6>
            else
                return __kernel_sindf(x + c1pio2);
    8a68:	f004 fbc2 	bl	d1f0 <__aeabi_f2d>
    8a6c:	a358      	add	r3, pc, #352	; (adr r3, 8bd0 <cosf+0x1d0>)
    8a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8a72:	f004 fa5f 	bl	cf34 <__adddf3>
    8a76:	e099      	b.n	8bac <cosf+0x1ac>
        }
    }
    if (ix<=0x40e231d5) {       /* |x| ~<= 9*pi/4 */
    8a78:	4a68      	ldr	r2, [pc, #416]	; (8c1c <cosf+0x21c>)
    8a7a:	4293      	cmp	r3, r2
    8a7c:	dc26      	bgt.n	8acc <cosf+0xcc>
        if (ix>0x40afeddf)      /* |x|  ~> 7*pi/4 */
    8a7e:	4a68      	ldr	r2, [pc, #416]	; (8c20 <cosf+0x220>)
    8a80:	4293      	cmp	r3, r2
    8a82:	dd11      	ble.n	8aa8 <cosf+0xa8>
            return __kernel_cosdf(x + (hx > 0 ? -c4pio2 : c4pio2));
    8a84:	f004 fbb4 	bl	d1f0 <__aeabi_f2d>
    8a88:	2d00      	cmp	r5, #0
    8a8a:	dc03      	bgt.n	8a94 <cosf+0x94>
    8a8c:	a352      	add	r3, pc, #328	; (adr r3, 8bd8 <cosf+0x1d8>)
    8a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    8a92:	e002      	b.n	8a9a <cosf+0x9a>
    8a94:	a352      	add	r3, pc, #328	; (adr r3, 8be0 <cosf+0x1e0>)
    8a96:	e9d3 2300 	ldrd	r2, r3, [r3]
    8a9a:	f004 fa4b 	bl	cf34 <__adddf3>
                return -__kernel_cosdf(y);
            default:
                return  __kernel_sindf(y);
        }
    }
}
    8a9e:	b006      	add	sp, #24
    8aa0:	e8bd 41f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r14}
                return __kernel_sindf(x + c1pio2);
        }
    }
    if (ix<=0x40e231d5) {       /* |x| ~<= 9*pi/4 */
        if (ix>0x40afeddf)      /* |x|  ~> 7*pi/4 */
            return __kernel_cosdf(x + (hx > 0 ? -c4pio2 : c4pio2));
    8aa4:	f7ff b9e4 	b.w	7e70 <__kernel_cosdf>
        else {
            if (hx>0)
    8aa8:	2800      	cmp	r0, #0
    8aaa:	dd05      	ble.n	8ab8 <cosf+0xb8>
                return __kernel_sindf(x - c3pio2);
    8aac:	f004 fba0 	bl	d1f0 <__aeabi_f2d>
    8ab0:	a34d      	add	r3, pc, #308	; (adr r3, 8be8 <cosf+0x1e8>)
    8ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
    8ab6:	e006      	b.n	8ac6 <cosf+0xc6>
            else
                return __kernel_sindf(-c3pio2 - x);
    8ab8:	f004 fb9a 	bl	d1f0 <__aeabi_f2d>
    8abc:	4602      	mov	r2, r0
    8abe:	460b      	mov	r3, r1
    8ac0:	a14b      	add	r1, pc, #300	; (adr r1, 8bf0 <cosf+0x1f0>)
    8ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
    8ac6:	f004 fa33 	bl	cf30 <__aeabi_dsub>
    8aca:	e06f      	b.n	8bac <cosf+0x1ac>
        }
    }

    /* cos(Inf or NaN) is NaN */
    else if (ix>=0x7f800000) return x-x;
    8acc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
    8ad0:	db03      	blt.n	8ada <cosf+0xda>
    8ad2:	4601      	mov	r1, r0
    8ad4:	f004 ff16 	bl	d904 <__aeabi_fsub>
    8ad8:	e06f      	b.n	8bba <cosf+0x1ba>
    int32_t e0,n,ix,hx;

    GET_FLOAT_WORD(hx,x);
    ix = hx&0x7fffffff;
    /* 33+53 bit pi is good enough for medium size */
    if (ix<0x4dc90fdb) {    /* |x| ~< 2^28*(pi/2), medium size */
    8ada:	4a52      	ldr	r2, [pc, #328]	; (8c24 <cosf+0x224>)
    8adc:	4293      	cmp	r3, r2
    8ade:	dc34      	bgt.n	8b4a <cosf+0x14a>
        /* Use a specialized rint() to get fn.  Assume round-to-nearest. */
        STRICT_ASSIGN(double,fn,x*invpio2+0x1.8p52);
    8ae0:	f004 fb86 	bl	d1f0 <__aeabi_f2d>
    8ae4:	a344      	add	r3, pc, #272	; (adr r3, 8bf8 <cosf+0x1f8>)
    8ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
    8aea:	4606      	mov	r6, r0
    8aec:	460f      	mov	r7, r1
    8aee:	f004 fbd3 	bl	d298 <__aeabi_dmul>
    8af2:	2200      	movs	r2, #0
    8af4:	4b4c      	ldr	r3, [pc, #304]	; (8c28 <cosf+0x228>)
    8af6:	f004 fa1d 	bl	cf34 <__adddf3>
        fn = fn-0x1.8p52;
    8afa:	2200      	movs	r2, #0
    8afc:	4b4a      	ldr	r3, [pc, #296]	; (8c28 <cosf+0x228>)
    8afe:	f004 fa17 	bl	cf30 <__aeabi_dsub>
    8b02:	4604      	mov	r4, r0
    8b04:	460d      	mov	r5, r1
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
    8b06:	f004 fe61 	bl	d7cc <__aeabi_d2iz>
#endif
        r  = x-fn*pio2_1;
    8b0a:	a33d      	add	r3, pc, #244	; (adr r3, 8c00 <cosf+0x200>)
    8b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
        STRICT_ASSIGN(double,fn,x*invpio2+0x1.8p52);
        fn = fn-0x1.8p52;
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
    8b10:	4680      	mov	r8, r0
#endif
        r  = x-fn*pio2_1;
    8b12:	4629      	mov	r1, r5
    8b14:	4620      	mov	r0, r4
    8b16:	f004 fbbf 	bl	d298 <__aeabi_dmul>
    8b1a:	4602      	mov	r2, r0
    8b1c:	460b      	mov	r3, r1
    8b1e:	4630      	mov	r0, r6
    8b20:	4639      	mov	r1, r7
    8b22:	f004 fa05 	bl	cf30 <__aeabi_dsub>
        w  = fn*pio2_1t;
    8b26:	a338      	add	r3, pc, #224	; (adr r3, 8c08 <cosf+0x208>)
    8b28:	e9d3 2300 	ldrd	r2, r3, [r3]
#ifdef HAVE_EFFICIENT_IRINT
        n  = irint(fn);
#else
        n  = (int32_t)fn;
#endif
        r  = x-fn*pio2_1;
    8b2c:	4606      	mov	r6, r0
    8b2e:	460f      	mov	r7, r1
        w  = fn*pio2_1t;
    8b30:	4620      	mov	r0, r4
    8b32:	4629      	mov	r1, r5
    8b34:	f004 fbb0 	bl	d298 <__aeabi_dmul>
    8b38:	4602      	mov	r2, r0
    8b3a:	460b      	mov	r3, r1
        *y = r-w;
    8b3c:	4630      	mov	r0, r6
    8b3e:	4639      	mov	r1, r7
    8b40:	f004 f9f6 	bl	cf30 <__aeabi_dsub>
    8b44:	4602      	mov	r2, r0
    8b46:	460b      	mov	r3, r1
    8b48:	e019      	b.n	8b7e <cosf+0x17e>
    if (ix>=0x7f800000) {       /* x is inf or NaN */
        *y=x-x;
        return 0;
    }
    /* set z = scalbn(|x|,ilogb(|x|)-23) */
    e0 = (ix>>23)-150;      /* e0 = ilogb(|x|)-23; */
    8b4a:	15dd      	asrs	r5, r3, #23
    8b4c:	3d96      	subs	r5, #150	; 0x96
    SET_FLOAT_WORD(z, ix - ((int32_t)(e0<<23)));
    8b4e:	05e8      	lsls	r0, r5, #23
    tx[0] = z;
    8b50:	1a18      	subs	r0, r3, r0
    8b52:	f004 fb4d 	bl	d1f0 <__aeabi_f2d>
    8b56:	ab06      	add	r3, sp, #24
    8b58:	e963 0104 	strd	r0, r1, [r3, #-16]!
    n  =  __kernel_rem_pio2(tx,ty,e0,1,0);
    8b5c:	2200      	movs	r2, #0
    8b5e:	9200      	str	r2, [sp, #0]
    8b60:	4618      	mov	r0, r3
    8b62:	462a      	mov	r2, r5
    8b64:	2301      	movs	r3, #1
    8b66:	a904      	add	r1, sp, #16
    8b68:	f000 f95e 	bl	8e28 <__kernel_rem_pio2>
    8b6c:	9b05      	ldr	r3, [sp, #20]
    if (hx<0) {*y = -ty[0]; return -n;}
    8b6e:	2c00      	cmp	r4, #0
    8b70:	9a04      	ldr	r2, [sp, #16]
    8b72:	bfba      	itte	lt
    8b74:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
    8b78:	f1c0 0800 	rsblt	r8, r0, #0
    *y = ty[0];
    return n;
    8b7c:	4680      	movge	r8, r0

    /* general argument reduction needed */
    else {
        n = __ieee754_rem_pio2f(x,&y);
        switch (n&3) {
    8b7e:	f008 0003 	and.w	r0, r8, #3
    8b82:	2801      	cmp	r0, #1
    8b84:	d005      	beq.n	8b92 <cosf+0x192>
    8b86:	2802      	cmp	r0, #2
    8b88:	d007      	beq.n	8b9a <cosf+0x19a>
    8b8a:	b968      	cbnz	r0, 8ba8 <cosf+0x1a8>
            case 0:
                return  __kernel_cosdf(y);
    8b8c:	4610      	mov	r0, r2
    8b8e:	4619      	mov	r1, r3
    8b90:	e785      	b.n	8a9e <cosf+0x9e>
            case 1:
                return  __kernel_sindf(-y);
    8b92:	4610      	mov	r0, r2
    8b94:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    8b98:	e008      	b.n	8bac <cosf+0x1ac>
            case 2:
                return -__kernel_cosdf(y);
    8b9a:	4610      	mov	r0, r2
    8b9c:	4619      	mov	r1, r3
    8b9e:	f7ff f967 	bl	7e70 <__kernel_cosdf>
    8ba2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    8ba6:	e008      	b.n	8bba <cosf+0x1ba>
            default:
                return  __kernel_sindf(y);
    8ba8:	4610      	mov	r0, r2
    8baa:	4619      	mov	r1, r3
        }
    }
}
    8bac:	b006      	add	sp, #24
    8bae:	e8bd 41f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r14}
            case 1:
                return  __kernel_sindf(-y);
            case 2:
                return -__kernel_cosdf(y);
            default:
                return  __kernel_sindf(y);
    8bb2:	f7ff ba25 	b.w	8000 <__kernel_sindf>
    GET_FLOAT_WORD(hx,x);
    ix = hx & 0x7fffffff;

    if (ix <= 0x3f490fda) {     /* |x| ~<= pi/4 */
        if (ix<0x39800000)      /* |x| < 2**-12 */
            if (((int)x)==0) return 1.0; /* 1 with inexact if x != 0 */
    8bb6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
                return -__kernel_cosdf(y);
            default:
                return  __kernel_sindf(y);
        }
    }
}
    8bba:	b006      	add	sp, #24
    8bbc:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    8bc0:	54442d18 	.word	0x54442d18
    8bc4:	400921fb 	.word	0x400921fb
    8bc8:	54442d18 	.word	0x54442d18
    8bcc:	c00921fb 	.word	0xc00921fb
    8bd0:	54442d18 	.word	0x54442d18
    8bd4:	3ff921fb 	.word	0x3ff921fb
    8bd8:	54442d18 	.word	0x54442d18
    8bdc:	401921fb 	.word	0x401921fb
    8be0:	54442d18 	.word	0x54442d18
    8be4:	c01921fb 	.word	0xc01921fb
    8be8:	7f3321d2 	.word	0x7f3321d2
    8bec:	4012d97c 	.word	0x4012d97c
    8bf0:	7f3321d2 	.word	0x7f3321d2
    8bf4:	c012d97c 	.word	0xc012d97c
    8bf8:	6dc9c883 	.word	0x6dc9c883
    8bfc:	3fe45f30 	.word	0x3fe45f30
    8c00:	50000000 	.word	0x50000000
    8c04:	3ff921fb 	.word	0x3ff921fb
    8c08:	611a6263 	.word	0x611a6263
    8c0c:	3e5110b4 	.word	0x3e5110b4
    8c10:	3f490fda 	.word	0x3f490fda
    8c14:	407b53d1 	.word	0x407b53d1
    8c18:	4016cbe3 	.word	0x4016cbe3
    8c1c:	40e231d5 	.word	0x40e231d5
    8c20:	40afeddf 	.word	0x40afeddf
    8c24:	4dc90fda 	.word	0x4dc90fda
    8c28:	43380000 	.word	0x43380000
    8c2c:	f3af 8000 	nop.w

00008c30 <sqrt>:
    u_int32_t r,t1,s1,ix1,q1;

    EXTRACT_WORDS(ix0,ix1,x);

    /* take care of Inf and NaN */
    if ((ix0&0x7ff00000)==0x7ff00000) {
    8c30:	f021 4c00 	bic.w	r12, r1, #2147483648	; 0x80000000

static  const double    one = 1.0, tiny=1.0e-300;

double
__ieee754_sqrt(double x)
{
    8c34:	e92d 43f8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r14}
    u_int32_t r,t1,s1,ix1,q1;

    EXTRACT_WORDS(ix0,ix1,x);

    /* take care of Inf and NaN */
    if ((ix0&0x7ff00000)==0x7ff00000) {
    8c38:	ea4f 5c1c 	mov.w	r12, r12, lsr #20
    8c3c:	f8df 8150 	ldr.w	r8, [r15, #336]	; 8d90 <sqrt+0x160>
    8c40:	ea4f 5c0c 	mov.w	r12, r12, lsl #20
    8c44:	45c4      	cmp	r12, r8

static  const double    one = 1.0, tiny=1.0e-300;

double
__ieee754_sqrt(double x)
{
    8c46:	4606      	mov	r6, r0
    8c48:	460f      	mov	r7, r1
    double z;
    int32_t sign = (int)0x80000000;
    int32_t ix0,s0,q,m,t,i;
    u_int32_t r,t1,s1,ix1,q1;

    EXTRACT_WORDS(ix0,ix1,x);
    8c4a:	460d      	mov	r5, r1
    8c4c:	460b      	mov	r3, r1
    8c4e:	4602      	mov	r2, r0

    /* take care of Inf and NaN */
    if ((ix0&0x7ff00000)==0x7ff00000) {
    8c50:	d109      	bne.n	8c66 <sqrt+0x36>
        return x*x+x;       /* sqrt(NaN)=NaN, sqrt(+inf)=+inf
    8c52:	4602      	mov	r2, r0
    8c54:	460b      	mov	r3, r1
    8c56:	f004 fb1f 	bl	d298 <__aeabi_dmul>
    8c5a:	4632      	mov	r2, r6
    8c5c:	463b      	mov	r3, r7
    8c5e:	f004 f969 	bl	cf34 <__adddf3>
    8c62:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}
                       sqrt(-inf)=sNaN */
    }
    /* take care of zero */
    if (ix0<=0) {
    8c66:	2900      	cmp	r1, #0
    8c68:	dc10      	bgt.n	8c8c <sqrt+0x5c>
        if (((ix0&(~sign))|ix1)==0) return x; /* sqrt(+-0) = +-0 */
    8c6a:	f021 4c00 	bic.w	r12, r1, #2147483648	; 0x80000000
    8c6e:	ea5c 0c00 	orrs.w	r12, r12, r0
    8c72:	f000 808b 	beq.w	8d8c <sqrt+0x15c>
        else if (ix0<0)
    8c76:	b149      	cbz	r1, 8c8c <sqrt+0x5c>
            return (x-x)/(x-x);     /* sqrt(-ve) = sNaN */
    8c78:	4602      	mov	r2, r0
    8c7a:	460b      	mov	r3, r1
    8c7c:	f004 f958 	bl	cf30 <__aeabi_dsub>
    8c80:	4602      	mov	r2, r0
    8c82:	460b      	mov	r3, r1
    8c84:	f004 fc32 	bl	d4ec <__aeabi_ddiv>
    8c88:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}
    }
    /* normalize x */
    m = (ix0>>20);
    if (m==0) {             /* subnormal x */
    8c8c:	1529      	asrs	r1, r5, #20
    8c8e:	d113      	bne.n	8cb8 <sqrt+0x88>
        while (ix0==0) {
    8c90:	b91b      	cbnz	r3, 8c9a <sqrt+0x6a>
            m -= 21;
            ix0 |= (ix1>>11);
    8c92:	0ad3      	lsrs	r3, r2, #11
    }
    /* normalize x */
    m = (ix0>>20);
    if (m==0) {             /* subnormal x */
        while (ix0==0) {
            m -= 21;
    8c94:	3915      	subs	r1, #21
            ix0 |= (ix1>>11);
            ix1 <<= 21;
    8c96:	0552      	lsls	r2, r2, #21
    8c98:	e7fa      	b.n	8c90 <sqrt+0x60>
            return (x-x)/(x-x);     /* sqrt(-ve) = sNaN */
    }
    /* normalize x */
    m = (ix0>>20);
    if (m==0) {             /* subnormal x */
        while (ix0==0) {
    8c9a:	2000      	movs	r0, #0
            m -= 21;
            ix0 |= (ix1>>11);
            ix1 <<= 21;
        }
        for (i=0; (ix0&0x00100000)==0; i++) ix0<<=1;
    8c9c:	02dd      	lsls	r5, r3, #11
    8c9e:	d402      	bmi.n	8ca6 <sqrt+0x76>
    8ca0:	005b      	lsls	r3, r3, #1
    8ca2:	3001      	adds	r0, #1
    8ca4:	e7fa      	b.n	8c9c <sqrt+0x6c>
        m -= i-1;
    8ca6:	f1c0 0401 	rsb	r4, r0, #1
    8caa:	4421      	add	r1, r4
        ix0 |= (ix1>>(32-i));
    8cac:	f1c0 0420 	rsb	r4, r0, #32
    8cb0:	fa22 f404 	lsr.w	r4, r2, r4
        ix1 <<= i;
    8cb4:	4082      	lsls	r2, r0
            ix0 |= (ix1>>11);
            ix1 <<= 21;
        }
        for (i=0; (ix0&0x00100000)==0; i++) ix0<<=1;
        m -= i-1;
        ix0 |= (ix1>>(32-i));
    8cb6:	4323      	orrs	r3, r4
        ix1 <<= i;
    }
    m -= 1023;  /* unbias exponent */
    8cb8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    ix0 = (ix0&0x000fffff)|0x00100000;
    8cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    if (m&1) {  /* odd m, double x to make it even */
    8cc0:	07cc      	lsls	r4, r1, #31
        m -= i-1;
        ix0 |= (ix1>>(32-i));
        ix1 <<= i;
    }
    m -= 1023;  /* unbias exponent */
    ix0 = (ix0&0x000fffff)|0x00100000;
    8cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    if (m&1) {  /* odd m, double x to make it even */
    8cc6:	d503      	bpl.n	8cd0 <sqrt+0xa0>
        ix0 += ix0 + ((ix1&sign)>>31);
    8cc8:	0fd0      	lsrs	r0, r2, #31
    8cca:	eb00 0343 	add.w	r3, r0, r3, lsl #1
        ix1 += ix1;
    8cce:	0052      	lsls	r2, r2, #1
    }
    m >>= 1;    /* m = [m/2] */
    8cd0:	ea4f 0c61 	mov.w	r12, r1, asr #1

    /* generate sqrt(x) bit by bit */
    ix0 += ix0 + ((ix1&sign)>>31);
    ix1 += ix1;
    q = q1 = s0 = s1 = 0;   /* [q,q1] = sqrt(x) */
    8cd4:	2400      	movs	r4, #0
        ix1 += ix1;
    }
    m >>= 1;    /* m = [m/2] */

    /* generate sqrt(x) bit by bit */
    ix0 += ix0 + ((ix1&sign)>>31);
    8cd6:	0fd1      	lsrs	r1, r2, #31
    8cd8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    ix1 += ix1;
    8cdc:	0052      	lsls	r2, r2, #1
    8cde:	2116      	movs	r1, #22
    q = q1 = s0 = s1 = 0;   /* [q,q1] = sqrt(x) */
    r = 0x00200000;     /* r = moving bit from right to left */
    8ce0:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
    m >>= 1;    /* m = [m/2] */

    /* generate sqrt(x) bit by bit */
    ix0 += ix0 + ((ix1&sign)>>31);
    ix1 += ix1;
    q = q1 = s0 = s1 = 0;   /* [q,q1] = sqrt(x) */
    8ce4:	4620      	mov	r0, r4
    r = 0x00200000;     /* r = moving bit from right to left */

    while (r!=0) {
        t = s0+r;
    8ce6:	1946      	adds	r6, r0, r5
        if (t<=ix0) {
    8ce8:	429e      	cmp	r6, r3
    8cea:	dc02      	bgt.n	8cf2 <sqrt+0xc2>
            s0   = t+r;
    8cec:	1970      	adds	r0, r6, r5
            ix0 -= t;
    8cee:	1b9b      	subs	r3, r3, r6
            q   += r;
    8cf0:	442c      	add	r4, r5
        }
        ix0 += ix0 + ((ix1&sign)>>31);
    8cf2:	0fd6      	lsrs	r6, r2, #31
    ix0 += ix0 + ((ix1&sign)>>31);
    ix1 += ix1;
    q = q1 = s0 = s1 = 0;   /* [q,q1] = sqrt(x) */
    r = 0x00200000;     /* r = moving bit from right to left */

    while (r!=0) {
    8cf4:	3901      	subs	r1, #1
        if (t<=ix0) {
            s0   = t+r;
            ix0 -= t;
            q   += r;
        }
        ix0 += ix0 + ((ix1&sign)>>31);
    8cf6:	eb06 0343 	add.w	r3, r6, r3, lsl #1
        ix1 += ix1;
    8cfa:	ea4f 0242 	mov.w	r2, r2, lsl #1
        r>>=1;
    8cfe:	ea4f 0555 	mov.w	r5, r5, lsr #1
    ix0 += ix0 + ((ix1&sign)>>31);
    ix1 += ix1;
    q = q1 = s0 = s1 = 0;   /* [q,q1] = sqrt(x) */
    r = 0x00200000;     /* r = moving bit from right to left */

    while (r!=0) {
    8d02:	d1f0      	bne.n	8ce6 <sqrt+0xb6>
    8d04:	2720      	movs	r7, #32
    8d06:	4688      	mov	r8, r1
    8d08:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000

    r = sign;
    while (r!=0) {
        t1 = s1+r;
        t  = s0;
        if ((t<ix0)||((t==ix0)&&(t1<=ix1))) {
    8d0c:	4298      	cmp	r0, r3
        r>>=1;
    }

    r = sign;
    while (r!=0) {
        t1 = s1+r;
    8d0e:	eb05 0608 	add.w	r6, r5, r8
        t  = s0;
        if ((t<ix0)||((t==ix0)&&(t1<=ix1))) {
    8d12:	db02      	blt.n	8d1a <sqrt+0xea>
    8d14:	d119      	bne.n	8d4a <sqrt+0x11a>
    8d16:	4296      	cmp	r6, r2
    8d18:	d816      	bhi.n	8d48 <sqrt+0x118>
            s1  = t1+r;
            if (((t1&sign)==sign)&&(s1&sign)==0) s0 += 1;
    8d1a:	f006 4900 	and.w	r9, r6, #2147483648	; 0x80000000
    8d1e:	f1b9 4f00 	cmp.w	r9, #2147483648	; 0x80000000
    r = sign;
    while (r!=0) {
        t1 = s1+r;
        t  = s0;
        if ((t<ix0)||((t==ix0)&&(t1<=ix1))) {
            s1  = t1+r;
    8d22:	eb06 0805 	add.w	r8, r6, r5
            if (((t1&sign)==sign)&&(s1&sign)==0) s0 += 1;
    8d26:	d105      	bne.n	8d34 <sqrt+0x104>
    8d28:	f1b8 0f00 	cmp.w	r8, #0
    8d2c:	db02      	blt.n	8d34 <sqrt+0x104>
    8d2e:	f100 0901 	add.w	r9, r0, #1
    8d32:	e000      	b.n	8d36 <sqrt+0x106>
    8d34:	4681      	mov	r9, r0
            ix0 -= t;
    8d36:	1a1b      	subs	r3, r3, r0
            if (ix1 < t1) ix0 -= 1;
    8d38:	42b2      	cmp	r2, r6
    8d3a:	bf38      	it	cc
    8d3c:	f103 33ff 	addcc.w	r3, r3, #4294967295
            ix1 -= t1;
    8d40:	1b92      	subs	r2, r2, r6
            q1  += r;
    8d42:	4429      	add	r1, r5
    8d44:	4648      	mov	r0, r9
    8d46:	e000      	b.n	8d4a <sqrt+0x11a>
    8d48:	4603      	mov	r3, r0
        }
        ix0 += ix0 + ((ix1&sign)>>31);
    8d4a:	0fd6      	lsrs	r6, r2, #31
        ix1 += ix1;
        r>>=1;
    }

    r = sign;
    while (r!=0) {
    8d4c:	3f01      	subs	r7, #1
            ix0 -= t;
            if (ix1 < t1) ix0 -= 1;
            ix1 -= t1;
            q1  += r;
        }
        ix0 += ix0 + ((ix1&sign)>>31);
    8d4e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
        ix1 += ix1;
    8d52:	ea4f 0242 	mov.w	r2, r2, lsl #1
        r>>=1;
    8d56:	ea4f 0555 	mov.w	r5, r5, lsr #1
        ix1 += ix1;
        r>>=1;
    }

    r = sign;
    while (r!=0) {
    8d5a:	d1d7      	bne.n	8d0c <sqrt+0xdc>
        ix1 += ix1;
        r>>=1;
    }

    /* use floating add to find out rounding direction */
    if ((ix0|ix1)!=0) {
    8d5c:	431a      	orrs	r2, r3
    8d5e:	d006      	beq.n	8d6e <sqrt+0x13e>
        z = one-tiny; /* trigger inexact flag */
        if (z>=one) {
            z = one+tiny;
            if (q1==(u_int32_t)0xffffffff) { q1=0; q += 1;}
    8d60:	1c48      	adds	r0, r1, #1
            else if (z>one) {
                if (q1==(u_int32_t)0xfffffffe) q+=1;
                q1+=2;
            } else
                q1 += (q1&1);
    8d62:	bf13      	iteet	ne
    8d64:	f001 0301 	andne.w	r3, r1, #1
    /* use floating add to find out rounding direction */
    if ((ix0|ix1)!=0) {
        z = one-tiny; /* trigger inexact flag */
        if (z>=one) {
            z = one+tiny;
            if (q1==(u_int32_t)0xffffffff) { q1=0; q += 1;}
    8d68:	3401      	addeq	r4, #1
    8d6a:	4639      	moveq	r1, r7
            else if (z>one) {
                if (q1==(u_int32_t)0xfffffffe) q+=1;
                q1+=2;
            } else
                q1 += (q1&1);
    8d6c:	18c9      	addne	r1, r1, r3
        }
    }
    ix0 = (q>>1)+0x3fe00000;
    8d6e:	1062      	asrs	r2, r4, #1
    ix1 =  q1>>1;
    8d70:	084b      	lsrs	r3, r1, #1
                q1+=2;
            } else
                q1 += (q1&1);
        }
    }
    ix0 = (q>>1)+0x3fe00000;
    8d72:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
    ix1 =  q1>>1;
    if ((q&1)==1) ix1 |= sign;
    8d76:	07e1      	lsls	r1, r4, #31
                q1+=2;
            } else
                q1 += (q1&1);
        }
    }
    ix0 = (q>>1)+0x3fe00000;
    8d78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
    ix1 =  q1>>1;
    if ((q&1)==1) ix1 |= sign;
    8d7c:	bf48      	it	mi
    8d7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    ix0 += (m <<20);
    INSERT_WORDS(z,ix0,ix1);
    8d82:	eb02 510c 	add.w	r1, r2, r12, lsl #20
    8d86:	4618      	mov	r0, r3
    return z;
    8d88:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}
}
    8d8c:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}
    8d90:	7ff00000 	.word	0x7ff00000

00008d94 <sqrtf>:
    u_int32_t r;

    GET_FLOAT_WORD(ix,x);

    /* take care of Inf and NaN */
    if ((ix&0x7f800000)==0x7f800000) {
    8d94:	f000 42ff 	and.w	r2, r0, #2139095040	; 0x7f800000
    8d98:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000

#else

float
__ieee754_sqrtf(float x)
{
    8d9c:	b5f8      	push	{r3, r4, r5, r6, r7, r14}
    8d9e:	4604      	mov	r4, r0
    float z;
    int32_t sign = (int)0x80000000;
    int32_t ix,s,q,m,t,i;
    u_int32_t r;

    GET_FLOAT_WORD(ix,x);
    8da0:	4603      	mov	r3, r0

    /* take care of Inf and NaN */
    if ((ix&0x7f800000)==0x7f800000) {
    8da2:	d106      	bne.n	8db2 <sqrtf+0x1e>
        return x*x+x;       /* sqrt(NaN)=NaN, sqrt(+inf)=+inf
    8da4:	4601      	mov	r1, r0
    8da6:	f004 feb7 	bl	db18 <__aeabi_fmul>
    8daa:	4621      	mov	r1, r4
    8dac:	f004 fdac 	bl	d908 <__addsf3>
    8db0:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
                       sqrt(-inf)=sNaN */
    }
    /* take care of zero */
    if (ix<=0) {
    8db2:	2800      	cmp	r0, #0
    8db4:	dc09      	bgt.n	8dca <sqrtf+0x36>
        if ((ix&(~sign))==0) return x; /* sqrt(+-0) = +-0 */
    8db6:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
    8dba:	b3a3      	cbz	r3, 8e26 <sqrtf+0x92>
        else if (ix<0)
            return (x-x)/(x-x);     /* sqrt(-ve) = sNaN */
    8dbc:	4601      	mov	r1, r0
    8dbe:	f004 fda1 	bl	d904 <__aeabi_fsub>
    8dc2:	4601      	mov	r1, r0
    8dc4:	f004 ff5c 	bl	dc80 <__aeabi_fdiv>
    8dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
    }
    /* normalize x */
    m = (ix>>23);
    if (m==0) {             /* subnormal x */
    8dca:	15c0      	asrs	r0, r0, #23
    8dcc:	d106      	bne.n	8ddc <sqrtf+0x48>
        for (i=0; (ix&0x00800000)==0; i++) ix<<=1;
    8dce:	0219      	lsls	r1, r3, #8
    8dd0:	d402      	bmi.n	8dd8 <sqrtf+0x44>
    8dd2:	005b      	lsls	r3, r3, #1
    8dd4:	3001      	adds	r0, #1
    8dd6:	e7fa      	b.n	8dce <sqrtf+0x3a>
        m -= i-1;
    8dd8:	f1c0 0001 	rsb	r0, r0, #1
    }
    m -= 127;   /* unbias exponent */
    8ddc:	387f      	subs	r0, #127	; 0x7f
    ix = (ix&0x007fffff)|0x00800000;
    8dde:	f3c3 0316 	ubfx	r3, r3, #0, #23
    if (m&1) /* odd m, double x to make it even */
    8de2:	07c2      	lsls	r2, r0, #31
    if (m==0) {             /* subnormal x */
        for (i=0; (ix&0x00800000)==0; i++) ix<<=1;
        m -= i-1;
    }
    m -= 127;   /* unbias exponent */
    ix = (ix&0x007fffff)|0x00800000;
    8de4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    if (m&1) /* odd m, double x to make it even */
        ix += ix;
    8de8:	bf48      	it	mi
    8dea:	005b      	lslmi	r3, r3, #1
    m >>= 1;    /* m = [m/2] */

    /* generate sqrt(x) bit by bit */
    ix += ix;
    q = s = 0;      /* q = sqrt(x) */
    8dec:	2200      	movs	r2, #0
    }
    m -= 127;   /* unbias exponent */
    ix = (ix&0x007fffff)|0x00800000;
    if (m&1) /* odd m, double x to make it even */
        ix += ix;
    m >>= 1;    /* m = [m/2] */
    8dee:	1040      	asrs	r0, r0, #1

    /* generate sqrt(x) bit by bit */
    ix += ix;
    8df0:	005b      	lsls	r3, r3, #1
    8df2:	2519      	movs	r5, #25
    q = s = 0;      /* q = sqrt(x) */
    r = 0x01000000;     /* r = moving bit from right to left */
    8df4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
        ix += ix;
    m >>= 1;    /* m = [m/2] */

    /* generate sqrt(x) bit by bit */
    ix += ix;
    q = s = 0;      /* q = sqrt(x) */
    8df8:	4617      	mov	r7, r2
    r = 0x01000000;     /* r = moving bit from right to left */

    while (r!=0) {
        t = s+r;
    8dfa:	187e      	adds	r6, r7, r1
        if (t<=ix) {
    8dfc:	429e      	cmp	r6, r3
    8dfe:	dc02      	bgt.n	8e06 <sqrtf+0x72>
            s    = t+r;
    8e00:	1877      	adds	r7, r6, r1
            ix  -= t;
    8e02:	1b9b      	subs	r3, r3, r6
            q   += r;
    8e04:	440a      	add	r2, r1
    /* generate sqrt(x) bit by bit */
    ix += ix;
    q = s = 0;      /* q = sqrt(x) */
    r = 0x01000000;     /* r = moving bit from right to left */

    while (r!=0) {
    8e06:	3d01      	subs	r5, #1
        if (t<=ix) {
            s    = t+r;
            ix  -= t;
            q   += r;
        }
        ix += ix;
    8e08:	ea4f 0343 	mov.w	r3, r3, lsl #1
        r>>=1;
    8e0c:	ea4f 0151 	mov.w	r1, r1, lsr #1
    /* generate sqrt(x) bit by bit */
    ix += ix;
    q = s = 0;      /* q = sqrt(x) */
    r = 0x01000000;     /* r = moving bit from right to left */

    while (r!=0) {
    8e10:	d1f3      	bne.n	8dfa <sqrtf+0x66>
        ix += ix;
        r>>=1;
    }

    /* use floating add to find out rounding direction */
    if (ix!=0) {
    8e12:	b113      	cbz	r3, 8e1a <sqrtf+0x86>
        if (z>=one) {
            z = one+tiny;
            if (z>one)
                q += 2;
            else
                q += (q&1);
    8e14:	f002 0301 	and.w	r3, r2, #1
    8e18:	441a      	add	r2, r3
        }
    }
    ix = (q>>1)+0x3f000000;
    8e1a:	1052      	asrs	r2, r2, #1
    8e1c:	f102 527c 	add.w	r2, r2, #1056964608	; 0x3f000000
    ix += (m <<23);
    SET_FLOAT_WORD(z,ix);
    8e20:	eb02 50c0 	add.w	r0, r2, r0, lsl #23
    return z;
    8e24:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
}
    8e26:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}

00008e28 <__kernel_rem_pio2>:
two24   =  1.67772160000000000000e+07, /* 0x41700000, 0x00000000 */
twon24  =  5.96046447753906250000e-08; /* 0x3E700000, 0x00000000 */

int
__kernel_rem_pio2(double *x, double *y, int e0, int nx, int prec)
{
    8e28:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    8e2c:	f5ad 7d1b 	sub.w	r13, r13, #620	; 0x26c
    8e30:	9308      	str	r3, [sp, #32]
    int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
    double z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
    jk = init_jk[prec];
    8e32:	9da4      	ldr	r5, [sp, #656]	; 0x290
    8e34:	4bac      	ldr	r3, [pc, #688]	; (90e8 <__kernel_rem_pio2+0x2c0>)
    jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
    jx =  nx-1;
    jv = (e0-3)/24;
    8e36:	f1a2 0903 	sub.w	r9, r2, #3
{
    int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
    double z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
    jk = init_jk[prec];
    8e3a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
    jx =  nx-1;
    8e3e:	9d08      	ldr	r5, [sp, #32]
{
    int32_t jz,jx,jv,jp,jk,carry,n,iq[20],i,j,k,m,q0,ih;
    double z,fw,f[20],fq[20],q[20];

    /* initialize jk*/
    jk = init_jk[prec];
    8e40:	9302      	str	r3, [sp, #8]
    jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
    jx =  nx-1;
    8e42:	3d01      	subs	r5, #1
    jv = (e0-3)/24;
    8e44:	2318      	movs	r3, #24
    /* initialize jk*/
    jk = init_jk[prec];
    jp = jk;

    /* determine jx,jv,q0, note that 3>q0 */
    jx =  nx-1;
    8e46:	9507      	str	r5, [sp, #28]
    jv = (e0-3)/24;
    8e48:	fb99 f9f3 	sdiv	r9, r9, r3
    if (jv<0) jv=0;
    q0 =  e0-24*(jv+1);

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
    j = jv-jx;
    m = jx+jk;
    8e4c:	46aa      	mov	r10, r5
    8e4e:	9d02      	ldr	r5, [sp, #8]
    8e50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31

    /* determine jx,jv,q0, note that 3>q0 */
    jx =  nx-1;
    jv = (e0-3)/24;
    if (jv<0) jv=0;
    q0 =  e0-24*(jv+1);
    8e54:	ea6f 0409 	mvn.w	r4, r9

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
    j = jv-jx;
    m = jx+jk;
    8e58:	44aa      	add	r10, r5
    jv = (e0-3)/24;
    if (jv<0) jv=0;
    q0 =  e0-24*(jv+1);

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
    j = jv-jx;
    8e5a:	9d07      	ldr	r5, [sp, #28]

    /* determine jx,jv,q0, note that 3>q0 */
    jx =  nx-1;
    jv = (e0-3)/24;
    if (jv<0) jv=0;
    q0 =  e0-24*(jv+1);
    8e5c:	fb03 2404 	mla	r4, r3, r4, r2
    8e60:	4ba2      	ldr	r3, [pc, #648]	; (90ec <__kernel_rem_pio2+0x2c4>)

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
    j = jv-jx;
    8e62:	ebc5 0709 	rsb	r7, r5, r9
two24   =  1.67772160000000000000e+07, /* 0x41700000, 0x00000000 */
twon24  =  5.96046447753906250000e-08; /* 0x3E700000, 0x00000000 */

int
__kernel_rem_pio2(double *x, double *y, int e0, int nx, int prec)
{
    8e66:	9009      	str	r0, [sp, #36]	; 0x24
    8e68:	9106      	str	r1, [sp, #24]
    8e6a:	ae20      	add	r6, sp, #128	; 0x80
    8e6c:	eb03 0887 	add.w	r8, r3, r7, lsl #2
    q0 =  e0-24*(jv+1);

    /* set up f[0] to f[jx+jk] where f[jx+jk] = ipio2[jv+jk] */
    j = jv-jx;
    m = jx+jk;
    for (i=0; i<=m; i++,j++) f[i] = (j<0)? zero : (double) ipio2[j];
    8e70:	2500      	movs	r5, #0
    8e72:	4555      	cmp	r5, r10
    8e74:	dc0c      	bgt.n	8e90 <__kernel_rem_pio2+0x68>
    8e76:	42fd      	cmn	r5, r7
    8e78:	d404      	bmi.n	8e84 <__kernel_rem_pio2+0x5c>
    8e7a:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
    8e7e:	f004 f9a5 	bl	d1cc <__aeabi_i2d>
    8e82:	e001      	b.n	8e88 <__kernel_rem_pio2+0x60>
    8e84:	2000      	movs	r0, #0
    8e86:	2100      	movs	r1, #0
    8e88:	e9e6 0102 	strd	r0, r1, [r6, #8]!
    8e8c:	3501      	adds	r5, #1
    8e8e:	e7f0      	b.n	8e72 <__kernel_rem_pio2+0x4a>
    8e90:	f50d 7be0 	add.w	r11, r13, #448	; 0x1c0
    8e94:	f04f 0800 	mov.w	r8, #0

    /* compute q[0],q[1],...q[jk] */
    for (i=0; i<=jk; i++) {
    8e98:	9d02      	ldr	r5, [sp, #8]
    8e9a:	45a8      	cmp	r8, r5
    8e9c:	dc29      	bgt.n	8ef2 <__kernel_rem_pio2+0xca>
    8e9e:	f8dd c020 	ldr.w	r12, [r13, #32]
    8ea2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    8ea4:	44c4      	add	r12, r8
    8ea6:	a822      	add	r0, sp, #136	; 0x88
    8ea8:	f1a5 0a08 	sub.w	r10, r5, #8
    8eac:	eb00 0ccc 	add.w	r12, r0, r12, lsl #3
    8eb0:	2600      	movs	r6, #0
    8eb2:	2700      	movs	r7, #0
    8eb4:	2500      	movs	r5, #0
        for (j=0,fw=0.0; j<=jx; j++) fw += x[j]*f[jx+i-j];
    8eb6:	9807      	ldr	r0, [sp, #28]
    8eb8:	4285      	cmp	r5, r0
    8eba:	dc15      	bgt.n	8ee8 <__kernel_rem_pio2+0xc0>
    8ebc:	e9fa 0102 	ldrd	r0, r1, [r10, #8]!
    8ec0:	ebac 03c5 	sub.w	r3, r12, r5, lsl #3
    8ec4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    8ec8:	f8cd c004 	str.w	r12, [r13, #4]
    8ecc:	f004 f9e4 	bl	d298 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f004 f82c 	bl	cf34 <__adddf3>
    8edc:	3501      	adds	r5, #1
    8ede:	4606      	mov	r6, r0
    8ee0:	460f      	mov	r7, r1
    8ee2:	f8dd c004 	ldr.w	r12, [r13, #4]
    8ee6:	e7e6      	b.n	8eb6 <__kernel_rem_pio2+0x8e>
        q[i] = fw;
    8ee8:	e9eb 6702 	strd	r6, r7, [r11, #8]!
    j = jv-jx;
    m = jx+jk;
    for (i=0; i<=m; i++,j++) f[i] = (j<0)? zero : (double) ipio2[j];

    /* compute q[0],q[1],...q[jk] */
    for (i=0; i<=jk; i++) {
    8eec:	f108 0801 	add.w	r8, r8, #1
    8ef0:	e7d2      	b.n	8e98 <__kernel_rem_pio2+0x70>
    8ef2:	9d02      	ldr	r5, [sp, #8]
    8ef4:	4b7d      	ldr	r3, [pc, #500]	; (90ec <__kernel_rem_pio2+0x2c4>)
    8ef6:	a80e      	add	r0, sp, #56	; 0x38
    8ef8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    8efc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    8f00:	900a      	str	r0, [sp, #40]	; 0x28
    8f02:	930c      	str	r3, [sp, #48]	; 0x30
    8f04:	46a9      	mov	r9, r5
    }

    jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
    for (i=0,j=jz,z=q[jz]; j>0; i++,j--) {
    8f06:	a99a      	add	r1, sp, #616	; 0x268
    8f08:	eb01 03c9 	add.w	r3, r1, r9, lsl #3
    8f0c:	ad0d      	add	r5, sp, #52	; 0x34
    8f0e:	46ca      	mov	r10, r9
    8f10:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
    8f14:	f1ba 0f00 	cmp.w	r10, #0
        fw    =  (double)((int32_t)(twon24* z));
    8f18:	4630      	mov	r0, r6
    8f1a:	4639      	mov	r1, r7
    }

    jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
    for (i=0,j=jz,z=q[jz]; j>0; i++,j--) {
    8f1c:	dd25      	ble.n	8f6a <__kernel_rem_pio2+0x142>
        fw    =  (double)((int32_t)(twon24* z));
    8f1e:	2200      	movs	r2, #0
    8f20:	4b73      	ldr	r3, [pc, #460]	; (90f0 <__kernel_rem_pio2+0x2c8>)
    8f22:	f004 f9b9 	bl	d298 <__aeabi_dmul>
    8f26:	f004 fc51 	bl	d7cc <__aeabi_d2iz>
    8f2a:	f004 f94f 	bl	d1cc <__aeabi_i2d>
        iq[i] =  (int32_t)(z-two24*fw);
    8f2e:	2200      	movs	r2, #0
    8f30:	4b70      	ldr	r3, [pc, #448]	; (90f4 <__kernel_rem_pio2+0x2cc>)

    jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
    for (i=0,j=jz,z=q[jz]; j>0; i++,j--) {
        fw    =  (double)((int32_t)(twon24* z));
    8f32:	e9cd 0104 	strd	r0, r1, [r13, #16]
        iq[i] =  (int32_t)(z-two24*fw);
    8f36:	f004 f9af 	bl	d298 <__aeabi_dmul>
    8f3a:	4602      	mov	r2, r0
    8f3c:	460b      	mov	r3, r1
    8f3e:	4630      	mov	r0, r6
    8f40:	4639      	mov	r1, r7
    8f42:	f003 fff5 	bl	cf30 <__aeabi_dsub>
    8f46:	f004 fc41 	bl	d7cc <__aeabi_d2iz>
        z     =  q[j-1]+fw;
    8f4a:	f10a 3aff 	add.w	r10, r10, #4294967295
    8f4e:	aa9a      	add	r2, sp, #616	; 0x268
    8f50:	eb02 03ca 	add.w	r3, r2, r10, lsl #3
    jz = jk;
recompute:
    /* distill q[] into iq[] reversingly */
    for (i=0,j=jz,z=q[jz]; j>0; i++,j--) {
        fw    =  (double)((int32_t)(twon24* z));
        iq[i] =  (int32_t)(z-two24*fw);
    8f54:	f845 0f04 	str.w	r0, [r5, #4]!
        z     =  q[j-1]+fw;
    8f58:	e953 2328 	ldrd	r2, r3, [r3, #-160]	; 0xa0
    8f5c:	e9dd 0104 	ldrd	r0, r1, [r13, #16]
    8f60:	f003 ffe8 	bl	cf34 <__adddf3>
    8f64:	4606      	mov	r6, r0
    8f66:	460f      	mov	r7, r1
    8f68:	e7d4      	b.n	8f14 <__kernel_rem_pio2+0xec>
    }

    /* compute n */
    z  = scalbn(z,q0);      /* actual value of z */
    8f6a:	4622      	mov	r2, r4
    8f6c:	f000 fb30 	bl	95d0 <scalbn>
    z -= 8.0*floor(z*0.125);        /* trim off integer >= 8 */
    8f70:	2200      	movs	r2, #0
    8f72:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
        iq[i] =  (int32_t)(z-two24*fw);
        z     =  q[j-1]+fw;
    }

    /* compute n */
    z  = scalbn(z,q0);      /* actual value of z */
    8f76:	4606      	mov	r6, r0
    8f78:	460f      	mov	r7, r1
    z -= 8.0*floor(z*0.125);        /* trim off integer >= 8 */
    8f7a:	f004 f98d 	bl	d298 <__aeabi_dmul>
    8f7e:	f000 fa9f 	bl	94c0 <floor>
    8f82:	2200      	movs	r2, #0
    8f84:	4b5c      	ldr	r3, [pc, #368]	; (90f8 <__kernel_rem_pio2+0x2d0>)
    8f86:	f004 f987 	bl	d298 <__aeabi_dmul>
    8f8a:	4602      	mov	r2, r0
    8f8c:	460b      	mov	r3, r1
    8f8e:	4630      	mov	r0, r6
    8f90:	4639      	mov	r1, r7
    8f92:	f003 ffcd 	bl	cf30 <__aeabi_dsub>
    8f96:	460f      	mov	r7, r1
    8f98:	4606      	mov	r6, r0
    n  = (int32_t) z;
    8f9a:	f004 fc17 	bl	d7cc <__aeabi_d2iz>
    8f9e:	9004      	str	r0, [sp, #16]
    z -= (double)n;
    8fa0:	f004 f914 	bl	d1cc <__aeabi_i2d>
    8fa4:	4602      	mov	r2, r0
    8fa6:	460b      	mov	r3, r1
    8fa8:	4630      	mov	r0, r6
    8faa:	4639      	mov	r1, r7
    8fac:	f003 ffc0 	bl	cf30 <__aeabi_dsub>
    ih = 0;
    if (q0>0) { /* need iq[jz-1] to determine n */
    8fb0:	2c00      	cmp	r4, #0

    /* compute n */
    z  = scalbn(z,q0);      /* actual value of z */
    z -= 8.0*floor(z*0.125);        /* trim off integer >= 8 */
    n  = (int32_t) z;
    z -= (double)n;
    8fb2:	4606      	mov	r6, r0
    8fb4:	460f      	mov	r7, r1
    ih = 0;
    if (q0>0) { /* need iq[jz-1] to determine n */
    8fb6:	dd16      	ble.n	8fe6 <__kernel_rem_pio2+0x1be>
        i  = (iq[jz-1]>>(24-q0));
    8fb8:	f109 32ff 	add.w	r2, r9, #4294967295
    8fbc:	ab0e      	add	r3, sp, #56	; 0x38
    8fbe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    8fc2:	f1c4 0318 	rsb	r3, r4, #24
    8fc6:	fa41 f003 	asr.w	r0, r1, r3
        n += i;
        iq[jz-1] -= i<<(24-q0);
    8fca:	fa00 f303 	lsl.w	r3, r0, r3
    n  = (int32_t) z;
    z -= (double)n;
    ih = 0;
    if (q0>0) { /* need iq[jz-1] to determine n */
        i  = (iq[jz-1]>>(24-q0));
        n += i;
    8fce:	9d04      	ldr	r5, [sp, #16]
        iq[jz-1] -= i<<(24-q0);
    8fd0:	1acb      	subs	r3, r1, r3
    n  = (int32_t) z;
    z -= (double)n;
    ih = 0;
    if (q0>0) { /* need iq[jz-1] to determine n */
        i  = (iq[jz-1]>>(24-q0));
        n += i;
    8fd2:	4405      	add	r5, r0
        iq[jz-1] -= i<<(24-q0);
    8fd4:	a80e      	add	r0, sp, #56	; 0x38
    8fd6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        ih = iq[jz-1]>>(23-q0);
    8fda:	f1c4 0217 	rsb	r2, r4, #23
    n  = (int32_t) z;
    z -= (double)n;
    ih = 0;
    if (q0>0) { /* need iq[jz-1] to determine n */
        i  = (iq[jz-1]>>(24-q0));
        n += i;
    8fde:	9504      	str	r5, [sp, #16]
        iq[jz-1] -= i<<(24-q0);
        ih = iq[jz-1]>>(23-q0);
    8fe0:	fa43 f802 	asr.w	r8, r3, r2
    8fe4:	e00f      	b.n	9006 <__kernel_rem_pio2+0x1de>
    } else if (q0==0) ih = iq[jz-1]>>23;
    8fe6:	d107      	bne.n	8ff8 <__kernel_rem_pio2+0x1d0>
    8fe8:	f109 33ff 	add.w	r3, r9, #4294967295
    8fec:	a90e      	add	r1, sp, #56	; 0x38
    8fee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8ff2:	ea4f 58e3 	mov.w	r8, r3, asr #23
    8ff6:	e006      	b.n	9006 <__kernel_rem_pio2+0x1de>
    else if (z>=0.5) ih=2;
    8ff8:	2200      	movs	r2, #0
    8ffa:	4b40      	ldr	r3, [pc, #256]	; (90fc <__kernel_rem_pio2+0x2d4>)
    8ffc:	f004 fbd2 	bl	d7a4 <__aeabi_dcmpge>
    9000:	b928      	cbnz	r0, 900e <__kernel_rem_pio2+0x1e6>
    /* compute n */
    z  = scalbn(z,q0);      /* actual value of z */
    z -= 8.0*floor(z*0.125);        /* trim off integer >= 8 */
    n  = (int32_t) z;
    z -= (double)n;
    ih = 0;
    9002:	4680      	mov	r8, r0
    9004:	e04f      	b.n	90a6 <__kernel_rem_pio2+0x27e>
        iq[jz-1] -= i<<(24-q0);
        ih = iq[jz-1]>>(23-q0);
    } else if (q0==0) ih = iq[jz-1]>>23;
    else if (z>=0.5) ih=2;

    if (ih>0) { /* q > 0.5 */
    9006:	f1b8 0f00 	cmp.w	r8, #0
    900a:	dc02      	bgt.n	9012 <__kernel_rem_pio2+0x1ea>
    900c:	e04b      	b.n	90a6 <__kernel_rem_pio2+0x27e>
        i  = (iq[jz-1]>>(24-q0));
        n += i;
        iq[jz-1] -= i<<(24-q0);
        ih = iq[jz-1]>>(23-q0);
    } else if (q0==0) ih = iq[jz-1]>>23;
    else if (z>=0.5) ih=2;
    900e:	f04f 0802 	mov.w	r8, #2

    if (ih>0) { /* q > 0.5 */
        n += 1;
    9012:	9d04      	ldr	r5, [sp, #16]
        carry = 0;
        for (i=0; i<jz ; i++) { /* compute 1-q */
    9014:	2300      	movs	r3, #0
        ih = iq[jz-1]>>(23-q0);
    } else if (q0==0) ih = iq[jz-1]>>23;
    else if (z>=0.5) ih=2;

    if (ih>0) { /* q > 0.5 */
        n += 1;
    9016:	3501      	adds	r5, #1
    9018:	9504      	str	r5, [sp, #16]
    901a:	aa0e      	add	r2, sp, #56	; 0x38
        carry = 0;
    901c:	461d      	mov	r5, r3
        for (i=0; i<jz ; i++) { /* compute 1-q */
    901e:	454b      	cmp	r3, r9
    9020:	da0f      	bge.n	9042 <__kernel_rem_pio2+0x21a>
            j = iq[i];
    9022:	f852 1b04 	ldr.w	r1, [r2], #4
            if (carry==0) {
    9026:	b91d      	cbnz	r5, 9030 <__kernel_rem_pio2+0x208>
                if (j!=0) {
    9028:	b149      	cbz	r1, 903e <__kernel_rem_pio2+0x216>
                    carry = 1;
                    iq[i] = 0x1000000- j;
    902a:	f1c1 7180 	rsb	r1, r1, #16777216	; 0x1000000
    902e:	e003      	b.n	9038 <__kernel_rem_pio2+0x210>
                }
            } else  iq[i] = 0xffffff - j;
    9030:	f1c1 11ff 	rsb	r1, r1, #16711935	; 0xff00ff
    9034:	f501 417f 	add.w	r1, r1, #65280	; 0xff00
    9038:	f842 1c04 	str.w	r1, [r2, #-4]
    903c:	2501      	movs	r5, #1
    else if (z>=0.5) ih=2;

    if (ih>0) { /* q > 0.5 */
        n += 1;
        carry = 0;
        for (i=0; i<jz ; i++) { /* compute 1-q */
    903e:	3301      	adds	r3, #1
    9040:	e7ed      	b.n	901e <__kernel_rem_pio2+0x1f6>
                    carry = 1;
                    iq[i] = 0x1000000- j;
                }
            } else  iq[i] = 0xffffff - j;
        }
        if (q0>0) {     /* rare case: chance is 1 in 12 */
    9042:	2c00      	cmp	r4, #0
    9044:	dd16      	ble.n	9074 <__kernel_rem_pio2+0x24c>
            switch (q0) {
    9046:	2c01      	cmp	r4, #1
    9048:	d00b      	beq.n	9062 <__kernel_rem_pio2+0x23a>
    904a:	2c02      	cmp	r4, #2
    904c:	d112      	bne.n	9074 <__kernel_rem_pio2+0x24c>
                case 1:
                    iq[jz-1] &= 0x7fffff;
                    break;
                case 2:
                    iq[jz-1] &= 0x3fffff;
    904e:	f109 33ff 	add.w	r3, r9, #4294967295
    9052:	a90e      	add	r1, sp, #56	; 0x38
    9054:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    9058:	f3c2 0215 	ubfx	r2, r2, #0, #22
    905c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    break;
    9060:	e008      	b.n	9074 <__kernel_rem_pio2+0x24c>
            } else  iq[i] = 0xffffff - j;
        }
        if (q0>0) {     /* rare case: chance is 1 in 12 */
            switch (q0) {
                case 1:
                    iq[jz-1] &= 0x7fffff;
    9062:	f109 33ff 	add.w	r3, r9, #4294967295
    9066:	a80e      	add	r0, sp, #56	; 0x38
    9068:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    906c:	f3c2 0216 	ubfx	r2, r2, #0, #23
    9070:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                case 2:
                    iq[jz-1] &= 0x3fffff;
                    break;
            }
        }
        if (ih==2) {
    9074:	f1b8 0f02 	cmp.w	r8, #2
    9078:	d115      	bne.n	90a6 <__kernel_rem_pio2+0x27e>
            z = one - z;
    907a:	4632      	mov	r2, r6
    907c:	463b      	mov	r3, r7
    907e:	2000      	movs	r0, #0
    9080:	491f      	ldr	r1, [pc, #124]	; (9100 <__kernel_rem_pio2+0x2d8>)
    9082:	f003 ff55 	bl	cf30 <__aeabi_dsub>
    9086:	4606      	mov	r6, r0
    9088:	460f      	mov	r7, r1
            if (carry!=0) z -= scalbn(one,q0);
    908a:	b165      	cbz	r5, 90a6 <__kernel_rem_pio2+0x27e>
    908c:	4622      	mov	r2, r4
    908e:	2000      	movs	r0, #0
    9090:	491b      	ldr	r1, [pc, #108]	; (9100 <__kernel_rem_pio2+0x2d8>)
    9092:	f000 fa9d 	bl	95d0 <scalbn>
    9096:	4602      	mov	r2, r0
    9098:	460b      	mov	r3, r1
    909a:	4630      	mov	r0, r6
    909c:	4639      	mov	r1, r7
    909e:	f003 ff47 	bl	cf30 <__aeabi_dsub>
    90a2:	4606      	mov	r6, r0
    90a4:	460f      	mov	r7, r1
        }
    }

    /* check if recomputation is needed */
    if (z==zero) {
    90a6:	4630      	mov	r0, r6
    90a8:	4639      	mov	r1, r7
    90aa:	2200      	movs	r2, #0
    90ac:	2300      	movs	r3, #0
    90ae:	f004 fb5b 	bl	d768 <__aeabi_dcmpeq>
    90b2:	2800      	cmp	r0, #0
    90b4:	d06c      	beq.n	9190 <__kernel_rem_pio2+0x368>
        j = 0;
        for (i=jz-1; i>=jk; i--) j |= iq[i];
    90b6:	f109 31ff 	add.w	r1, r9, #4294967295
    90ba:	464b      	mov	r3, r9
        }
    }

    /* check if recomputation is needed */
    if (z==zero) {
        j = 0;
    90bc:	2200      	movs	r2, #0
        for (i=jz-1; i>=jk; i--) j |= iq[i];
    90be:	9d02      	ldr	r5, [sp, #8]
    90c0:	3b01      	subs	r3, #1
    90c2:	42ab      	cmp	r3, r5
    90c4:	db04      	blt.n	90d0 <__kernel_rem_pio2+0x2a8>
    90c6:	ad0e      	add	r5, sp, #56	; 0x38
    90c8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    90cc:	4302      	orrs	r2, r0
    90ce:	e7f6      	b.n	90be <__kernel_rem_pio2+0x296>
        if (j==0) { /* need recomputation */
    90d0:	2a00      	cmp	r2, #0
    90d2:	f040 81e7 	bne.w	94a4 <__kernel_rem_pio2+0x67c>
    90d6:	2601      	movs	r6, #1
    90d8:	f06f 0303 	mvn.w	r3, #3
    90dc:	4373      	muls	r3, r6
            for (k=1; iq[jk-k]==0; k++); /* k = no. of terms needed */
    90de:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    90e0:	58eb      	ldr	r3, [r5, r3]
    90e2:	b97b      	cbnz	r3, 9104 <__kernel_rem_pio2+0x2dc>
    90e4:	3601      	adds	r6, #1
    90e6:	e7f7      	b.n	90d8 <__kernel_rem_pio2+0x2b0>
    90e8:	00012f5c 	.word	0x00012f5c
    90ec:	00012f6c 	.word	0x00012f6c
    90f0:	3e700000 	.word	0x3e700000
    90f4:	41700000 	.word	0x41700000
    90f8:	40200000 	.word	0x40200000
    90fc:	3fe00000 	.word	0x3fe00000
    9100:	3ff00000 	.word	0x3ff00000
    9104:	f8dd b020 	ldr.w	r11, [r13, #32]
    9108:	a822      	add	r0, sp, #136	; 0x88
    910a:	44cb      	add	r11, r9
    910c:	a972      	add	r1, sp, #456	; 0x1c8
    910e:	eb00 00cb 	add.w	r0, r0, r11, lsl #3
    9112:	eb01 01c9 	add.w	r1, r1, r9, lsl #3

            for (i=jz+1; i<=jz+k; i++) { /* add q[jz+1] to q[jz+k] */
    9116:	f109 0501 	add.w	r5, r9, #1
    911a:	900d      	str	r0, [sp, #52]	; 0x34
    911c:	910b      	str	r1, [sp, #44]	; 0x2c
    911e:	2700      	movs	r7, #0
    9120:	eb09 0306 	add.w	r3, r9, r6
    9124:	429d      	cmp	r5, r3
    9126:	dc31      	bgt.n	918c <__kernel_rem_pio2+0x364>
                f[jx+i] = (double) ipio2[jv+i];
    9128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    912a:	f8dd b034 	ldr.w	r11, [r13, #52]	; 0x34
    912e:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
    9132:	f004 f84b 	bl	d1cc <__aeabi_i2d>
    9136:	44bb      	add	r11, r7
    9138:	e9cb 0100 	strd	r0, r1, [r11]
                for (j=0,fw=0.0; j<=jx; j++) fw += x[j]*f[jx+i-j];
    913c:	2000      	movs	r0, #0
    913e:	2100      	movs	r1, #0
    9140:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9142:	e9cd 0104 	strd	r0, r1, [r13, #16]
    9146:	f1a3 0a08 	sub.w	r10, r3, #8
    914a:	f04f 0800 	mov.w	r8, #0
    914e:	9907      	ldr	r1, [sp, #28]
    9150:	4588      	cmp	r8, r1
    9152:	dc12      	bgt.n	917a <__kernel_rem_pio2+0x352>
    9154:	e9fa 0102 	ldrd	r0, r1, [r10, #8]!
    9158:	ebab 03c8 	sub.w	r3, r11, r8, lsl #3
    915c:	e9d3 2300 	ldrd	r2, r3, [r3]
    9160:	f004 f89a 	bl	d298 <__aeabi_dmul>
    9164:	4602      	mov	r2, r0
    9166:	460b      	mov	r3, r1
    9168:	e9dd 0104 	ldrd	r0, r1, [r13, #16]
    916c:	f003 fee2 	bl	cf34 <__adddf3>
    9170:	f108 0801 	add.w	r8, r8, #1
    9174:	e9cd 0104 	strd	r0, r1, [r13, #16]
    9178:	e7e9      	b.n	914e <__kernel_rem_pio2+0x326>
    917a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                q[i] = fw;
    917c:	e9dd 0104 	ldrd	r0, r1, [r13, #16]
    9180:	443b      	add	r3, r7
    9182:	e9c3 0102 	strd	r0, r1, [r3, #8]
        j = 0;
        for (i=jz-1; i>=jk; i--) j |= iq[i];
        if (j==0) { /* need recomputation */
            for (k=1; iq[jk-k]==0; k++); /* k = no. of terms needed */

            for (i=jz+1; i<=jz+k; i++) { /* add q[jz+1] to q[jz+k] */
    9186:	3501      	adds	r5, #1
    9188:	3708      	adds	r7, #8
    918a:	e7c9      	b.n	9120 <__kernel_rem_pio2+0x2f8>
    918c:	4699      	mov	r9, r3
    918e:	e6ba      	b.n	8f06 <__kernel_rem_pio2+0xde>
    if (z==0.0) {
        jz -= 1;
        q0 -= 24;
        while (iq[jz]==0) { jz--; q0-=24;}
    } else { /* break z into 24-bit if necessary */
        z = scalbn(z,-q0);
    9190:	4630      	mov	r0, r6
    9192:	4639      	mov	r1, r7
    9194:	4262      	negs	r2, r4
    9196:	f000 fa1b 	bl	95d0 <scalbn>
        if (z>=two24) {
    919a:	2200      	movs	r2, #0
    919c:	4b9f      	ldr	r3, [pc, #636]	; (941c <__kernel_rem_pio2+0x5f4>)
    if (z==0.0) {
        jz -= 1;
        q0 -= 24;
        while (iq[jz]==0) { jz--; q0-=24;}
    } else { /* break z into 24-bit if necessary */
        z = scalbn(z,-q0);
    919e:	4606      	mov	r6, r0
    91a0:	460f      	mov	r7, r1
        if (z>=two24) {
    91a2:	f004 faff 	bl	d7a4 <__aeabi_dcmpge>
    91a6:	b1f8      	cbz	r0, 91e8 <__kernel_rem_pio2+0x3c0>
            fw = (double)((int32_t)(twon24*z));
    91a8:	2200      	movs	r2, #0
    91aa:	4b9d      	ldr	r3, [pc, #628]	; (9420 <__kernel_rem_pio2+0x5f8>)
    91ac:	4630      	mov	r0, r6
    91ae:	4639      	mov	r1, r7
    91b0:	f004 f872 	bl	d298 <__aeabi_dmul>
    91b4:	f004 fb0a 	bl	d7cc <__aeabi_d2iz>
    91b8:	4605      	mov	r5, r0
    91ba:	f004 f807 	bl	d1cc <__aeabi_i2d>
            iq[jz] = (int32_t)(z-two24*fw);
    91be:	2200      	movs	r2, #0
    91c0:	4b96      	ldr	r3, [pc, #600]	; (941c <__kernel_rem_pio2+0x5f4>)
    91c2:	f004 f869 	bl	d298 <__aeabi_dmul>
    91c6:	4602      	mov	r2, r0
    91c8:	460b      	mov	r3, r1
    91ca:	4630      	mov	r0, r6
    91cc:	4639      	mov	r1, r7
    91ce:	f003 feaf 	bl	cf30 <__aeabi_dsub>
    91d2:	f004 fafb 	bl	d7cc <__aeabi_d2iz>
    91d6:	aa0e      	add	r2, sp, #56	; 0x38
    91d8:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
            jz += 1;
    91dc:	f109 0901 	add.w	r9, r9, #1
            q0 += 24;
    91e0:	3418      	adds	r4, #24
            iq[jz] = (int32_t) fw;
    91e2:	f842 5029 	str.w	r5, [r2, r9, lsl #2]
    91e6:	e006      	b.n	91f6 <__kernel_rem_pio2+0x3ce>
        } else iq[jz] = (int32_t) z ;
    91e8:	4630      	mov	r0, r6
    91ea:	4639      	mov	r1, r7
    91ec:	f004 faee 	bl	d7cc <__aeabi_d2iz>
    91f0:	ab0e      	add	r3, sp, #56	; 0x38
    91f2:	f843 0029 	str.w	r0, [r3, r9, lsl #2]
    }

    /* convert integer "bit" chunk to floating-point value */
    fw = scalbn(one,q0);
    91f6:	4622      	mov	r2, r4
    91f8:	2000      	movs	r0, #0
    91fa:	498a      	ldr	r1, [pc, #552]	; (9424 <__kernel_rem_pio2+0x5fc>)
    91fc:	f000 f9e8 	bl	95d0 <scalbn>
    9200:	ea4f 0bc9 	mov.w	r11, r9, lsl #3
    9204:	4604      	mov	r4, r0
    9206:	f50d 7ae4 	add.w	r10, r13, #456	; 0x1c8
    920a:	a80e      	add	r0, sp, #56	; 0x38
    920c:	460d      	mov	r5, r1
    920e:	eb00 0c89 	add.w	r12, r0, r9, lsl #2
    9212:	44da      	add	r10, r11
    for (i=jz; i>=0; i--) {
    9214:	2600      	movs	r6, #0
    9216:	ebc6 0309 	rsb	r3, r6, r9
    921a:	2b00      	cmp	r3, #0
    921c:	db1e      	blt.n	925c <__kernel_rem_pio2+0x434>
    921e:	f06f 0303 	mvn.w	r3, #3
    9222:	4373      	muls	r3, r6
        q[i] = fw*(double)iq[i];
    9224:	f85c 0003 	ldr.w	r0, [r12, r3]
    9228:	f8cd c004 	str.w	r12, [r13, #4]
    922c:	f003 ffce 	bl	d1cc <__aeabi_i2d>
    9230:	4602      	mov	r2, r0
    9232:	460b      	mov	r3, r1
    9234:	4620      	mov	r0, r4
    9236:	4629      	mov	r1, r5
    9238:	f004 f82e 	bl	d298 <__aeabi_dmul>
    923c:	ebaa 07c6 	sub.w	r7, r10, r6, lsl #3
    9240:	e9c7 0100 	strd	r0, r1, [r7]
        fw*=twon24;
    9244:	2200      	movs	r2, #0
    9246:	4620      	mov	r0, r4
    9248:	4629      	mov	r1, r5
    924a:	4b75      	ldr	r3, [pc, #468]	; (9420 <__kernel_rem_pio2+0x5f8>)
    924c:	f004 f824 	bl	d298 <__aeabi_dmul>
    9250:	3601      	adds	r6, #1
    9252:	4604      	mov	r4, r0
    9254:	460d      	mov	r5, r1
    9256:	f8dd c004 	ldr.w	r12, [r13, #4]
    925a:	e7dc      	b.n	9216 <__kernel_rem_pio2+0x3ee>
    925c:	ad72      	add	r5, sp, #456	; 0x1c8
    925e:	445d      	add	r5, r11
    9260:	9507      	str	r5, [sp, #28]
    9262:	af48      	add	r7, sp, #288	; 0x120
        } else iq[jz] = (int32_t) z ;
    }

    /* convert integer "bit" chunk to floating-point value */
    fw = scalbn(one,q0);
    for (i=jz; i>=0; i--) {
    9264:	2500      	movs	r5, #0
    9266:	ebc5 0309 	rsb	r3, r5, r9
        q[i] = fw*(double)iq[i];
        fw*=twon24;
    }

    /* compute PIo2[0,...,jp]*q[jz,...,0] */
    for (i=jz; i>=0; i--) {
    926a:	2b00      	cmp	r3, #0
    926c:	db28      	blt.n	92c0 <__kernel_rem_pio2+0x498>
    926e:	9907      	ldr	r1, [sp, #28]
    9270:	00eb      	lsls	r3, r5, #3
    9272:	4e6d      	ldr	r6, [pc, #436]	; (9428 <__kernel_rem_pio2+0x600>)
    9274:	ebc3 0c01 	rsb	r12, r3, r1
    9278:	f04f 0a00 	mov.w	r10, #0
    927c:	f04f 0b00 	mov.w	r11, #0
    9280:	2400      	movs	r4, #0
        for (fw=0.0,k=0; k<=jp&&k<=jz-i; k++) fw += PIo2[k]*q[i+k];
    9282:	9802      	ldr	r0, [sp, #8]
    9284:	4284      	cmp	r4, r0
    9286:	dc17      	bgt.n	92b8 <__kernel_rem_pio2+0x490>
    9288:	42ac      	cmp	r4, r5
    928a:	dc15      	bgt.n	92b8 <__kernel_rem_pio2+0x490>
    928c:	e9f6 0102 	ldrd	r0, r1, [r6, #8]!
    9290:	eb0c 03c4 	add.w	r3, r12, r4, lsl #3
    9294:	e9d3 2300 	ldrd	r2, r3, [r3]
    9298:	f8cd c004 	str.w	r12, [r13, #4]
    929c:	f003 fffc 	bl	d298 <__aeabi_dmul>
    92a0:	4602      	mov	r2, r0
    92a2:	460b      	mov	r3, r1
    92a4:	4650      	mov	r0, r10
    92a6:	4659      	mov	r1, r11
    92a8:	f003 fe44 	bl	cf34 <__adddf3>
    92ac:	3401      	adds	r4, #1
    92ae:	4682      	mov	r10, r0
    92b0:	468b      	mov	r11, r1
    92b2:	f8dd c004 	ldr.w	r12, [r13, #4]
    92b6:	e7e4      	b.n	9282 <__kernel_rem_pio2+0x45a>
        fq[jz-i] = fw;
    92b8:	e9e7 ab02 	strd	r10, r11, [r7, #8]!
    92bc:	3501      	adds	r5, #1
    92be:	e7d2      	b.n	9266 <__kernel_rem_pio2+0x43e>
    }

    /* compress fq[] into y[] */
    switch (prec) {
    92c0:	9da4      	ldr	r5, [sp, #656]	; 0x290
    92c2:	2d03      	cmp	r5, #3
    92c4:	f200 80e7 	bhi.w	9496 <__kernel_rem_pio2+0x66e>
    92c8:	e8df f005 	tbb	[r15, r5]
    92cc:	0208080c 	.word	0x0208080c
    92d0:	a94a      	add	r1, sp, #296	; 0x128
    92d2:	eb01 0cc9 	add.w	r12, r1, r9, lsl #3
    92d6:	46e2      	mov	r10, r12
    92d8:	46cb      	mov	r11, r9
    92da:	e052      	b.n	9382 <__kernel_rem_pio2+0x55a>
    92dc:	2000      	movs	r0, #0
    92de:	464c      	mov	r4, r9
    92e0:	4601      	mov	r1, r0
    92e2:	e019      	b.n	9318 <__kernel_rem_pio2+0x4f0>
    92e4:	2000      	movs	r0, #0
    92e6:	4601      	mov	r1, r0
        case 0:
            fw = 0.0;
            for (i=jz; i>=0; i--) fw += fq[i];
    92e8:	f1b9 0f00 	cmp.w	r9, #0
    92ec:	db09      	blt.n	9302 <__kernel_rem_pio2+0x4da>
    92ee:	aa4a      	add	r2, sp, #296	; 0x128
    92f0:	eb02 04c9 	add.w	r4, r2, r9, lsl #3
    92f4:	e9d4 2300 	ldrd	r2, r3, [r4]
    92f8:	f003 fe1c 	bl	cf34 <__adddf3>
    92fc:	f109 39ff 	add.w	r9, r9, #4294967295
    9300:	e7f2      	b.n	92e8 <__kernel_rem_pio2+0x4c0>
            y[0] = (ih==0)? fw: -fw;
    9302:	f1b8 0f00 	cmp.w	r8, #0
    9306:	d001      	beq.n	930c <__kernel_rem_pio2+0x4e4>
    9308:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    930c:	9d06      	ldr	r5, [sp, #24]
    930e:	4602      	mov	r2, r0
    9310:	460b      	mov	r3, r1
    9312:	e9c5 2300 	strd	r2, r3, [r5]
            break;
    9316:	e0be      	b.n	9496 <__kernel_rem_pio2+0x66e>
        case 1:
        case 2:
            fw = 0.0;
            for (i=jz; i>=0; i--) fw += fq[i];
    9318:	2c00      	cmp	r4, #0
    931a:	db08      	blt.n	932e <__kernel_rem_pio2+0x506>
    931c:	aa4a      	add	r2, sp, #296	; 0x128
    931e:	eb02 05c4 	add.w	r5, r2, r4, lsl #3
    9322:	e9d5 2300 	ldrd	r2, r3, [r5]
    9326:	f003 fe05 	bl	cf34 <__adddf3>
    932a:	3c01      	subs	r4, #1
    932c:	e7f4      	b.n	9318 <__kernel_rem_pio2+0x4f0>
    932e:	4605      	mov	r5, r0
    9330:	460c      	mov	r4, r1
            STRICT_ASSIGN(double,fw,fw);
            y[0] = (ih==0)? fw: -fw;
    9332:	f1b8 0f00 	cmp.w	r8, #0
    9336:	d001      	beq.n	933c <__kernel_rem_pio2+0x514>
    9338:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    933c:	9806      	ldr	r0, [sp, #24]
    933e:	460b      	mov	r3, r1
    9340:	462a      	mov	r2, r5
    9342:	e9c0 2300 	strd	r2, r3, [r0]
            fw = fq[0]-fw;
    9346:	aa4a      	add	r2, sp, #296	; 0x128
    9348:	e9d2 0100 	ldrd	r0, r1, [r2]
    934c:	4623      	mov	r3, r4
    934e:	462a      	mov	r2, r5
    9350:	f003 fdee 	bl	cf30 <__aeabi_dsub>
            for (i=1; i<=jz; i++) fw += fq[i];
    9354:	2401      	movs	r4, #1
    9356:	454c      	cmp	r4, r9
    9358:	dc08      	bgt.n	936c <__kernel_rem_pio2+0x544>
    935a:	ab4a      	add	r3, sp, #296	; 0x128
    935c:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
    9360:	e9d5 2300 	ldrd	r2, r3, [r5]
    9364:	f003 fde6 	bl	cf34 <__adddf3>
    9368:	3401      	adds	r4, #1
    936a:	e7f4      	b.n	9356 <__kernel_rem_pio2+0x52e>
            y[1] = (ih==0)? fw: -fw;
    936c:	f1b8 0f00 	cmp.w	r8, #0
    9370:	d001      	beq.n	9376 <__kernel_rem_pio2+0x54e>
    9372:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
    9376:	9d06      	ldr	r5, [sp, #24]
    9378:	4602      	mov	r2, r0
    937a:	460b      	mov	r3, r1
    937c:	e9c5 2302 	strd	r2, r3, [r5, #8]
            break;
    9380:	e089      	b.n	9496 <__kernel_rem_pio2+0x66e>
        case 3: /* painful */
            for (i=jz; i>0; i--) {
    9382:	f1bb 0f00 	cmp.w	r11, #0
    9386:	dd22      	ble.n	93ce <__kernel_rem_pio2+0x5a6>
                fw      = fq[i-1]+fq[i];
    9388:	e9da 6700 	ldrd	r6, r7, [r10]
    938c:	e95a 0102 	ldrd	r0, r1, [r10, #-8]
    9390:	4632      	mov	r2, r6
    9392:	463b      	mov	r3, r7
    9394:	f8cd c004 	str.w	r12, [r13, #4]
    9398:	e9cd 0102 	strd	r0, r1, [r13, #8]
    939c:	f003 fdca 	bl	cf34 <__adddf3>
    93a0:	4604      	mov	r4, r0
    93a2:	460d      	mov	r5, r1
                fq[i]  += fq[i-1]-fw;
    93a4:	4622      	mov	r2, r4
    93a6:	462b      	mov	r3, r5
    93a8:	e9dd 0102 	ldrd	r0, r1, [r13, #8]
    93ac:	f003 fdc0 	bl	cf30 <__aeabi_dsub>
    93b0:	4602      	mov	r2, r0
    93b2:	460b      	mov	r3, r1
    93b4:	4630      	mov	r0, r6
    93b6:	4639      	mov	r1, r7
    93b8:	f003 fdbc 	bl	cf34 <__adddf3>
            for (i=1; i<=jz; i++) fw += fq[i];
            y[1] = (ih==0)? fw: -fw;
            break;
        case 3: /* painful */
            for (i=jz; i>0; i--) {
                fw      = fq[i-1]+fq[i];
    93bc:	f10b 3bff 	add.w	r11, r11, #4294967295
                fq[i]  += fq[i-1]-fw;
    93c0:	e9ca 0100 	strd	r0, r1, [r10]
                fq[i-1] = fw;
    93c4:	f8dd c004 	ldr.w	r12, [r13, #4]
    93c8:	e96a 4502 	strd	r4, r5, [r10, #-8]!
    93cc:	e7d9      	b.n	9382 <__kernel_rem_pio2+0x55a>
            fw = fq[0]-fw;
            for (i=1; i<=jz; i++) fw += fq[i];
            y[1] = (ih==0)? fw: -fw;
            break;
        case 3: /* painful */
            for (i=jz; i>0; i--) {
    93ce:	46e2      	mov	r10, r12
    93d0:	46cb      	mov	r11, r9
                fw      = fq[i-1]+fq[i];
                fq[i]  += fq[i-1]-fw;
                fq[i-1] = fw;
            }
            for (i=jz; i>1; i--) {
    93d2:	f1bb 0f01 	cmp.w	r11, #1
    93d6:	dd29      	ble.n	942c <__kernel_rem_pio2+0x604>
                fw      = fq[i-1]+fq[i];
    93d8:	e95a 2302 	ldrd	r2, r3, [r10, #-8]
    93dc:	e9da 6700 	ldrd	r6, r7, [r10]
    93e0:	e9cd 2302 	strd	r2, r3, [r13, #8]
    93e4:	4610      	mov	r0, r2
    93e6:	4619      	mov	r1, r3
    93e8:	4632      	mov	r2, r6
    93ea:	463b      	mov	r3, r7
    93ec:	f003 fda2 	bl	cf34 <__adddf3>
    93f0:	4604      	mov	r4, r0
    93f2:	460d      	mov	r5, r1
                fq[i]  += fq[i-1]-fw;
    93f4:	4622      	mov	r2, r4
    93f6:	462b      	mov	r3, r5
    93f8:	e9dd 0102 	ldrd	r0, r1, [r13, #8]
    93fc:	f003 fd98 	bl	cf30 <__aeabi_dsub>
    9400:	4602      	mov	r2, r0
    9402:	460b      	mov	r3, r1
    9404:	4630      	mov	r0, r6
    9406:	4639      	mov	r1, r7
    9408:	f003 fd94 	bl	cf34 <__adddf3>
                fw      = fq[i-1]+fq[i];
                fq[i]  += fq[i-1]-fw;
                fq[i-1] = fw;
            }
            for (i=jz; i>1; i--) {
                fw      = fq[i-1]+fq[i];
    940c:	f10b 3bff 	add.w	r11, r11, #4294967295
                fq[i]  += fq[i-1]-fw;
    9410:	e9ca 0100 	strd	r0, r1, [r10]
                fq[i-1] = fw;
    9414:	e96a 4502 	strd	r4, r5, [r10, #-8]!
    9418:	e7db      	b.n	93d2 <__kernel_rem_pio2+0x5aa>
    941a:	bf00      	nop
    941c:	41700000 	.word	0x41700000
    9420:	3e700000 	.word	0x3e700000
    9424:	3ff00000 	.word	0x3ff00000
    9428:	00013070 	.word	0x00013070
            for (i=jz; i>0; i--) {
                fw      = fq[i-1]+fq[i];
                fq[i]  += fq[i-1]-fw;
                fq[i-1] = fw;
            }
            for (i=jz; i>1; i--) {
    942c:	2400      	movs	r4, #0
    942e:	4621      	mov	r1, r4
                fw      = fq[i-1]+fq[i];
                fq[i]  += fq[i-1]-fw;
                fq[i-1] = fw;
            }
            for (fw=0.0,i=jz; i>=2; i--) fw += fq[i];
    9430:	f1b9 0f01 	cmp.w	r9, #1
    9434:	dd0b      	ble.n	944e <__kernel_rem_pio2+0x626>
    9436:	ab4a      	add	r3, sp, #296	; 0x128
    9438:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
    943c:	4620      	mov	r0, r4
    943e:	e9d5 2300 	ldrd	r2, r3, [r5]
    9442:	f003 fd77 	bl	cf34 <__adddf3>
    9446:	f109 39ff 	add.w	r9, r9, #4294967295
    944a:	4604      	mov	r4, r0
    944c:	e7f0      	b.n	9430 <__kernel_rem_pio2+0x608>
            if (ih==0) {
    944e:	f1b8 0f00 	cmp.w	r8, #0
    9452:	d10f      	bne.n	9474 <__kernel_rem_pio2+0x64c>
                y[0] =  fq[0];
    9454:	ad4a      	add	r5, sp, #296	; 0x128
    9456:	e9d5 2300 	ldrd	r2, r3, [r5]
    945a:	9d06      	ldr	r5, [sp, #24]
                y[1] =  fq[1];
    945c:	a84c      	add	r0, sp, #304	; 0x130
                fq[i]  += fq[i-1]-fw;
                fq[i-1] = fw;
            }
            for (fw=0.0,i=jz; i>=2; i--) fw += fq[i];
            if (ih==0) {
                y[0] =  fq[0];
    945e:	e9c5 2300 	strd	r2, r3, [r5]
                y[1] =  fq[1];
    9462:	e9d0 2300 	ldrd	r2, r3, [r0]
    9466:	e9c5 2302 	strd	r2, r3, [r5, #8]
                y[2] =  fw;
    946a:	4622      	mov	r2, r4
    946c:	460b      	mov	r3, r1
    946e:	e9c5 2304 	strd	r2, r3, [r5, #16]
    9472:	e010      	b.n	9496 <__kernel_rem_pio2+0x66e>
            } else {
                y[0] = -fq[0];
    9474:	9d06      	ldr	r5, [sp, #24]
    9476:	9b4a      	ldr	r3, [sp, #296]	; 0x128
                y[1] = -fq[1];
                y[2] = -fw;
    9478:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
            if (ih==0) {
                y[0] =  fq[0];
                y[1] =  fq[1];
                y[2] =  fw;
            } else {
                y[0] = -fq[0];
    947c:	602b      	str	r3, [r5, #0]
    947e:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
                y[1] = -fq[1];
                y[2] = -fw;
    9480:	612c      	str	r4, [r5, #16]
            if (ih==0) {
                y[0] =  fq[0];
                y[1] =  fq[1];
                y[2] =  fw;
            } else {
                y[0] = -fq[0];
    9482:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9486:	606b      	str	r3, [r5, #4]
                y[1] = -fq[1];
    9488:	9b4c      	ldr	r3, [sp, #304]	; 0x130
                y[2] = -fw;
    948a:	6169      	str	r1, [r5, #20]
                y[0] =  fq[0];
                y[1] =  fq[1];
                y[2] =  fw;
            } else {
                y[0] = -fq[0];
                y[1] = -fq[1];
    948c:	60ab      	str	r3, [r5, #8]
    948e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    9490:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
    9494:	60eb      	str	r3, [r5, #12]
                y[2] = -fw;
            }
    }
    return n&7;
    9496:	9d04      	ldr	r5, [sp, #16]
    9498:	f005 0007 	and.w	r0, r5, #7
}
    949c:	f50d 7d1b 	add.w	r13, r13, #620	; 0x26c
    94a0:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    }

    /* chop off zero terms */
    if (z==0.0) {
        jz -= 1;
        q0 -= 24;
    94a4:	3c18      	subs	r4, #24
        }
    }

    /* chop off zero terms */
    if (z==0.0) {
        jz -= 1;
    94a6:	4689      	mov	r9, r1
        q0 -= 24;
        while (iq[jz]==0) { jz--; q0-=24;}
    94a8:	a90e      	add	r1, sp, #56	; 0x38
    94aa:	f851 3029 	ldr.w	r3, [r1, r9, lsl #2]
    94ae:	2b00      	cmp	r3, #0
    94b0:	f47f aea1 	bne.w	91f6 <__kernel_rem_pio2+0x3ce>
    94b4:	f109 39ff 	add.w	r9, r9, #4294967295
    94b8:	3c18      	subs	r4, #24
    94ba:	e7f5      	b.n	94a8 <__kernel_rem_pio2+0x680>
    94bc:	0000      	movs	r0, r0
	...

000094c0 <floor>:

static const double huge = 1.0e300;

double
floor(double x)
{
    94c0:	e92d 47f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r14}
    int32_t i0,i1,j0;
    u_int32_t i,j;
    EXTRACT_WORDS(i0,i1,x);
    j0 = ((i0>>20)&0x7ff)-0x3ff;
    94c4:	f3c1 590a 	ubfx	r9, r1, #20, #11
    94c8:	f2a9 38ff 	subw	r8, r9, #1023	; 0x3ff
    if (j0<20) {
    94cc:	f1b8 0f13 	cmp.w	r8, #19

static const double huge = 1.0e300;

double
floor(double x)
{
    94d0:	4602      	mov	r2, r0
    94d2:	460b      	mov	r3, r1
    int32_t i0,i1,j0;
    u_int32_t i,j;
    EXTRACT_WORDS(i0,i1,x);
    94d4:	4604      	mov	r4, r0
    94d6:	460d      	mov	r5, r1
    94d8:	460e      	mov	r6, r1
    94da:	4607      	mov	r7, r0
    j0 = ((i0>>20)&0x7ff)-0x3ff;
    if (j0<20) {
    94dc:	dc36      	bgt.n	954c <floor+0x8c>
        if (j0<0) { /* raise inexact if x != 0 */
    94de:	f1b8 0f00 	cmp.w	r8, #0
    94e2:	da15      	bge.n	9510 <floor+0x50>
            if (huge+x>0.0) { /* return 0*sign(x) if |x|<1 */
    94e4:	a336      	add	r3, pc, #216	; (adr r3, 95c0 <floor+0x100>)
    94e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    94ea:	f003 fd23 	bl	cf34 <__adddf3>
    94ee:	2200      	movs	r2, #0
    94f0:	2300      	movs	r3, #0
    94f2:	f004 f961 	bl	d7b8 <__aeabi_dcmpgt>
    94f6:	2800      	cmp	r0, #0
    94f8:	d059      	beq.n	95ae <floor+0xee>
                if (i0>=0) {i0=i1=0;}
    94fa:	2d00      	cmp	r5, #0
    94fc:	da55      	bge.n	95aa <floor+0xea>
                else if (((i0&0x7fffffff)|i1)!=0)
    94fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    9502:	4323      	orrs	r3, r4
    9504:	4b30      	ldr	r3, [pc, #192]	; (95c8 <floor+0x108>)
    9506:	f04f 0700 	mov.w	r7, #0
    950a:	bf18      	it	ne
    950c:	461e      	movne	r6, r3
    950e:	e04e      	b.n	95ae <floor+0xee>
                    { i0=0xbff00000; i1=0;}
            }
        } else {
            i = (0x000fffff)>>j0;
    9510:	f8df 90b8 	ldr.w	r9, [r15, #184]	; 95cc <floor+0x10c>
    9514:	fa49 f908 	asr.w	r9, r9, r8
            if (((i0&i)|i1)==0) return x; /* x is integral */
    9518:	ea09 0c01 	and.w	r12, r9, r1
    951c:	ea5c 0c00 	orrs.w	r12, r12, r0
    9520:	d049      	beq.n	95b6 <floor+0xf6>
            if (huge+x>0.0) {   /* raise inexact flag */
    9522:	a327      	add	r3, pc, #156	; (adr r3, 95c0 <floor+0x100>)
    9524:	e9d3 2300 	ldrd	r2, r3, [r3]
    9528:	f003 fd04 	bl	cf34 <__adddf3>
    952c:	2200      	movs	r2, #0
    952e:	2300      	movs	r3, #0
    9530:	f004 f942 	bl	d7b8 <__aeabi_dcmpgt>
    9534:	b3d8      	cbz	r0, 95ae <floor+0xee>
                if (i0<0) i0 += (0x00100000)>>j0;
    9536:	2d00      	cmp	r5, #0
    9538:	da04      	bge.n	9544 <floor+0x84>
    953a:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
    953e:	fa46 f608 	asr.w	r6, r6, r8
    9542:	442e      	add	r6, r5
                i0 &= (~i);
    9544:	ea26 0609 	bic.w	r6, r6, r9
                i1=0;
    9548:	2700      	movs	r7, #0
    954a:	e030      	b.n	95ae <floor+0xee>
            }
        }
    } else if (j0>51) {
    954c:	f1b8 0f33 	cmp.w	r8, #51	; 0x33
    9550:	dd06      	ble.n	9560 <floor+0xa0>
        if (j0==0x400) return x+x;  /* inf or NaN */
    9552:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    9556:	d12e      	bne.n	95b6 <floor+0xf6>
    9558:	f003 fcec 	bl	cf34 <__adddf3>
    955c:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
        else return x;      /* x is integral */
    } else {
        i = ((u_int32_t)(0xffffffff))>>(j0-20);
    9560:	f2a9 4c13 	subw	r12, r9, #1043	; 0x413
    9564:	f04f 3aff 	mov.w	r10, #4294967295
    9568:	fa2a fa0c 	lsr.w	r10, r10, r12
        if ((i1&i)==0) return x; /* x is integral */
    956c:	ea1a 0f00 	tst.w	r10, r0
    9570:	d021      	beq.n	95b6 <floor+0xf6>
        if (huge+x>0.0) {       /* raise inexact flag */
    9572:	a313      	add	r3, pc, #76	; (adr r3, 95c0 <floor+0x100>)
    9574:	e9d3 2300 	ldrd	r2, r3, [r3]
    9578:	f003 fcdc 	bl	cf34 <__adddf3>
    957c:	2200      	movs	r2, #0
    957e:	2300      	movs	r3, #0
    9580:	f004 f91a 	bl	d7b8 <__aeabi_dcmpgt>
    9584:	b198      	cbz	r0, 95ae <floor+0xee>
            if (i0<0) {
    9586:	2d00      	cmp	r5, #0
    9588:	da0c      	bge.n	95a4 <floor+0xe4>
                if (j0==20) i0+=1;
    958a:	f1b8 0f14 	cmp.w	r8, #20
    958e:	d008      	beq.n	95a2 <floor+0xe2>
                else {
                    j = i1+(1<<(52-j0));
    9590:	f5c9 6986 	rsb	r9, r9, #1072	; 0x430
    9594:	f109 0903 	add.w	r9, r9, #3
    9598:	2701      	movs	r7, #1
    959a:	fa07 f709 	lsl.w	r7, r7, r9
                    if (j<(u_int32_t)i1) i0 +=1 ;   /* got a carry */
    959e:	193f      	adds	r7, r7, r4
    95a0:	d300      	bcc.n	95a4 <floor+0xe4>
    95a2:	1c6e      	adds	r6, r5, #1
                    i1=j;
                }
            }
            i1 &= (~i);
    95a4:	ea27 070a 	bic.w	r7, r7, r10
    95a8:	e001      	b.n	95ae <floor+0xee>
    EXTRACT_WORDS(i0,i1,x);
    j0 = ((i0>>20)&0x7ff)-0x3ff;
    if (j0<20) {
        if (j0<0) { /* raise inexact if x != 0 */
            if (huge+x>0.0) { /* return 0*sign(x) if |x|<1 */
                if (i0>=0) {i0=i1=0;}
    95aa:	2700      	movs	r7, #0
    95ac:	463e      	mov	r6, r7
                }
            }
            i1 &= (~i);
        }
    }
    INSERT_WORDS(x,i0,i1);
    95ae:	4631      	mov	r1, r6
    95b0:	4638      	mov	r0, r7
    return x;
    95b2:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
                else if (((i0&0x7fffffff)|i1)!=0)
                    { i0=0xbff00000; i1=0;}
            }
        } else {
            i = (0x000fffff)>>j0;
            if (((i0&i)|i1)==0) return x; /* x is integral */
    95b6:	4610      	mov	r0, r2
    95b8:	4619      	mov	r1, r3
            i1 &= (~i);
        }
    }
    INSERT_WORDS(x,i0,i1);
    return x;
}
    95ba:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
    95be:	bf00      	nop
    95c0:	8800759c 	.word	0x8800759c
    95c4:	7e37e43c 	.word	0x7e37e43c
    95c8:	bff00000 	.word	0xbff00000
    95cc:	000fffff 	.word	0x000fffff

000095d0 <scalbn>:
double
scalbn (double x, int n)
{
    int32_t k,hx,lx;
    EXTRACT_WORDS(hx,lx,x);
    k = (hx&0x7ff00000)>>20;        /* extract exponent */
    95d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
huge   = 1.0e+300,
tiny   = 1.0e-300;

double
scalbn (double x, int n)
{
    95d4:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}
    int32_t k,hx,lx;
    EXTRACT_WORDS(hx,lx,x);
    95d8:	468c      	mov	r12, r1
huge   = 1.0e+300,
tiny   = 1.0e-300;

double
scalbn (double x, int n)
{
    95da:	4607      	mov	r7, r0
    95dc:	460e      	mov	r6, r1
    95de:	4690      	mov	r8, r2
    int32_t k,hx,lx;
    EXTRACT_WORDS(hx,lx,x);
    k = (hx&0x7ff00000)>>20;        /* extract exponent */
    if (k==0) {             /* 0 or subnormal x */
    95e0:	b98b      	cbnz	r3, 9606 <scalbn+0x36>
        if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */
    95e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    95e6:	4303      	orrs	r3, r0
    95e8:	d058      	beq.n	969c <scalbn+0xcc>
        x *= two54;
    95ea:	4b37      	ldr	r3, [pc, #220]	; (96c8 <scalbn+0xf8>)
    95ec:	2200      	movs	r2, #0
    95ee:	f003 fe53 	bl	d298 <__aeabi_dmul>
        GET_HIGH_WORD(hx,x);
        k = ((hx&0x7ff00000)>>20) - 54;
        if (n< -50000) return tiny*x;   /*underflow*/
    95f2:	4b36      	ldr	r3, [pc, #216]	; (96cc <scalbn+0xfc>)
    int32_t k,hx,lx;
    EXTRACT_WORDS(hx,lx,x);
    k = (hx&0x7ff00000)>>20;        /* extract exponent */
    if (k==0) {             /* 0 or subnormal x */
        if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */
        x *= two54;
    95f4:	4607      	mov	r7, r0
        GET_HIGH_WORD(hx,x);
        k = ((hx&0x7ff00000)>>20) - 54;
        if (n< -50000) return tiny*x;   /*underflow*/
    95f6:	4598      	cmp	r8, r3
    int32_t k,hx,lx;
    EXTRACT_WORDS(hx,lx,x);
    k = (hx&0x7ff00000)>>20;        /* extract exponent */
    if (k==0) {             /* 0 or subnormal x */
        if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */
        x *= two54;
    95f8:	460e      	mov	r6, r1
        GET_HIGH_WORD(hx,x);
        k = ((hx&0x7ff00000)>>20) - 54;
        if (n< -50000) return tiny*x;   /*underflow*/
    95fa:	db3d      	blt.n	9678 <scalbn+0xa8>
    k = (hx&0x7ff00000)>>20;        /* extract exponent */
    if (k==0) {             /* 0 or subnormal x */
        if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */
        x *= two54;
        GET_HIGH_WORD(hx,x);
        k = ((hx&0x7ff00000)>>20) - 54;
    95fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
    EXTRACT_WORDS(hx,lx,x);
    k = (hx&0x7ff00000)>>20;        /* extract exponent */
    if (k==0) {             /* 0 or subnormal x */
        if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */
        x *= two54;
        GET_HIGH_WORD(hx,x);
    9600:	468c      	mov	r12, r1
        k = ((hx&0x7ff00000)>>20) - 54;
    9602:	3b36      	subs	r3, #54	; 0x36
    9604:	e008      	b.n	9618 <scalbn+0x48>
        if (n< -50000) return tiny*x;   /*underflow*/
    }
    if (k==0x7ff) return x+x;       /* NaN or Inf */
    9606:	f240 72ff 	movw	r2, #2047	; 0x7ff
    960a:	4293      	cmp	r3, r2
    960c:	d104      	bne.n	9618 <scalbn+0x48>
    960e:	463a      	mov	r2, r7
    9610:	4633      	mov	r3, r6
    9612:	f003 fc8f 	bl	cf34 <__adddf3>
    9616:	e03f      	b.n	9698 <scalbn+0xc8>
    k = k+n;
    9618:	eb03 0408 	add.w	r4, r3, r8
    if (k >  0x7fe) return huge*copysign(huge,x); /* overflow  */
    961c:	f240 73fe 	movw	r3, #2046	; 0x7fe
    9620:	429c      	cmp	r4, r3
    9622:	dd05      	ble.n	9630 <scalbn+0x60>
    9624:	a120      	add	r1, pc, #128	; (adr r1, 96a8 <scalbn+0xd8>)
    9626:	e9d1 0100 	ldrd	r0, r1, [r1]
    962a:	2e00      	cmp	r6, #0
    962c:	da19      	bge.n	9662 <scalbn+0x92>
    962e:	e015      	b.n	965c <scalbn+0x8c>
    if (k > 0)              /* normal result */
    9630:	2c00      	cmp	r4, #0
    9632:	dd06      	ble.n	9642 <scalbn+0x72>
        {SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20)); return x;}
    9634:	f02c 46ff 	bic.w	r6, r12, #2139095040	; 0x7f800000
    9638:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
    963c:	ea46 5604 	orr.w	r6, r6, r4, lsl #20
    9640:	e02c      	b.n	969c <scalbn+0xcc>

    if (k <= -54) {
    9642:	f114 0f35 	cmn.w	r4, #53	; 0x35
    9646:	da1b      	bge.n	9680 <scalbn+0xb0>
        if (n > 50000) {  /* in case integer overflow in n+k */
    9648:	f24c 3350 	movw	r3, #50000	; 0xc350
    964c:	4598      	cmp	r8, r3
    964e:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    9652:	dd0a      	ble.n	966a <scalbn+0x9a>
            return huge*copysign(huge,x);   /*overflow*/
    9654:	a114      	add	r1, pc, #80	; (adr r1, 96a8 <scalbn+0xd8>)
    9656:	e9d1 0100 	ldrd	r0, r1, [r1]
    965a:	b116      	cbz	r6, 9662 <scalbn+0x92>
    965c:	a114      	add	r1, pc, #80	; (adr r1, 96b0 <scalbn+0xe0>)
    965e:	e9d1 0100 	ldrd	r0, r1, [r1]
    9662:	a311      	add	r3, pc, #68	; (adr r3, 96a8 <scalbn+0xd8>)
    9664:	e9d3 2300 	ldrd	r2, r3, [r3]
    9668:	e014      	b.n	9694 <scalbn+0xc4>
        } else {
            return tiny*copysign(tiny,x);   /*underflow*/
    966a:	a113      	add	r1, pc, #76	; (adr r1, 96b8 <scalbn+0xe8>)
    966c:	e9d1 0100 	ldrd	r0, r1, [r1]
    9670:	b116      	cbz	r6, 9678 <scalbn+0xa8>
    9672:	a113      	add	r1, pc, #76	; (adr r1, 96c0 <scalbn+0xf0>)
    9674:	e9d1 0100 	ldrd	r0, r1, [r1]
    9678:	a30f      	add	r3, pc, #60	; (adr r3, 96b8 <scalbn+0xe8>)
    967a:	e9d3 2300 	ldrd	r2, r3, [r3]
    967e:	e009      	b.n	9694 <scalbn+0xc4>
        }
    }
    k += 54;                /* subnormal result */
    SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20));
    9680:	f02c 4cff 	bic.w	r12, r12, #2139095040	; 0x7f800000
            return huge*copysign(huge,x);   /*overflow*/
        } else {
            return tiny*copysign(tiny,x);   /*underflow*/
        }
    }
    k += 54;                /* subnormal result */
    9684:	3436      	adds	r4, #54	; 0x36
    SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20));
    9686:	f42c 0ce0 	bic.w	r12, r12, #7340032	; 0x700000
    return x*twom54;
    968a:	4b11      	ldr	r3, [pc, #68]	; (96d0 <scalbn+0x100>)
        } else {
            return tiny*copysign(tiny,x);   /*underflow*/
        }
    }
    k += 54;                /* subnormal result */
    SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20));
    968c:	4638      	mov	r0, r7
    968e:	ea4c 5104 	orr.w	r1, r12, r4, lsl #20
    return x*twom54;
    9692:	2200      	movs	r2, #0
    9694:	f003 fe00 	bl	d298 <__aeabi_dmul>
    9698:	4607      	mov	r7, r0
    969a:	460e      	mov	r6, r1
}
    969c:	4638      	mov	r0, r7
    969e:	4631      	mov	r1, r6
    96a0:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    96a4:	f3af 8000 	nop.w
    96a8:	8800759c 	.word	0x8800759c
    96ac:	7e37e43c 	.word	0x7e37e43c
    96b0:	8800759c 	.word	0x8800759c
    96b4:	fe37e43c 	.word	0xfe37e43c
    96b8:	c2f8f359 	.word	0xc2f8f359
    96bc:	01a56e1f 	.word	0x01a56e1f
    96c0:	c2f8f359 	.word	0xc2f8f359
    96c4:	81a56e1f 	.word	0x81a56e1f
    96c8:	43500000 	.word	0x43500000
    96cc:	ffff3cb0 	.word	0xffff3cb0
    96d0:	3c900000 	.word	0x3c900000
    96d4:	f3af 8000 	nop.w

000096d8 <print_version>:
    .project = PROJECT,
    .buildid = BUILDID
};

void print_version(void)
{
    96d8:	b508      	push	{r3, r14}
    printf("version:\n");
    96da:	480c      	ldr	r0, [pc, #48]	; (970c <print_version+0x34>)
    96dc:	f003 f8d4 	bl	c888 <_printf>
    printf("\tarch:     %s\n", version.arch);
    96e0:	490b      	ldr	r1, [pc, #44]	; (9710 <print_version+0x38>)
    96e2:	480c      	ldr	r0, [pc, #48]	; (9714 <print_version+0x3c>)
    96e4:	f003 f8d0 	bl	c888 <_printf>
    printf("\tplatform: %s\n", version.platform);
    96e8:	490b      	ldr	r1, [pc, #44]	; (9718 <print_version+0x40>)
    96ea:	480c      	ldr	r0, [pc, #48]	; (971c <print_version+0x44>)
    96ec:	f003 f8cc 	bl	c888 <_printf>
    printf("\ttarget:   %s\n", version.target);
    96f0:	490b      	ldr	r1, [pc, #44]	; (9720 <print_version+0x48>)
    96f2:	480c      	ldr	r0, [pc, #48]	; (9724 <print_version+0x4c>)
    96f4:	f003 f8c8 	bl	c888 <_printf>
    printf("\tproject:  %s\n", version.project);
    96f8:	490b      	ldr	r1, [pc, #44]	; (9728 <print_version+0x50>)
    96fa:	480c      	ldr	r0, [pc, #48]	; (972c <print_version+0x54>)
    96fc:	f003 f8c4 	bl	c888 <_printf>
    printf("\tbuildid:  %s\n", version.buildid);
}
    9700:	e8bd 4008 	ldmia.w	r13!, {r3, r14}
    printf("version:\n");
    printf("\tarch:     %s\n", version.arch);
    printf("\tplatform: %s\n", version.platform);
    printf("\ttarget:   %s\n", version.target);
    printf("\tproject:  %s\n", version.project);
    printf("\tbuildid:  %s\n", version.buildid);
    9704:	480a      	ldr	r0, [pc, #40]	; (9730 <print_version+0x58>)
    9706:	490b      	ldr	r1, [pc, #44]	; (9734 <print_version+0x5c>)
    9708:	f003 b8be 	b.w	c888 <_printf>
    970c:	000130b8 	.word	0x000130b8
    9710:	000130d1 	.word	0x000130d1
    9714:	000130c2 	.word	0x000130c2
    9718:	000130e4 	.word	0x000130e4
    971c:	000130d5 	.word	0x000130d5
    9720:	000130fd 	.word	0x000130fd
    9724:	000130ee 	.word	0x000130ee
    9728:	00013118 	.word	0x00013118
    972c:	00013109 	.word	0x00013109
    9730:	00013129 	.word	0x00013129
    9734:	00013138 	.word	0x00013138

00009738 <cmd_version>:

#include <debug.h>
#include <lib/console.h>

static int cmd_version(int argc, const cmd_args *argv)
{
    9738:	b508      	push	{r3, r14}
    print_version();
    973a:	f7ff ffcd 	bl	96d8 <print_version>
    return 0;
}
    973e:	2000      	movs	r0, #0
    9740:	bd08      	pop	{r3, r15}
	...

00009744 <platform_halt>:
 * default implementations of these routines, if the platform code
 * chooses not to implement.
 */
__WEAK void platform_halt(platform_halt_action suggested_action,
                          platform_halt_reason reason)
{
    9744:	b508      	push	{r3, r14}
        panic_shell_start();
    }

#endif  // ENABLE_PANIC_SHELL

    dprintf(ALWAYS, "HALT: spinning forever... (reason = %d)\n", reason);
    9746:	4802      	ldr	r0, [pc, #8]	; (9750 <platform_halt+0xc>)
    9748:	f003 f89e 	bl	c888 <_printf>
    974c:	b672      	cpsid	i
    CF;
    974e:	e7fe      	b.n	974e <platform_halt+0xa>
    9750:	00013164 	.word	0x00013164

00009754 <cmd_poweroff>:
    platform_halt(HALT_ACTION_REBOOT, HALT_REASON_SW_RESET);
    return 0;
}

static int cmd_poweroff(int argc, const cmd_args *argv)
{
    9754:	b508      	push	{r3, r14}
    platform_halt(HALT_ACTION_SHUTDOWN, HALT_REASON_SW_RESET);
    9756:	2002      	movs	r0, #2
    9758:	2107      	movs	r1, #7
    975a:	f7ff fff3 	bl	9744 <platform_halt>

0000975e <cmd_reboot>:
#if WITH_LIB_CONSOLE

#include <lib/console.h>

static int cmd_reboot(int argc, const cmd_args *argv)
{
    975e:	b508      	push	{r3, r14}
    platform_halt(HALT_ACTION_REBOOT, HALT_REASON_SW_RESET);
    9760:	2001      	movs	r0, #1
    9762:	2107      	movs	r1, #7
    9764:	f7ff ffee 	bl	9744 <platform_halt>

00009768 <GPIOBaseValid>:
           (ulPort == GPIO_PORTG_BASE) || (ulPort == GPIO_PORTG_AHB_BASE) ||
           (ulPort == GPIO_PORTH_BASE) || (ulPort == GPIO_PORTH_AHB_BASE) ||
           (ulPort == GPIO_PORTJ_BASE) || (ulPort == GPIO_PORTJ_AHB_BASE) ||
           (ulPort == GPIO_PORTK_BASE) || (ulPort == GPIO_PORTL_BASE) ||
           (ulPort == GPIO_PORTM_BASE) || (ulPort == GPIO_PORTN_BASE) ||
           (ulPort == GPIO_PORTP_BASE) || (ulPort == GPIO_PORTQ_BASE));
    9768:	f420 5340 	bic.w	r3, r0, #12288	; 0x3000
    976c:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
    9770:	f420 5280 	bic.w	r2, r0, #4096	; 0x1000
    9774:	d01b      	beq.n	97ae <GPIOBaseValid+0x46>
//*****************************************************************************
#ifdef DEBUG
static tBoolean
GPIOBaseValid(unsigned long ulPort)
{
    return((ulPort == GPIO_PORTA_BASE) || (ulPort == GPIO_PORTA_AHB_BASE) ||
    9776:	490f      	ldr	r1, [pc, #60]	; (97b4 <GPIOBaseValid+0x4c>)
    9778:	428b      	cmp	r3, r1
    977a:	d018      	beq.n	97ae <GPIOBaseValid+0x46>
           (ulPort == GPIO_PORTB_BASE) || (ulPort == GPIO_PORTB_AHB_BASE) ||
           (ulPort == GPIO_PORTC_BASE) || (ulPort == GPIO_PORTC_AHB_BASE) ||
           (ulPort == GPIO_PORTD_BASE) || (ulPort == GPIO_PORTD_AHB_BASE) ||
    977c:	f5a1 3150 	sub.w	r1, r1, #212992	; 0x34000
    9780:	428b      	cmp	r3, r1
    9782:	d014      	beq.n	97ae <GPIOBaseValid+0x46>
           (ulPort == GPIO_PORTE_BASE) || (ulPort == GPIO_PORTE_AHB_BASE) ||
    9784:	f501 3160 	add.w	r1, r1, #229376	; 0x38000
    9788:	428b      	cmp	r3, r1
    978a:	d010      	beq.n	97ae <GPIOBaseValid+0x46>
           (ulPort == GPIO_PORTF_BASE) || (ulPort == GPIO_PORTF_AHB_BASE) ||
           (ulPort == GPIO_PORTG_BASE) || (ulPort == GPIO_PORTG_AHB_BASE) ||
           (ulPort == GPIO_PORTH_BASE) || (ulPort == GPIO_PORTH_AHB_BASE) ||
    978c:	f5a1 31f8 	sub.w	r1, r1, #126976	; 0x1f000
    9790:	4288      	cmp	r0, r1
    9792:	d00c      	beq.n	97ae <GPIOBaseValid+0x46>
           (ulPort == GPIO_PORTJ_BASE) || (ulPort == GPIO_PORTJ_AHB_BASE) ||
    9794:	f501 310c 	add.w	r1, r1, #143360	; 0x23000
    9798:	428b      	cmp	r3, r1
    979a:	d008      	beq.n	97ae <GPIOBaseValid+0x46>
           (ulPort == GPIO_PORTK_BASE) || (ulPort == GPIO_PORTL_BASE) ||
           (ulPort == GPIO_PORTM_BASE) || (ulPort == GPIO_PORTN_BASE) ||
    979c:	4b06      	ldr	r3, [pc, #24]	; (97b8 <GPIOBaseValid+0x50>)
    979e:	429a      	cmp	r2, r3
    97a0:	d005      	beq.n	97ae <GPIOBaseValid+0x46>
           (ulPort == GPIO_PORTP_BASE) || (ulPort == GPIO_PORTQ_BASE));
    97a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
    97a6:	1ac3      	subs	r3, r0, r3
    97a8:	4258      	negs	r0, r3
    97aa:	4158      	adcs	r0, r3
    97ac:	4770      	bx	r14
    97ae:	2001      	movs	r0, #1
}
    97b0:	4770      	bx	r14
    97b2:	bf00      	nop
    97b4:	40058000 	.word	0x40058000
    97b8:	40064000 	.word	0x40064000

000097bc <GPIODirModeSet>:
//
//*****************************************************************************
void
GPIODirModeSet(unsigned long ulPort, unsigned char ucPins,
               unsigned long ulPinIO)
{
    97bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    97be:	4677      	mov	r7, r14
    97c0:	4604      	mov	r4, r0
    97c2:	460d      	mov	r5, r1
    97c4:	4616      	mov	r6, r2
    //
    // Check the arguments.
    //
    ASSERT(GPIOBaseValid(ulPort));
    97c6:	f7ff ffcf 	bl	9768 <GPIOBaseValid>
    97ca:	b938      	cbnz	r0, 97dc <GPIODirModeSet+0x20>
    97cc:	4b14      	ldr	r3, [pc, #80]	; (9820 <GPIODirModeSet+0x64>)
    97ce:	4638      	mov	r0, r7
    97d0:	9300      	str	r3, [sp, #0]
    97d2:	4914      	ldr	r1, [pc, #80]	; (9824 <GPIODirModeSet+0x68>)
    97d4:	4a14      	ldr	r2, [pc, #80]	; (9828 <GPIODirModeSet+0x6c>)
    97d6:	f44f 7390 	mov.w	r3, #288	; 0x120
    97da:	e008      	b.n	97ee <GPIODirModeSet+0x32>
    ASSERT((ulPinIO == GPIO_DIR_MODE_IN) || (ulPinIO == GPIO_DIR_MODE_OUT) ||
    97dc:	2e02      	cmp	r6, #2
    97de:	d908      	bls.n	97f2 <GPIODirModeSet+0x36>
    97e0:	4b12      	ldr	r3, [pc, #72]	; (982c <GPIODirModeSet+0x70>)
    97e2:	4910      	ldr	r1, [pc, #64]	; (9824 <GPIODirModeSet+0x68>)
    97e4:	4a10      	ldr	r2, [pc, #64]	; (9828 <GPIODirModeSet+0x6c>)
    97e6:	9300      	str	r3, [sp, #0]
    97e8:	4638      	mov	r0, r7
    97ea:	f44f 7391 	mov.w	r3, #290	; 0x122
    97ee:	f001 fe61 	bl	b4b4 <_panic>

    //
    // Set the pin direction and mode.
    //
    HWREG(ulPort + GPIO_O_DIR) = ((ulPinIO & 1) ?
                                  (HWREG(ulPort + GPIO_O_DIR) | ucPins) :
    97f2:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    97f6:	f016 0f01 	tst.w	r6, #1
    97fa:	bf14      	ite	ne
    97fc:	432b      	orrne	r3, r5
    97fe:	43ab      	biceq	r3, r5
    9800:	f504 6280 	add.w	r2, r4, #1024	; 0x400
           (ulPinIO == GPIO_DIR_MODE_HW));

    //
    // Set the pin direction and mode.
    //
    HWREG(ulPort + GPIO_O_DIR) = ((ulPinIO & 1) ?
    9804:	6013      	str	r3, [r2, #0]
                                  (HWREG(ulPort + GPIO_O_DIR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_DIR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_AFSEL) = ((ulPinIO & 2) ?
                                    (HWREG(ulPort + GPIO_O_AFSEL) | ucPins) :
    9806:	f8d4 2420 	ldr.w	r2, [r4, #1056]	; 0x420
    980a:	f016 0f02 	tst.w	r6, #2
    980e:	f504 6384 	add.w	r3, r4, #1056	; 0x420
    9812:	bf14      	ite	ne
    9814:	4315      	orrne	r5, r2
    9816:	ea22 0505 	biceq.w	r5, r2, r5
    // Set the pin direction and mode.
    //
    HWREG(ulPort + GPIO_O_DIR) = ((ulPinIO & 1) ?
                                  (HWREG(ulPort + GPIO_O_DIR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_DIR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_AFSEL) = ((ulPinIO & 2) ?
    981a:	601d      	str	r5, [r3, #0]
                                    (HWREG(ulPort + GPIO_O_AFSEL) | ucPins) :
                                    (HWREG(ulPort + GPIO_O_AFSEL) &
                                     ~(ucPins)));
}
    981c:	b003      	add	sp, #12
    981e:	bdf0      	pop	{r4, r5, r6, r7, r15}
    9820:	00014334 	.word	0x00014334
    9824:	0001076e 	.word	0x0001076e
    9828:	000142fa 	.word	0x000142fa
    982c:	0001434a 	.word	0x0001434a

00009830 <GPIOPadConfigSet>:
//
//*****************************************************************************
void
GPIOPadConfigSet(unsigned long ulPort, unsigned char ucPins,
                 unsigned long ulStrength, unsigned long ulPinType)
{
    9830:	e92d 41f3 	stmdb	r13!, {r0, r1, r4, r5, r6, r7, r8, r14}
    9834:	46f0      	mov	r8, r14
    9836:	4604      	mov	r4, r0
    9838:	460d      	mov	r5, r1
    983a:	4617      	mov	r7, r2
    983c:	461e      	mov	r6, r3
    //
    // Check the arguments.
    //
    ASSERT(GPIOBaseValid(ulPort));
    983e:	f7ff ff93 	bl	9768 <GPIOBaseValid>
    9842:	b938      	cbnz	r0, 9854 <GPIOPadConfigSet+0x24>
    9844:	4b41      	ldr	r3, [pc, #260]	; (994c <GPIOPadConfigSet+0x11c>)
    9846:	4640      	mov	r0, r8
    9848:	9300      	str	r3, [sp, #0]
    984a:	4941      	ldr	r1, [pc, #260]	; (9950 <GPIOPadConfigSet+0x120>)
    984c:	4a41      	ldr	r2, [pc, #260]	; (9954 <GPIOPadConfigSet+0x124>)
    984e:	f240 2301 	movw	r3, #513	; 0x201
    9852:	e00d      	b.n	9870 <GPIOPadConfigSet+0x40>
    ASSERT((ulStrength == GPIO_STRENGTH_2MA) ||
    9854:	1e7b      	subs	r3, r7, #1
    9856:	2b01      	cmp	r3, #1
    9858:	d90c      	bls.n	9874 <GPIOPadConfigSet+0x44>
    985a:	f027 0308 	bic.w	r3, r7, #8
    985e:	2b04      	cmp	r3, #4
    9860:	d008      	beq.n	9874 <GPIOPadConfigSet+0x44>
    9862:	4b3d      	ldr	r3, [pc, #244]	; (9958 <GPIOPadConfigSet+0x128>)
    9864:	493a      	ldr	r1, [pc, #232]	; (9950 <GPIOPadConfigSet+0x120>)
    9866:	4a3b      	ldr	r2, [pc, #236]	; (9954 <GPIOPadConfigSet+0x124>)
    9868:	9300      	str	r3, [sp, #0]
    986a:	4640      	mov	r0, r8
    986c:	f240 2305 	movw	r3, #517	; 0x205
    9870:	f001 fe20 	bl	b4b4 <_panic>
           (ulStrength == GPIO_STRENGTH_4MA) ||
           (ulStrength == GPIO_STRENGTH_8MA) ||
           (ulStrength == GPIO_STRENGTH_8MA_SC));
    ASSERT((ulPinType == GPIO_PIN_TYPE_STD) ||
    9874:	f1a6 0308 	sub.w	r3, r6, #8
    9878:	2b05      	cmp	r3, #5
    987a:	d85c      	bhi.n	9936 <GPIOPadConfigSet+0x106>

    //
    // Set the output drive strength.
    //
    HWREG(ulPort + GPIO_O_DR2R) = ((ulStrength & 1) ?
                                   (HWREG(ulPort + GPIO_O_DR2R) | ucPins) :
    987c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
    9880:	f017 0f01 	tst.w	r7, #1
    9884:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    9888:	bf14      	ite	ne
    988a:	432b      	orrne	r3, r5
    988c:	43ab      	biceq	r3, r5
           (ulPinType == GPIO_PIN_TYPE_ANALOG));

    //
    // Set the output drive strength.
    //
    HWREG(ulPort + GPIO_O_DR2R) = ((ulStrength & 1) ?
    988e:	6013      	str	r3, [r2, #0]
                                   (HWREG(ulPort + GPIO_O_DR2R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR2R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR4R) = ((ulStrength & 2) ?
                                   (HWREG(ulPort + GPIO_O_DR4R) | ucPins) :
    9890:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    9894:	f017 0f02 	tst.w	r7, #2
    9898:	f204 5204 	addw	r2, r4, #1284	; 0x504
    989c:	bf14      	ite	ne
    989e:	432b      	orrne	r3, r5
    98a0:	43ab      	biceq	r3, r5
    // Set the output drive strength.
    //
    HWREG(ulPort + GPIO_O_DR2R) = ((ulStrength & 1) ?
                                   (HWREG(ulPort + GPIO_O_DR2R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR2R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR4R) = ((ulStrength & 2) ?
    98a2:	6013      	str	r3, [r2, #0]
                                   (HWREG(ulPort + GPIO_O_DR4R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR4R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR8R) = ((ulStrength & 4) ?
                                   (HWREG(ulPort + GPIO_O_DR8R) | ucPins) :
    98a4:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    98a8:	f017 0f04 	tst.w	r7, #4
    98ac:	f504 62a1 	add.w	r2, r4, #1288	; 0x508
    98b0:	bf14      	ite	ne
    98b2:	432b      	orrne	r3, r5
    98b4:	43ab      	biceq	r3, r5
                                   (HWREG(ulPort + GPIO_O_DR2R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR2R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR4R) = ((ulStrength & 2) ?
                                   (HWREG(ulPort + GPIO_O_DR4R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR4R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR8R) = ((ulStrength & 4) ?
    98b6:	6013      	str	r3, [r2, #0]
                                   (HWREG(ulPort + GPIO_O_DR8R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR8R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_SLR) = ((ulStrength & 8) ?
                                  (HWREG(ulPort + GPIO_O_SLR) | ucPins) :
    98b8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    98bc:	f017 0f08 	tst.w	r7, #8
    98c0:	f504 62a3 	add.w	r2, r4, #1304	; 0x518
    98c4:	bf14      	ite	ne
    98c6:	432b      	orrne	r3, r5
    98c8:	43ab      	biceq	r3, r5
                                   (HWREG(ulPort + GPIO_O_DR4R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR4R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DR8R) = ((ulStrength & 4) ?
                                   (HWREG(ulPort + GPIO_O_DR8R) | ucPins) :
                                   (HWREG(ulPort + GPIO_O_DR8R) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_SLR) = ((ulStrength & 8) ?
    98ca:	6013      	str	r3, [r2, #0]

    //
    // Set the pin type.
    //
    HWREG(ulPort + GPIO_O_ODR) = ((ulPinType & 1) ?
                                  (HWREG(ulPort + GPIO_O_ODR) | ucPins) :
    98cc:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
    98d0:	f016 0f01 	tst.w	r6, #1
    98d4:	f204 520c 	addw	r2, r4, #1292	; 0x50c
    98d8:	bf14      	ite	ne
    98da:	432b      	orrne	r3, r5
    98dc:	43ab      	biceq	r3, r5
                                  (HWREG(ulPort + GPIO_O_SLR) & ~(ucPins)));

    //
    // Set the pin type.
    //
    HWREG(ulPort + GPIO_O_ODR) = ((ulPinType & 1) ?
    98de:	6013      	str	r3, [r2, #0]
                                  (HWREG(ulPort + GPIO_O_ODR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_ODR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PUR) = ((ulPinType & 2) ?
                                  (HWREG(ulPort + GPIO_O_PUR) | ucPins) :
    98e0:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
    98e4:	f016 0f02 	tst.w	r6, #2
    98e8:	f504 62a2 	add.w	r2, r4, #1296	; 0x510
    98ec:	bf14      	ite	ne
    98ee:	432b      	orrne	r3, r5
    98f0:	43ab      	biceq	r3, r5
    // Set the pin type.
    //
    HWREG(ulPort + GPIO_O_ODR) = ((ulPinType & 1) ?
                                  (HWREG(ulPort + GPIO_O_ODR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_ODR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PUR) = ((ulPinType & 2) ?
    98f2:	6013      	str	r3, [r2, #0]
                                  (HWREG(ulPort + GPIO_O_PUR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PUR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PDR) = ((ulPinType & 4) ?
                                  (HWREG(ulPort + GPIO_O_PDR) | ucPins) :
    98f4:	f8d4 3514 	ldr.w	r3, [r4, #1300]	; 0x514
    98f8:	f016 0f04 	tst.w	r6, #4
    98fc:	f204 5214 	addw	r2, r4, #1300	; 0x514
    9900:	bf14      	ite	ne
    9902:	432b      	orrne	r3, r5
    9904:	43ab      	biceq	r3, r5
                                  (HWREG(ulPort + GPIO_O_ODR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_ODR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PUR) = ((ulPinType & 2) ?
                                  (HWREG(ulPort + GPIO_O_PUR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PUR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PDR) = ((ulPinType & 4) ?
    9906:	6013      	str	r3, [r2, #0]
                                  (HWREG(ulPort + GPIO_O_PDR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PDR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DEN) = ((ulPinType & 8) ?
                                  (HWREG(ulPort + GPIO_O_DEN) | ucPins) :
    9908:	f8d4 351c 	ldr.w	r3, [r4, #1308]	; 0x51c
    990c:	f016 0f08 	tst.w	r6, #8
    9910:	f204 521c 	addw	r2, r4, #1308	; 0x51c
    9914:	bf14      	ite	ne
    9916:	432b      	orrne	r3, r5
    9918:	43ab      	biceq	r3, r5
                                  (HWREG(ulPort + GPIO_O_PUR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PUR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_PDR) = ((ulPinType & 4) ?
                                  (HWREG(ulPort + GPIO_O_PDR) | ucPins) :
                                  (HWREG(ulPort + GPIO_O_PDR) & ~(ucPins)));
    HWREG(ulPort + GPIO_O_DEN) = ((ulPinType & 8) ?
    991a:	6013      	str	r3, [r2, #0]
    // DustDevil-class (and later) devices, but is a harmless write on
    // Sandstorm- and Fury-class devices.
    //
    HWREG(ulPort + GPIO_O_AMSEL) =
        ((ulPinType == GPIO_PIN_TYPE_ANALOG) ?
         (HWREG(ulPort + GPIO_O_AMSEL) | ucPins) :
    991c:	f8d4 2528 	ldr.w	r2, [r4, #1320]	; 0x528
    9920:	f504 63a5 	add.w	r3, r4, #1320	; 0x528
    9924:	b90e      	cbnz	r6, 992a <GPIOPadConfigSet+0xfa>
    9926:	4315      	orrs	r5, r2
    9928:	e001      	b.n	992e <GPIOPadConfigSet+0xfe>
    992a:	ea22 0505 	bic.w	r5, r2, r5
    //
    // Set the analog mode select register.  This register only appears in
    // DustDevil-class (and later) devices, but is a harmless write on
    // Sandstorm- and Fury-class devices.
    //
    HWREG(ulPort + GPIO_O_AMSEL) =
    992e:	601d      	str	r5, [r3, #0]
        ((ulPinType == GPIO_PIN_TYPE_ANALOG) ?
         (HWREG(ulPort + GPIO_O_AMSEL) | ucPins) :
         (HWREG(ulPort + GPIO_O_AMSEL) & ~(ucPins)));
}
    9930:	b002      	add	sp, #8
    9932:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    ASSERT(GPIOBaseValid(ulPort));
    ASSERT((ulStrength == GPIO_STRENGTH_2MA) ||
           (ulStrength == GPIO_STRENGTH_4MA) ||
           (ulStrength == GPIO_STRENGTH_8MA) ||
           (ulStrength == GPIO_STRENGTH_8MA_SC));
    ASSERT((ulPinType == GPIO_PIN_TYPE_STD) ||
    9936:	2e00      	cmp	r6, #0
    9938:	d0a0      	beq.n	987c <GPIOPadConfigSet+0x4c>
    993a:	4b08      	ldr	r3, [pc, #32]	; (995c <GPIOPadConfigSet+0x12c>)
    993c:	4640      	mov	r0, r8
    993e:	9300      	str	r3, [sp, #0]
    9940:	4903      	ldr	r1, [pc, #12]	; (9950 <GPIOPadConfigSet+0x120>)
    9942:	4a04      	ldr	r2, [pc, #16]	; (9954 <GPIOPadConfigSet+0x124>)
    9944:	f44f 7303 	mov.w	r3, #524	; 0x20c
    9948:	e792      	b.n	9870 <GPIOPadConfigSet+0x40>
    994a:	bf00      	nop
    994c:	00014334 	.word	0x00014334
    9950:	0001076e 	.word	0x0001076e
    9954:	000142fa 	.word	0x000142fa
    9958:	00014430 	.word	0x00014430
    995c:	000144a5 	.word	0x000144a5

00009960 <GPIOPinTypeUSBAnalog>:
//! \return None.
//
//*****************************************************************************
void
GPIOPinTypeUSBAnalog(unsigned long ulPort, unsigned char ucPins)
{
    9960:	b573      	push	{r0, r1, r4, r5, r6, r14}
    9962:	4676      	mov	r6, r14
    9964:	4605      	mov	r5, r0
    9966:	460c      	mov	r4, r1
    //
    // Check the arguments.
    //
    ASSERT(GPIOBaseValid(ulPort));
    9968:	f7ff fefe 	bl	9768 <GPIOBaseValid>
    996c:	b940      	cbnz	r0, 9980 <GPIOPinTypeUSBAnalog+0x20>
    996e:	4b0b      	ldr	r3, [pc, #44]	; (999c <GPIOPinTypeUSBAnalog+0x3c>)
    9970:	4630      	mov	r0, r6
    9972:	9300      	str	r3, [sp, #0]
    9974:	490a      	ldr	r1, [pc, #40]	; (99a0 <GPIOPinTypeUSBAnalog+0x40>)
    9976:	4a0b      	ldr	r2, [pc, #44]	; (99a4 <GPIOPinTypeUSBAnalog+0x44>)
    9978:	f44f 63e3 	mov.w	r3, #1816	; 0x718
    997c:	f001 fd9a 	bl	b4b4 <_panic>

    //
    // Make the pin(s) be inputs.
    //
    GPIODirModeSet(ulPort, ucPins, GPIO_DIR_MODE_IN);
    9980:	4628      	mov	r0, r5
    9982:	4621      	mov	r1, r4
    9984:	2200      	movs	r2, #0
    9986:	f7ff ff19 	bl	97bc <GPIODirModeSet>

    //
    // Set the pad(s) for analog operation.
    //
    GPIOPadConfigSet(ulPort, ucPins, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_ANALOG);
    998a:	4628      	mov	r0, r5
    998c:	4621      	mov	r1, r4
    998e:	2201      	movs	r2, #1
    9990:	2300      	movs	r3, #0
}
    9992:	b002      	add	sp, #8
    9994:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    GPIODirModeSet(ulPort, ucPins, GPIO_DIR_MODE_IN);

    //
    // Set the pad(s) for analog operation.
    //
    GPIOPadConfigSet(ulPort, ucPins, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_ANALOG);
    9998:	f7ff bf4a 	b.w	9830 <GPIOPadConfigSet>
    999c:	00014334 	.word	0x00014334
    99a0:	0001076e 	.word	0x0001076e
    99a4:	000142fa 	.word	0x000142fa

000099a8 <SysCtlPeripheralValid>:
           (ulPeripheral == SYSCTL_PERIPH_WDOG1) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER0) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER1) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER2) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER3) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER4) ||
    99a8:	f020 5380 	bic.w	r3, r0, #268435456	; 0x10000000
    99ac:	f5a3 1280 	sub.w	r2, r3, #1048576	; 0x100000
    99b0:	3a01      	subs	r2, #1
    99b2:	2a01      	cmp	r2, #1
//
//*****************************************************************************
#ifdef DEBUG
static tBoolean
SysCtlPeripheralValid(unsigned long ulPeripheral)
{
    99b4:	b530      	push	{r4, r5, r14}
           (ulPeripheral == SYSCTL_PERIPH_WDOG1) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER0) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER1) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER2) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER3) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER4) ||
    99b6:	d801      	bhi.n	99bc <SysCtlPeripheralValid+0x14>
    99b8:	2001      	movs	r0, #1
    99ba:	bd30      	pop	{r4, r5, r15}
#ifdef DEBUG
static tBoolean
SysCtlPeripheralValid(unsigned long ulPeripheral)
{
    return((ulPeripheral == SYSCTL_PERIPH_ADC0) ||
           (ulPeripheral == SYSCTL_PERIPH_ADC1) ||
    99bc:	4a41      	ldr	r2, [pc, #260]	; (9ac4 <SysCtlPeripheralValid+0x11c>)
    99be:	4293      	cmp	r3, r2
    99c0:	d0fa      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_CAN0) ||
    99c2:	f502 7280 	add.w	r2, r2, #256	; 0x100
    99c6:	4293      	cmp	r3, r2
    99c8:	d0f6      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_CAN1) ||
    99ca:	f502 7200 	add.w	r2, r2, #512	; 0x200
    99ce:	4293      	cmp	r3, r2
    99d0:	d0f2      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_CAN2) ||
           (ulPeripheral == SYSCTL_PERIPH_COMP0) ||
           (ulPeripheral == SYSCTL_PERIPH_COMP1) ||
           (ulPeripheral == SYSCTL_PERIPH_COMP2) ||
           (ulPeripheral == SYSCTL_PERIPH_EEPROM0) ||
           (ulPeripheral == SYSCTL_PERIPH_EPI0) ||
    99d2:	4a3d      	ldr	r2, [pc, #244]	; (9ac8 <SysCtlPeripheralValid+0x120>)
    99d4:	4290      	cmp	r0, r2
    99d6:	d0ef      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_ETH) ||
           (ulPeripheral == SYSCTL_PERIPH_FAN0) ||
    99d8:	f100 4260 	add.w	r2, r0, #3758096384	; 0xe0000000
    99dc:	3a01      	subs	r2, #1
    99de:	2a01      	cmp	r2, #1
    99e0:	d9ea      	bls.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_GPIOA) ||
           (ulPeripheral == SYSCTL_PERIPH_GPIOB) ||
    99e2:	4a3a      	ldr	r2, [pc, #232]	; (9acc <SysCtlPeripheralValid+0x124>)
    99e4:	4290      	cmp	r0, r2
    99e6:	d0e7      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_GPIOC) ||
           (ulPeripheral == SYSCTL_PERIPH_GPIOD) ||
    99e8:	320c      	adds	r2, #12
    99ea:	4290      	cmp	r0, r2
    99ec:	d0e4      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_GPIOE) ||
    99ee:	3210      	adds	r2, #16
    99f0:	4290      	cmp	r0, r2
    99f2:	d0e1      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_GPIOF) ||
           (ulPeripheral == SYSCTL_PERIPH_GPIOG) ||
    99f4:	3260      	adds	r2, #96	; 0x60
    99f6:	4293      	cmp	r3, r2
    99f8:	d0de      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_GPIOH) ||
    99fa:	f420 1180 	bic.w	r1, r0, #1048576	; 0x100000
    99fe:	3280      	adds	r2, #128	; 0x80
    9a00:	4291      	cmp	r1, r2
    9a02:	d0d9      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_GPIOJ) ||
    9a04:	f100 5280 	add.w	r2, r0, #268435456	; 0x10000000
    9a08:	f6a2 0209 	subw	r2, r2, #2057	; 0x809
    9a0c:	2a07      	cmp	r2, #7
    9a0e:	d9d3      	bls.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_GPIOM) ||
           (ulPeripheral == SYSCTL_PERIPH_GPION) ||
           (ulPeripheral == SYSCTL_PERIPH_GPIOP) ||
           (ulPeripheral == SYSCTL_PERIPH_GPIOQ) ||
           (ulPeripheral == SYSCTL_PERIPH_GPIOR) ||
           (ulPeripheral == SYSCTL_PERIPH_GPIOS) ||
    9a10:	f020 5200 	bic.w	r2, r0, #536870912	; 0x20000000
    9a14:	2a40      	cmp	r2, #64	; 0x40
    9a16:	d0cf      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_HIBERNATE) ||
    9a18:	f1b0 2f10 	cmp.w	r0, #268439552	; 0x10001000
    9a1c:	d0cc      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_I2C0) ||
    9a1e:	4c2c      	ldr	r4, [pc, #176]	; (9ad0 <SysCtlPeripheralValid+0x128>)
    9a20:	42a1      	cmp	r1, r4
    9a22:	d0c9      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_I2C1) ||
    9a24:	4c2b      	ldr	r4, [pc, #172]	; (9ad4 <SysCtlPeripheralValid+0x12c>)
    9a26:	4404      	add	r4, r0
    9a28:	2c03      	cmp	r4, #3
    9a2a:	d9c5      	bls.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_I2C2) ||
           (ulPeripheral == SYSCTL_PERIPH_I2C3) ||
           (ulPeripheral == SYSCTL_PERIPH_I2C4) ||
           (ulPeripheral == SYSCTL_PERIPH_I2C5) ||
           (ulPeripheral == SYSCTL_PERIPH_I2S0) ||
           (ulPeripheral == SYSCTL_PERIPH_IEEE1588) ||
    9a2c:	4c2a      	ldr	r4, [pc, #168]	; (9ad8 <SysCtlPeripheralValid+0x130>)
    9a2e:	f420 5580 	bic.w	r5, r0, #4096	; 0x1000
    9a32:	42a5      	cmp	r5, r4
    9a34:	d0c0      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_LPC0) ||
           (ulPeripheral == SYSCTL_PERIPH_MPU) ||
    9a36:	f420 6580 	bic.w	r5, r0, #1024	; 0x400
    9a3a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
    9a3e:	42a5      	cmp	r5, r4
    9a40:	d0ba      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_PECI0) ||
           (ulPeripheral == SYSCTL_PERIPH_PLL) ||
    9a42:	f1b0 1f10 	cmp.w	r0, #1048592	; 0x100010
    9a46:	d0b7      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_PWM0) ||
    9a48:	4c24      	ldr	r4, [pc, #144]	; (9adc <SysCtlPeripheralValid+0x134>)
    9a4a:	42a0      	cmp	r0, r4
    9a4c:	d0b4      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_PWM1) ||
    9a4e:	4c24      	ldr	r4, [pc, #144]	; (9ae0 <SysCtlPeripheralValid+0x138>)
    9a50:	42a0      	cmp	r0, r4
    9a52:	d0b1      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_QEI0) ||
    9a54:	f504 7480 	add.w	r4, r4, #256	; 0x100
    9a58:	42a0      	cmp	r0, r4
    9a5a:	d0ad      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_QEI1) ||
    9a5c:	f5a4 74f8 	sub.w	r4, r4, #496	; 0x1f0
    9a60:	42a2      	cmp	r2, r4
    9a62:	d0a9      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_SSI0) ||
    9a64:	3410      	adds	r4, #16
    9a66:	42a2      	cmp	r2, r4
    9a68:	d0a6      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_SSI1) ||
    9a6a:	4c1e      	ldr	r4, [pc, #120]	; (9ae4 <SysCtlPeripheralValid+0x13c>)
    9a6c:	4404      	add	r4, r0
    9a6e:	2c01      	cmp	r4, #1
    9a70:	d9a2      	bls.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_SSI2) ||
           (ulPeripheral == SYSCTL_PERIPH_SSI3) ||
           (ulPeripheral == SYSCTL_PERIPH_TEMP) ||
           (ulPeripheral == SYSCTL_PERIPH_TIMER0) ||
           (ulPeripheral == SYSCTL_PERIPH_TIMER1) ||
           (ulPeripheral == SYSCTL_PERIPH_TIMER2) ||
    9a72:	4c1d      	ldr	r4, [pc, #116]	; (9ae8 <SysCtlPeripheralValid+0x140>)
    9a74:	42a0      	cmp	r0, r4
    9a76:	d09f      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_TIMER3) ||
    9a78:	f100 5480 	add.w	r4, r0, #268435456	; 0x10000000
    9a7c:	f2a4 4404 	subw	r4, r4, #1028	; 0x404
    9a80:	2c01      	cmp	r4, #1
    9a82:	d999      	bls.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_TIMER4) ||
           (ulPeripheral == SYSCTL_PERIPH_TIMER5) ||
    9a84:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
    9a88:	3c01      	subs	r4, #1
    9a8a:	2c01      	cmp	r4, #1
    9a8c:	d994      	bls.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_UART0) ||
           (ulPeripheral == SYSCTL_PERIPH_UART1) ||
    9a8e:	4c17      	ldr	r4, [pc, #92]	; (9aec <SysCtlPeripheralValid+0x144>)
    9a90:	42a1      	cmp	r1, r4
    9a92:	d091      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_UART2) ||
    9a94:	4916      	ldr	r1, [pc, #88]	; (9af0 <SysCtlPeripheralValid+0x148>)
    9a96:	4401      	add	r1, r0
    9a98:	2904      	cmp	r1, #4
    9a9a:	d98d      	bls.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_UART3) ||
           (ulPeripheral == SYSCTL_PERIPH_UART4) ||
           (ulPeripheral == SYSCTL_PERIPH_UART5) ||
           (ulPeripheral == SYSCTL_PERIPH_UART6) ||
           (ulPeripheral == SYSCTL_PERIPH_UART7) ||
    9a9c:	f1b0 2f20 	cmp.w	r0, #536879104	; 0x20002000
    9aa0:	d08a      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_UDMA) ||
    9aa2:	4914      	ldr	r1, [pc, #80]	; (9af4 <SysCtlPeripheralValid+0x14c>)
    9aa4:	4288      	cmp	r0, r1
    9aa6:	d087      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_USB0) ||
    9aa8:	2a08      	cmp	r2, #8
    9aaa:	d085      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_WDOG0) ||
    9aac:	4a12      	ldr	r2, [pc, #72]	; (9af8 <SysCtlPeripheralValid+0x150>)
    9aae:	4293      	cmp	r3, r2
    9ab0:	d082      	beq.n	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_WDOG1) ||
    9ab2:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
    9ab6:	f5a0 40b8 	sub.w	r0, r0, #23552	; 0x5c00
    9aba:	2805      	cmp	r0, #5
    9abc:	f67f af7c 	bls.w	99b8 <SysCtlPeripheralValid+0x10>
           (ulPeripheral == SYSCTL_PERIPH_WTIMER0) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER1) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER2) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER3) ||
           (ulPeripheral == SYSCTL_PERIPH_WTIMER4) ||
    9ac0:	2000      	movs	r0, #0
           (ulPeripheral == SYSCTL_PERIPH_WTIMER5));
}
    9ac2:	bd30      	pop	{r4, r5, r15}
    9ac4:	00100100 	.word	0x00100100
    9ac8:	20105000 	.word	0x20105000
    9acc:	20000004 	.word	0x20000004
    9ad0:	10004000 	.word	0x10004000
    9ad4:	0fffdffe 	.word	0x0fffdffe
    9ad8:	f0004800 	.word	0xf0004800
    9adc:	f0004001 	.word	0xf0004001
    9ae0:	10000100 	.word	0x10000100
    9ae4:	0fffe3fe 	.word	0x0fffe3fe
    9ae8:	10100008 	.word	0x10100008
    9aec:	10000004 	.word	0x10000004
    9af0:	0fffe7fd 	.word	0x0fffe7fd
    9af4:	20100001 	.word	0x20100001
    9af8:	00101000 	.word	0x00101000

00009afc <SysCtlPeripheralReset>:
//! \return None.
//
//*****************************************************************************
void
SysCtlPeripheralReset(unsigned long ulPeripheral)
{
    9afc:	b530      	push	{r4, r5, r14}
    9afe:	b085      	sub	sp, #20
    9b00:	4675      	mov	r5, r14
    9b02:	4604      	mov	r4, r0
    volatile unsigned long ulDelay;

    //
    // Check the arguments.
    //
    ASSERT(SysCtlPeripheralValid(ulPeripheral));
    9b04:	f7ff ff50 	bl	99a8 <SysCtlPeripheralValid>
    9b08:	b940      	cbnz	r0, 9b1c <SysCtlPeripheralReset+0x20>
    9b0a:	4b20      	ldr	r3, [pc, #128]	; (9b8c <SysCtlPeripheralReset+0x90>)
    9b0c:	4628      	mov	r0, r5
    9b0e:	9300      	str	r3, [sp, #0]
    9b10:	491f      	ldr	r1, [pc, #124]	; (9b90 <SysCtlPeripheralReset+0x94>)
    9b12:	4a20      	ldr	r2, [pc, #128]	; (9b94 <SysCtlPeripheralReset+0x98>)
    9b14:	f240 3331 	movw	r3, #817	; 0x331
    9b18:	f001 fccc 	bl	b4b4 <_panic>

    //
    // See if the peripheral index is 15, indicating a peripheral that is
    // accessed via the SYSCTL_SRperiph registers.
    //
    if((ulPeripheral & 0xf0000000) == 0xf0000000)
    9b1c:	f004 4370 	and.w	r3, r4, #4026531840	; 0xf0000000
    9b20:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
    9b24:	d118      	bne.n	9b58 <SysCtlPeripheralReset+0x5c>
    {
        //
        // Put the peripheral into the reset state.
        //
        HWREGBITW(SYSCTL_SRBASE + ((ulPeripheral & 0xff00) >> 8),
    9b26:	4b1c      	ldr	r3, [pc, #112]	; (9b98 <SysCtlPeripheralReset+0x9c>)
    9b28:	b2e2      	uxtb	r2, r4
    9b2a:	f3c4 2407 	ubfx	r4, r4, #8, #8
    9b2e:	0092      	lsls	r2, r2, #2
    9b30:	4423      	add	r3, r4
    9b32:	f042 4284 	orr.w	r2, r2, #1107296256	; 0x42000000
    9b36:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9b3a:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
                  ulPeripheral & 0xff) = 1;
    9b3e:	2201      	movs	r2, #1
    9b40:	601a      	str	r2, [r3, #0]

        //
        // Delay for a little bit.
        //
        for(ulDelay = 0; ulDelay < 16; ulDelay++)
    9b42:	2200      	movs	r2, #0
    9b44:	9203      	str	r2, [sp, #12]
    9b46:	9a03      	ldr	r2, [sp, #12]
    9b48:	2a0f      	cmp	r2, #15
    9b4a:	d802      	bhi.n	9b52 <SysCtlPeripheralReset+0x56>
    9b4c:	9a03      	ldr	r2, [sp, #12]
    9b4e:	3201      	adds	r2, #1
    9b50:	e7f8      	b.n	9b44 <SysCtlPeripheralReset+0x48>

        //
        // Take the peripheral out of the reset state.
        //
        HWREGBITW(SYSCTL_SRBASE + ((ulPeripheral & 0xff00) >> 8),
                  ulPeripheral & 0xff) = 0;
    9b52:	2200      	movs	r2, #0
    9b54:	601a      	str	r2, [r3, #0]
    9b56:	e017      	b.n	9b88 <SysCtlPeripheralReset+0x8c>
    else
    {
        //
        // Put the peripheral into the reset state.
        //
        HWREG(g_pulSRCRRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
    9b58:	0f22      	lsrs	r2, r4, #28
            SYSCTL_PERIPH_MASK(ulPeripheral);
    9b5a:	b2a1      	uxth	r1, r4
    9b5c:	f3c4 4404 	ubfx	r4, r4, #16, #5
    9b60:	fa01 f404 	lsl.w	r4, r1, r4
    else
    {
        //
        // Put the peripheral into the reset state.
        //
        HWREG(g_pulSRCRRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
    9b64:	4b0d      	ldr	r3, [pc, #52]	; (9b9c <SysCtlPeripheralReset+0xa0>)
    9b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9b6a:	681a      	ldr	r2, [r3, #0]
    9b6c:	4322      	orrs	r2, r4
    9b6e:	601a      	str	r2, [r3, #0]
            SYSCTL_PERIPH_MASK(ulPeripheral);

        //
        // Delay for a little bit.
        //
        for(ulDelay = 0; ulDelay < 16; ulDelay++)
    9b70:	2200      	movs	r2, #0
    9b72:	9203      	str	r2, [sp, #12]
    9b74:	9a03      	ldr	r2, [sp, #12]
    9b76:	2a0f      	cmp	r2, #15
    9b78:	d802      	bhi.n	9b80 <SysCtlPeripheralReset+0x84>
    9b7a:	9a03      	ldr	r2, [sp, #12]
    9b7c:	3201      	adds	r2, #1
    9b7e:	e7f8      	b.n	9b72 <SysCtlPeripheralReset+0x76>
        }

        //
        // Take the peripheral out of the reset state.
        //
        HWREG(g_pulSRCRRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) &=
    9b80:	681a      	ldr	r2, [r3, #0]
    9b82:	ea22 0404 	bic.w	r4, r2, r4
    9b86:	601c      	str	r4, [r3, #0]
            ~SYSCTL_PERIPH_MASK(ulPeripheral);
    }
}
    9b88:	b005      	add	sp, #20
    9b8a:	bd30      	pop	{r4, r5, r15}
    9b8c:	00015ddb 	.word	0x00015ddb
    9b90:	0001076e 	.word	0x0001076e
    9b94:	00015a9b 	.word	0x00015a9b
    9b98:	400fe500 	.word	0x400fe500
    9b9c:	00017710 	.word	0x00017710

00009ba0 <SysCtlPeripheralEnable>:
//! \return None.
//
//*****************************************************************************
void
SysCtlPeripheralEnable(unsigned long ulPeripheral)
{
    9ba0:	b537      	push	{r0, r1, r2, r4, r5, r14}
    9ba2:	4675      	mov	r5, r14
    9ba4:	4604      	mov	r4, r0
    //
    // Check the arguments.
    //
    ASSERT(SysCtlPeripheralValid(ulPeripheral));
    9ba6:	f7ff feff 	bl	99a8 <SysCtlPeripheralValid>
    9baa:	b940      	cbnz	r0, 9bbe <SysCtlPeripheralEnable+0x1e>
    9bac:	4b15      	ldr	r3, [pc, #84]	; (9c04 <SysCtlPeripheralEnable+0x64>)
    9bae:	4628      	mov	r0, r5
    9bb0:	9300      	str	r3, [sp, #0]
    9bb2:	4915      	ldr	r1, [pc, #84]	; (9c08 <SysCtlPeripheralEnable+0x68>)
    9bb4:	4a15      	ldr	r2, [pc, #84]	; (9c0c <SysCtlPeripheralEnable+0x6c>)
    9bb6:	f240 3396 	movw	r3, #918	; 0x396
    9bba:	f001 fc7b 	bl	b4b4 <_panic>

    //
    // See if the peripheral index is 15, indicating a peripheral that is
    // accessed via the SYSCTL_RCGCperiph registers.
    //
    if((ulPeripheral & 0xf0000000) == 0xf0000000)
    9bbe:	f004 4370 	and.w	r3, r4, #4026531840	; 0xf0000000
    9bc2:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
    9bc6:	d10e      	bne.n	9be6 <SysCtlPeripheralEnable+0x46>
    {
        //
        // Enable this peripheral.
        //
        HWREGBITW(SYSCTL_RCGCBASE + ((ulPeripheral & 0xff00) >> 8),
    9bc8:	4b11      	ldr	r3, [pc, #68]	; (9c10 <SysCtlPeripheralEnable+0x70>)
    9bca:	b2e2      	uxtb	r2, r4
    9bcc:	f3c4 2407 	ubfx	r4, r4, #8, #8
    9bd0:	0092      	lsls	r2, r2, #2
    9bd2:	4423      	add	r3, r4
    9bd4:	f042 4284 	orr.w	r2, r2, #1107296256	; 0x42000000
    9bd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9bdc:	ea42 1343 	orr.w	r3, r2, r3, lsl #5
                  ulPeripheral & 0xff) = 1;
    9be0:	2201      	movs	r2, #1
    9be2:	601a      	str	r2, [r3, #0]
    9be4:	e00b      	b.n	9bfe <SysCtlPeripheralEnable+0x5e>
    else
    {
        //
        // Enable this peripheral.
        //
        HWREG(g_pulRCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
    9be6:	0f22      	lsrs	r2, r4, #28
            SYSCTL_PERIPH_MASK(ulPeripheral);
    9be8:	b2a1      	uxth	r1, r4
    9bea:	f3c4 4404 	ubfx	r4, r4, #16, #5
    9bee:	fa01 f404 	lsl.w	r4, r1, r4
    else
    {
        //
        // Enable this peripheral.
        //
        HWREG(g_pulRCGCRegs[SYSCTL_PERIPH_INDEX(ulPeripheral)]) |=
    9bf2:	4b08      	ldr	r3, [pc, #32]	; (9c14 <SysCtlPeripheralEnable+0x74>)
    9bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    9bf8:	681a      	ldr	r2, [r3, #0]
    9bfa:	4314      	orrs	r4, r2
    9bfc:	601c      	str	r4, [r3, #0]
            SYSCTL_PERIPH_MASK(ulPeripheral);
    }
}
    9bfe:	b003      	add	sp, #12
    9c00:	bd30      	pop	{r4, r5, r15}
    9c02:	bf00      	nop
    9c04:	00015ddb 	.word	0x00015ddb
    9c08:	0001076e 	.word	0x0001076e
    9c0c:	00015a9b 	.word	0x00015a9b
    9c10:	400fe600 	.word	0x400fe600
    9c14:	00017704 	.word	0x00017704

00009c18 <SysCtlDelay>:
#endif
#if defined(codered) || defined(gcc) || defined(sourcerygxx)
void __attribute__((naked))
SysCtlDelay(unsigned long ulCount)
{
    __asm("    subs    r0, #1\n"
    9c18:	3801      	subs	r0, #1
    9c1a:	f47f affd 	bne.w	9c18 <SysCtlDelay>
    9c1e:	4770      	bx	r14

00009c20 <SysCtlClockSet>:

    //
    // See if this is a Sandstorm-class device and clocking features from newer
    // devices were requested.
    //
    if(CLASS_IS_SANDSTORM && (ulConfig & SYSCTL_RCC2_USERCC2))
    9c20:	4b4c      	ldr	r3, [pc, #304]	; (9d54 <SysCtlClockSet+0x134>)
//! \return None.
//
//*****************************************************************************
void
SysCtlClockSet(unsigned long ulConfig)
{
    9c22:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}

    //
    // See if this is a Sandstorm-class device and clocking features from newer
    // devices were requested.
    //
    if(CLASS_IS_SANDSTORM && (ulConfig & SYSCTL_RCC2_USERCC2))
    9c26:	681a      	ldr	r2, [r3, #0]
//! \return None.
//
//*****************************************************************************
void
SysCtlClockSet(unsigned long ulConfig)
{
    9c28:	4604      	mov	r4, r0

    //
    // See if this is a Sandstorm-class device and clocking features from newer
    // devices were requested.
    //
    if(CLASS_IS_SANDSTORM && (ulConfig & SYSCTL_RCC2_USERCC2))
    9c2a:	f012 4fe0 	tst.w	r2, #1879048192	; 0x70000000
    9c2e:	d005      	beq.n	9c3c <SysCtlClockSet+0x1c>
    9c30:	681a      	ldr	r2, [r3, #0]
    9c32:	4b49      	ldr	r3, [pc, #292]	; (9d58 <SysCtlClockSet+0x138>)
    9c34:	4013      	ands	r3, r2
    9c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    9c3a:	d102      	bne.n	9c42 <SysCtlClockSet+0x22>
    9c3c:	2c00      	cmp	r4, #0
    9c3e:	f2c0 8086 	blt.w	9d4e <SysCtlClockSet+0x12e>
    //
    // Get the current value of the RCC and RCC2 registers.  If using a
    // Sandstorm-class device, the RCC2 register reads back as zero and the
    // writes to it from within this function are ignored.
    //
    ulRCC = HWREG(SYSCTL_RCC);
    9c42:	4846      	ldr	r0, [pc, #280]	; (9d5c <SysCtlClockSet+0x13c>)
    ulRCC2 = HWREG(SYSCTL_RCC2);
    9c44:	4946      	ldr	r1, [pc, #280]	; (9d60 <SysCtlClockSet+0x140>)
    //
    // Get the current value of the RCC and RCC2 registers.  If using a
    // Sandstorm-class device, the RCC2 register reads back as zero and the
    // writes to it from within this function are ignored.
    //
    ulRCC = HWREG(SYSCTL_RCC);
    9c46:	6803      	ldr	r3, [r0, #0]
    ulRCC2 = HWREG(SYSCTL_RCC2);
    9c48:	680e      	ldr	r6, [r1, #0]

    //
    // Bypass the PLL and system clock dividers for now.
    //
    ulRCC |= SYSCTL_RCC_BYPASS;
    ulRCC &= ~(SYSCTL_RCC_USESYSDIV);
    9c4a:	f423 0580 	bic.w	r5, r3, #4194304	; 0x400000
    9c4e:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
    ulRCC2 |= SYSCTL_RCC2_BYPASS2;

    //
    // Write the new RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    9c52:	6005      	str	r5, [r0, #0]
    //
    // Bypass the PLL and system clock dividers for now.
    //
    ulRCC |= SYSCTL_RCC_BYPASS;
    ulRCC &= ~(SYSCTL_RCC_USESYSDIV);
    ulRCC2 |= SYSCTL_RCC2_BYPASS2;
    9c54:	f446 6200 	orr.w	r2, r6, #2048	; 0x800
    HWREG(SYSCTL_RCC2) = ulRCC2;

    //
    // See if either oscillator needs to be enabled.
    //
    if(((ulRCC & SYSCTL_RCC_IOSCDIS) && !(ulConfig & SYSCTL_RCC_IOSCDIS)) ||
    9c58:	0798      	lsls	r0, r3, #30

    //
    // Write the new RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    HWREG(SYSCTL_RCC2) = ulRCC2;
    9c5a:	600a      	str	r2, [r1, #0]

    //
    // See if either oscillator needs to be enabled.
    //
    if(((ulRCC & SYSCTL_RCC_IOSCDIS) && !(ulConfig & SYSCTL_RCC_IOSCDIS)) ||
    9c5c:	d501      	bpl.n	9c62 <SysCtlClockSet+0x42>
    9c5e:	07a1      	lsls	r1, r4, #30
    9c60:	d503      	bpl.n	9c6a <SysCtlClockSet+0x4a>
    9c62:	07db      	lsls	r3, r3, #31
    9c64:	d514      	bpl.n	9c90 <SysCtlClockSet+0x70>
       ((ulRCC & SYSCTL_RCC_MOSCDIS) && !(ulConfig & SYSCTL_RCC_MOSCDIS)))
    9c66:	07e7      	lsls	r7, r4, #31
    9c68:	d412      	bmi.n	9c90 <SysCtlClockSet+0x70>
        //
        // Make sure that the required oscillators are enabled.  For now, the
        // previously enabled oscillators must be enabled along with the newly
        // requested oscillators.
        //
        ulRCC &= (~(SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS) |
    9c6a:	f064 0303 	orn	r3, r4, #3
    9c6e:	401d      	ands	r5, r3
                  (ulConfig & (SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS)));

        //
        // Write the new RCC value.
        //
        HWREG(SYSCTL_RCC) = ulRCC;
    9c70:	4b3a      	ldr	r3, [pc, #232]	; (9d5c <SysCtlClockSet+0x13c>)
        //
        // Wait for a bit, giving the oscillator time to stabilize.  The number
        // of iterations is adjusted based on the current clock source; a
        // smaller number of iterations is required for slower clock rates.
        //
        if(((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    9c72:	2a00      	cmp	r2, #0
                  (ulConfig & (SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS)));

        //
        // Write the new RCC value.
        //
        HWREG(SYSCTL_RCC) = ulRCC;
    9c74:	601d      	str	r5, [r3, #0]
        //
        // Wait for a bit, giving the oscillator time to stabilize.  The number
        // of iterations is adjusted based on the current clock source; a
        // smaller number of iterations is required for slower clock rates.
        //
        if(((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    9c76:	bfb4      	ite	lt
    9c78:	f006 0330 	andlt.w	r3, r6, #48	; 0x30
            (((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_30) ||
             ((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_32))) ||
           (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
            ((ulRCC & SYSCTL_RCC_OSCSRC_M) == SYSCTL_RCC_OSCSRC_30)))
    9c7c:	f005 0330 	andge.w	r3, r5, #48	; 0x30
        // smaller number of iterations is required for slower clock rates.
        //
        if(((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
            (((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_30) ||
             ((ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) == SYSCTL_RCC2_OSCSRC2_32))) ||
           (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    9c80:	2b30      	cmp	r3, #48	; 0x30
            ((ulRCC & SYSCTL_RCC_OSCSRC_M) == SYSCTL_RCC_OSCSRC_30)))
        {
            //
            // Delay for 4096 iterations.
            //
            SysCtlDelay(4096);
    9c82:	bf0c      	ite	eq
    9c84:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
        else
        {
            //
            // Delay for 524,288 iterations.
            //
            SysCtlDelay(524288);
    9c88:	f44f 2000 	movne.w	r0, #524288	; 0x80000
    9c8c:	f7ff ffc4 	bl	9c18 <SysCtlDelay>
    // Set the new crystal value and oscillator source.  Because the OSCSRC2
    // field in RCC2 overlaps the XTAL field in RCC, the OSCSRC field has a
    // special encoding within ulConfig to avoid the overlap.
    //
    ulRCC &= ~(SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
    ulRCC |= ulConfig & (SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
    9c90:	f404 63fe 	and.w	r3, r4, #2032	; 0x7f0
    //
    // Set the new crystal value and oscillator source.  Because the OSCSRC2
    // field in RCC2 overlaps the XTAL field in RCC, the OSCSRC field has a
    // special encoding within ulConfig to avoid the overlap.
    //
    ulRCC &= ~(SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
    9c94:	f425 65fe 	bic.w	r5, r5, #2032	; 0x7f0
    ulRCC |= ulConfig & (SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
    9c98:	ea45 0803 	orr.w	r8, r5, r3
    ulRCC2 &= ~(SYSCTL_RCC2_USERCC2 | SYSCTL_RCC2_OSCSRC2_M);
    ulRCC2 |= ulConfig & (SYSCTL_RCC2_USERCC2 | SYSCTL_RCC_OSCSRC_M);
    9c9c:	4a31      	ldr	r2, [pc, #196]	; (9d64 <SysCtlClockSet+0x144>)
    // field in RCC2 overlaps the XTAL field in RCC, the OSCSRC field has a
    // special encoding within ulConfig to avoid the overlap.
    //
    ulRCC &= ~(SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
    ulRCC |= ulConfig & (SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
    ulRCC2 &= ~(SYSCTL_RCC2_USERCC2 | SYSCTL_RCC2_OSCSRC2_M);
    9c9e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
    9ca2:	f025 0570 	bic.w	r5, r5, #112	; 0x70
    9ca6:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
    ulRCC2 |= ulConfig & (SYSCTL_RCC2_USERCC2 | SYSCTL_RCC_OSCSRC_M);
    9caa:	4022      	ands	r2, r4
    9cac:	432a      	orrs	r2, r5
    ulRCC2 |= (ulConfig & 0x00000008) << 3;

    //
    // Write the new RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    9cae:	4f2b      	ldr	r7, [pc, #172]	; (9d5c <SysCtlClockSet+0x13c>)
    HWREG(SYSCTL_RCC2) = ulRCC2;
    9cb0:	4e2b      	ldr	r6, [pc, #172]	; (9d60 <SysCtlClockSet+0x140>)
    //
    ulRCC &= ~(SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
    ulRCC |= ulConfig & (SYSCTL_RCC_XTAL_M | SYSCTL_RCC_OSCSRC_M);
    ulRCC2 &= ~(SYSCTL_RCC2_USERCC2 | SYSCTL_RCC2_OSCSRC2_M);
    ulRCC2 |= ulConfig & (SYSCTL_RCC2_USERCC2 | SYSCTL_RCC_OSCSRC_M);
    ulRCC2 |= (ulConfig & 0x00000008) << 3;
    9cb2:	f004 0508 	and.w	r5, r4, #8
    9cb6:	ea42 05c5 	orr.w	r5, r2, r5, lsl #3

    //
    // Write the new RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    9cba:	f8c7 8000 	str.w	r8, [r7]

    //
    // Wait for a bit so that new crystal value and oscillator source can take
    // effect.
    //
    SysCtlDelay(16);
    9cbe:	2010      	movs	r0, #16

    //
    // Write the new RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    HWREG(SYSCTL_RCC2) = ulRCC2;
    9cc0:	6035      	str	r5, [r6, #0]

    //
    // Wait for a bit so that new crystal value and oscillator source can take
    // effect.
    //
    SysCtlDelay(16);
    9cc2:	f7ff ffa9 	bl	9c18 <SysCtlDelay>

    //
    // Set the PLL configuration.
    //
    ulRCC &= ~(SYSCTL_RCC_PWRDN | SYSCTL_RCC_OEN);
    ulRCC |= ulConfig & (SYSCTL_RCC_PWRDN | SYSCTL_RCC_OEN);
    9cc6:	f404 5240 	and.w	r2, r4, #12288	; 0x3000
    ulRCC2 |= ulConfig & SYSCTL_RCC2_PWRDN2;

    //
    // Clear the PLL lock interrupt.
    //
    HWREG(SYSCTL_MISC) = SYSCTL_INT_PLL_LOCK;
    9cca:	4927      	ldr	r1, [pc, #156]	; (9d68 <SysCtlClockSet+0x148>)
    SysCtlDelay(16);

    //
    // Set the PLL configuration.
    //
    ulRCC &= ~(SYSCTL_RCC_PWRDN | SYSCTL_RCC_OEN);
    9ccc:	f428 5340 	bic.w	r3, r8, #12288	; 0x3000
    ulRCC |= ulConfig & (SYSCTL_RCC_PWRDN | SYSCTL_RCC_OEN);
    9cd0:	4313      	orrs	r3, r2
    ulRCC2 &= ~(SYSCTL_RCC2_PWRDN2);
    9cd2:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
    ulRCC2 |= ulConfig & SYSCTL_RCC2_PWRDN2;
    9cd6:	f404 5200 	and.w	r2, r4, #8192	; 0x2000

    //
    // Clear the PLL lock interrupt.
    //
    HWREG(SYSCTL_MISC) = SYSCTL_INT_PLL_LOCK;
    9cda:	2040      	movs	r0, #64	; 0x40

    //
    // Write the new RCC value.
    //
    if(ulRCC2 & SYSCTL_RCC2_USERCC2)
    9cdc:	432a      	orrs	r2, r5
    ulRCC2 |= ulConfig & SYSCTL_RCC2_PWRDN2;

    //
    // Clear the PLL lock interrupt.
    //
    HWREG(SYSCTL_MISC) = SYSCTL_INT_PLL_LOCK;
    9cde:	6008      	str	r0, [r1, #0]
    // Set the requested system divider and disable the appropriate
    // oscillators.  This value is not written immediately.
    //
    ulRCC &= ~(SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
               SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
    ulRCC |= ulConfig & (SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
    9ce0:	4922      	ldr	r1, [pc, #136]	; (9d6c <SysCtlClockSet+0x14c>)
    //
    // Write the new RCC value.
    //
    if(ulRCC2 & SYSCTL_RCC2_USERCC2)
    {
        HWREG(SYSCTL_RCC2) = ulRCC2;
    9ce2:	bf4a      	itet	mi
    9ce4:	6032      	strmi	r2, [r6, #0]
        HWREG(SYSCTL_RCC) = ulRCC;
    }
    else
    {
        HWREG(SYSCTL_RCC) = ulRCC;
    9ce6:	603b      	strpl	r3, [r7, #0]
    // Write the new RCC value.
    //
    if(ulRCC2 & SYSCTL_RCC2_USERCC2)
    {
        HWREG(SYSCTL_RCC2) = ulRCC2;
        HWREG(SYSCTL_RCC) = ulRCC;
    9ce8:	603b      	strmi	r3, [r7, #0]

    //
    // Set the requested system divider and disable the appropriate
    // oscillators.  This value is not written immediately.
    //
    ulRCC &= ~(SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
    9cea:	f023 63f8 	bic.w	r3, r3, #130023424	; 0x7c00000
               SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
    ulRCC |= ulConfig & (SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
    9cee:	ea04 0101 	and.w	r1, r4, r1

    //
    // Set the requested system divider and disable the appropriate
    // oscillators.  This value is not written immediately.
    //
    ulRCC &= ~(SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
    9cf2:	f023 0303 	bic.w	r3, r3, #3
        HWREG(SYSCTL_RCC) = ulRCC;
    }
    else
    {
        HWREG(SYSCTL_RCC) = ulRCC;
        HWREG(SYSCTL_RCC2) = ulRCC2;
    9cf6:	bf58      	it	pl
    9cf8:	6032      	strpl	r2, [r6, #0]
    // Set the requested system divider and disable the appropriate
    // oscillators.  This value is not written immediately.
    //
    ulRCC &= ~(SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
               SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
    ulRCC |= ulConfig & (SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
    9cfa:	430b      	orrs	r3, r1
                         SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
    ulRCC2 &= ~(SYSCTL_RCC2_SYSDIV2_M);
    9cfc:	f022 52fc 	bic.w	r2, r2, #528482304	; 0x1f800000
    ulRCC2 |= ulConfig & SYSCTL_RCC2_SYSDIV2_M;
    9d00:	f004 51fc 	and.w	r1, r4, #528482304	; 0x1f800000
    if(ulConfig & SYSCTL_RCC2_DIV400)
    9d04:	0065      	lsls	r5, r4, #1
    ulRCC &= ~(SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
               SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
    ulRCC |= ulConfig & (SYSCTL_RCC_SYSDIV_M | SYSCTL_RCC_USESYSDIV |
                         SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
    ulRCC2 &= ~(SYSCTL_RCC2_SYSDIV2_M);
    ulRCC2 |= ulConfig & SYSCTL_RCC2_SYSDIV2_M;
    9d06:	ea42 0201 	orr.w	r2, r2, r1
    if(ulConfig & SYSCTL_RCC2_DIV400)
    9d0a:	d507      	bpl.n	9d1c <SysCtlClockSet+0xfc>
    {
        ulRCC |= SYSCTL_RCC_USESYSDIV;
        ulRCC2 &= ~(SYSCTL_RCC_USESYSDIV);
        ulRCC2 |= ulConfig & (SYSCTL_RCC2_DIV400 | SYSCTL_RCC2_SYSDIV2LSB);
    9d0c:	4918      	ldr	r1, [pc, #96]	; (9d70 <SysCtlClockSet+0x150>)
    ulRCC2 &= ~(SYSCTL_RCC2_SYSDIV2_M);
    ulRCC2 |= ulConfig & SYSCTL_RCC2_SYSDIV2_M;
    if(ulConfig & SYSCTL_RCC2_DIV400)
    {
        ulRCC |= SYSCTL_RCC_USESYSDIV;
        ulRCC2 &= ~(SYSCTL_RCC_USESYSDIV);
    9d0e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
        ulRCC2 |= ulConfig & (SYSCTL_RCC2_DIV400 | SYSCTL_RCC2_SYSDIV2LSB);
    9d12:	4021      	ands	r1, r4
                         SYSCTL_RCC_IOSCDIS | SYSCTL_RCC_MOSCDIS);
    ulRCC2 &= ~(SYSCTL_RCC2_SYSDIV2_M);
    ulRCC2 |= ulConfig & SYSCTL_RCC2_SYSDIV2_M;
    if(ulConfig & SYSCTL_RCC2_DIV400)
    {
        ulRCC |= SYSCTL_RCC_USESYSDIV;
    9d14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
        ulRCC2 &= ~(SYSCTL_RCC_USESYSDIV);
        ulRCC2 |= ulConfig & (SYSCTL_RCC2_DIV400 | SYSCTL_RCC2_SYSDIV2LSB);
    9d18:	430a      	orrs	r2, r1
    9d1a:	e001      	b.n	9d20 <SysCtlClockSet+0x100>
    }
    else
    {
        ulRCC2 &= ~(SYSCTL_RCC2_DIV400);
    9d1c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
    }

    //
    // See if the PLL output is being used to clock the system.
    //
    if(!(ulConfig & SYSCTL_RCC_BYPASS))
    9d20:	0524      	lsls	r4, r4, #20
    9d22:	d40b      	bmi.n	9d3c <SysCtlClockSet+0x11c>
    9d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
        //
        // Wait until the PLL has locked.
        //
        for(ulDelay = 32768; ulDelay > 0; ulDelay--)
        {
            if(HWREG(SYSCTL_RIS) & SYSCTL_INT_PLL_LOCK)
    9d28:	4812      	ldr	r0, [pc, #72]	; (9d74 <SysCtlClockSet+0x154>)
    9d2a:	6800      	ldr	r0, [r0, #0]
    9d2c:	0640      	lsls	r0, r0, #25
    9d2e:	d401      	bmi.n	9d34 <SysCtlClockSet+0x114>
    if(!(ulConfig & SYSCTL_RCC_BYPASS))
    {
        //
        // Wait until the PLL has locked.
        //
        for(ulDelay = 32768; ulDelay > 0; ulDelay--)
    9d30:	3901      	subs	r1, #1
    9d32:	d1f9      	bne.n	9d28 <SysCtlClockSet+0x108>
        }

        //
        // Enable use of the PLL.
        //
        ulRCC &= ~(SYSCTL_RCC_BYPASS);
    9d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
        ulRCC2 &= ~(SYSCTL_RCC2_BYPASS2);
    9d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }

    //
    // Write the final RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    9d3c:	4907      	ldr	r1, [pc, #28]	; (9d5c <SysCtlClockSet+0x13c>)
    HWREG(SYSCTL_RCC2) = ulRCC2;

    //
    // Delay for a little bit so that the system divider takes effect.
    //
    SysCtlDelay(16);
    9d3e:	2010      	movs	r0, #16
    }

    //
    // Write the final RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    9d40:	600b      	str	r3, [r1, #0]
    HWREG(SYSCTL_RCC2) = ulRCC2;
    9d42:	4b07      	ldr	r3, [pc, #28]	; (9d60 <SysCtlClockSet+0x140>)

    //
    // Delay for a little bit so that the system divider takes effect.
    //
    SysCtlDelay(16);
}
    9d44:	e8bd 41f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r14}

    //
    // Write the final RCC value.
    //
    HWREG(SYSCTL_RCC) = ulRCC;
    HWREG(SYSCTL_RCC2) = ulRCC2;
    9d48:	601a      	str	r2, [r3, #0]

    //
    // Delay for a little bit so that the system divider takes effect.
    //
    SysCtlDelay(16);
    9d4a:	f7ff bf65 	b.w	9c18 <SysCtlDelay>
    9d4e:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    9d52:	bf00      	nop
    9d54:	400fe000 	.word	0x400fe000
    9d58:	70ff0000 	.word	0x70ff0000
    9d5c:	400fe060 	.word	0x400fe060
    9d60:	400fe070 	.word	0x400fe070
    9d64:	80000030 	.word	0x80000030
    9d68:	400fe058 	.word	0x400fe058
    9d6c:	07c00003 	.word	0x07c00003
    9d70:	40400000 	.word	0x40400000
    9d74:	400fe050 	.word	0x400fe050

00009d78 <SysCtlClockGet>:
    //
    // Read RCC and RCC2.  For Sandstorm-class devices (which do not have
    // RCC2), the RCC2 read returns 0, indicating that RCC2 is
    // disabled (because the SYSCTL_RCC2_USERCC2 bit is clear).
    //
    ulRCC = HWREG(SYSCTL_RCC);
    9d78:	4b6b      	ldr	r3, [pc, #428]	; (9f28 <SysCtlClockGet+0x1b0>)
//! \return The processor clock rate.
//
//*****************************************************************************
unsigned long
SysCtlClockGet(void)
{
    9d7a:	b5f0      	push	{r4, r5, r6, r7, r14}
    //
    // Read RCC and RCC2.  For Sandstorm-class devices (which do not have
    // RCC2), the RCC2 read returns 0, indicating that RCC2 is
    // disabled (because the SYSCTL_RCC2_USERCC2 bit is clear).
    //
    ulRCC = HWREG(SYSCTL_RCC);
    9d7c:	681a      	ldr	r2, [r3, #0]
    ulRCC2 = HWREG(SYSCTL_RCC2);
    9d7e:	3310      	adds	r3, #16
    9d80:	681b      	ldr	r3, [r3, #0]

    //
    // Get the base clock rate.
    //
    switch((ulRCC2 & SYSCTL_RCC2_USERCC2) ?
           (ulRCC2 & SYSCTL_RCC2_OSCSRC2_M) :
    9d82:	2b00      	cmp	r3, #0
    9d84:	bfb4      	ite	lt
    9d86:	f003 0170 	andlt.w	r1, r3, #112	; 0x70
    9d8a:	f002 0130 	andge.w	r1, r2, #48	; 0x30
    ulRCC2 = HWREG(SYSCTL_RCC2);

    //
    // Get the base clock rate.
    //
    switch((ulRCC2 & SYSCTL_RCC2_USERCC2) ?
    9d8e:	2920      	cmp	r1, #32
    9d90:	d036      	beq.n	9e00 <SysCtlClockGet+0x88>
    9d92:	d803      	bhi.n	9d9c <SysCtlClockGet+0x24>
    9d94:	b161      	cbz	r1, 9db0 <SysCtlClockGet+0x38>
    9d96:	2910      	cmp	r1, #16
    9d98:	d010      	beq.n	9dbc <SysCtlClockGet+0x44>
    9d9a:	e0c2      	b.n	9f22 <SysCtlClockGet+0x1aa>
    9d9c:	2960      	cmp	r1, #96	; 0x60
    9d9e:	d054      	beq.n	9e4a <SysCtlClockGet+0xd2>
    9da0:	2970      	cmp	r1, #112	; 0x70
    9da2:	d04f      	beq.n	9e44 <SysCtlClockGet+0xcc>
    9da4:	2930      	cmp	r1, #48	; 0x30
    9da6:	f040 80bc 	bne.w	9f22 <SysCtlClockGet+0x1aa>
        case SYSCTL_RCC_OSCSRC_30:
        {
            //
            // The internal 30-KHz oscillator has an accuracy of +/- 30%.
            //
            ulClk = 30000;
    9daa:	f247 5030 	movw	r0, #30000	; 0x7530
    9dae:	e056      	b.n	9e5e <SysCtlClockGet+0xe6>
        // The main oscillator is the clock source.  Determine its rate from
        // the crystal setting field.
        //
        case SYSCTL_RCC_OSCSRC_MAIN:
        {
            ulClk = g_pulXtals[(ulRCC & SYSCTL_RCC_XTAL_M) >>
    9db0:	495e      	ldr	r1, [pc, #376]	; (9f2c <SysCtlClockGet+0x1b4>)
    9db2:	f3c2 1084 	ubfx	r0, r2, #6, #5
    9db6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
                               SYSCTL_RCC_XTAL_S];
            break;
    9dba:	e050      	b.n	9e5e <SysCtlClockGet+0xe6>
        case SYSCTL_RCC_OSCSRC_INT:
        {
            //
            // See if this is a Sandstorm-class or Fury-class device.
            //
            if(CLASS_IS_SANDSTORM)
    9dbc:	495c      	ldr	r1, [pc, #368]	; (9f30 <SysCtlClockGet+0x1b8>)
    9dbe:	6808      	ldr	r0, [r1, #0]
    9dc0:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    9dc4:	d044      	beq.n	9e50 <SysCtlClockGet+0xd8>
    9dc6:	680c      	ldr	r4, [r1, #0]
    9dc8:	485a      	ldr	r0, [pc, #360]	; (9f34 <SysCtlClockGet+0x1bc>)
    9dca:	4020      	ands	r0, r4
    9dcc:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
    9dd0:	d03e      	beq.n	9e50 <SysCtlClockGet+0xd8>
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000;
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
    9dd2:	680c      	ldr	r4, [r1, #0]
    9dd4:	4857      	ldr	r0, [pc, #348]	; (9f34 <SysCtlClockGet+0x1bc>)
    9dd6:	4020      	ands	r0, r4
    9dd8:	4c57      	ldr	r4, [pc, #348]	; (9f38 <SysCtlClockGet+0x1c0>)
    9dda:	42a0      	cmp	r0, r4
    9ddc:	d103      	bne.n	9de6 <SysCtlClockGet+0x6e>
    9dde:	6809      	ldr	r1, [r1, #0]
    9de0:	b289      	uxth	r1, r1
    9de2:	2902      	cmp	r1, #2
    9de4:	d036      	beq.n	9e54 <SysCtlClockGet+0xdc>
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
    9de6:	4852      	ldr	r0, [pc, #328]	; (9f30 <SysCtlClockGet+0x1b8>)
    9de8:	4952      	ldr	r1, [pc, #328]	; (9f34 <SysCtlClockGet+0x1bc>)
    9dea:	6804      	ldr	r4, [r0, #0]
    9dec:	4021      	ands	r1, r4
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000;
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
    9dee:	4c53      	ldr	r4, [pc, #332]	; (9f3c <SysCtlClockGet+0x1c4>)
    9df0:	42a1      	cmp	r1, r4
    9df2:	d001      	beq.n	9df8 <SysCtlClockGet+0x80>
            else
            {
                //
                // The internal oscillator on all other devices is 16 MHz.
                //
                ulClk = 16000000;
    9df4:	4852      	ldr	r0, [pc, #328]	; (9f40 <SysCtlClockGet+0x1c8>)
    9df6:	e032      	b.n	9e5e <SysCtlClockGet+0xe6>
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000;
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
    9df8:	6801      	ldr	r1, [r0, #0]
    9dfa:	b289      	uxth	r1, r1
    9dfc:	b351      	cbz	r1, 9e54 <SysCtlClockGet+0xdc>
    9dfe:	e7f9      	b.n	9df4 <SysCtlClockGet+0x7c>
        case SYSCTL_RCC_OSCSRC_INT4:
        {
            //
            // See if this is a Sandstorm-class or Fury-class device.
            //
            if(CLASS_IS_SANDSTORM)
    9e00:	494b      	ldr	r1, [pc, #300]	; (9f30 <SysCtlClockGet+0x1b8>)
    9e02:	6808      	ldr	r0, [r1, #0]
    9e04:	f010 4fe0 	tst.w	r0, #1879048192	; 0x70000000
    9e08:	d026      	beq.n	9e58 <SysCtlClockGet+0xe0>
    9e0a:	680c      	ldr	r4, [r1, #0]
    9e0c:	4849      	ldr	r0, [pc, #292]	; (9f34 <SysCtlClockGet+0x1bc>)
    9e0e:	4020      	ands	r0, r4
    9e10:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
    9e14:	d020      	beq.n	9e58 <SysCtlClockGet+0xe0>
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000 / 4;
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
    9e16:	680c      	ldr	r4, [r1, #0]
    9e18:	4846      	ldr	r0, [pc, #280]	; (9f34 <SysCtlClockGet+0x1bc>)
    9e1a:	4020      	ands	r0, r4
    9e1c:	4c46      	ldr	r4, [pc, #280]	; (9f38 <SysCtlClockGet+0x1c0>)
    9e1e:	42a0      	cmp	r0, r4
    9e20:	d103      	bne.n	9e2a <SysCtlClockGet+0xb2>
    9e22:	6809      	ldr	r1, [r1, #0]
    9e24:	b289      	uxth	r1, r1
    9e26:	2902      	cmp	r1, #2
    9e28:	d018      	beq.n	9e5c <SysCtlClockGet+0xe4>
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
    9e2a:	4841      	ldr	r0, [pc, #260]	; (9f30 <SysCtlClockGet+0x1b8>)
    9e2c:	4941      	ldr	r1, [pc, #260]	; (9f34 <SysCtlClockGet+0x1bc>)
    9e2e:	6804      	ldr	r4, [r0, #0]
    9e30:	4021      	ands	r1, r4
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000 / 4;
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
    9e32:	4c42      	ldr	r4, [pc, #264]	; (9f3c <SysCtlClockGet+0x1c4>)
    9e34:	42a1      	cmp	r1, r4
    9e36:	d001      	beq.n	9e3c <SysCtlClockGet+0xc4>
            else
            {
                //
                // The internal oscillator on a Tempest-class device is 16 MHz.
                //
                ulClk = 16000000 / 4;
    9e38:	4842      	ldr	r0, [pc, #264]	; (9f44 <SysCtlClockGet+0x1cc>)
    9e3a:	e010      	b.n	9e5e <SysCtlClockGet+0xe6>
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000 / 4;
            }
            else if((CLASS_IS_FURY && REVISION_IS_A2) ||
                    (CLASS_IS_DUSTDEVIL && REVISION_IS_A0))
    9e3c:	6801      	ldr	r1, [r0, #0]
    9e3e:	b289      	uxth	r1, r1
    9e40:	b161      	cbz	r1, 9e5c <SysCtlClockGet+0xe4>
    9e42:	e7f9      	b.n	9e38 <SysCtlClockGet+0xc0>
        //
        // The 32.768-KHz clock from the hibernate module is the source clock.
        //
        case SYSCTL_RCC2_OSCSRC2_32:
        {
            ulClk = 32768;
    9e44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
            break;
    9e48:	e009      	b.n	9e5e <SysCtlClockGet+0xe6>
        // The 4.194304-MHz clock from the hibernate module is the clock
        // source.
        //
        case SYSCTL_RCC2_OSCSRC2_419:
        {
            ulClk = 4194304;
    9e4a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    9e4e:	e006      	b.n	9e5e <SysCtlClockGet+0xe6>
            {
                //
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000;
    9e50:	483d      	ldr	r0, [pc, #244]	; (9f48 <SysCtlClockGet+0x1d0>)
    9e52:	e004      	b.n	9e5e <SysCtlClockGet+0xe6>
            {
                //
                // The internal oscillator on a rev A2 Fury-class device and a
                // Dustdevil-class device is 12 MHz +/- 30%.
                //
                ulClk = 12000000;
    9e54:	483d      	ldr	r0, [pc, #244]	; (9f4c <SysCtlClockGet+0x1d4>)
    9e56:	e002      	b.n	9e5e <SysCtlClockGet+0xe6>
            {
                //
                // The internal oscillator on a Sandstorm-class device is
                // 15 MHz +/- 50%.
                //
                ulClk = 15000000 / 4;
    9e58:	483d      	ldr	r0, [pc, #244]	; (9f50 <SysCtlClockGet+0x1d8>)
    9e5a:	e000      	b.n	9e5e <SysCtlClockGet+0xe6>
            {
                //
                // The internal oscillator on a rev A2 Fury-class device and a
                // Dustdevil-class device is 12 MHz +/- 30%.
                //
                ulClk = 12000000 / 4;
    9e5c:	483d      	ldr	r0, [pc, #244]	; (9f54 <SysCtlClockGet+0x1dc>)
    }

    //
    // See if the PLL is being used.
    //
    if(((ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
    9e5e:	2b00      	cmp	r3, #0
    9e60:	da02      	bge.n	9e68 <SysCtlClockGet+0xf0>
    9e62:	f413 6f00 	tst.w	r3, #2048	; 0x800
    9e66:	e001      	b.n	9e6c <SysCtlClockGet+0xf4>
       (!(ulRCC2 & SYSCTL_RCC2_USERCC2) && !(ulRCC & SYSCTL_RCC_BYPASS)))
    9e68:	f412 6f00 	tst.w	r2, #2048	; 0x800
    9e6c:	d141      	bne.n	9ef2 <SysCtlClockGet+0x17a>
    {
        //
        // See if this is a Blizzard-class device.
        //
        if(CLASS_IS_BLIZZARD)
    9e6e:	4d30      	ldr	r5, [pc, #192]	; (9f30 <SysCtlClockGet+0x1b8>)
    9e70:	4930      	ldr	r1, [pc, #192]	; (9f34 <SysCtlClockGet+0x1bc>)
    9e72:	682c      	ldr	r4, [r5, #0]
    9e74:	4021      	ands	r1, r4
    9e76:	4c38      	ldr	r4, [pc, #224]	; (9f58 <SysCtlClockGet+0x1e0>)
    9e78:	42a1      	cmp	r1, r4
    9e7a:	d115      	bne.n	9ea8 <SysCtlClockGet+0x130>
        {
            //
            // Read the two PLL frequency registers.  The formula for a
            // Blizzard-class device is "(xtal * m) / ((q + 1) * (n + 1))".
            //
            ulPLL = HWREG(SYSCTL_PLLFREQ0);
    9e7c:	4937      	ldr	r1, [pc, #220]	; (9f5c <SysCtlClockGet+0x1e4>)
    9e7e:	680c      	ldr	r4, [r1, #0]
            ulPLL1 = HWREG(SYSCTL_PLLFREQ1);
    9e80:	684d      	ldr	r5, [r1, #4]
            //
            // Divide the input clock by the dividers.
            //
            ulClk /= ((((ulPLL1 & SYSCTL_PLLFREQ1_Q_M) >>
                        SYSCTL_PLLFREQ1_Q_S) + 1) *
                      (((ulPLL1 & SYSCTL_PLLFREQ1_N_M) >>
    9e82:	f005 061f 	and.w	r6, r5, #31
            ulPLL1 = HWREG(SYSCTL_PLLFREQ1);

            //
            // Divide the input clock by the dividers.
            //
            ulClk /= ((((ulPLL1 & SYSCTL_PLLFREQ1_Q_M) >>
    9e86:	f3c5 2104 	ubfx	r1, r5, #8, #5
                        SYSCTL_PLLFREQ1_Q_S) + 1) *
                      (((ulPLL1 & SYSCTL_PLLFREQ1_N_M) >>
                        SYSCTL_PLLFREQ1_N_S) + 1) * 2);
    9e8a:	3601      	adds	r6, #1
    9e8c:	0076      	lsls	r6, r6, #1
    9e8e:	3101      	adds	r1, #1
    9e90:	4371      	muls	r1, r6
            ulPLL1 = HWREG(SYSCTL_PLLFREQ1);

            //
            // Divide the input clock by the dividers.
            //
            ulClk /= ((((ulPLL1 & SYSCTL_PLLFREQ1_Q_M) >>
    9e92:	fbb0 f1f1 	udiv	r1, r0, r1
            // Multiply the clock by the multiplier, which is split into an
            // integer part and a fractional part.
            //
            ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MINT_M) >>
                               SYSCTL_PLLFREQ0_MINT_S)) +
                     ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MFRAC_M) >>
    9e96:	f3c4 2089 	ubfx	r0, r4, #10, #10
    9e9a:	4348      	muls	r0, r1

            //
            // Multiply the clock by the multiplier, which is split into an
            // integer part and a fractional part.
            //
            ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MINT_M) >>
    9e9c:	f3c4 0509 	ubfx	r5, r4, #0, #10
                               SYSCTL_PLLFREQ0_MINT_S)) +
                     ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MFRAC_M) >>
                                SYSCTL_PLLFREQ0_MFRAC_S)) >> 10));
    9ea0:	0a80      	lsrs	r0, r0, #10

            //
            // Multiply the clock by the multiplier, which is split into an
            // integer part and a fractional part.
            //
            ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLFREQ0_MINT_M) >>
    9ea2:	fb05 0001 	mla	r0, r5, r1, r0
    9ea6:	e022      	b.n	9eee <SysCtlClockGet+0x176>
        else
        {
            //
            // Get the PLL configuration.
            //
            ulPLL = HWREG(SYSCTL_PLLCFG);
    9ea8:	492d      	ldr	r1, [pc, #180]	; (9f60 <SysCtlClockGet+0x1e8>)
    9eaa:	6809      	ldr	r1, [r1, #0]

            //
            // See if this is a Sandstorm-class or Fury-class device.
            //
            if(CLASS_IS_SANDSTORM)
    9eac:	682c      	ldr	r4, [r5, #0]
    9eae:	f001 061f 	and.w	r6, r1, #31
    9eb2:	f014 4fe0 	tst.w	r4, #1879048192	; 0x70000000
    9eb6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    9eba:	ea01 0404 	and.w	r4, r1, r4
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Sandstorm-class devices is
                // "(xtal * (f + 2)) / (r + 2)".
                //
                ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
    9ebe:	ea4f 1454 	mov.w	r4, r4, lsr #5
            ulPLL = HWREG(SYSCTL_PLLCFG);

            //
            // See if this is a Sandstorm-class or Fury-class device.
            //
            if(CLASS_IS_SANDSTORM)
    9ec2:	d005      	beq.n	9ed0 <SysCtlClockGet+0x158>
    9ec4:	682f      	ldr	r7, [r5, #0]
    9ec6:	4d1b      	ldr	r5, [pc, #108]	; (9f34 <SysCtlClockGet+0x1bc>)
    9ec8:	403d      	ands	r5, r7
    9eca:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    9ece:	d103      	bne.n	9ed8 <SysCtlClockGet+0x160>
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Sandstorm-class devices is
                // "(xtal * (f + 2)) / (r + 2)".
                //
                ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
                                    SYSCTL_PLLCFG_F_S) + 2)) /
    9ed0:	3402      	adds	r4, #2
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Sandstorm-class devices is
                // "(xtal * (f + 2)) / (r + 2)".
                //
                ulClk = ((ulClk * (((ulPLL & SYSCTL_PLLCFG_F_M) >>
    9ed2:	4360      	muls	r0, r4
                                    SYSCTL_PLLCFG_F_S) + 2)) /
                         (((ulPLL & SYSCTL_PLLCFG_R_M) >>
                           SYSCTL_PLLCFG_R_S) + 2));
    9ed4:	3602      	adds	r6, #2
    9ed6:	e002      	b.n	9ede <SysCtlClockGet+0x166>
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Fury-class device is
                // "(xtal * f) / ((r + 1) * 2)".
                //
                ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLCFG_F_M) >>
    9ed8:	4360      	muls	r0, r4
                                   SYSCTL_PLLCFG_F_S)) /
                         ((((ulPLL & SYSCTL_PLLCFG_R_M) >>
                            SYSCTL_PLLCFG_R_S) + 1) * 2));
    9eda:	3601      	adds	r6, #1
    9edc:	0076      	lsls	r6, r6, #1
                //
                // Compute the PLL output frequency based on its input
                // frequency.  The formula for a Fury-class device is
                // "(xtal * f) / ((r + 1) * 2)".
                //
                ulClk = ((ulClk * ((ulPLL & SYSCTL_PLLCFG_F_M) >>
    9ede:	fbb0 f0f6 	udiv	r0, r0, r6
            }

            //
            // See if the optional output divide by 2 is being used.
            //
            if(ulPLL & SYSCTL_PLLCFG_OD_2)
    9ee2:	044c      	lsls	r4, r1, #17
            {
                ulClk /= 2;
    9ee4:	bf48      	it	mi
    9ee6:	0840      	lsrmi	r0, r0, #1
            }

            //
            // See if the optional output divide by 4 is being used.
            //
            if(ulPLL & SYSCTL_PLLCFG_OD_4)
    9ee8:	040f      	lsls	r7, r1, #16
            {
                ulClk /= 4;
    9eea:	bf48      	it	mi
    9eec:	0880      	lsrmi	r0, r0, #2

        //
        // Force the system divider to be enabled.  It is always used when
        // using the PLL, but in some cases it does not read as being enabled.
        //
        ulRCC |= SYSCTL_RCC_USESYSDIV;
    9eee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
    }

    //
    // See if the system divider is being used.
    //
    if(ulRCC & SYSCTL_RCC_USESYSDIV)
    9ef2:	0256      	lsls	r6, r2, #9
    9ef4:	d516      	bpl.n	9f24 <SysCtlClockGet+0x1ac>
    {
        //
        // Adjust the clock rate by the system clock divider.
        //
        if(ulRCC2 & SYSCTL_RCC2_USERCC2)
    9ef6:	2b00      	cmp	r3, #0
    9ef8:	da0d      	bge.n	9f16 <SysCtlClockGet+0x19e>
        {
            if((ulRCC2 & SYSCTL_RCC2_DIV400) &&
    9efa:	005d      	lsls	r5, r3, #1
    9efc:	d505      	bpl.n	9f0a <SysCtlClockGet+0x192>
               (((ulRCC2 & SYSCTL_RCC2_USERCC2) &&
    9efe:	051c      	lsls	r4, r3, #20
    9f00:	d403      	bmi.n	9f0a <SysCtlClockGet+0x192>
                 !(ulRCC2 & SYSCTL_RCC2_BYPASS2)) ||
                (!(ulRCC2 & SYSCTL_RCC2_USERCC2) &&
                 !(ulRCC & SYSCTL_RCC_BYPASS))))

            {
                ulClk = ((ulClk * 2) / (((ulRCC2 & (SYSCTL_RCC2_SYSDIV2_M |
    9f02:	0040      	lsls	r0, r0, #1
                                                    SYSCTL_RCC2_SYSDIV2LSB)) >>
    9f04:	f3c3 5386 	ubfx	r3, r3, #22, #7
    9f08:	e001      	b.n	9f0e <SysCtlClockGet+0x196>
                                         (SYSCTL_RCC2_SYSDIV2_S - 1)) + 1));
            }
            else
            {
                ulClk /= (((ulRCC2 & SYSCTL_RCC2_SYSDIV2_M) >>
    9f0a:	f3c3 53c5 	ubfx	r3, r3, #23, #6
                           SYSCTL_RCC2_SYSDIV2_S) + 1);
    9f0e:	3301      	adds	r3, #1
                                                    SYSCTL_RCC2_SYSDIV2LSB)) >>
                                         (SYSCTL_RCC2_SYSDIV2_S - 1)) + 1));
            }
            else
            {
                ulClk /= (((ulRCC2 & SYSCTL_RCC2_SYSDIV2_M) >>
    9f10:	fbb0 f0f3 	udiv	r0, r0, r3
    9f14:	bdf0      	pop	{r4, r5, r6, r7, r15}
                           SYSCTL_RCC2_SYSDIV2_S) + 1);
            }
        }
        else
        {
            ulClk /= (((ulRCC & SYSCTL_RCC_SYSDIV_M) >> SYSCTL_RCC_SYSDIV_S) +
    9f16:	f3c2 52c3 	ubfx	r2, r2, #23, #4
    9f1a:	3201      	adds	r2, #1
    9f1c:	fbb0 f0f2 	udiv	r0, r0, r2
    9f20:	bdf0      	pop	{r4, r5, r6, r7, r15}
        // An unknown setting, so return a zero clock (that is, an unknown
        // clock rate).
        //
        default:
        {
            return(0);
    9f22:	2000      	movs	r0, #0

    //
    // Return the computed clock rate.
    //
    return(ulClk);
}
    9f24:	bdf0      	pop	{r4, r5, r6, r7, r15}
    9f26:	bf00      	nop
    9f28:	400fe060 	.word	0x400fe060
    9f2c:	00017698 	.word	0x00017698
    9f30:	400fe000 	.word	0x400fe000
    9f34:	70ff0000 	.word	0x70ff0000
    9f38:	10010000 	.word	0x10010000
    9f3c:	10030000 	.word	0x10030000
    9f40:	00f42400 	.word	0x00f42400
    9f44:	003d0900 	.word	0x003d0900
    9f48:	00e4e1c0 	.word	0x00e4e1c0
    9f4c:	00b71b00 	.word	0x00b71b00
    9f50:	00393870 	.word	0x00393870
    9f54:	002dc6c0 	.word	0x002dc6c0
    9f58:	10050000 	.word	0x10050000
    9f5c:	400fe160 	.word	0x400fe160
    9f60:	400fe064 	.word	0x400fe064

00009f64 <SysCtlUSBPLLEnable>:
SysCtlUSBPLLEnable(void)
{
    //
    // Turn on the USB PLL.
    //
    HWREG(SYSCTL_RCC2) &= ~SYSCTL_RCC2_USBPWRDN;
    9f64:	4b02      	ldr	r3, [pc, #8]	; (9f70 <SysCtlUSBPLLEnable+0xc>)
    9f66:	681a      	ldr	r2, [r3, #0]
    9f68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    9f6c:	601a      	str	r2, [r3, #0]
    9f6e:	4770      	bx	r14
    9f70:	400fe070 	.word	0x400fe070

00009f74 <UARTBaseValid>:
UARTBaseValid(unsigned long ulBase)
{
    return((ulBase == UART0_BASE) || (ulBase == UART1_BASE) ||
           (ulBase == UART2_BASE) || (ulBase == UART3_BASE) ||
           (ulBase == UART4_BASE) || (ulBase == UART5_BASE) ||
           (ulBase == UART6_BASE) || (ulBase == UART7_BASE));
    9f74:	4b05      	ldr	r3, [pc, #20]	; (9f8c <UARTBaseValid+0x18>)
    9f76:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
    9f7a:	4298      	cmp	r0, r3
    9f7c:	d101      	bne.n	9f82 <UARTBaseValid+0xe>
    9f7e:	2001      	movs	r0, #1
    9f80:	4770      	bx	r14
#ifdef DEBUG
static tBoolean
UARTBaseValid(unsigned long ulBase)
{
    return((ulBase == UART0_BASE) || (ulBase == UART1_BASE) ||
           (ulBase == UART2_BASE) || (ulBase == UART3_BASE) ||
    9f82:	4b03      	ldr	r3, [pc, #12]	; (9f90 <UARTBaseValid+0x1c>)
    9f84:	4298      	cmp	r0, r3
    9f86:	d0fa      	beq.n	9f7e <UARTBaseValid+0xa>
           (ulBase == UART4_BASE) || (ulBase == UART5_BASE) ||
           (ulBase == UART6_BASE) || (ulBase == UART7_BASE));
    9f88:	2000      	movs	r0, #0
}
    9f8a:	4770      	bx	r14
    9f8c:	4000c000 	.word	0x4000c000
    9f90:	40010000 	.word	0x40010000

00009f94 <UARTEnable>:
//! \return None.
//
//*****************************************************************************
void
UARTEnable(unsigned long ulBase)
{
    9f94:	b537      	push	{r0, r1, r2, r4, r5, r14}
    9f96:	4675      	mov	r5, r14
    9f98:	4604      	mov	r4, r0
    //
    // Check the arguments.
    //
    ASSERT(UARTBaseValid(ulBase));
    9f9a:	f7ff ffeb 	bl	9f74 <UARTBaseValid>
    9f9e:	b940      	cbnz	r0, 9fb2 <UARTEnable+0x1e>
    9fa0:	4b0a      	ldr	r3, [pc, #40]	; (9fcc <UARTEnable+0x38>)
    9fa2:	4628      	mov	r0, r5
    9fa4:	9300      	str	r3, [sp, #0]
    9fa6:	490a      	ldr	r1, [pc, #40]	; (9fd0 <UARTEnable+0x3c>)
    9fa8:	4a0a      	ldr	r2, [pc, #40]	; (9fd4 <UARTEnable+0x40>)
    9faa:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
    9fae:	f001 fa81 	bl	b4b4 <_panic>

    //
    // Enable the FIFO.
    //
    HWREG(ulBase + UART_O_LCRH) |= UART_LCRH_FEN;
    9fb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9fb4:	f043 0310 	orr.w	r3, r3, #16
    9fb8:	62e3      	str	r3, [r4, #44]	; 0x2c

    //
    // Enable RX, TX, and the UART.
    //
    HWREG(ulBase + UART_O_CTL) |= (UART_CTL_UARTEN | UART_CTL_TXE |
    9fba:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9fbc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    9fc0:	f043 0301 	orr.w	r3, r3, #1
    9fc4:	6323      	str	r3, [r4, #48]	; 0x30
                                   UART_CTL_RXE);
}
    9fc6:	b003      	add	sp, #12
    9fc8:	bd30      	pop	{r4, r5, r15}
    9fca:	bf00      	nop
    9fcc:	00016724 	.word	0x00016724
    9fd0:	0001076e 	.word	0x0001076e
    9fd4:	000166ea 	.word	0x000166ea

00009fd8 <UARTDisable>:
//! \return None.
//
//*****************************************************************************
void
UARTDisable(unsigned long ulBase)
{
    9fd8:	b537      	push	{r0, r1, r2, r4, r5, r14}
    9fda:	4675      	mov	r5, r14
    9fdc:	4604      	mov	r4, r0
    //
    // Check the arguments.
    //
    ASSERT(UARTBaseValid(ulBase));
    9fde:	f7ff ffc9 	bl	9f74 <UARTBaseValid>
    9fe2:	b940      	cbnz	r0, 9ff6 <UARTDisable+0x1e>
    9fe4:	4b0b      	ldr	r3, [pc, #44]	; (a014 <UARTDisable+0x3c>)
    9fe6:	4628      	mov	r0, r5
    9fe8:	9300      	str	r3, [sp, #0]
    9fea:	490b      	ldr	r1, [pc, #44]	; (a018 <UARTDisable+0x40>)
    9fec:	4a0b      	ldr	r2, [pc, #44]	; (a01c <UARTDisable+0x44>)
    9fee:	f240 2316 	movw	r3, #534	; 0x216
    9ff2:	f001 fa5f 	bl	b4b4 <_panic>

    //
    // Wait for end of TX.
    //
    while(HWREG(ulBase + UART_O_FR) & UART_FR_BUSY)
    9ff6:	69a3      	ldr	r3, [r4, #24]
    9ff8:	071a      	lsls	r2, r3, #28
    9ffa:	d4fc      	bmi.n	9ff6 <UARTDisable+0x1e>
    }

    //
    // Disable the FIFO.
    //
    HWREG(ulBase + UART_O_LCRH) &= ~(UART_LCRH_FEN);
    9ffc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9ffe:	f023 0310 	bic.w	r3, r3, #16
    a002:	62e3      	str	r3, [r4, #44]	; 0x2c

    //
    // Disable the UART.
    //
    HWREG(ulBase + UART_O_CTL) &= ~(UART_CTL_UARTEN | UART_CTL_TXE |
    a004:	6b23      	ldr	r3, [r4, #48]	; 0x30
    a006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    a00a:	f023 0301 	bic.w	r3, r3, #1
    a00e:	6323      	str	r3, [r4, #48]	; 0x30
                                    UART_CTL_RXE);
}
    a010:	b003      	add	sp, #12
    a012:	bd30      	pop	{r4, r5, r15}
    a014:	00016724 	.word	0x00016724
    a018:	0001076e 	.word	0x0001076e
    a01c:	000166ea 	.word	0x000166ea

0000a020 <UARTConfigSetExpClk>:
//
//*****************************************************************************
void
UARTConfigSetExpClk(unsigned long ulBase, unsigned long ulUARTClk,
                    unsigned long ulBaud, unsigned long ulConfig)
{
    a020:	e92d 41f3 	stmdb	r13!, {r0, r1, r4, r5, r6, r7, r8, r14}
    a024:	4676      	mov	r6, r14
    a026:	4604      	mov	r4, r0
    a028:	460f      	mov	r7, r1
    a02a:	4615      	mov	r5, r2
    a02c:	4698      	mov	r8, r3
    unsigned long ulDiv;

    //
    // Check the arguments.
    //
    ASSERT(UARTBaseValid(ulBase));
    a02e:	f7ff ffa1 	bl	9f74 <UARTBaseValid>
    a032:	b938      	cbnz	r0, a044 <UARTConfigSetExpClk+0x24>
    a034:	4b30      	ldr	r3, [pc, #192]	; (a0f8 <UARTConfigSetExpClk+0xd8>)
    a036:	4630      	mov	r0, r6
    a038:	9300      	str	r3, [sp, #0]
    a03a:	4930      	ldr	r1, [pc, #192]	; (a0fc <UARTConfigSetExpClk+0xdc>)
    a03c:	4a30      	ldr	r2, [pc, #192]	; (a100 <UARTConfigSetExpClk+0xe0>)
    a03e:	f44f 73b0 	mov.w	r3, #352	; 0x160
    a042:	e007      	b.n	a054 <UARTConfigSetExpClk+0x34>
    ASSERT(ulBaud != 0);
    a044:	b945      	cbnz	r5, a058 <UARTConfigSetExpClk+0x38>
    a046:	4b2f      	ldr	r3, [pc, #188]	; (a104 <UARTConfigSetExpClk+0xe4>)
    a048:	492c      	ldr	r1, [pc, #176]	; (a0fc <UARTConfigSetExpClk+0xdc>)
    a04a:	4a2d      	ldr	r2, [pc, #180]	; (a100 <UARTConfigSetExpClk+0xe0>)
    a04c:	9300      	str	r3, [sp, #0]
    a04e:	4630      	mov	r0, r6
    a050:	f240 1361 	movw	r3, #353	; 0x161
    a054:	f001 fa2e 	bl	b4b4 <_panic>
    ASSERT(ulUARTClk >= (ulBaud * UART_CLK_DIVIDER));
    a058:	4a2b      	ldr	r2, [pc, #172]	; (a108 <UARTConfigSetExpClk+0xe8>)
    a05a:	6813      	ldr	r3, [r2, #0]
    a05c:	f013 4fe0 	tst.w	r3, #1879048192	; 0x70000000
    a060:	d01c      	beq.n	a09c <UARTConfigSetExpClk+0x7c>
    a062:	6811      	ldr	r1, [r2, #0]
    a064:	4b29      	ldr	r3, [pc, #164]	; (a10c <UARTConfigSetExpClk+0xec>)
    a066:	400b      	ands	r3, r1
    a068:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
    a06c:	d016      	beq.n	a09c <UARTConfigSetExpClk+0x7c>
    a06e:	6811      	ldr	r1, [r2, #0]
    a070:	4b26      	ldr	r3, [pc, #152]	; (a10c <UARTConfigSetExpClk+0xec>)
    a072:	400b      	ands	r3, r1
    a074:	4926      	ldr	r1, [pc, #152]	; (a110 <UARTConfigSetExpClk+0xf0>)
    a076:	428b      	cmp	r3, r1
    a078:	d103      	bne.n	a082 <UARTConfigSetExpClk+0x62>
    a07a:	6813      	ldr	r3, [r2, #0]
    a07c:	b29b      	uxth	r3, r3
    a07e:	2b02      	cmp	r3, #2
    a080:	d00c      	beq.n	a09c <UARTConfigSetExpClk+0x7c>
    a082:	4b21      	ldr	r3, [pc, #132]	; (a108 <UARTConfigSetExpClk+0xe8>)
    a084:	4a21      	ldr	r2, [pc, #132]	; (a10c <UARTConfigSetExpClk+0xec>)
    a086:	6819      	ldr	r1, [r3, #0]
    a088:	400a      	ands	r2, r1
    a08a:	4922      	ldr	r1, [pc, #136]	; (a114 <UARTConfigSetExpClk+0xf4>)
    a08c:	428a      	cmp	r2, r1
    a08e:	d001      	beq.n	a094 <UARTConfigSetExpClk+0x74>
    a090:	2208      	movs	r2, #8
    a092:	e004      	b.n	a09e <UARTConfigSetExpClk+0x7e>
    a094:	681b      	ldr	r3, [r3, #0]
    a096:	b29b      	uxth	r3, r3
    a098:	2b00      	cmp	r3, #0
    a09a:	d1f9      	bne.n	a090 <UARTConfigSetExpClk+0x70>
    a09c:	2210      	movs	r2, #16
    a09e:	436a      	muls	r2, r5
    a0a0:	4297      	cmp	r7, r2
    a0a2:	d207      	bcs.n	a0b4 <UARTConfigSetExpClk+0x94>
    a0a4:	4b1c      	ldr	r3, [pc, #112]	; (a118 <UARTConfigSetExpClk+0xf8>)
    a0a6:	4630      	mov	r0, r6
    a0a8:	9300      	str	r3, [sp, #0]
    a0aa:	4914      	ldr	r1, [pc, #80]	; (a0fc <UARTConfigSetExpClk+0xdc>)
    a0ac:	4a14      	ldr	r2, [pc, #80]	; (a100 <UARTConfigSetExpClk+0xe0>)
    a0ae:	f44f 73b1 	mov.w	r3, #354	; 0x162
    a0b2:	e7cf      	b.n	a054 <UARTConfigSetExpClk+0x34>

    //
    // Stop the UART.
    //
    UARTDisable(ulBase);
    a0b4:	4620      	mov	r0, r4
    a0b6:	f7ff ff8f 	bl	9fd8 <UARTDisable>

    //
    // Is the required baud rate greater than the maximum rate supported
    // without the use of high speed mode?
    //
    if((ulBaud * 16) > ulUARTClk)
    a0ba:	ebb7 1f05 	cmp.w	r7, r5, lsl #4
    {
        //
        // Enable high speed mode.
        //
        HWREG(ulBase + UART_O_CTL) |= UART_CTL_HSE;
    a0be:	6b23      	ldr	r3, [r4, #48]	; 0x30

    //
    // Is the required baud rate greater than the maximum rate supported
    // without the use of high speed mode?
    //
    if((ulBaud * 16) > ulUARTClk)
    a0c0:	d204      	bcs.n	a0cc <UARTConfigSetExpClk+0xac>
    {
        //
        // Enable high speed mode.
        //
        HWREG(ulBase + UART_O_CTL) |= UART_CTL_HSE;
    a0c2:	f043 0320 	orr.w	r3, r3, #32
    a0c6:	6323      	str	r3, [r4, #48]	; 0x30

        //
        // Half the supplied baud rate to compensate for enabling high speed
        // mode.  This allows the following code to be common to both cases.
        //
        ulBaud /= 2;
    a0c8:	086d      	lsrs	r5, r5, #1
    a0ca:	e002      	b.n	a0d2 <UARTConfigSetExpClk+0xb2>
    else
    {
        //
        // Disable high speed mode.
        //
        HWREG(ulBase + UART_O_CTL) &= ~(UART_CTL_HSE);
    a0cc:	f023 0320 	bic.w	r3, r3, #32
    a0d0:	6323      	str	r3, [r4, #48]	; 0x30
    }

    //
    // Compute the fractional baud rate divider.
    //
    ulDiv = (((ulUARTClk * 8) / ulBaud) + 1) / 2;
    a0d2:	00ff      	lsls	r7, r7, #3
    a0d4:	fbb7 f5f5 	udiv	r5, r7, r5
    a0d8:	3501      	adds	r5, #1

    //
    // Set the baud rate.
    //
    HWREG(ulBase + UART_O_IBRD) = ulDiv / 64;
    a0da:	09eb      	lsrs	r3, r5, #7
    a0dc:	6263      	str	r3, [r4, #36]	; 0x24
    HWREG(ulBase + UART_O_FBRD) = ulDiv % 64;
    a0de:	f3c5 0545 	ubfx	r5, r5, #1, #6
    HWREG(ulBase + UART_O_LCRH) = ulConfig;

    //
    // Clear the flags register.
    //
    HWREG(ulBase + UART_O_FR) = 0;
    a0e2:	2300      	movs	r3, #0

    //
    // Start the UART.
    //
    UARTEnable(ulBase);
    a0e4:	4620      	mov	r0, r4

    //
    // Set the baud rate.
    //
    HWREG(ulBase + UART_O_IBRD) = ulDiv / 64;
    HWREG(ulBase + UART_O_FBRD) = ulDiv % 64;
    a0e6:	62a5      	str	r5, [r4, #40]	; 0x28

    //
    // Set parity, data length, and number of stop bits.
    //
    HWREG(ulBase + UART_O_LCRH) = ulConfig;
    a0e8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c

    //
    // Clear the flags register.
    //
    HWREG(ulBase + UART_O_FR) = 0;
    a0ec:	61a3      	str	r3, [r4, #24]

    //
    // Start the UART.
    //
    UARTEnable(ulBase);
}
    a0ee:	b002      	add	sp, #8
    a0f0:	e8bd 41f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r14}
    HWREG(ulBase + UART_O_FR) = 0;

    //
    // Start the UART.
    //
    UARTEnable(ulBase);
    a0f4:	f7ff bf4e 	b.w	9f94 <UARTEnable>
    a0f8:	00016724 	.word	0x00016724
    a0fc:	0001076e 	.word	0x0001076e
    a100:	000166ea 	.word	0x000166ea
    a104:	0001517a 	.word	0x0001517a
    a108:	400fe000 	.word	0x400fe000
    a10c:	70ff0000 	.word	0x70ff0000
    a110:	10010000 	.word	0x10010000
    a114:	10030000 	.word	0x10030000
    a118:	000168df 	.word	0x000168df

0000a11c <UARTCharsAvail>:
//! if there is no data in the receive FIFO.
//
//*****************************************************************************
tBoolean
UARTCharsAvail(unsigned long ulBase)
{
    a11c:	b537      	push	{r0, r1, r2, r4, r5, r14}
    a11e:	4675      	mov	r5, r14
    a120:	4604      	mov	r4, r0
    //
    // Check the arguments.
    //
    ASSERT(UARTBaseValid(ulBase));
    a122:	f7ff ff27 	bl	9f74 <UARTBaseValid>
    a126:	b940      	cbnz	r0, a13a <UARTCharsAvail+0x1e>
    a128:	4b07      	ldr	r3, [pc, #28]	; (a148 <UARTCharsAvail+0x2c>)
    a12a:	4628      	mov	r0, r5
    a12c:	9300      	str	r3, [sp, #0]
    a12e:	4907      	ldr	r1, [pc, #28]	; (a14c <UARTCharsAvail+0x30>)
    a130:	4a07      	ldr	r2, [pc, #28]	; (a150 <UARTCharsAvail+0x34>)
    a132:	f240 433a 	movw	r3, #1082	; 0x43a
    a136:	f001 f9bd 	bl	b4b4 <_panic>

    //
    // Return the availability of characters.
    //
    return((HWREG(ulBase + UART_O_FR) & UART_FR_RXFE) ? false : true);
    a13a:	69a0      	ldr	r0, [r4, #24]
    a13c:	f080 0010 	eor.w	r0, r0, #16
}
    a140:	f3c0 1000 	ubfx	r0, r0, #4, #1
    a144:	b003      	add	sp, #12
    a146:	bd30      	pop	{r4, r5, r15}
    a148:	00016724 	.word	0x00016724
    a14c:	0001076e 	.word	0x0001076e
    a150:	000166ea 	.word	0x000166ea

0000a154 <UARTCharGetNonBlocking>:
//! attempting to call this function.
//
//*****************************************************************************
long
UARTCharGetNonBlocking(unsigned long ulBase)
{
    a154:	b537      	push	{r0, r1, r2, r4, r5, r14}
    a156:	4675      	mov	r5, r14
    a158:	4604      	mov	r4, r0
    //
    // Check the arguments.
    //
    ASSERT(UARTBaseValid(ulBase));
    a15a:	f7ff ff0b 	bl	9f74 <UARTBaseValid>
    a15e:	b940      	cbnz	r0, a172 <UARTCharGetNonBlocking+0x1e>
    a160:	4b08      	ldr	r3, [pc, #32]	; (a184 <UARTCharGetNonBlocking+0x30>)
    a162:	4628      	mov	r0, r5
    a164:	9300      	str	r3, [sp, #0]
    a166:	4908      	ldr	r1, [pc, #32]	; (a188 <UARTCharGetNonBlocking+0x34>)
    a168:	4a08      	ldr	r2, [pc, #32]	; (a18c <UARTCharGetNonBlocking+0x38>)
    a16a:	f240 4376 	movw	r3, #1142	; 0x476
    a16e:	f001 f9a1 	bl	b4b4 <_panic>

    //
    // See if there are any characters in the receive FIFO.
    //
    if(!(HWREG(ulBase + UART_O_FR) & UART_FR_RXFE))
    a172:	69a3      	ldr	r3, [r4, #24]
    a174:	06d9      	lsls	r1, r3, #27
    {
        //
        // Read and return the next character.
        //
        return(HWREG(ulBase + UART_O_DR));
    a176:	bf54      	ite	pl
    a178:	6820      	ldrpl	r0, [r4, #0]
    else
    {
        //
        // There are no characters, so return a failure.
        //
        return(-1);
    a17a:	f04f 30ff 	movmi.w	r0, #4294967295
    }
}
    a17e:	b003      	add	sp, #12
    a180:	bd30      	pop	{r4, r5, r15}
    a182:	bf00      	nop
    a184:	00016724 	.word	0x00016724
    a188:	0001076e 	.word	0x0001076e
    a18c:	000166ea 	.word	0x000166ea

0000a190 <UARTCharPut>:
//! \return None.
//
//*****************************************************************************
void
UARTCharPut(unsigned long ulBase, unsigned char ucData)
{
    a190:	b573      	push	{r0, r1, r4, r5, r6, r14}
    a192:	4676      	mov	r6, r14
    a194:	4604      	mov	r4, r0
    a196:	460d      	mov	r5, r1
    //
    // Check the arguments.
    //
    ASSERT(UARTBaseValid(ulBase));
    a198:	f7ff feec 	bl	9f74 <UARTBaseValid>
    a19c:	b940      	cbnz	r0, a1b0 <UARTCharPut+0x20>
    a19e:	4b07      	ldr	r3, [pc, #28]	; (a1bc <UARTCharPut+0x2c>)
    a1a0:	4630      	mov	r0, r6
    a1a2:	9300      	str	r3, [sp, #0]
    a1a4:	4906      	ldr	r1, [pc, #24]	; (a1c0 <UARTCharPut+0x30>)
    a1a6:	4a07      	ldr	r2, [pc, #28]	; (a1c4 <UARTCharPut+0x34>)
    a1a8:	f240 43f7 	movw	r3, #1271	; 0x4f7
    a1ac:	f001 f982 	bl	b4b4 <_panic>

    //
    // Wait until space is available.
    //
    while(HWREG(ulBase + UART_O_FR) & UART_FR_TXFF)
    a1b0:	69a3      	ldr	r3, [r4, #24]
    a1b2:	069b      	lsls	r3, r3, #26
    a1b4:	d4fc      	bmi.n	a1b0 <UARTCharPut+0x20>
    }

    //
    // Send the char.
    //
    HWREG(ulBase + UART_O_DR) = ucData;
    a1b6:	6025      	str	r5, [r4, #0]
}
    a1b8:	b002      	add	sp, #8
    a1ba:	bd70      	pop	{r4, r5, r6, r15}
    a1bc:	00016724 	.word	0x00016724
    a1c0:	0001076e 	.word	0x0001076e
    a1c4:	000166ea 	.word	0x000166ea

0000a1c8 <UARTIntEnable>:
//! \return None.
//
//*****************************************************************************
void
UARTIntEnable(unsigned long ulBase, unsigned long ulIntFlags)
{
    a1c8:	b573      	push	{r0, r1, r4, r5, r6, r14}
    a1ca:	4675      	mov	r5, r14
    a1cc:	4604      	mov	r4, r0
    a1ce:	460e      	mov	r6, r1
    //
    // Check the arguments.
    //
    ASSERT(UARTBaseValid(ulBase));
    a1d0:	f7ff fed0 	bl	9f74 <UARTBaseValid>
    a1d4:	b940      	cbnz	r0, a1e8 <UARTIntEnable+0x20>
    a1d6:	4b07      	ldr	r3, [pc, #28]	; (a1f4 <UARTIntEnable+0x2c>)
    a1d8:	4628      	mov	r0, r5
    a1da:	9300      	str	r3, [sp, #0]
    a1dc:	4906      	ldr	r1, [pc, #24]	; (a1f8 <UARTIntEnable+0x30>)
    a1de:	4a07      	ldr	r2, [pc, #28]	; (a1fc <UARTIntEnable+0x34>)
    a1e0:	f240 53be 	movw	r3, #1470	; 0x5be
    a1e4:	f001 f966 	bl	b4b4 <_panic>

    //
    // Enable the specified interrupts.
    //
    HWREG(ulBase + UART_O_IM) |= ulIntFlags;
    a1e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a1ea:	431e      	orrs	r6, r3
    a1ec:	63a6      	str	r6, [r4, #56]	; 0x38
}
    a1ee:	b002      	add	sp, #8
    a1f0:	bd70      	pop	{r4, r5, r6, r15}
    a1f2:	bf00      	nop
    a1f4:	00016724 	.word	0x00016724
    a1f8:	0001076e 	.word	0x0001076e
    a1fc:	000166ea 	.word	0x000166ea

0000a200 <UARTIntStatus>:
//! values described in UARTIntEnable().
//
//*****************************************************************************
unsigned long
UARTIntStatus(unsigned long ulBase, tBoolean bMasked)
{
    a200:	b573      	push	{r0, r1, r4, r5, r6, r14}
    a202:	4676      	mov	r6, r14
    a204:	4604      	mov	r4, r0
    a206:	460d      	mov	r5, r1
    //
    // Check the arguments.
    //
    ASSERT(UARTBaseValid(ulBase));
    a208:	f7ff feb4 	bl	9f74 <UARTBaseValid>
    a20c:	b940      	cbnz	r0, a220 <UARTIntStatus+0x20>
    a20e:	4b07      	ldr	r3, [pc, #28]	; (a22c <UARTIntStatus+0x2c>)
    a210:	4630      	mov	r0, r6
    a212:	9300      	str	r3, [sp, #0]
    a214:	4906      	ldr	r1, [pc, #24]	; (a230 <UARTIntStatus+0x30>)
    a216:	4a07      	ldr	r2, [pc, #28]	; (a234 <UARTIntStatus+0x34>)
    a218:	f240 53fb 	movw	r3, #1531	; 0x5fb
    a21c:	f001 f94a 	bl	b4b4 <_panic>

    //
    // Return either the interrupt status or the raw interrupt status as
    // requested.
    //
    if(bMasked)
    a220:	b10d      	cbz	r5, a226 <UARTIntStatus+0x26>
    {
        return(HWREG(ulBase + UART_O_MIS));
    a222:	6c20      	ldr	r0, [r4, #64]	; 0x40
    a224:	e000      	b.n	a228 <UARTIntStatus+0x28>
    }
    else
    {
        return(HWREG(ulBase + UART_O_RIS));
    a226:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    }
}
    a228:	b002      	add	sp, #8
    a22a:	bd70      	pop	{r4, r5, r6, r15}
    a22c:	00016724 	.word	0x00016724
    a230:	0001076e 	.word	0x0001076e
    a234:	000166ea 	.word	0x000166ea

0000a238 <UARTIntClear>:
//! \return None.
//
//*****************************************************************************
void
UARTIntClear(unsigned long ulBase, unsigned long ulIntFlags)
{
    a238:	b573      	push	{r0, r1, r4, r5, r6, r14}
    a23a:	4676      	mov	r6, r14
    a23c:	4604      	mov	r4, r0
    a23e:	460d      	mov	r5, r1
    //
    // Check the arguments.
    //
    ASSERT(UARTBaseValid(ulBase));
    a240:	f7ff fe98 	bl	9f74 <UARTBaseValid>
    a244:	b940      	cbnz	r0, a258 <UARTIntClear+0x20>
    a246:	4b06      	ldr	r3, [pc, #24]	; (a260 <UARTIntClear+0x28>)
    a248:	4630      	mov	r0, r6
    a24a:	9300      	str	r3, [sp, #0]
    a24c:	4905      	ldr	r1, [pc, #20]	; (a264 <UARTIntClear+0x2c>)
    a24e:	4a06      	ldr	r2, [pc, #24]	; (a268 <UARTIntClear+0x30>)
    a250:	f240 632b 	movw	r3, #1579	; 0x62b
    a254:	f001 f92e 	bl	b4b4 <_panic>

    //
    // Clear the requested interrupt sources.
    //
    HWREG(ulBase + UART_O_ICR) = ulIntFlags;
    a258:	6465      	str	r5, [r4, #68]	; 0x44
}
    a25a:	b002      	add	sp, #8
    a25c:	bd70      	pop	{r4, r5, r6, r15}
    a25e:	bf00      	nop
    a260:	00016724 	.word	0x00016724
    a264:	0001076e 	.word	0x0001076e
    a268:	000166ea 	.word	0x000166ea

0000a26c <USBIntDisableControl>:
USBIntDisableControl(unsigned long ulBase, unsigned long ulFlags)
{
    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a26c:	4b17      	ldr	r3, [pc, #92]	; (a2cc <USBIntDisableControl+0x60>)
//! \return None.
//
//*****************************************************************************
void
USBIntDisableControl(unsigned long ulBase, unsigned long ulFlags)
{
    a26e:	b507      	push	{r0, r1, r2, r14}
    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a270:	4298      	cmp	r0, r3
    a272:	d007      	beq.n	a284 <USBIntDisableControl+0x18>
    a274:	4b16      	ldr	r3, [pc, #88]	; (a2d0 <USBIntDisableControl+0x64>)
    a276:	4670      	mov	r0, r14
    a278:	9300      	str	r3, [sp, #0]
    a27a:	4916      	ldr	r1, [pc, #88]	; (a2d4 <USBIntDisableControl+0x68>)
    a27c:	4a16      	ldr	r2, [pc, #88]	; (a2d8 <USBIntDisableControl+0x6c>)
    a27e:	f240 2395 	movw	r3, #661	; 0x295
    a282:	e00b      	b.n	a29c <USBIntDisableControl+0x30>
    ASSERT((ulFlags & ~(USB_INTCTRL_ALL)) == 0);
    a284:	f421 737f 	bic.w	r3, r1, #1020	; 0x3fc
    a288:	f023 0303 	bic.w	r3, r3, #3
    a28c:	b143      	cbz	r3, a2a0 <USBIntDisableControl+0x34>
    a28e:	4b13      	ldr	r3, [pc, #76]	; (a2dc <USBIntDisableControl+0x70>)
    a290:	4910      	ldr	r1, [pc, #64]	; (a2d4 <USBIntDisableControl+0x68>)
    a292:	4a11      	ldr	r2, [pc, #68]	; (a2d8 <USBIntDisableControl+0x6c>)
    a294:	9300      	str	r3, [sp, #0]
    a296:	4670      	mov	r0, r14
    a298:	f240 2396 	movw	r3, #662	; 0x296
    a29c:	f001 f90a 	bl	b4b4 <_panic>

    //
    // If any general interrupts were disabled then write the general interrupt
    // settings out to the hardware.
    //
    if(ulFlags & USB_INTCTRL_STATUS)
    a2a0:	f011 0fff 	tst.w	r1, #255	; 0xff
    a2a4:	d004      	beq.n	a2b0 <USBIntDisableControl+0x44>
    {
        HWREGB(ulBase + USB_O_IE) &= ~(ulFlags & USB_INTCTRL_STATUS);
    a2a6:	4b0e      	ldr	r3, [pc, #56]	; (a2e0 <USBIntDisableControl+0x74>)
    a2a8:	781a      	ldrb	r2, [r3, #0]
    a2aa:	ea22 0201 	bic.w	r2, r2, r1
    a2ae:	701a      	strb	r2, [r3, #0]
    }

    //
    // Disable the power fault interrupt.
    //
    if(ulFlags & USB_INTCTRL_POWER_FAULT)
    a2b0:	05c8      	lsls	r0, r1, #23
    a2b2:	d502      	bpl.n	a2ba <USBIntDisableControl+0x4e>
    {
        HWREG(ulBase + USB_O_EPCIM) = 0;
    a2b4:	4b0b      	ldr	r3, [pc, #44]	; (a2e4 <USBIntDisableControl+0x78>)
    a2b6:	2200      	movs	r2, #0
    a2b8:	601a      	str	r2, [r3, #0]
    }

    //
    // Disable the ID pin detect interrupt.
    //
    if(ulFlags & USB_INTCTRL_MODE_DETECT)
    a2ba:	0589      	lsls	r1, r1, #22
    a2bc:	d502      	bpl.n	a2c4 <USBIntDisableControl+0x58>
    {
        HWREG(USB0_BASE + USB_O_IDVIM) = 0;
    a2be:	4b0a      	ldr	r3, [pc, #40]	; (a2e8 <USBIntDisableControl+0x7c>)
    a2c0:	2200      	movs	r2, #0
    a2c2:	601a      	str	r2, [r3, #0]
    }
}
    a2c4:	b003      	add	sp, #12
    a2c6:	f85d fb04 	ldr.w	r15, [r13], #4
    a2ca:	bf00      	nop
    a2cc:	40050000 	.word	0x40050000
    a2d0:	00017257 	.word	0x00017257
    a2d4:	0001076e 	.word	0x0001076e
    a2d8:	0001721e 	.word	0x0001721e
    a2dc:	0001731a 	.word	0x0001731a
    a2e0:	4005000b 	.word	0x4005000b
    a2e4:	40050408 	.word	0x40050408
    a2e8:	40050448 	.word	0x40050448

0000a2ec <USBIntStatusControl>:
//! \return Returns the status of the control interrupts for a USB controller.
//
//*****************************************************************************
unsigned long
USBIntStatusControl(unsigned long ulBase)
{
    a2ec:	b507      	push	{r0, r1, r2, r14}
    unsigned long ulStatus;

    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a2ee:	4a13      	ldr	r2, [pc, #76]	; (a33c <USBIntStatusControl+0x50>)
    a2f0:	4290      	cmp	r0, r2
    a2f2:	d008      	beq.n	a306 <USBIntStatusControl+0x1a>
    a2f4:	4a12      	ldr	r2, [pc, #72]	; (a340 <USBIntStatusControl+0x54>)
    a2f6:	4670      	mov	r0, r14
    a2f8:	9200      	str	r2, [sp, #0]
    a2fa:	4912      	ldr	r1, [pc, #72]	; (a344 <USBIntStatusControl+0x58>)
    a2fc:	4a12      	ldr	r2, [pc, #72]	; (a348 <USBIntStatusControl+0x5c>)
    a2fe:	f240 3316 	movw	r3, #790	; 0x316
    a302:	f001 f8d7 	bl	b4b4 <_panic>

    //
    // Get the general interrupt status, these bits go into the upper 8 bits
    // of the returned value.
    //
    ulStatus = HWREGB(ulBase + USB_O_IS);
    a306:	4b11      	ldr	r3, [pc, #68]	; (a34c <USBIntStatusControl+0x60>)
    a308:	7818      	ldrb	r0, [r3, #0]

    //
    // Add the power fault status.
    //
    if(HWREG(ulBase + USB_O_EPCISC) & USB_EPCISC_PF)
    a30a:	4b11      	ldr	r3, [pc, #68]	; (a350 <USBIntStatusControl+0x64>)

    //
    // Get the general interrupt status, these bits go into the upper 8 bits
    // of the returned value.
    //
    ulStatus = HWREGB(ulBase + USB_O_IS);
    a30c:	b2c0      	uxtb	r0, r0

    //
    // Add the power fault status.
    //
    if(HWREG(ulBase + USB_O_EPCISC) & USB_EPCISC_PF)
    a30e:	681a      	ldr	r2, [r3, #0]
    a310:	07d2      	lsls	r2, r2, #31
    a312:	d505      	bpl.n	a320 <USBIntStatusControl+0x34>
        ulStatus |= USB_INTCTRL_POWER_FAULT;

        //
        // Clear the power fault interrupt.
        //
        HWREGB(ulBase + USB_O_EPCISC) |= USB_EPCISC_PF;
    a314:	781a      	ldrb	r2, [r3, #0]
    if(HWREG(ulBase + USB_O_EPCISC) & USB_EPCISC_PF)
    {
        //
        // Indicate a power fault was detected.
        //
        ulStatus |= USB_INTCTRL_POWER_FAULT;
    a316:	f440 7080 	orr.w	r0, r0, #256	; 0x100

        //
        // Clear the power fault interrupt.
        //
        HWREGB(ulBase + USB_O_EPCISC) |= USB_EPCISC_PF;
    a31a:	f042 0201 	orr.w	r2, r2, #1
    a31e:	701a      	strb	r2, [r3, #0]
    }

    if(HWREG(USB0_BASE + USB_O_IDVISC) & USB_IDVRIS_ID)
    a320:	4b0c      	ldr	r3, [pc, #48]	; (a354 <USBIntStatusControl+0x68>)
    a322:	681a      	ldr	r2, [r3, #0]
    a324:	07d1      	lsls	r1, r2, #31
    a326:	d505      	bpl.n	a334 <USBIntStatusControl+0x48>
        ulStatus |= USB_INTCTRL_MODE_DETECT;

        //
        // Clear the id detection interrupt.
        //
        HWREG(USB0_BASE + USB_O_IDVISC) |= USB_IDVRIS_ID;
    a328:	681a      	ldr	r2, [r3, #0]
    if(HWREG(USB0_BASE + USB_O_IDVISC) & USB_IDVRIS_ID)
    {
        //
        // Indicate an id detection.
        //
        ulStatus |= USB_INTCTRL_MODE_DETECT;
    a32a:	f440 7000 	orr.w	r0, r0, #512	; 0x200

        //
        // Clear the id detection interrupt.
        //
        HWREG(USB0_BASE + USB_O_IDVISC) |= USB_IDVRIS_ID;
    a32e:	f042 0201 	orr.w	r2, r2, #1
    a332:	601a      	str	r2, [r3, #0]

    //
    // Return the combined interrupt status.
    //
    return(ulStatus);
}
    a334:	b003      	add	sp, #12
    a336:	f85d fb04 	ldr.w	r15, [r13], #4
    a33a:	bf00      	nop
    a33c:	40050000 	.word	0x40050000
    a340:	00017257 	.word	0x00017257
    a344:	0001076e 	.word	0x0001076e
    a348:	0001721e 	.word	0x0001721e
    a34c:	4005000a 	.word	0x4005000a
    a350:	4005040c 	.word	0x4005040c
    a354:	4005044c 	.word	0x4005044c

0000a358 <USBIntStatusEndpoint>:
//! \return Returns the status of the endpoint interrupts for a USB controller.
//
//*****************************************************************************
unsigned long
USBIntStatusEndpoint(unsigned long ulBase)
{
    a358:	b507      	push	{r0, r1, r2, r14}
    unsigned long ulStatus;

    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a35a:	4a0b      	ldr	r2, [pc, #44]	; (a388 <USBIntStatusEndpoint+0x30>)
    a35c:	4290      	cmp	r0, r2
    a35e:	d008      	beq.n	a372 <USBIntStatusEndpoint+0x1a>
    a360:	4a0a      	ldr	r2, [pc, #40]	; (a38c <USBIntStatusEndpoint+0x34>)
    a362:	4670      	mov	r0, r14
    a364:	9200      	str	r2, [sp, #0]
    a366:	490a      	ldr	r1, [pc, #40]	; (a390 <USBIntStatusEndpoint+0x38>)
    a368:	4a0a      	ldr	r2, [pc, #40]	; (a394 <USBIntStatusEndpoint+0x3c>)
    a36a:	f240 33aa 	movw	r3, #938	; 0x3aa
    a36e:	f001 f8a1 	bl	b4b4 <_panic>

    //
    // Get the transmit interrupt status.
    //
    ulStatus = HWREGH(ulBase + USB_O_TXIS);
    a372:	4b09      	ldr	r3, [pc, #36]	; (a398 <USBIntStatusEndpoint+0x40>)

    ulStatus |= (HWREGH(ulBase + USB_O_RXIS) << USB_INTEP_RX_SHIFT);
    a374:	4a09      	ldr	r2, [pc, #36]	; (a39c <USBIntStatusEndpoint+0x44>)
    ASSERT(ulBase == USB0_BASE);

    //
    // Get the transmit interrupt status.
    //
    ulStatus = HWREGH(ulBase + USB_O_TXIS);
    a376:	881b      	ldrh	r3, [r3, #0]

    ulStatus |= (HWREGH(ulBase + USB_O_RXIS) << USB_INTEP_RX_SHIFT);
    a378:	8810      	ldrh	r0, [r2, #0]
    ASSERT(ulBase == USB0_BASE);

    //
    // Get the transmit interrupt status.
    //
    ulStatus = HWREGH(ulBase + USB_O_TXIS);
    a37a:	b29b      	uxth	r3, r3

    //
    // Return the combined interrupt status.
    //
    return(ulStatus);
}
    a37c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    a380:	b003      	add	sp, #12
    a382:	f85d fb04 	ldr.w	r15, [r13], #4
    a386:	bf00      	nop
    a388:	40050000 	.word	0x40050000
    a38c:	00017257 	.word	0x00017257
    a390:	0001076e 	.word	0x0001076e
    a394:	0001721e 	.word	0x0001721e
    a398:	40050002 	.word	0x40050002
    a39c:	40050004 	.word	0x40050004

0000a3a0 <USBEndpointStatus>:
    unsigned long ulStatus;

    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a3a0:	4b14      	ldr	r3, [pc, #80]	; (a3f4 <USBEndpointStatus+0x54>)
//! \return The current status flags for the endpoint depending on mode.
//
//*****************************************************************************
unsigned long
USBEndpointStatus(unsigned long ulBase, unsigned long ulEndpoint)
{
    a3a2:	b507      	push	{r0, r1, r2, r14}
    unsigned long ulStatus;

    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a3a4:	4298      	cmp	r0, r3
    a3a6:	4672      	mov	r2, r14
    a3a8:	d007      	beq.n	a3ba <USBEndpointStatus+0x1a>
    a3aa:	4b13      	ldr	r3, [pc, #76]	; (a3f8 <USBEndpointStatus+0x58>)
    a3ac:	4670      	mov	r0, r14
    a3ae:	9300      	str	r3, [sp, #0]
    a3b0:	4912      	ldr	r1, [pc, #72]	; (a3fc <USBEndpointStatus+0x5c>)
    a3b2:	4a13      	ldr	r2, [pc, #76]	; (a400 <USBEndpointStatus+0x60>)
    a3b4:	f240 4351 	movw	r3, #1105	; 0x451
    a3b8:	e00f      	b.n	a3da <USBEndpointStatus+0x3a>
    ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
    a3ba:	f031 0330 	bics.w	r3, r1, #48	; 0x30
    a3be:	d00e      	beq.n	a3de <USBEndpointStatus+0x3e>
    a3c0:	2b40      	cmp	r3, #64	; 0x40
    a3c2:	d00c      	beq.n	a3de <USBEndpointStatus+0x3e>
    a3c4:	2b80      	cmp	r3, #128	; 0x80
    a3c6:	d00a      	beq.n	a3de <USBEndpointStatus+0x3e>
    a3c8:	2bc0      	cmp	r3, #192	; 0xc0
    a3ca:	d008      	beq.n	a3de <USBEndpointStatus+0x3e>
    a3cc:	4b0d      	ldr	r3, [pc, #52]	; (a404 <USBEndpointStatus+0x64>)
    a3ce:	4610      	mov	r0, r2
    a3d0:	490a      	ldr	r1, [pc, #40]	; (a3fc <USBEndpointStatus+0x5c>)
    a3d2:	4a0b      	ldr	r2, [pc, #44]	; (a400 <USBEndpointStatus+0x60>)
    a3d4:	9300      	str	r3, [sp, #0]
    a3d6:	f240 4359 	movw	r3, #1113	; 0x459
    a3da:	f001 f86b 	bl	b4b4 <_panic>
           (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));

    //
    // Get the TX portion of the endpoint status.
    //
    ulStatus = HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRL1);
    a3de:	4b0a      	ldr	r3, [pc, #40]	; (a408 <USBEndpointStatus+0x68>)
    a3e0:	5ac8      	ldrh	r0, [r1, r3]

    //
    // Get the RX portion of the endpoint status.
    //
    ulStatus |= ((HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRL1)) <<
    a3e2:	3304      	adds	r3, #4
    a3e4:	5acb      	ldrh	r3, [r1, r3]
           (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));

    //
    // Get the TX portion of the endpoint status.
    //
    ulStatus = HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_TXCSRL1);
    a3e6:	b280      	uxth	r0, r0

    //
    // Get the RX portion of the endpoint status.
    //
    ulStatus |= ((HWREGH(ulBase + EP_OFFSET(ulEndpoint) + USB_O_RXCSRL1)) <<
    a3e8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16

    //
    // Return the endpoint status.
    //
    return(ulStatus);
}
    a3ec:	b003      	add	sp, #12
    a3ee:	f85d fb04 	ldr.w	r15, [r13], #4
    a3f2:	bf00      	nop
    a3f4:	40050000 	.word	0x40050000
    a3f8:	00017257 	.word	0x00017257
    a3fc:	0001076e 	.word	0x0001076e
    a400:	0001721e 	.word	0x0001721e
    a404:	00017358 	.word	0x00017358
    a408:	40050102 	.word	0x40050102

0000a40c <USBDevEndpointStall>:
//
//*****************************************************************************
void
USBDevEndpointStall(unsigned long ulBase, unsigned long ulEndpoint,
                    unsigned long ulFlags)
{
    a40c:	b513      	push	{r0, r1, r4, r14}
    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a40e:	4c27      	ldr	r4, [pc, #156]	; (a4ac <USBDevEndpointStall+0xa0>)
    a410:	4673      	mov	r3, r14
    a412:	42a0      	cmp	r0, r4
    a414:	d007      	beq.n	a426 <USBDevEndpointStall+0x1a>
    a416:	4a26      	ldr	r2, [pc, #152]	; (a4b0 <USBDevEndpointStall+0xa4>)
    a418:	4670      	mov	r0, r14
    a41a:	9200      	str	r2, [sp, #0]
    a41c:	4925      	ldr	r1, [pc, #148]	; (a4b4 <USBDevEndpointStall+0xa8>)
    a41e:	4a26      	ldr	r2, [pc, #152]	; (a4b8 <USBDevEndpointStall+0xac>)
    a420:	f240 53a3 	movw	r3, #1443	; 0x5a3
    a424:	e009      	b.n	a43a <USBDevEndpointStall+0x2e>
    ASSERT((ulFlags & ~(USB_EP_DEV_IN | USB_EP_DEV_OUT)) == 0);
    a426:	f432 5000 	bics.w	r0, r2, #8192	; 0x2000
    a42a:	d008      	beq.n	a43e <USBDevEndpointStall+0x32>
    a42c:	4a23      	ldr	r2, [pc, #140]	; (a4bc <USBDevEndpointStall+0xb0>)
    a42e:	4921      	ldr	r1, [pc, #132]	; (a4b4 <USBDevEndpointStall+0xa8>)
    a430:	9200      	str	r2, [sp, #0]
    a432:	4a21      	ldr	r2, [pc, #132]	; (a4b8 <USBDevEndpointStall+0xac>)
    a434:	4670      	mov	r0, r14
    a436:	f240 53a4 	movw	r3, #1444	; 0x5a4
    a43a:	f001 f83b 	bl	b4b4 <_panic>
    ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
    a43e:	b121      	cbz	r1, a44a <USBDevEndpointStall+0x3e>
    a440:	f021 0020 	bic.w	r0, r1, #32
    a444:	2810      	cmp	r0, #16
    a446:	d00a      	beq.n	a45e <USBDevEndpointStall+0x52>
    a448:	e005      	b.n	a456 <USBDevEndpointStall+0x4a>
    if(ulEndpoint == USB_EP_0)
    {
        //
        // Perform a stall on endpoint zero.
        //
        HWREGB(ulBase + USB_O_CSRL0) |=
    a44a:	4b1d      	ldr	r3, [pc, #116]	; (a4c0 <USBDevEndpointStall+0xb4>)
    a44c:	781a      	ldrb	r2, [r3, #0]
    a44e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
    a452:	701a      	strb	r2, [r3, #0]
    a454:	e027      	b.n	a4a6 <USBDevEndpointStall+0x9a>
    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    ASSERT((ulFlags & ~(USB_EP_DEV_IN | USB_EP_DEV_OUT)) == 0);
    ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
    a456:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    a45a:	2820      	cmp	r0, #32
    a45c:	d10d      	bne.n	a47a <USBDevEndpointStall+0x6e>
        // Perform a stall on endpoint zero.
        //
        HWREGB(ulBase + USB_O_CSRL0) |=
            (USB_CSRL0_STALL | USB_CSRL0_RXRDYC);
    }
    else if(ulFlags == USB_EP_DEV_IN)
    a45e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    a462:	d104      	bne.n	a46e <USBDevEndpointStall+0x62>
    {
        //
        // Perform a stall on an IN endpoint.
        //
        HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) |=
    a464:	4b16      	ldr	r3, [pc, #88]	; (a4c0 <USBDevEndpointStall+0xb4>)
    a466:	5cca      	ldrb	r2, [r1, r3]
    a468:	f042 0210 	orr.w	r2, r2, #16
    a46c:	e003      	b.n	a476 <USBDevEndpointStall+0x6a>
    else
    {
        //
        // Perform a stall on an OUT endpoint.
        //
        HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) |=
    a46e:	4b15      	ldr	r3, [pc, #84]	; (a4c4 <USBDevEndpointStall+0xb8>)
    a470:	5cca      	ldrb	r2, [r1, r3]
    a472:	f042 0220 	orr.w	r2, r2, #32
    a476:	54ca      	strb	r2, [r1, r3]
    a478:	e015      	b.n	a4a6 <USBDevEndpointStall+0x9a>
    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    ASSERT((ulFlags & ~(USB_EP_DEV_IN | USB_EP_DEV_OUT)) == 0);
    ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
    a47a:	f021 0090 	bic.w	r0, r1, #144	; 0x90
    a47e:	2840      	cmp	r0, #64	; 0x40
    a480:	d0ed      	beq.n	a45e <USBDevEndpointStall+0x52>
    a482:	f021 0080 	bic.w	r0, r1, #128	; 0x80
    a486:	2870      	cmp	r0, #112	; 0x70
    a488:	d0e9      	beq.n	a45e <USBDevEndpointStall+0x52>
    a48a:	f021 0030 	bic.w	r0, r1, #48	; 0x30
    a48e:	2880      	cmp	r0, #128	; 0x80
    a490:	d0e5      	beq.n	a45e <USBDevEndpointStall+0x52>
    a492:	29e0      	cmp	r1, #224	; 0xe0
    a494:	d0e3      	beq.n	a45e <USBDevEndpointStall+0x52>
    a496:	4a0c      	ldr	r2, [pc, #48]	; (a4c8 <USBDevEndpointStall+0xbc>)
    a498:	4618      	mov	r0, r3
    a49a:	9200      	str	r2, [sp, #0]
    a49c:	4905      	ldr	r1, [pc, #20]	; (a4b4 <USBDevEndpointStall+0xa8>)
    a49e:	4a06      	ldr	r2, [pc, #24]	; (a4b8 <USBDevEndpointStall+0xac>)
    a4a0:	f240 53ac 	movw	r3, #1452	; 0x5ac
    a4a4:	e7c9      	b.n	a43a <USBDevEndpointStall+0x2e>
        // Perform a stall on an OUT endpoint.
        //
        HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) |=
            USB_RXCSRL1_STALL;
    }
}
    a4a6:	b002      	add	sp, #8
    a4a8:	bd10      	pop	{r4, r15}
    a4aa:	bf00      	nop
    a4ac:	40050000 	.word	0x40050000
    a4b0:	00017257 	.word	0x00017257
    a4b4:	0001076e 	.word	0x0001076e
    a4b8:	0001721e 	.word	0x0001721e
    a4bc:	00017535 	.word	0x00017535
    a4c0:	40050102 	.word	0x40050102
    a4c4:	40050106 	.word	0x40050106
    a4c8:	00017358 	.word	0x00017358

0000a4cc <USBDevEndpointStallClear>:
//
//*****************************************************************************
void
USBDevEndpointStallClear(unsigned long ulBase, unsigned long ulEndpoint,
                         unsigned long ulFlags)
{
    a4cc:	b513      	push	{r0, r1, r4, r14}
    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a4ce:	4c23      	ldr	r4, [pc, #140]	; (a55c <USBDevEndpointStallClear+0x90>)
    a4d0:	4673      	mov	r3, r14
    a4d2:	42a0      	cmp	r0, r4
    a4d4:	d007      	beq.n	a4e6 <USBDevEndpointStallClear+0x1a>
    a4d6:	4a22      	ldr	r2, [pc, #136]	; (a560 <USBDevEndpointStallClear+0x94>)
    a4d8:	4670      	mov	r0, r14
    a4da:	9200      	str	r2, [sp, #0]
    a4dc:	4921      	ldr	r1, [pc, #132]	; (a564 <USBDevEndpointStallClear+0x98>)
    a4de:	4a22      	ldr	r2, [pc, #136]	; (a568 <USBDevEndpointStallClear+0x9c>)
    a4e0:	f240 53e6 	movw	r3, #1510	; 0x5e6
    a4e4:	e00f      	b.n	a506 <USBDevEndpointStallClear+0x3a>
    ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
    a4e6:	f031 0030 	bics.w	r0, r1, #48	; 0x30
    a4ea:	d00e      	beq.n	a50a <USBDevEndpointStallClear+0x3e>
    a4ec:	2840      	cmp	r0, #64	; 0x40
    a4ee:	d00c      	beq.n	a50a <USBDevEndpointStallClear+0x3e>
    a4f0:	2880      	cmp	r0, #128	; 0x80
    a4f2:	d00a      	beq.n	a50a <USBDevEndpointStallClear+0x3e>
    a4f4:	28c0      	cmp	r0, #192	; 0xc0
    a4f6:	d008      	beq.n	a50a <USBDevEndpointStallClear+0x3e>
    a4f8:	4a1c      	ldr	r2, [pc, #112]	; (a56c <USBDevEndpointStallClear+0xa0>)
    a4fa:	491a      	ldr	r1, [pc, #104]	; (a564 <USBDevEndpointStallClear+0x98>)
    a4fc:	9200      	str	r2, [sp, #0]
    a4fe:	4a1a      	ldr	r2, [pc, #104]	; (a568 <USBDevEndpointStallClear+0x9c>)
    a500:	4618      	mov	r0, r3
    a502:	f240 53ee 	movw	r3, #1518	; 0x5ee
    a506:	f000 ffd5 	bl	b4b4 <_panic>
           (ulEndpoint == USB_EP_6) || (ulEndpoint == USB_EP_7) ||
           (ulEndpoint == USB_EP_8) || (ulEndpoint == USB_EP_9) ||
           (ulEndpoint == USB_EP_10) || (ulEndpoint == USB_EP_11) ||
           (ulEndpoint == USB_EP_12) || (ulEndpoint == USB_EP_13) ||
           (ulEndpoint == USB_EP_14) || (ulEndpoint == USB_EP_15));
    ASSERT((ulFlags & ~(USB_EP_DEV_IN | USB_EP_DEV_OUT)) == 0);
    a50a:	f432 5000 	bics.w	r0, r2, #8192	; 0x2000
    a50e:	d007      	beq.n	a520 <USBDevEndpointStallClear+0x54>
    a510:	4a17      	ldr	r2, [pc, #92]	; (a570 <USBDevEndpointStallClear+0xa4>)
    a512:	4618      	mov	r0, r3
    a514:	9200      	str	r2, [sp, #0]
    a516:	4913      	ldr	r1, [pc, #76]	; (a564 <USBDevEndpointStallClear+0x98>)
    a518:	4a13      	ldr	r2, [pc, #76]	; (a568 <USBDevEndpointStallClear+0x9c>)
    a51a:	f240 53ef 	movw	r3, #1519	; 0x5ef
    a51e:	e7f2      	b.n	a506 <USBDevEndpointStallClear+0x3a>

    //
    // Determine how to clear the stall on this endpoint.
    //
    if(ulEndpoint == USB_EP_0)
    a520:	b929      	cbnz	r1, a52e <USBDevEndpointStallClear+0x62>
    {
        //
        // Clear the stall on endpoint zero.
        //
        HWREGB(ulBase + USB_O_CSRL0) &= ~USB_CSRL0_STALLED;
    a522:	4b14      	ldr	r3, [pc, #80]	; (a574 <USBDevEndpointStallClear+0xa8>)
    a524:	781a      	ldrb	r2, [r3, #0]
    a526:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    a52a:	701a      	strb	r2, [r3, #0]
    a52c:	e014      	b.n	a558 <USBDevEndpointStallClear+0x8c>
    }
    else if(ulFlags == USB_EP_DEV_IN)
    a52e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    a532:	d108      	bne.n	a546 <USBDevEndpointStallClear+0x7a>
    {
        //
        // Clear the stall on an IN endpoint.
        //
        HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) &=
    a534:	4b0f      	ldr	r3, [pc, #60]	; (a574 <USBDevEndpointStallClear+0xa8>)
    a536:	5cca      	ldrb	r2, [r1, r3]
    a538:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    a53c:	54ca      	strb	r2, [r1, r3]
            ~(USB_TXCSRL1_STALL | USB_TXCSRL1_STALLED);

        //
        // Reset the data toggle.
        //
        HWREGB(ulBase + USB_O_TXCSRL1 + EP_OFFSET(ulEndpoint)) |=
    a53e:	5cca      	ldrb	r2, [r1, r3]
    a540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    a544:	e007      	b.n	a556 <USBDevEndpointStallClear+0x8a>
    else
    {
        //
        // Clear the stall on an OUT endpoint.
        //
        HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) &=
    a546:	4b0c      	ldr	r3, [pc, #48]	; (a578 <USBDevEndpointStallClear+0xac>)
    a548:	5cca      	ldrb	r2, [r1, r3]
    a54a:	f002 029f 	and.w	r2, r2, #159	; 0x9f
    a54e:	54ca      	strb	r2, [r1, r3]
            ~(USB_RXCSRL1_STALL | USB_RXCSRL1_STALLED);

        //
        // Reset the data toggle.
        //
        HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) |=
    a550:	5cca      	ldrb	r2, [r1, r3]
    a552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    a556:	54ca      	strb	r2, [r1, r3]
            USB_RXCSRL1_CLRDT;
    }
}
    a558:	b002      	add	sp, #8
    a55a:	bd10      	pop	{r4, r15}
    a55c:	40050000 	.word	0x40050000
    a560:	00017257 	.word	0x00017257
    a564:	0001076e 	.word	0x0001076e
    a568:	0001721e 	.word	0x0001721e
    a56c:	00017358 	.word	0x00017358
    a570:	00017535 	.word	0x00017535
    a574:	40050102 	.word	0x40050102
    a578:	40050106 	.word	0x40050106

0000a57c <USBDevAddrSet>:
//! \return None.
//
//*****************************************************************************
void
USBDevAddrSet(unsigned long ulBase, unsigned long ulAddress)
{
    a57c:	4603      	mov	r3, r0
    a57e:	b507      	push	{r0, r1, r2, r14}
    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a580:	4808      	ldr	r0, [pc, #32]	; (a5a4 <USBDevAddrSet+0x28>)
    a582:	4283      	cmp	r3, r0
    a584:	d008      	beq.n	a598 <USBDevAddrSet+0x1c>
    a586:	4b08      	ldr	r3, [pc, #32]	; (a5a8 <USBDevAddrSet+0x2c>)
    a588:	4670      	mov	r0, r14
    a58a:	9300      	str	r3, [sp, #0]
    a58c:	4907      	ldr	r1, [pc, #28]	; (a5ac <USBDevAddrSet+0x30>)
    a58e:	4a08      	ldr	r2, [pc, #32]	; (a5b0 <USBDevAddrSet+0x34>)
    a590:	f240 6367 	movw	r3, #1639	; 0x667
    a594:	f000 ff8e 	bl	b4b4 <_panic>

    //
    // Set the function address in the correct location.
    //
    HWREGB(ulBase + USB_O_FADDR) = (unsigned char)ulAddress;
    a598:	b2c9      	uxtb	r1, r1
    a59a:	7019      	strb	r1, [r3, #0]
}
    a59c:	b003      	add	sp, #12
    a59e:	f85d fb04 	ldr.w	r15, [r13], #4
    a5a2:	bf00      	nop
    a5a4:	40050000 	.word	0x40050000
    a5a8:	00017257 	.word	0x00017257
    a5ac:	0001076e 	.word	0x0001076e
    a5b0:	0001721e 	.word	0x0001721e

0000a5b4 <USBEndpointDataGet>:
//
//*****************************************************************************
long
USBEndpointDataGet(unsigned long ulBase, unsigned long ulEndpoint,
                   unsigned char *pucData, unsigned long *pulSize)
{
    a5b4:	b537      	push	{r0, r1, r2, r4, r5, r14}
    unsigned long ulRegister, ulByteCount, ulFIFO;

    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a5b6:	4d28      	ldr	r5, [pc, #160]	; (a658 <USBEndpointDataGet+0xa4>)
    a5b8:	4674      	mov	r4, r14
    a5ba:	42a8      	cmp	r0, r5
    a5bc:	d007      	beq.n	a5ce <USBEndpointDataGet+0x1a>
    a5be:	4b27      	ldr	r3, [pc, #156]	; (a65c <USBEndpointDataGet+0xa8>)
    a5c0:	4670      	mov	r0, r14
    a5c2:	9300      	str	r3, [sp, #0]
    a5c4:	4926      	ldr	r1, [pc, #152]	; (a660 <USBEndpointDataGet+0xac>)
    a5c6:	4a27      	ldr	r2, [pc, #156]	; (a664 <USBEndpointDataGet+0xb0>)
    a5c8:	f640 234c 	movw	r3, #2636	; 0xa4c
    a5cc:	e01f      	b.n	a60e <USBEndpointDataGet+0x5a>
    // Get the address of the receive status register to use, based on the
    // endpoint.
    //
    if(ulEndpoint == USB_EP_0)
    {
        ulRegister = USB_O_CSRL0;
    a5ce:	f44f 7081 	mov.w	r0, #258	; 0x102

    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
    a5d2:	b301      	cbz	r1, a616 <USBEndpointDataGet+0x62>
    a5d4:	f021 0020 	bic.w	r0, r1, #32
    a5d8:	2810      	cmp	r0, #16
    a5da:	d01a      	beq.n	a612 <USBEndpointDataGet+0x5e>
    a5dc:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    a5e0:	2820      	cmp	r0, #32
    a5e2:	d016      	beq.n	a612 <USBEndpointDataGet+0x5e>
    a5e4:	f021 0090 	bic.w	r0, r1, #144	; 0x90
    a5e8:	2840      	cmp	r0, #64	; 0x40
    a5ea:	d012      	beq.n	a612 <USBEndpointDataGet+0x5e>
    a5ec:	f021 0080 	bic.w	r0, r1, #128	; 0x80
    a5f0:	2870      	cmp	r0, #112	; 0x70
    a5f2:	d00e      	beq.n	a612 <USBEndpointDataGet+0x5e>
    a5f4:	f021 0030 	bic.w	r0, r1, #48	; 0x30
    a5f8:	2880      	cmp	r0, #128	; 0x80
    a5fa:	d00a      	beq.n	a612 <USBEndpointDataGet+0x5e>
    a5fc:	29e0      	cmp	r1, #224	; 0xe0
    a5fe:	d008      	beq.n	a612 <USBEndpointDataGet+0x5e>
    a600:	4b19      	ldr	r3, [pc, #100]	; (a668 <USBEndpointDataGet+0xb4>)
    a602:	4917      	ldr	r1, [pc, #92]	; (a660 <USBEndpointDataGet+0xac>)
    a604:	4a17      	ldr	r2, [pc, #92]	; (a664 <USBEndpointDataGet+0xb0>)
    a606:	9300      	str	r3, [sp, #0]
    a608:	4620      	mov	r0, r4
    a60a:	f640 2354 	movw	r3, #2644	; 0xa54
    a60e:	f000 ff51 	bl	b4b4 <_panic>
    {
        ulRegister = USB_O_CSRL0;
    }
    else
    {
        ulRegister = USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint);
    a612:	f501 7083 	add.w	r0, r1, #262	; 0x106
    }

    //
    // Don't allow reading of data if the RxPktRdy bit is not set.
    //
    if((HWREGH(ulBase + ulRegister) & USB_CSRL0_RXRDY) == 0)
    a616:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    a61a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
    a61e:	8800      	ldrh	r0, [r0, #0]
    a620:	f010 0001 	ands.w	r0, r0, #1
    a624:	d103      	bne.n	a62e <USBEndpointDataGet+0x7a>
    {
        //
        // Can't read the data because none is available.
        //
        *pulSize = 0;
    a626:	6018      	str	r0, [r3, #0]

        //
        // Return a failure since there is no data to read.
        //
        return(-1);
    a628:	f04f 30ff 	mov.w	r0, #4294967295
    a62c:	e012      	b.n	a654 <USBEndpointDataGet+0xa0>
    }

    //
    // Get the byte count in the FIFO.
    //
    ulByteCount = HWREGH(ulBase + USB_O_COUNT0 + ulEndpoint);
    a62e:	480f      	ldr	r0, [pc, #60]	; (a66c <USBEndpointDataGet+0xb8>)

    //
    // Determine how many bytes are copied.
    //
    ulByteCount = (ulByteCount < *pulSize) ? ulByteCount : *pulSize;
    a630:	681c      	ldr	r4, [r3, #0]
    }

    //
    // Get the byte count in the FIFO.
    //
    ulByteCount = HWREGH(ulBase + USB_O_COUNT0 + ulEndpoint);
    a632:	5a08      	ldrh	r0, [r1, r0]
    *pulSize = ulByteCount;

    //
    // Calculate the FIFO address.
    //
    ulFIFO = ulBase + USB_O_FIFO0 + (ulEndpoint >> 2);
    a634:	0889      	lsrs	r1, r1, #2
    }

    //
    // Get the byte count in the FIFO.
    //
    ulByteCount = HWREGH(ulBase + USB_O_COUNT0 + ulEndpoint);
    a636:	b280      	uxth	r0, r0

    //
    // Determine how many bytes are copied.
    //
    ulByteCount = (ulByteCount < *pulSize) ? ulByteCount : *pulSize;
    a638:	42a0      	cmp	r0, r4
    a63a:	bf28      	it	cs
    a63c:	4620      	movcs	r0, r4

    //
    // Return the number of bytes we are going to read.
    //
    *pulSize = ulByteCount;
    a63e:	6018      	str	r0, [r3, #0]

    //
    // Calculate the FIFO address.
    //
    ulFIFO = ulBase + USB_O_FIFO0 + (ulEndpoint >> 2);
    a640:	4b0b      	ldr	r3, [pc, #44]	; (a670 <USBEndpointDataGet+0xbc>)
    a642:	4410      	add	r0, r2
    a644:	440b      	add	r3, r1

    //
    // Read the data out of the FIFO.
    //
    for(; ulByteCount > 0; ulByteCount--)
    a646:	4282      	cmp	r2, r0
    a648:	d003      	beq.n	a652 <USBEndpointDataGet+0x9e>
    {
        //
        // Read a byte at a time from the FIFO.
        //
        *pucData++ = HWREGB(ulFIFO);
    a64a:	7819      	ldrb	r1, [r3, #0]
    a64c:	f802 1b01 	strb.w	r1, [r2], #1
    a650:	e7f9      	b.n	a646 <USBEndpointDataGet+0x92>
    }

    //
    // Success.
    //
    return(0);
    a652:	2000      	movs	r0, #0
}
    a654:	b003      	add	sp, #12
    a656:	bd30      	pop	{r4, r5, r15}
    a658:	40050000 	.word	0x40050000
    a65c:	00017257 	.word	0x00017257
    a660:	0001076e 	.word	0x0001076e
    a664:	0001721e 	.word	0x0001721e
    a668:	00017358 	.word	0x00017358
    a66c:	40050108 	.word	0x40050108
    a670:	40050020 	.word	0x40050020

0000a674 <USBDevEndpointDataAck>:
//
//*****************************************************************************
void
USBDevEndpointDataAck(unsigned long ulBase, unsigned long ulEndpoint,
                      tBoolean bIsLastPacket)
{
    a674:	b513      	push	{r0, r1, r4, r14}
    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a676:	4c1d      	ldr	r4, [pc, #116]	; (a6ec <USBDevEndpointDataAck+0x78>)
    a678:	4673      	mov	r3, r14
    a67a:	42a0      	cmp	r0, r4
    a67c:	d007      	beq.n	a68e <USBDevEndpointDataAck+0x1a>
    a67e:	4a1c      	ldr	r2, [pc, #112]	; (a6f0 <USBDevEndpointDataAck+0x7c>)
    a680:	4670      	mov	r0, r14
    a682:	9200      	str	r2, [sp, #0]
    a684:	491b      	ldr	r1, [pc, #108]	; (a6f4 <USBDevEndpointDataAck+0x80>)
    a686:	4a1c      	ldr	r2, [pc, #112]	; (a6f8 <USBDevEndpointDataAck+0x84>)
    a688:	f640 23b4 	movw	r3, #2740	; 0xab4
    a68c:	e01d      	b.n	a6ca <USBDevEndpointDataAck+0x56>
    ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
    a68e:	b1f1      	cbz	r1, a6ce <USBDevEndpointDataAck+0x5a>
    a690:	f021 0220 	bic.w	r2, r1, #32
    a694:	2a10      	cmp	r2, #16
    a696:	d021      	beq.n	a6dc <USBDevEndpointDataAck+0x68>
    a698:	f021 0240 	bic.w	r2, r1, #64	; 0x40
    a69c:	2a20      	cmp	r2, #32
    a69e:	d01d      	beq.n	a6dc <USBDevEndpointDataAck+0x68>
    a6a0:	f021 0290 	bic.w	r2, r1, #144	; 0x90
    a6a4:	2a40      	cmp	r2, #64	; 0x40
    a6a6:	d019      	beq.n	a6dc <USBDevEndpointDataAck+0x68>
    a6a8:	f021 0280 	bic.w	r2, r1, #128	; 0x80
    a6ac:	2a70      	cmp	r2, #112	; 0x70
    a6ae:	d015      	beq.n	a6dc <USBDevEndpointDataAck+0x68>
    a6b0:	f021 0230 	bic.w	r2, r1, #48	; 0x30
    a6b4:	2a80      	cmp	r2, #128	; 0x80
    a6b6:	d011      	beq.n	a6dc <USBDevEndpointDataAck+0x68>
    a6b8:	29e0      	cmp	r1, #224	; 0xe0
    a6ba:	d00f      	beq.n	a6dc <USBDevEndpointDataAck+0x68>
    a6bc:	4a0f      	ldr	r2, [pc, #60]	; (a6fc <USBDevEndpointDataAck+0x88>)
    a6be:	490d      	ldr	r1, [pc, #52]	; (a6f4 <USBDevEndpointDataAck+0x80>)
    a6c0:	9200      	str	r2, [sp, #0]
    a6c2:	4a0d      	ldr	r2, [pc, #52]	; (a6f8 <USBDevEndpointDataAck+0x84>)
    a6c4:	4618      	mov	r0, r3
    a6c6:	f640 23bc 	movw	r3, #2748	; 0xabc
    a6ca:	f000 fef3 	bl	b4b4 <_panic>
    if(ulEndpoint == USB_EP_0)
    {
        //
        // Clear RxPktRdy, and optionally DataEnd, on endpoint zero.
        //
        HWREGB(ulBase + USB_O_CSRL0) =
    a6ce:	4b0c      	ldr	r3, [pc, #48]	; (a700 <USBDevEndpointDataAck+0x8c>)
    a6d0:	2a00      	cmp	r2, #0
    a6d2:	bf0c      	ite	eq
    a6d4:	2240      	moveq	r2, #64	; 0x40
    a6d6:	2248      	movne	r2, #72	; 0x48
    a6d8:	701a      	strb	r2, [r3, #0]
    a6da:	e004      	b.n	a6e6 <USBDevEndpointDataAck+0x72>
    else
    {
        //
        // Clear RxPktRdy on all other endpoints.
        //
        HWREGB(ulBase + USB_O_RXCSRL1 + EP_OFFSET(ulEndpoint)) &=
    a6dc:	4b09      	ldr	r3, [pc, #36]	; (a704 <USBDevEndpointDataAck+0x90>)
    a6de:	5cca      	ldrb	r2, [r1, r3]
    a6e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    a6e4:	54ca      	strb	r2, [r1, r3]
            ~(USB_RXCSRL1_RXRDY);
    }
}
    a6e6:	b002      	add	sp, #8
    a6e8:	bd10      	pop	{r4, r15}
    a6ea:	bf00      	nop
    a6ec:	40050000 	.word	0x40050000
    a6f0:	00017257 	.word	0x00017257
    a6f4:	0001076e 	.word	0x0001076e
    a6f8:	0001721e 	.word	0x0001721e
    a6fc:	00017358 	.word	0x00017358
    a700:	40050102 	.word	0x40050102
    a704:	40050106 	.word	0x40050106

0000a708 <USBEndpointDataPut>:
//
//*****************************************************************************
long
USBEndpointDataPut(unsigned long ulBase, unsigned long ulEndpoint,
                   unsigned char *pucData, unsigned long ulSize)
{
    a708:	b537      	push	{r0, r1, r2, r4, r5, r14}
    unsigned char ucTxPktRdy;

    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a70a:	4d21      	ldr	r5, [pc, #132]	; (a790 <USBEndpointDataPut+0x88>)
    a70c:	4674      	mov	r4, r14
    a70e:	42a8      	cmp	r0, r5
    a710:	d007      	beq.n	a722 <USBEndpointDataPut+0x1a>
    a712:	4b20      	ldr	r3, [pc, #128]	; (a794 <USBEndpointDataPut+0x8c>)
    a714:	4670      	mov	r0, r14
    a716:	9300      	str	r3, [sp, #0]
    a718:	491f      	ldr	r1, [pc, #124]	; (a798 <USBEndpointDataPut+0x90>)
    a71a:	4a20      	ldr	r2, [pc, #128]	; (a79c <USBEndpointDataPut+0x94>)
    a71c:	f44f 6332 	mov.w	r3, #2848	; 0xb20
    a720:	e01e      	b.n	a760 <USBEndpointDataPut+0x58>
    //
    // Get the bit position of TxPktRdy based on the endpoint.
    //
    if(ulEndpoint == USB_EP_0)
    {
        ucTxPktRdy = USB_CSRL0_TXRDY;
    a722:	2002      	movs	r0, #2

    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
    a724:	b1f9      	cbz	r1, a766 <USBEndpointDataPut+0x5e>
    a726:	f021 0020 	bic.w	r0, r1, #32
    a72a:	2810      	cmp	r0, #16
    a72c:	d01a      	beq.n	a764 <USBEndpointDataPut+0x5c>
    a72e:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    a732:	2820      	cmp	r0, #32
    a734:	d016      	beq.n	a764 <USBEndpointDataPut+0x5c>
    a736:	f021 0090 	bic.w	r0, r1, #144	; 0x90
    a73a:	2840      	cmp	r0, #64	; 0x40
    a73c:	d012      	beq.n	a764 <USBEndpointDataPut+0x5c>
    a73e:	f021 0080 	bic.w	r0, r1, #128	; 0x80
    a742:	2870      	cmp	r0, #112	; 0x70
    a744:	d00e      	beq.n	a764 <USBEndpointDataPut+0x5c>
    a746:	f021 0030 	bic.w	r0, r1, #48	; 0x30
    a74a:	2880      	cmp	r0, #128	; 0x80
    a74c:	d00a      	beq.n	a764 <USBEndpointDataPut+0x5c>
    a74e:	29e0      	cmp	r1, #224	; 0xe0
    a750:	d008      	beq.n	a764 <USBEndpointDataPut+0x5c>
    a752:	4b13      	ldr	r3, [pc, #76]	; (a7a0 <USBEndpointDataPut+0x98>)
    a754:	4910      	ldr	r1, [pc, #64]	; (a798 <USBEndpointDataPut+0x90>)
    a756:	4a11      	ldr	r2, [pc, #68]	; (a79c <USBEndpointDataPut+0x94>)
    a758:	9300      	str	r3, [sp, #0]
    a75a:	4620      	mov	r0, r4
    a75c:	f640 3328 	movw	r3, #2856	; 0xb28
    a760:	f000 fea8 	bl	b4b4 <_panic>
    {
        ucTxPktRdy = USB_CSRL0_TXRDY;
    }
    else
    {
        ucTxPktRdy = USB_TXCSRL1_TXRDY;
    a764:	2001      	movs	r0, #1
    }

    //
    // Don't allow transmit of data if the TxPktRdy bit is already set.
    //
    if(HWREGB(ulBase + USB_O_CSRL0 + ulEndpoint) & ucTxPktRdy)
    a766:	4c0f      	ldr	r4, [pc, #60]	; (a7a4 <USBEndpointDataPut+0x9c>)
    a768:	5d0c      	ldrb	r4, [r1, r4]
    a76a:	4220      	tst	r0, r4
    a76c:	d10b      	bne.n	a786 <USBEndpointDataPut+0x7e>
    }

    //
    // Calculate the FIFO address.
    //
    ulFIFO = ulBase + USB_O_FIFO0 + (ulEndpoint >> 2);
    a76e:	480e      	ldr	r0, [pc, #56]	; (a7a8 <USBEndpointDataPut+0xa0>)
    a770:	0889      	lsrs	r1, r1, #2
    a772:	4408      	add	r0, r1
    a774:	4413      	add	r3, r2

    //
    // Write the data to the FIFO.
    //
    for(; ulSize > 0; ulSize--)
    a776:	429a      	cmp	r2, r3
    a778:	d003      	beq.n	a782 <USBEndpointDataPut+0x7a>
    {
        HWREGB(ulFIFO) = *pucData++;
    a77a:	f812 1b01 	ldrb.w	r1, [r2], #1
    a77e:	7001      	strb	r1, [r0, #0]
    a780:	e7f9      	b.n	a776 <USBEndpointDataPut+0x6e>
    }

    //
    // Success.
    //
    return(0);
    a782:	2000      	movs	r0, #0
    a784:	e001      	b.n	a78a <USBEndpointDataPut+0x82>
    //
    // Don't allow transmit of data if the TxPktRdy bit is already set.
    //
    if(HWREGB(ulBase + USB_O_CSRL0 + ulEndpoint) & ucTxPktRdy)
    {
        return(-1);
    a786:	f04f 30ff 	mov.w	r0, #4294967295

    //
    // Success.
    //
    return(0);
}
    a78a:	b003      	add	sp, #12
    a78c:	bd30      	pop	{r4, r5, r15}
    a78e:	bf00      	nop
    a790:	40050000 	.word	0x40050000
    a794:	00017257 	.word	0x00017257
    a798:	0001076e 	.word	0x0001076e
    a79c:	0001721e 	.word	0x0001721e
    a7a0:	00017358 	.word	0x00017358
    a7a4:	40050102 	.word	0x40050102
    a7a8:	40050020 	.word	0x40050020

0000a7ac <USBEndpointDataSend>:
//
//*****************************************************************************
long
USBEndpointDataSend(unsigned long ulBase, unsigned long ulEndpoint,
                    unsigned long ulTransType)
{
    a7ac:	b513      	push	{r0, r1, r4, r14}
    unsigned long ulTxPktRdy;

    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a7ae:	4c20      	ldr	r4, [pc, #128]	; (a830 <USBEndpointDataSend+0x84>)
    a7b0:	4673      	mov	r3, r14
    a7b2:	42a0      	cmp	r0, r4
    a7b4:	d007      	beq.n	a7c6 <USBEndpointDataSend+0x1a>
    a7b6:	4a1f      	ldr	r2, [pc, #124]	; (a834 <USBEndpointDataSend+0x88>)
    a7b8:	4670      	mov	r0, r14
    a7ba:	9200      	str	r2, [sp, #0]
    a7bc:	491e      	ldr	r1, [pc, #120]	; (a838 <USBEndpointDataSend+0x8c>)
    a7be:	4a1f      	ldr	r2, [pc, #124]	; (a83c <USBEndpointDataSend+0x90>)
    a7c0:	f640 3373 	movw	r3, #2931	; 0xb73
    a7c4:	e01d      	b.n	a802 <USBEndpointDataSend+0x56>
    ASSERT((ulEndpoint == USB_EP_0) || (ulEndpoint == USB_EP_1) ||
    a7c6:	b1f1      	cbz	r1, a806 <USBEndpointDataSend+0x5a>
    a7c8:	f021 0020 	bic.w	r0, r1, #32
    a7cc:	2810      	cmp	r0, #16
    a7ce:	d020      	beq.n	a812 <USBEndpointDataSend+0x66>
    a7d0:	f021 0040 	bic.w	r0, r1, #64	; 0x40
    a7d4:	2820      	cmp	r0, #32
    a7d6:	d01c      	beq.n	a812 <USBEndpointDataSend+0x66>
    a7d8:	f021 0090 	bic.w	r0, r1, #144	; 0x90
    a7dc:	2840      	cmp	r0, #64	; 0x40
    a7de:	d018      	beq.n	a812 <USBEndpointDataSend+0x66>
    a7e0:	f021 0080 	bic.w	r0, r1, #128	; 0x80
    a7e4:	2870      	cmp	r0, #112	; 0x70
    a7e6:	d014      	beq.n	a812 <USBEndpointDataSend+0x66>
    a7e8:	f021 0030 	bic.w	r0, r1, #48	; 0x30
    a7ec:	2880      	cmp	r0, #128	; 0x80
    a7ee:	d010      	beq.n	a812 <USBEndpointDataSend+0x66>
    a7f0:	29e0      	cmp	r1, #224	; 0xe0
    a7f2:	d00e      	beq.n	a812 <USBEndpointDataSend+0x66>
    a7f4:	4a12      	ldr	r2, [pc, #72]	; (a840 <USBEndpointDataSend+0x94>)
    a7f6:	4910      	ldr	r1, [pc, #64]	; (a838 <USBEndpointDataSend+0x8c>)
    a7f8:	9200      	str	r2, [sp, #0]
    a7fa:	4a10      	ldr	r2, [pc, #64]	; (a83c <USBEndpointDataSend+0x90>)
    a7fc:	4618      	mov	r0, r3
    a7fe:	f640 337b 	movw	r3, #2939	; 0xb7b
    a802:	f000 fe57 	bl	b4b4 <_panic>
    if(ulEndpoint == USB_EP_0)
    {
        //
        // Don't allow transmit of data if the TxPktRdy bit is already set.
        //
        if(HWREGB(ulBase + USB_O_CSRL0) & USB_CSRL0_TXRDY)
    a806:	4b0f      	ldr	r3, [pc, #60]	; (a844 <USBEndpointDataSend+0x98>)
    a808:	781b      	ldrb	r3, [r3, #0]
    a80a:	079c      	lsls	r4, r3, #30
    a80c:	d40c      	bmi.n	a828 <USBEndpointDataSend+0x7c>
        {
            return(-1);
        }

        ulTxPktRdy = ulTransType & 0xff;
    a80e:	b2d2      	uxtb	r2, r2
    a810:	e005      	b.n	a81e <USBEndpointDataSend+0x72>
    else
    {
        //
        // Don't allow transmit of data if the TxPktRdy bit is already set.
        //
        if(HWREGB(ulBase + USB_O_CSRL0 + ulEndpoint) & USB_TXCSRL1_TXRDY)
    a812:	4b0c      	ldr	r3, [pc, #48]	; (a844 <USBEndpointDataSend+0x98>)
    a814:	5ccb      	ldrb	r3, [r1, r3]
    a816:	07d8      	lsls	r0, r3, #31
    a818:	d406      	bmi.n	a828 <USBEndpointDataSend+0x7c>
        {
            return(-1);
        }

        ulTxPktRdy = (ulTransType >> 8) & 0xff;
    a81a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    }

    //
    // Set TxPktRdy in order to send the data.
    //
    HWREGB(ulBase + USB_O_CSRL0 + ulEndpoint) = ulTxPktRdy;
    a81e:	4b09      	ldr	r3, [pc, #36]	; (a844 <USBEndpointDataSend+0x98>)
    a820:	b2d2      	uxtb	r2, r2
    a822:	54ca      	strb	r2, [r1, r3]

    //
    // Success.
    //
    return(0);
    a824:	2000      	movs	r0, #0
    a826:	e001      	b.n	a82c <USBEndpointDataSend+0x80>
        //
        // Don't allow transmit of data if the TxPktRdy bit is already set.
        //
        if(HWREGB(ulBase + USB_O_CSRL0) & USB_CSRL0_TXRDY)
        {
            return(-1);
    a828:	f04f 30ff 	mov.w	r0, #4294967295

    //
    // Success.
    //
    return(0);
}
    a82c:	b002      	add	sp, #8
    a82e:	bd10      	pop	{r4, r15}
    a830:	40050000 	.word	0x40050000
    a834:	00017257 	.word	0x00017257
    a838:	0001076e 	.word	0x0001076e
    a83c:	0001721e 	.word	0x0001721e
    a840:	00017358 	.word	0x00017358
    a844:	40050102 	.word	0x40050102

0000a848 <USBDevMode>:
//! \return None.
//
//*****************************************************************************
void
USBDevMode(unsigned long ulBase)
{
    a848:	b507      	push	{r0, r1, r2, r14}
    //
    // Check the arguments.
    //
    ASSERT(ulBase == USB0_BASE);
    a84a:	4a09      	ldr	r2, [pc, #36]	; (a870 <USBDevMode+0x28>)
    a84c:	4290      	cmp	r0, r2
    a84e:	d008      	beq.n	a862 <USBDevMode+0x1a>
    a850:	4a08      	ldr	r2, [pc, #32]	; (a874 <USBDevMode+0x2c>)
    a852:	4670      	mov	r0, r14
    a854:	9200      	str	r2, [sp, #0]
    a856:	4908      	ldr	r1, [pc, #32]	; (a878 <USBDevMode+0x30>)
    a858:	4a08      	ldr	r2, [pc, #32]	; (a87c <USBDevMode+0x34>)
    a85a:	f640 7355 	movw	r3, #3925	; 0xf55
    a85e:	f000 fe29 	bl	b4b4 <_panic>

    //
    // Set the USB controller mode to device.
    //
    HWREGB(ulBase + USB_O_GPCS) = USB_GPCS_DEVMODOTG | USB_GPCS_DEVMOD;
    a862:	4b07      	ldr	r3, [pc, #28]	; (a880 <USBDevMode+0x38>)
    a864:	2203      	movs	r2, #3
    a866:	701a      	strb	r2, [r3, #0]
}
    a868:	b003      	add	sp, #12
    a86a:	f85d fb04 	ldr.w	r15, [r13], #4
    a86e:	bf00      	nop
    a870:	40050000 	.word	0x40050000
    a874:	00017257 	.word	0x00017257
    a878:	0001076e 	.word	0x0001076e
    a87c:	0001721e 	.word	0x0001721e
    a880:	4005041c 	.word	0x4005041c

0000a884 <USBPHYPowerOn>:
{
    //
    // Clear the PWRDNPHY bit in the PHY, putting it into normal operating
    // mode.
    //
    HWREGB(ulBase + USB_O_POWER) &= ~USB_POWER_PWRDNPHY;
    a884:	7843      	ldrb	r3, [r0, #1]
    a886:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a88a:	7043      	strb	r3, [r0, #1]
    a88c:	4770      	bx	r14

0000a88e <target_early_init>:
 * default implementations of these routines, if the target code
 * chooses not to implement.
 */

__WEAK void target_early_init(void)
{
    a88e:	4770      	bx	r14

0000a890 <target_init>:
}

__WEAK void target_init(void)
{
    a890:	4770      	bx	r14

0000a892 <novm_init_helper>:
}

static void novm_init_helper(struct novm_arena *n, const char *name,
                             uintptr_t arena_start, uintptr_t arena_size,
                             char *default_map, size_t default_map_size)
{
    a892:	e92d 4ff8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r10, r11, r14}
    uintptr_t start = ROUNDUP(arena_start, PAGE_SIZE);
    a896:	f602 74ff 	addw	r4, r2, #4095	; 0xfff
    uintptr_t size = ROUNDDOWN(arena_start + arena_size, PAGE_SIZE) - start;
    a89a:	4413      	add	r3, r2
    a89c:	f423 697f 	bic.w	r9, r3, #4080	; 0xff0

static void novm_init_helper(struct novm_arena *n, const char *name,
                             uintptr_t arena_start, uintptr_t arena_size,
                             char *default_map, size_t default_map_size)
{
    uintptr_t start = ROUNDUP(arena_start, PAGE_SIZE);
    a8a0:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
}

static void novm_init_helper(struct novm_arena *n, const char *name,
                             uintptr_t arena_start, uintptr_t arena_size,
                             char *default_map, size_t default_map_size)
{
    a8a4:	f8dd 8028 	ldr.w	r8, [r13, #40]	; 0x28
    uintptr_t start = ROUNDUP(arena_start, PAGE_SIZE);
    a8a8:	f024 040f 	bic.w	r4, r4, #15
    uintptr_t size = ROUNDDOWN(arena_start + arena_size, PAGE_SIZE) - start;
    a8ac:	f029 090f 	bic.w	r9, r9, #15
    a8b0:	ebc4 0a09 	rsb	r10, r4, r9
}

static void novm_init_helper(struct novm_arena *n, const char *name,
                             uintptr_t arena_start, uintptr_t arena_size,
                             char *default_map, size_t default_map_size)
{
    a8b4:	4605      	mov	r5, r0
    a8b6:	468b      	mov	r11, r1
    a8b8:	4617      	mov	r7, r2
    uintptr_t start = ROUNDUP(arena_start, PAGE_SIZE);
    uintptr_t size = ROUNDDOWN(arena_start + arena_size, PAGE_SIZE) - start;

    mutex_init(&n->lock);

    size_t map_size = size >> PAGE_SIZE_SHIFT;
    a8ba:	ea4f 361a 	mov.w	r6, r10, lsr #12
                             char *default_map, size_t default_map_size)
{
    uintptr_t start = ROUNDUP(arena_start, PAGE_SIZE);
    uintptr_t size = ROUNDDOWN(arena_start + arena_size, PAGE_SIZE) - start;

    mutex_init(&n->lock);
    a8be:	f7f9 fdff 	bl	44c0 <mutex_init>

    size_t map_size = size >> PAGE_SIZE_SHIFT;
    char *map = default_map;
    if (map == NULL || default_map_size < map_size) {
    a8c2:	f1b8 0f00 	cmp.w	r8, #0
    a8c6:	d002      	beq.n	a8ce <novm_init_helper+0x3c>
    a8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a8ca:	42b3      	cmp	r3, r6
    a8cc:	d211      	bcs.n	a8f2 <novm_init_helper+0x60>
        // allocate the map out of the arena itself
        map = (char *)arena_start;
    a8ce:	46b8      	mov	r8, r7
    a8d0:	1be3      	subs	r3, r4, r7

        // Grab enough map for 16Mbyte of arena each time around the loop.
        while (start - arena_start < map_size) {
    a8d2:	42b3      	cmp	r3, r6
    a8d4:	ebc4 0a09 	rsb	r10, r4, r9
    a8d8:	d203      	bcs.n	a8e2 <novm_init_helper+0x50>
            start += PAGE_SIZE;
    a8da:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
            size -= PAGE_SIZE;
            map_size--;
    a8de:	3e01      	subs	r6, #1
    a8e0:	e7f6      	b.n	a8d0 <novm_init_helper+0x3e>
        }

        if ((char *)start - (map + ROUNDUP(map_size, 4)) >= MINIMUM_USEFUL_UNALIGNED_SIZE) {
    a8e2:	1cf3      	adds	r3, r6, #3
    a8e4:	f023 0303 	bic.w	r3, r3, #3
    a8e8:	441f      	add	r7, r3
    a8ea:	1be3      	subs	r3, r4, r7
    a8ec:	2b3f      	cmp	r3, #63	; 0x3f
    a8ee:	dd05      	ble.n	a8fc <novm_init_helper+0x6a>
    a8f0:	e002      	b.n	a8f8 <novm_init_helper+0x66>
            n->unaligned_area = map + ROUNDUP(map_size, 4);
            n->unaligned_size = (char *)start - (map + ROUNDUP(map_size, 4));
        }
    } else if (start - arena_start >= MINIMUM_USEFUL_UNALIGNED_SIZE) {
    a8f2:	1be3      	subs	r3, r4, r7
    a8f4:	2b3f      	cmp	r3, #63	; 0x3f
    a8f6:	d901      	bls.n	a8fc <novm_init_helper+0x6a>
        n->unaligned_area = (char *)arena_start;
    a8f8:	632f      	str	r7, [r5, #48]	; 0x30
        n->unaligned_size = start - arena_start;
    a8fa:	636b      	str	r3, [r5, #52]	; 0x34
    }
    n->name = name;
    a8fc:	f8c5 b01c 	str.w	r11, [r5, #28]
    n->map = map;
    a900:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    memset(n->map, 0, map_size);
    a904:	4640      	mov	r0, r8
    a906:	2100      	movs	r1, #0
    a908:	4632      	mov	r2, r6
    a90a:	f001 f9a5 	bl	bc58 <memset>
    n->pages = map_size;
    a90e:	622e      	str	r6, [r5, #32]
    n->base = (char *)start;
    a910:	62ac      	str	r4, [r5, #40]	; 0x28
    n->size = size;
    a912:	f8c5 a02c 	str.w	r10, [r5, #44]	; 0x2c
    a916:	e8bd 8ff8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r10, r11, r15}
	...

0000a91c <novm_init>:
    }
    panic("novm_add_arena: too many arenas added, bump NOVM_MAX_ARENAS!\n");
}

static void novm_init(uint level)
{
    a91c:	b507      	push	{r0, r1, r2, r14}
    static char mem_allocation_map[DEFAULT_MAP_SIZE];
    novm_init_helper(&arena[0], "main", MEM_START, MEM_SIZE, mem_allocation_map, DEFAULT_MAP_SIZE);
    a91e:	4a08      	ldr	r2, [pc, #32]	; (a940 <novm_init+0x24>)
    a920:	4908      	ldr	r1, [pc, #32]	; (a944 <novm_init+0x28>)
    a922:	f1c2 5300 	rsb	r3, r2, #536870912	; 0x20000000
    a926:	9100      	str	r1, [sp, #0]
    a928:	2110      	movs	r1, #16
    a92a:	9101      	str	r1, [sp, #4]
    a92c:	4806      	ldr	r0, [pc, #24]	; (a948 <novm_init+0x2c>)
    a92e:	4907      	ldr	r1, [pc, #28]	; (a94c <novm_init+0x30>)
    a930:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    a934:	f7ff ffad 	bl	a892 <novm_init_helper>
}
    a938:	b003      	add	sp, #12
    a93a:	f85d fb04 	ldr.w	r15, [r13], #4
    a93e:	bf00      	nop
    a940:	200009b8 	.word	0x200009b8
    a944:	20000914 	.word	0x20000914
    a948:	20000924 	.word	0x20000924
    a94c:	0001771c 	.word	0x0001771c

0000a950 <mutex_acquire>:
    a950:	f04f 31ff 	mov.w	r1, #4294967295
    a954:	f7f9 be06 	b.w	4564 <mutex_acquire_timeout>

0000a958 <novm_alloc_helper>:

LK_INIT_HOOK(novm, &novm_init, LK_INIT_LEVEL_PLATFORM_EARLY - 1);

void *novm_alloc_helper(struct novm_arena *n, size_t pages)
{
    a958:	b5f8      	push	{r3, r4, r5, r6, r7, r14}
    a95a:	4604      	mov	r4, r0
    if (pages == 0 || pages > n->pages)
    a95c:	460e      	mov	r6, r1
    a95e:	b301      	cbz	r1, a9a2 <novm_alloc_helper+0x4a>
    a960:	6a03      	ldr	r3, [r0, #32]
    a962:	4299      	cmp	r1, r3
    a964:	d81d      	bhi.n	a9a2 <novm_alloc_helper+0x4a>
        return NULL;

    mutex_acquire(&n->lock);
    a966:	f7ff fff3 	bl	a950 <mutex_acquire>
    for (size_t i = 0; i <= n->pages - pages; i++) {
    a96a:	6a23      	ldr	r3, [r4, #32]
    a96c:	2500      	movs	r5, #0
    a96e:	1b99      	subs	r1, r3, r6
}

LK_INIT_HOOK(novm, &novm_init, LK_INIT_LEVEL_PLATFORM_EARLY - 1);

void *novm_alloc_helper(struct novm_arena *n, size_t pages)
{
    a970:	2200      	movs	r2, #0

    mutex_acquire(&n->lock);
    for (size_t i = 0; i <= n->pages - pages; i++) {
        bool found = true;
        for (size_t j = 0; j < pages; j++) {
            if (n->map[i + j] != 0) {
    a972:	6a60      	ldr	r0, [r4, #36]	; 0x24
    a974:	1953      	adds	r3, r2, r5
    a976:	5cc7      	ldrb	r7, [r0, r3]
    a978:	b96f      	cbnz	r7, a996 <novm_alloc_helper+0x3e>
        return NULL;

    mutex_acquire(&n->lock);
    for (size_t i = 0; i <= n->pages - pages; i++) {
        bool found = true;
        for (size_t j = 0; j < pages; j++) {
    a97a:	3201      	adds	r2, #1
    a97c:	42b2      	cmp	r2, r6
    a97e:	d1f8      	bne.n	a972 <novm_alloc_helper+0x1a>
                found = false;
                break;
            }
        }
        if (found) {
            memset(n->map + i, 1, pages);
    a980:	2101      	movs	r1, #1
    a982:	4428      	add	r0, r5
    a984:	f001 f968 	bl	bc58 <memset>
            mutex_release(&n->lock);
    a988:	4620      	mov	r0, r4
    a98a:	f7f9 fe3b 	bl	4604 <mutex_release>
            return n->base + (i << PAGE_SIZE_SHIFT);
    a98e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a990:	eb00 3005 	add.w	r0, r0, r5, lsl #12
    a994:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
{
    if (pages == 0 || pages > n->pages)
        return NULL;

    mutex_acquire(&n->lock);
    for (size_t i = 0; i <= n->pages - pages; i++) {
    a996:	1c5d      	adds	r5, r3, #1
    a998:	428d      	cmp	r5, r1
    a99a:	d9e9      	bls.n	a970 <novm_alloc_helper+0x18>
            memset(n->map + i, 1, pages);
            mutex_release(&n->lock);
            return n->base + (i << PAGE_SIZE_SHIFT);
        }
    }
    mutex_release(&n->lock);
    a99c:	4620      	mov	r0, r4
    a99e:	f7f9 fe31 	bl	4604 <mutex_release>
LK_INIT_HOOK(novm, &novm_init, LK_INIT_LEVEL_PLATFORM_EARLY - 1);

void *novm_alloc_helper(struct novm_arena *n, size_t pages)
{
    if (pages == 0 || pages > n->pages)
        return NULL;
    a9a2:	2000      	movs	r0, #0
    a9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
	...

0000a9a8 <novm_alloc_pages>:
{
    LTRACEF("pages %zu\n", pages);

    /* allocate from any arena */
    for (uint i = 0; i < NOVM_MAX_ARENAS; i++) {
        if (arena_bitmap & (1U << i)) {
    a9a8:	07ca      	lsls	r2, r1, #31

    return NULL;
}

void *novm_alloc_pages(size_t pages, uint32_t arena_bitmap)
{
    a9aa:	b508      	push	{r3, r14}
    a9ac:	4603      	mov	r3, r0
    LTRACEF("pages %zu\n", pages);

    /* allocate from any arena */
    for (uint i = 0; i < NOVM_MAX_ARENAS; i++) {
        if (arena_bitmap & (1U << i)) {
    a9ae:	d401      	bmi.n	a9b4 <novm_alloc_pages+0xc>
            if (result)
                return result;
        }
    }

    return NULL;
    a9b0:	2000      	movs	r0, #0
    a9b2:	bd08      	pop	{r3, r15}
    LTRACEF("pages %zu\n", pages);

    /* allocate from any arena */
    for (uint i = 0; i < NOVM_MAX_ARENAS; i++) {
        if (arena_bitmap & (1U << i)) {
            void *result = novm_alloc_helper(&arena[i], pages);
    a9b4:	4803      	ldr	r0, [pc, #12]	; (a9c4 <novm_alloc_pages+0x1c>)
    a9b6:	4619      	mov	r1, r3
    a9b8:	f7ff ffce 	bl	a958 <novm_alloc_helper>
            if (result)
    a9bc:	2800      	cmp	r0, #0
    a9be:	d0f7      	beq.n	a9b0 <novm_alloc_pages+0x8>
                return result;
        }
    }

    return NULL;
}
    a9c0:	bd08      	pop	{r3, r15}
    a9c2:	bf00      	nop
    a9c4:	20000924 	.word	0x20000924

0000a9c8 <novm_alloc_unaligned>:
}

void *novm_alloc_unaligned(size_t *size_return)
{
    /* only do the unaligned thing in the first arena */
    if (arena[0].unaligned_area != NULL) {
    a9c8:	4b08      	ldr	r3, [pc, #32]	; (a9ec <novm_alloc_unaligned+0x24>)
    a9ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    a9cc:	b93a      	cbnz	r2, a9de <novm_alloc_unaligned+0x16>
        void *result = arena[0].unaligned_area;
        arena[0].unaligned_area = NULL;
        arena[0].unaligned_size = 0;
        return result;
    }
    *size_return = PAGE_SIZE;
    a9ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    a9d2:	6003      	str	r3, [r0, #0]
    return novm_alloc_pages(1, NOVM_ARENA_ANY);
    a9d4:	f04f 31ff 	mov.w	r1, #4294967295
    a9d8:	2001      	movs	r0, #1
    a9da:	f7ff bfe5 	b.w	a9a8 <novm_alloc_pages>

void *novm_alloc_unaligned(size_t *size_return)
{
    /* only do the unaligned thing in the first arena */
    if (arena[0].unaligned_area != NULL) {
        *size_return = arena[0].unaligned_size;
    a9de:	6b59      	ldr	r1, [r3, #52]	; 0x34
    a9e0:	6001      	str	r1, [r0, #0]
        void *result = arena[0].unaligned_area;
        arena[0].unaligned_area = NULL;
    a9e2:	2100      	movs	r1, #0
    a9e4:	6319      	str	r1, [r3, #48]	; 0x30
        arena[0].unaligned_size = 0;
    a9e6:	6359      	str	r1, [r3, #52]	; 0x34
        return result;
    }
    *size_return = PAGE_SIZE;
    return novm_alloc_pages(1, NOVM_ARENA_ANY);
}
    a9e8:	4610      	mov	r0, r2
    a9ea:	4770      	bx	r14
    a9ec:	20000924 	.word	0x20000924

0000a9f0 <novm_free_pages>:

    return NULL;
}

void novm_free_pages(void *address, size_t pages)
{
    a9f0:	e92d 41f3 	stmdb	r13!, {r0, r1, r4, r5, r6, r7, r8, r14}
    return novm_alloc_pages(1, NOVM_ARENA_ANY);
}

static bool in_arena(struct novm_arena *n, void *p)
{
    if (n->size == 0)
    a9f4:	4d1c      	ldr	r5, [pc, #112]	; (aa68 <novm_free_pages+0x78>)
    a9f6:	4677      	mov	r7, r14
    a9f8:	6aec      	ldr	r4, [r5, #44]	; 0x2c

    return NULL;
}

void novm_free_pages(void *address, size_t pages)
{
    a9fa:	4688      	mov	r8, r1
    return novm_alloc_pages(1, NOVM_ARENA_ANY);
}

static bool in_arena(struct novm_arena *n, void *p)
{
    if (n->size == 0)
    a9fc:	2c00      	cmp	r4, #0
    a9fe:	d030      	beq.n	aa62 <novm_free_pages+0x72>
        return false;

    char *ptr = (char *)p;
    char *base = n->base;
    aa00:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    return ptr >= base && ptr < base + n->size;
    aa02:	4290      	cmp	r0, r2
    aa04:	d305      	bcc.n	aa12 <novm_free_pages+0x22>
    aa06:	1916      	adds	r6, r2, r4
    aa08:	42b0      	cmp	r0, r6
    aa0a:	bf2c      	ite	cs
    aa0c:	2600      	movcs	r6, #0
    aa0e:	2601      	movcc	r6, #1
    aa10:	e000      	b.n	aa14 <novm_free_pages+0x24>
    aa12:	2600      	movs	r6, #0
{
    LTRACEF("address %p, pages %zu\n", address, pages);

    struct novm_arena *n = NULL;
    for (uint i = 0; i < NOVM_MAX_ARENAS; i++) {
        if (in_arena(&arena[i], address)) {
    aa14:	b32e      	cbz	r6, aa62 <novm_free_pages+0x72>
    if (n->size == 0)
        return false;

    char *ptr = (char *)p;
    char *base = n->base;
    return ptr >= base && ptr < base + n->size;
    aa16:	4290      	cmp	r0, r2
    aa18:	d305      	bcc.n	aa26 <novm_free_pages+0x36>
    aa1a:	4414      	add	r4, r2
    aa1c:	42a0      	cmp	r0, r4
    aa1e:	bf2c      	ite	cs
    aa20:	2400      	movcs	r4, #0
    aa22:	2401      	movcc	r4, #1
    aa24:	e000      	b.n	aa28 <novm_free_pages+0x38>
    aa26:	2400      	movs	r4, #0
        }
    }
    if (!n)
        return;

    DEBUG_ASSERT(in_arena(n, address));
    aa28:	b93c      	cbnz	r4, aa3a <novm_free_pages+0x4a>
    aa2a:	4b10      	ldr	r3, [pc, #64]	; (aa6c <novm_free_pages+0x7c>)
    aa2c:	4638      	mov	r0, r7
    aa2e:	9300      	str	r3, [sp, #0]
    aa30:	490f      	ldr	r1, [pc, #60]	; (aa70 <novm_free_pages+0x80>)
    aa32:	4a10      	ldr	r2, [pc, #64]	; (aa74 <novm_free_pages+0x84>)
    aa34:	23d7      	movs	r3, #215	; 0xd7
    aa36:	f000 fd3d 	bl	b4b4 <_panic>

    size_t index = ((char *)address - (char *)(n->base)) >> PAGE_SIZE_SHIFT;
    aa3a:	1a83      	subs	r3, r0, r2
    char *map = n->map;

    mutex_acquire(&n->lock);
    aa3c:	480a      	ldr	r0, [pc, #40]	; (aa68 <novm_free_pages+0x78>)
    if (!n)
        return;

    DEBUG_ASSERT(in_arena(n, address));

    size_t index = ((char *)address - (char *)(n->base)) >> PAGE_SIZE_SHIFT;
    aa3e:	131e      	asrs	r6, r3, #12
    char *map = n->map;
    aa40:	6a6c      	ldr	r4, [r5, #36]	; 0x24

    mutex_acquire(&n->lock);
    aa42:	f7ff ff85 	bl	a950 <mutex_acquire>
    for (size_t i = 0; i < pages; i++) map[index + i] = 0;
    aa46:	2000      	movs	r0, #0
    aa48:	4540      	cmp	r0, r8
    aa4a:	d004      	beq.n	aa56 <novm_free_pages+0x66>
    aa4c:	19a3      	adds	r3, r4, r6
    aa4e:	2200      	movs	r2, #0
    aa50:	541a      	strb	r2, [r3, r0]
    aa52:	3001      	adds	r0, #1
    aa54:	e7f8      	b.n	aa48 <novm_free_pages+0x58>
    mutex_release(&n->lock);
    aa56:	4804      	ldr	r0, [pc, #16]	; (aa68 <novm_free_pages+0x78>)
}
    aa58:	b002      	add	sp, #8
    aa5a:	e8bd 41f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r14}
    size_t index = ((char *)address - (char *)(n->base)) >> PAGE_SIZE_SHIFT;
    char *map = n->map;

    mutex_acquire(&n->lock);
    for (size_t i = 0; i < pages; i++) map[index + i] = 0;
    mutex_release(&n->lock);
    aa5e:	f7f9 bdd1 	b.w	4604 <mutex_release>
}
    aa62:	b002      	add	sp, #8
    aa64:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    aa68:	20000924 	.word	0x20000924
    aa6c:	00017772 	.word	0x00017772
    aa70:	0001076e 	.word	0x0001076e
    aa74:	0001775f 	.word	0x0001775f

0000aa78 <cmd_novm>:
STATIC_COMMAND("novm", "page allocator (for devices without VM support) debug commands", &cmd_novm)
STATIC_COMMAND_END(novm);

static int cmd_novm(int argc, const cmd_args *argv)
{
    if (argc < 2) {
    aa78:	2801      	cmp	r0, #1
STATIC_COMMAND_START
STATIC_COMMAND("novm", "page allocator (for devices without VM support) debug commands", &cmd_novm)
STATIC_COMMAND_END(novm);

static int cmd_novm(int argc, const cmd_args *argv)
{
    aa7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    aa7c:	4606      	mov	r6, r0
    aa7e:	460c      	mov	r4, r1
    if (argc < 2) {
    aa80:	dc14      	bgt.n	aaac <cmd_novm+0x34>
notenoughargs:
        printf("not enough arguments\n");
    aa82:	4852      	ldr	r0, [pc, #328]	; (abcc <cmd_novm+0x154>)
    aa84:	f001 ff00 	bl	c888 <_printf>
usage:
        printf("usage:\n");
    aa88:	4851      	ldr	r0, [pc, #324]	; (abd0 <cmd_novm+0x158>)
    aa8a:	f001 fefd 	bl	c888 <_printf>
        printf("\t%s info\n", argv[0].str);
    aa8e:	6821      	ldr	r1, [r4, #0]
    aa90:	4850      	ldr	r0, [pc, #320]	; (abd4 <cmd_novm+0x15c>)
    aa92:	f001 fef9 	bl	c888 <_printf>
        printf("\t%s alloc <numberofpages> [arena bitmap]\n", argv[0].str);
    aa96:	6821      	ldr	r1, [r4, #0]
    aa98:	484f      	ldr	r0, [pc, #316]	; (abd8 <cmd_novm+0x160>)
    aa9a:	f001 fef5 	bl	c888 <_printf>
        printf("\t%s free <address> [numberofpages]\n", argv[0].str);
    aa9e:	484f      	ldr	r0, [pc, #316]	; (abdc <cmd_novm+0x164>)
    aaa0:	6821      	ldr	r1, [r4, #0]
    aaa2:	f001 fef1 	bl	c888 <_printf>
        return -1;
    aaa6:	f04f 35ff 	mov.w	r5, #4294967295
    aaaa:	e08b      	b.n	abc4 <cmd_novm+0x14c>
    }

    if (strcmp(argv[1].str, "info") == 0) {
    aaac:	694f      	ldr	r7, [r1, #20]
    aaae:	494c      	ldr	r1, [pc, #304]	; (abe0 <cmd_novm+0x168>)
    aab0:	4638      	mov	r0, r7
    aab2:	f001 ff10 	bl	c8d6 <strcmp>
    aab6:	4605      	mov	r5, r0
    aab8:	2800      	cmp	r0, #0
    aaba:	d155      	bne.n	ab68 <cmd_novm+0xf0>
    return 0;
}

static void novm_dump_arena(struct novm_arena *n)
{
    if (n->pages == 0) {
    aabc:	4c49      	ldr	r4, [pc, #292]	; (abe4 <cmd_novm+0x16c>)
    aabe:	6a23      	ldr	r3, [r4, #32]
    aac0:	2b00      	cmp	r3, #0
    aac2:	d07f      	beq.n	abc4 <cmd_novm+0x14c>
        return;
    }

    mutex_acquire(&n->lock);
    aac4:	4620      	mov	r0, r4
    aac6:	f7ff ff43 	bl	a950 <mutex_acquire>
    printf("name '%s', %d pages, each %zdk (%zdk in all)\n", n->name, n->pages, PAGE_SIZE >> 10, (PAGE_SIZE * n->pages) >> 10);
    aaca:	6a22      	ldr	r2, [r4, #32]
    aacc:	4846      	ldr	r0, [pc, #280]	; (abe8 <cmd_novm+0x170>)
    aace:	0313      	lsls	r3, r2, #12
    aad0:	0a9b      	lsrs	r3, r3, #10
    aad2:	9300      	str	r3, [sp, #0]
    aad4:	69e1      	ldr	r1, [r4, #28]
    aad6:	2304      	movs	r3, #4
    aad8:	f001 fed6 	bl	c888 <_printf>
    printf("  range: %p-%p\n", (void *)n->base, (char *)n->base + n->size);
    aadc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    aade:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    aae0:	4842      	ldr	r0, [pc, #264]	; (abec <cmd_novm+0x174>)
    aae2:	440a      	add	r2, r1
    aae4:	f001 fed0 	bl	c888 <_printf>
    printf("  unaligned range: %p-%p\n", n->unaligned_area, n->unaligned_area + n->unaligned_size);
    aae8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    aaea:	6b62      	ldr	r2, [r4, #52]	; 0x34
    aaec:	4840      	ldr	r0, [pc, #256]	; (abf0 <cmd_novm+0x178>)
    aaee:	440a      	add	r2, r1
    aaf0:	f001 feca 	bl	c888 <_printf>
    unsigned i;
    size_t in_use = 0;
    for (i = 0; i < n->pages; i++) if (n->map[i] != 0) in_use++;
    aaf4:	6a23      	ldr	r3, [r4, #32]
    aaf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    mutex_acquire(&n->lock);
    printf("name '%s', %d pages, each %zdk (%zdk in all)\n", n->name, n->pages, PAGE_SIZE >> 10, (PAGE_SIZE * n->pages) >> 10);
    printf("  range: %p-%p\n", (void *)n->base, (char *)n->base + n->size);
    printf("  unaligned range: %p-%p\n", n->unaligned_area, n->unaligned_area + n->unaligned_size);
    unsigned i;
    size_t in_use = 0;
    aaf8:	4629      	mov	r1, r5
    for (i = 0; i < n->pages; i++) if (n->map[i] != 0) in_use++;
    aafa:	462a      	mov	r2, r5
    aafc:	429a      	cmp	r2, r3
    aafe:	d004      	beq.n	ab0a <cmd_novm+0x92>
    ab00:	5c86      	ldrb	r6, [r0, r2]
    ab02:	b106      	cbz	r6, ab06 <cmd_novm+0x8e>
    ab04:	3101      	adds	r1, #1
    ab06:	3201      	adds	r2, #1
    ab08:	e7f8      	b.n	aafc <cmd_novm+0x84>
    printf("  %zd/%zd in use\n", in_use, n->pages);
    ab0a:	483a      	ldr	r0, [pc, #232]	; (abf4 <cmd_novm+0x17c>)
    ab0c:	f001 febc 	bl	c888 <_printf>
#define MAX_PRINT 1024u
    for (i = 0; i < MAX_PRINT && i < n->pages; i++) {
    ab10:	2600      	movs	r6, #0
    ab12:	6a23      	ldr	r3, [r4, #32]
    ab14:	429e      	cmp	r6, r3
    ab16:	d220      	bcs.n	ab5a <cmd_novm+0xe2>
        if ((i & 63) == 0) printf("    ");
    ab18:	f016 073f 	ands.w	r7, r6, #63	; 0x3f
    ab1c:	d102      	bne.n	ab24 <cmd_novm+0xac>
    ab1e:	4836      	ldr	r0, [pc, #216]	; (abf8 <cmd_novm+0x180>)
    ab20:	f001 feb2 	bl	c888 <_printf>
        printf("%c", n->map[i] ? '*' : '.');
    ab24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ab26:	4835      	ldr	r0, [pc, #212]	; (abfc <cmd_novm+0x184>)
    ab28:	5d99      	ldrb	r1, [r3, r6]
    ab2a:	2900      	cmp	r1, #0
    ab2c:	bf0c      	ite	eq
    ab2e:	212e      	moveq	r1, #46	; 0x2e
    ab30:	212a      	movne	r1, #42	; 0x2a
    ab32:	f001 fea9 	bl	c888 <_printf>
        if ((i & 63) == 63) printf("\n");
    ab36:	2f3f      	cmp	r7, #63	; 0x3f
    ab38:	d102      	bne.n	ab40 <cmd_novm+0xc8>
    ab3a:	4831      	ldr	r0, [pc, #196]	; (ac00 <cmd_novm+0x188>)
    ab3c:	f001 fea4 	bl	c888 <_printf>
    unsigned i;
    size_t in_use = 0;
    for (i = 0; i < n->pages; i++) if (n->map[i] != 0) in_use++;
    printf("  %zd/%zd in use\n", in_use, n->pages);
#define MAX_PRINT 1024u
    for (i = 0; i < MAX_PRINT && i < n->pages; i++) {
    ab40:	3601      	adds	r6, #1
    ab42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    ab46:	d1e4      	bne.n	ab12 <cmd_novm+0x9a>
        if ((i & 63) == 0) printf("    ");
        printf("%c", n->map[i] ? '*' : '.');
        if ((i & 63) == 63) printf("\n");
    }
    if (i == MAX_PRINT && n->pages > MAX_PRINT) {
    ab48:	6a21      	ldr	r1, [r4, #32]
    ab4a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    ab4e:	d904      	bls.n	ab5a <cmd_novm+0xe2>
        printf("    etc., %zd more pages.", n->pages - MAX_PRINT);
    ab50:	482c      	ldr	r0, [pc, #176]	; (ac04 <cmd_novm+0x18c>)
    ab52:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
    ab56:	f001 fe97 	bl	c888 <_printf>
    }
    printf("\n");
    ab5a:	4829      	ldr	r0, [pc, #164]	; (ac00 <cmd_novm+0x188>)
    ab5c:	f001 fe94 	bl	c888 <_printf>
    mutex_release(&n->lock);
    ab60:	4820      	ldr	r0, [pc, #128]	; (abe4 <cmd_novm+0x16c>)
    ab62:	f7f9 fd4f 	bl	4604 <mutex_release>
    ab66:	e02d      	b.n	abc4 <cmd_novm+0x14c>
        return -1;
    }

    if (strcmp(argv[1].str, "info") == 0) {
        novm_dump();
    } else if (strcmp(argv[1].str, "alloc") == 0) {
    ab68:	4638      	mov	r0, r7
    ab6a:	4927      	ldr	r1, [pc, #156]	; (ac08 <cmd_novm+0x190>)
    ab6c:	f001 feb3 	bl	c8d6 <strcmp>
    ab70:	4605      	mov	r5, r0
    ab72:	b970      	cbnz	r0, ab92 <cmd_novm+0x11a>
        if (argc < 3) goto notenoughargs;
    ab74:	2e02      	cmp	r6, #2
    ab76:	d084      	beq.n	aa82 <cmd_novm+0xa>

        uint32_t arena_bitmap = (argc >= 4) ? argv[3].u : NOVM_ARENA_ANY;
    ab78:	2e03      	cmp	r6, #3
    ab7a:	bf14      	ite	ne
    ab7c:	6c21      	ldrne	r1, [r4, #64]	; 0x40
    ab7e:	f04f 31ff 	moveq.w	r1, #4294967295
        void *ptr = novm_alloc_pages(argv[2].u, arena_bitmap);
    ab82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ab84:	f7ff ff10 	bl	a9a8 <novm_alloc_pages>
    ab88:	4601      	mov	r1, r0
        printf("novm_alloc_pages returns %p\n", ptr);
    ab8a:	4820      	ldr	r0, [pc, #128]	; (ac0c <cmd_novm+0x194>)
    ab8c:	f001 fe7c 	bl	c888 <_printf>
    ab90:	e018      	b.n	abc4 <cmd_novm+0x14c>
    } else if (strcmp(argv[1].str, "free") == 0) {
    ab92:	4638      	mov	r0, r7
    ab94:	491e      	ldr	r1, [pc, #120]	; (ac10 <cmd_novm+0x198>)
    ab96:	f001 fe9e 	bl	c8d6 <strcmp>
    ab9a:	4605      	mov	r5, r0
    ab9c:	b980      	cbnz	r0, abc0 <cmd_novm+0x148>
        if (argc < 3) goto notenoughargs;
    ab9e:	2e02      	cmp	r6, #2
    aba0:	f43f af6f 	beq.w	aa82 <cmd_novm+0xa>
        size_t pages = (argc >= 4) ? argv[3].u : 1;
    aba4:	2e03      	cmp	r6, #3
    aba6:	bf14      	ite	ne
    aba8:	6c26      	ldrne	r6, [r4, #64]	; 0x40
    abaa:	2601      	moveq	r6, #1
        novm_free_pages(argv[2].p, pages);
    abac:	6b20      	ldr	r0, [r4, #48]	; 0x30
    abae:	4631      	mov	r1, r6
    abb0:	f7ff ff1e 	bl	a9f0 <novm_free_pages>
        printf("novm_free_pages: %zd pages at %p\n", pages, argv[2].p);
    abb4:	4631      	mov	r1, r6
    abb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
    abb8:	4816      	ldr	r0, [pc, #88]	; (ac14 <cmd_novm+0x19c>)
    abba:	f001 fe65 	bl	c888 <_printf>
    abbe:	e001      	b.n	abc4 <cmd_novm+0x14c>
    } else {
        printf("unrecognized command\n");
    abc0:	4815      	ldr	r0, [pc, #84]	; (ac18 <cmd_novm+0x1a0>)
    abc2:	e75f      	b.n	aa84 <cmd_novm+0xc>
        goto usage;
    }

    return 0;
}
    abc4:	4628      	mov	r0, r5
    abc6:	b003      	add	sp, #12
    abc8:	bdf0      	pop	{r4, r5, r6, r7, r15}
    abca:	bf00      	nop
    abcc:	0000f1c9 	.word	0x0000f1c9
    abd0:	00017787 	.word	0x00017787
    abd4:	0001778f 	.word	0x0001778f
    abd8:	00017799 	.word	0x00017799
    abdc:	000177c3 	.word	0x000177c3
    abe0:	000177e7 	.word	0x000177e7
    abe4:	20000924 	.word	0x20000924
    abe8:	000177ec 	.word	0x000177ec
    abec:	0001781a 	.word	0x0001781a
    abf0:	0001782a 	.word	0x0001782a
    abf4:	00017844 	.word	0x00017844
    abf8:	00017be0 	.word	0x00017be0
    abfc:	0000e465 	.word	0x0000e465
    ac00:	0000e7b4 	.word	0x0000e7b4
    ac04:	00017856 	.word	0x00017856
    ac08:	00017dea 	.word	0x00017dea
    ac0c:	00017870 	.word	0x00017870
    ac10:	0001788d 	.word	0x0001788d
    ac14:	00017892 	.word	0x00017892
    ac18:	000178b4 	.word	0x000178b4

0000ac1c <fetch_next_line>:
    char *buffer;
    size_t buflen;
};

static int fetch_next_line(const char **buffer, void *cookie)
{
    ac1c:	b530      	push	{r4, r5, r14}
    struct line_read_struct *lineread = (struct line_read_struct *)cookie;

    // we're done
    if (lineread->string[lineread->pos] == 0)
    ac1e:	e891 000c 	ldmia.w	r1, {r2, r3}
    ac22:	5cd3      	ldrb	r3, [r2, r3]
    ac24:	b1d3      	cbz	r3, ac5c <fetch_next_line+0x40>
    ac26:	2300      	movs	r3, #0
        return -1;

    size_t bufpos = 0;
    while (lineread->string[lineread->pos] != 0) {
    ac28:	e891 0024 	ldmia.w	r1, {r2, r5}
    ac2c:	5d52      	ldrb	r2, [r2, r5]
    ac2e:	688c      	ldr	r4, [r1, #8]
    ac30:	b172      	cbz	r2, ac50 <fetch_next_line+0x34>
        if (lineread->string[lineread->pos] == '\n') {
    ac32:	2a0a      	cmp	r2, #10
    ac34:	d102      	bne.n	ac3c <fetch_next_line+0x20>
            lineread->pos++;
    ac36:	3501      	adds	r5, #1
    ac38:	604d      	str	r5, [r1, #4]
            break;
    ac3a:	e009      	b.n	ac50 <fetch_next_line+0x34>
        }
        if (bufpos == (lineread->buflen - 1))
    ac3c:	68cd      	ldr	r5, [r1, #12]
    ac3e:	3d01      	subs	r5, #1
    ac40:	42ab      	cmp	r3, r5
    ac42:	d005      	beq.n	ac50 <fetch_next_line+0x34>
            break;
        lineread->buffer[bufpos] = lineread->string[lineread->pos];
    ac44:	54e2      	strb	r2, [r4, r3]
        lineread->pos++;
    ac46:	684a      	ldr	r2, [r1, #4]
        bufpos++;
    ac48:	3301      	adds	r3, #1
            break;
        }
        if (bufpos == (lineread->buflen - 1))
            break;
        lineread->buffer[bufpos] = lineread->string[lineread->pos];
        lineread->pos++;
    ac4a:	3201      	adds	r2, #1
    ac4c:	604a      	str	r2, [r1, #4]
    ac4e:	e7eb      	b.n	ac28 <fetch_next_line+0xc>
        bufpos++;
    }
    lineread->buffer[bufpos] = 0;
    ac50:	2200      	movs	r2, #0
    ac52:	54e2      	strb	r2, [r4, r3]

    *buffer = lineread->buffer;
    ac54:	688a      	ldr	r2, [r1, #8]
    ac56:	6002      	str	r2, [r0, #0]

    return bufpos;
    ac58:	4618      	mov	r0, r3
    ac5a:	bd30      	pop	{r4, r5, r15}
{
    struct line_read_struct *lineread = (struct line_read_struct *)cookie;

    // we're done
    if (lineread->string[lineread->pos] == 0)
        return -1;
    ac5c:	f04f 30ff 	mov.w	r0, #4294967295
    lineread->buffer[bufpos] = 0;

    *buffer = lineread->buffer;

    return bufpos;
}
    ac60:	bd30      	pop	{r4, r5, r15}
	...

0000ac64 <cmd_echo>:
    return cmd_help_impl(CMD_AVAIL_PANIC);
}

static int cmd_echo(int argc, const cmd_args *argv)
{
    if (argc > 1)
    ac64:	2801      	cmp	r0, #1
    ac66:	dd03      	ble.n	ac70 <cmd_echo+0xc>
        echo = argv[1].b;
    ac68:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
    ac6c:	4b01      	ldr	r3, [pc, #4]	; (ac74 <cmd_echo+0x10>)
    ac6e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
}
    ac70:	2000      	movs	r0, #0
    ac72:	4770      	bx	r14
    ac74:	20000058 	.word	0x20000058

0000ac78 <cmd_history>:
    return 0;
}

#if CONSOLE_ENABLE_HISTORY
static int cmd_history(int argc, const cmd_args *argv)
{
    ac78:	b538      	push	{r3, r4, r5, r14}
    return (ptr - 1) % HISTORY_LEN;
}

static void dump_history(void)
{
    printf("command history:\n");
    ac7a:	480c      	ldr	r0, [pc, #48]	; (acac <cmd_history+0x34>)
    ac7c:	f001 fe04 	bl	c888 <_printf>
    uint ptr = ptrprev(history_next);
    ac80:	4b0b      	ldr	r3, [pc, #44]	; (acb0 <cmd_history+0x38>)
    return (ptr + 1) % HISTORY_LEN;
}

static inline uint ptrprev(uint ptr)
{
    return (ptr - 1) % HISTORY_LEN;
    ac82:	2410      	movs	r4, #16
    ac84:	681d      	ldr	r5, [r3, #0]
    ac86:	3d01      	subs	r5, #1
    ac88:	f005 050f 	and.w	r5, r5, #15
    return 0;
}

static inline char *history_line(uint line)
{
    return history + line * LINE_LEN;
    ac8c:	4a09      	ldr	r2, [pc, #36]	; (acb4 <cmd_history+0x3c>)
    ac8e:	01eb      	lsls	r3, r5, #7
    ac90:	6812      	ldr	r2, [r2, #0]
    ac92:	18d1      	adds	r1, r2, r3
{
    printf("command history:\n");
    uint ptr = ptrprev(history_next);
    int i;
    for (i=0; i < HISTORY_LEN; i++) {
        if (history_line(ptr)[0] != 0)
    ac94:	5cd3      	ldrb	r3, [r2, r3]
    ac96:	b113      	cbz	r3, ac9e <cmd_history+0x26>
            printf("\t%s\n", history_line(ptr));
    ac98:	4807      	ldr	r0, [pc, #28]	; (acb8 <cmd_history+0x40>)
    ac9a:	f001 fdf5 	bl	c888 <_printf>
    return (ptr + 1) % HISTORY_LEN;
}

static inline uint ptrprev(uint ptr)
{
    return (ptr - 1) % HISTORY_LEN;
    ac9e:	3d01      	subs	r5, #1
static void dump_history(void)
{
    printf("command history:\n");
    uint ptr = ptrprev(history_next);
    int i;
    for (i=0; i < HISTORY_LEN; i++) {
    aca0:	3c01      	subs	r4, #1
    return (ptr + 1) % HISTORY_LEN;
}

static inline uint ptrprev(uint ptr)
{
    return (ptr - 1) % HISTORY_LEN;
    aca2:	f005 050f 	and.w	r5, r5, #15
static void dump_history(void)
{
    printf("command history:\n");
    uint ptr = ptrprev(history_next);
    int i;
    for (i=0; i < HISTORY_LEN; i++) {
    aca6:	d1f1      	bne.n	ac8c <cmd_history+0x14>
#if CONSOLE_ENABLE_HISTORY
static int cmd_history(int argc, const cmd_args *argv)
{
    dump_history();
    return 0;
}
    aca8:	4620      	mov	r0, r4
    acaa:	bd38      	pop	{r3, r4, r5, r15}
    acac:	00017990 	.word	0x00017990
    acb0:	2000096c 	.word	0x2000096c
    acb4:	20000960 	.word	0x20000960
    acb8:	000179a2 	.word	0x000179a2

0000acbc <cmd_test>:
    }
}

#if LK_DEBUGLEVEL > 1
static int cmd_test(int argc, const cmd_args *argv)
{
    acbc:	b573      	push	{r0, r1, r4, r5, r6, r14}
    acbe:	4606      	mov	r6, r0
    acc0:	460c      	mov	r4, r1
    int i;

    printf("argc %d, argv %p\n", argc, argv);
    acc2:	480e      	ldr	r0, [pc, #56]	; (acfc <cmd_test+0x40>)
    acc4:	4631      	mov	r1, r6
    acc6:	4622      	mov	r2, r4
    acc8:	f001 fdde 	bl	c888 <_printf>
    for (i = 0; i < argc; i++)
    accc:	2500      	movs	r5, #0
    acce:	42b5      	cmp	r5, r6
    acd0:	f104 0414 	add.w	r4, r4, #20
    acd4:	da0f      	bge.n	acf6 <cmd_test+0x3a>
        printf("\t%d: str '%s', i %ld, u %#lx, b %d\n", i, argv[i].str, argv[i].i, argv[i].u, argv[i].b);
    acd6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    acda:	4629      	mov	r1, r5
    acdc:	9300      	str	r3, [sp, #0]
    acde:	f814 3c04 	ldrb.w	r3, [r4, #-4]
    ace2:	4807      	ldr	r0, [pc, #28]	; (ad00 <cmd_test+0x44>)
    ace4:	9301      	str	r3, [sp, #4]
    ace6:	f854 2c14 	ldr.w	r2, [r4, #-20]
    acea:	f854 3c08 	ldr.w	r3, [r4, #-8]
    acee:	f001 fdcb 	bl	c888 <_printf>
static int cmd_test(int argc, const cmd_args *argv)
{
    int i;

    printf("argc %d, argv %p\n", argc, argv);
    for (i = 0; i < argc; i++)
    acf2:	3501      	adds	r5, #1
    acf4:	e7eb      	b.n	acce <cmd_test+0x12>
        printf("\t%d: str '%s', i %ld, u %#lx, b %d\n", i, argv[i].str, argv[i].i, argv[i].u, argv[i].b);

    return 0;
}
    acf6:	2000      	movs	r0, #0
    acf8:	b002      	add	sp, #8
    acfa:	bd70      	pop	{r4, r5, r6, r15}
    acfc:	000179a7 	.word	0x000179a7
    ad00:	000179b9 	.word	0x000179b9

0000ad04 <cmd_help_impl>:
    command_list = block;
}


static int cmd_help_impl(uint8_t availability_mask)
{
    ad04:	b5f8      	push	{r3, r4, r5, r6, r7, r14}
    ad06:	4607      	mov	r7, r0
    printf("command list:\n");
    ad08:	480d      	ldr	r0, [pc, #52]	; (ad40 <cmd_help_impl+0x3c>)
    ad0a:	f001 fdbd 	bl	c888 <_printf>

    cmd_block *block;
    size_t i;

    for (block = command_list; block != NULL; block = block->next) {
    ad0e:	4b0d      	ldr	r3, [pc, #52]	; (ad44 <cmd_help_impl+0x40>)
    ad10:	681c      	ldr	r4, [r3, #0]
    ad12:	b194      	cbz	r4, ad3a <cmd_help_impl+0x36>
    ad14:	68a5      	ldr	r5, [r4, #8]
        const cmd *curr_cmd = block->list;
        for (i = 0; i < block->count; i++) {
    ad16:	2600      	movs	r6, #0
    ad18:	6863      	ldr	r3, [r4, #4]
    ad1a:	429e      	cmp	r6, r3
    ad1c:	d20b      	bcs.n	ad36 <cmd_help_impl+0x32>
            if ((availability_mask & curr_cmd[i].availability_mask) == 0) {
    ad1e:	7b2b      	ldrb	r3, [r5, #12]
    ad20:	421f      	tst	r7, r3
    ad22:	d005      	beq.n	ad30 <cmd_help_impl+0x2c>
                // Skip commands that aren't available in the current shell.
                continue;
            }
            if (curr_cmd[i].help_str)
    ad24:	686a      	ldr	r2, [r5, #4]
    ad26:	b11a      	cbz	r2, ad30 <cmd_help_impl+0x2c>
                printf("\t%-16s: %s\n", curr_cmd[i].cmd_str, curr_cmd[i].help_str);
    ad28:	4807      	ldr	r0, [pc, #28]	; (ad48 <cmd_help_impl+0x44>)
    ad2a:	6829      	ldr	r1, [r5, #0]
    ad2c:	f001 fdac 	bl	c888 <_printf>
    cmd_block *block;
    size_t i;

    for (block = command_list; block != NULL; block = block->next) {
        const cmd *curr_cmd = block->list;
        for (i = 0; i < block->count; i++) {
    ad30:	3601      	adds	r6, #1
    ad32:	3510      	adds	r5, #16
    ad34:	e7f0      	b.n	ad18 <cmd_help_impl+0x14>
    printf("command list:\n");

    cmd_block *block;
    size_t i;

    for (block = command_list; block != NULL; block = block->next) {
    ad36:	6824      	ldr	r4, [r4, #0]
    ad38:	e7eb      	b.n	ad12 <cmd_help_impl+0xe>
                printf("\t%-16s: %s\n", curr_cmd[i].cmd_str, curr_cmd[i].help_str);
        }
    }

    return 0;
}
    ad3a:	4620      	mov	r0, r4
    ad3c:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
    ad3e:	bf00      	nop
    ad40:	000179dd 	.word	0x000179dd
    ad44:	20000970 	.word	0x20000970
    ad48:	000179ec 	.word	0x000179ec

0000ad4c <cmd_help_panic>:
    return cmd_help_impl(CMD_AVAIL_NORMAL);
}

static int cmd_help_panic(int argc, const cmd_args *argv)
{
    return cmd_help_impl(CMD_AVAIL_PANIC);
    ad4c:	2002      	movs	r0, #2
    ad4e:	f7ff bfd9 	b.w	ad04 <cmd_help_impl>

0000ad52 <cmd_help>:
    return 0;
}

static int cmd_help(int argc, const cmd_args *argv)
{
    return cmd_help_impl(CMD_AVAIL_NORMAL);
    ad52:	2001      	movs	r0, #1
    ad54:	f7ff bfd6 	b.w	ad04 <cmd_help_impl>

0000ad58 <read_debug_line>:

    return NULL;
}

static int read_debug_line(const char **outbuffer, void *cookie)
{
    ad58:	e92d 4ff8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r10, r11, r14}
    history_next = ptrnext(history_next);
}

static uint start_history_cursor(void)
{
    return ptrprev(history_next);
    ad5c:	4b65      	ldr	r3, [pc, #404]	; (aef4 <read_debug_line+0x19c>)
}

static int read_debug_line(const char **outbuffer, void *cookie)
{
    int pos = 0;
    int escape_level = 0;
    ad5e:	2500      	movs	r5, #0
    return (ptr + 1) % HISTORY_LEN;
}

static inline uint ptrprev(uint ptr)
{
    return (ptr - 1) % HISTORY_LEN;
    ad60:	681a      	ldr	r2, [r3, #0]

    return NULL;
}

static int read_debug_line(const char **outbuffer, void *cookie)
{
    ad62:	4682      	mov	r10, r0
    return (ptr + 1) % HISTORY_LEN;
}

static inline uint ptrprev(uint ptr)
{
    return (ptr - 1) % HISTORY_LEN;
    ad64:	3a01      	subs	r2, #1
    ad66:	f002 080f 	and.w	r8, r2, #15
    int escape_level = 0;
#if CONSOLE_ENABLE_HISTORY
    uint history_cursor = start_history_cursor();
#endif

    char *buffer = debug_buffer;
    ad6a:	4a63      	ldr	r2, [pc, #396]	; (aef8 <read_debug_line+0x1a0>)
    return NULL;
}

static int read_debug_line(const char **outbuffer, void *cookie)
{
    int pos = 0;
    ad6c:	462c      	mov	r4, r5
    int escape_level = 0;
#if CONSOLE_ENABLE_HISTORY
    uint history_cursor = start_history_cursor();
#endif

    char *buffer = debug_buffer;
    ad6e:	6816      	ldr	r6, [r2, #0]
    ad70:	4699      	mov	r9, r3

    for (;;) {
        /* loop until we get a char */
        int c;
        if ((c = getchar()) < 0)
    ad72:	f001 fd75 	bl	c860 <getchar>
    ad76:	1e07      	subs	r7, r0, #0
    ad78:	dbfb      	blt.n	ad72 <read_debug_line+0x1a>
            continue;

//      TRACEF("c = 0x%hhx\n", c);

        if (escape_level == 0) {
    ad7a:	bb45      	cbnz	r5, adce <read_debug_line+0x76>
            switch (c) {
    ad7c:	2f0d      	cmp	r7, #13
    ad7e:	d00a      	beq.n	ad96 <read_debug_line+0x3e>
    ad80:	dc04      	bgt.n	ad8c <read_debug_line+0x34>
    ad82:	2f08      	cmp	r7, #8
    ad84:	d010      	beq.n	ada8 <read_debug_line+0x50>
    ad86:	2f0a      	cmp	r7, #10
    ad88:	d005      	beq.n	ad96 <read_debug_line+0x3e>
    ad8a:	e015      	b.n	adb8 <read_debug_line+0x60>
    ad8c:	2f1b      	cmp	r7, #27
    ad8e:	d07f      	beq.n	ae90 <read_debug_line+0x138>
    ad90:	2f7f      	cmp	r7, #127	; 0x7f
    ad92:	d009      	beq.n	ada8 <read_debug_line+0x50>
    ad94:	e010      	b.n	adb8 <read_debug_line+0x60>
                case '\r':
                case '\n':
                    if (echo)
    ad96:	4b59      	ldr	r3, [pc, #356]	; (aefc <read_debug_line+0x1a4>)
    ad98:	781b      	ldrb	r3, [r3, #0]
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	f000 8087 	beq.w	aeae <read_debug_line+0x156>
                        putchar('\n');
    ada0:	200a      	movs	r0, #10
    ada2:	f001 fd3d 	bl	c820 <putchar>
    ada6:	e082      	b.n	aeae <read_debug_line+0x156>
                    goto done;

                case 0x7f: // backspace or delete
                case 0x8:
                    if (pos > 0) {
    ada8:	2c00      	cmp	r4, #0
    adaa:	dde2      	ble.n	ad72 <read_debug_line+0x1a>
                        pos--;
                        fputs("\b \b", stdout); // wipe out a character
    adac:	4954      	ldr	r1, [pc, #336]	; (af00 <read_debug_line+0x1a8>)
    adae:	4855      	ldr	r0, [pc, #340]	; (af04 <read_debug_line+0x1ac>)
                    goto done;

                case 0x7f: // backspace or delete
                case 0x8:
                    if (pos > 0) {
                        pos--;
    adb0:	3c01      	subs	r4, #1
                        fputs("\b \b", stdout); // wipe out a character
    adb2:	f001 fd3b 	bl	c82c <fputs>
    adb6:	e072      	b.n	ae9e <read_debug_line+0x146>
                    escape_level++;
                    break;

                default:
                    buffer[pos++] = c;
                    if (echo)
    adb8:	4b50      	ldr	r3, [pc, #320]	; (aefc <read_debug_line+0x1a4>)
                case 0x1b: // escape
                    escape_level++;
                    break;

                default:
                    buffer[pos++] = c;
    adba:	f104 0b01 	add.w	r11, r4, #1
                    if (echo)
    adbe:	781b      	ldrb	r3, [r3, #0]
                case 0x1b: // escape
                    escape_level++;
                    break;

                default:
                    buffer[pos++] = c;
    adc0:	5537      	strb	r7, [r6, r4]
                    if (echo)
    adc2:	2b00      	cmp	r3, #0
    adc4:	d066      	beq.n	ae94 <read_debug_line+0x13c>
                        putchar(c);
    adc6:	4638      	mov	r0, r7
    adc8:	f001 fd2a 	bl	c820 <putchar>
    adcc:	e062      	b.n	ae94 <read_debug_line+0x13c>
            }
        } else if (escape_level == 1) {
    adce:	2d01      	cmp	r5, #1
    add0:	d104      	bne.n	addc <read_debug_line+0x84>
            // inside an escape, look for '['
            if (c == '[') {
                escape_level++;
            } else {
                // we didn't get it, abort
                escape_level = 0;
    add2:	2f5b      	cmp	r7, #91	; 0x5b
    add4:	bf0c      	ite	eq
    add6:	2502      	moveq	r5, #2
    add8:	2500      	movne	r5, #0
    adda:	e060      	b.n	ae9e <read_debug_line+0x146>
            }
        } else { // escape_level > 1
            switch (c) {
    addc:	f1a7 0341 	sub.w	r3, r7, #65	; 0x41
    ade0:	2b03      	cmp	r3, #3
    ade2:	d859      	bhi.n	ae98 <read_debug_line+0x140>
    ade4:	e8df f003 	tbb	[r15, r3]
    ade8:	0d021f1f 	.word	0x0d021f1f
                case 67: // right arrow
                    buffer[pos++] = ' ';
                    if (echo)
    adec:	4b43      	ldr	r3, [pc, #268]	; (aefc <read_debug_line+0x1a4>)
                escape_level = 0;
            }
        } else { // escape_level > 1
            switch (c) {
                case 67: // right arrow
                    buffer[pos++] = ' ';
    adee:	2020      	movs	r0, #32
                    if (echo)
    adf0:	781d      	ldrb	r5, [r3, #0]
                escape_level = 0;
            }
        } else { // escape_level > 1
            switch (c) {
                case 67: // right arrow
                    buffer[pos++] = ' ';
    adf2:	1c67      	adds	r7, r4, #1
    adf4:	5530      	strb	r0, [r6, r4]
                    if (echo)
    adf6:	2d00      	cmp	r5, #0
    adf8:	d050      	beq.n	ae9c <read_debug_line+0x144>
                        putchar(' ');
    adfa:	f001 fd11 	bl	c820 <putchar>
                escape_level = 0;
            }
        } else { // escape_level > 1
            switch (c) {
                case 67: // right arrow
                    buffer[pos++] = ' ';
    adfe:	463c      	mov	r4, r7
    ae00:	e04a      	b.n	ae98 <read_debug_line+0x140>
                    if (echo)
                        putchar(' ');
                    break;
                case 68: // left arrow
                    if (pos > 0) {
    ae02:	2c00      	cmp	r4, #0
    ae04:	dc01      	bgt.n	ae0a <read_debug_line+0xb2>
    ae06:	2500      	movs	r5, #0
    ae08:	e7b3      	b.n	ad72 <read_debug_line+0x1a>
                        pos--;
                        if (echo) {
    ae0a:	4b3c      	ldr	r3, [pc, #240]	; (aefc <read_debug_line+0x1a4>)
                    if (echo)
                        putchar(' ');
                    break;
                case 68: // left arrow
                    if (pos > 0) {
                        pos--;
    ae0c:	3c01      	subs	r4, #1
                        if (echo) {
    ae0e:	781d      	ldrb	r5, [r3, #0]
    ae10:	2d00      	cmp	r5, #0
    ae12:	d044      	beq.n	ae9e <read_debug_line+0x146>
                            fputs("\b \b", stdout); // wipe out a character
    ae14:	483b      	ldr	r0, [pc, #236]	; (af04 <read_debug_line+0x1ac>)
    ae16:	e037      	b.n	ae88 <read_debug_line+0x130>
                case 65: // up arrow -- previous history
                case 66: // down arrow -- next history
                    // wipe out the current line
                    while (pos > 0) {
                        pos--;
                        if (echo) {
    ae18:	782b      	ldrb	r3, [r5, #0]
#if CONSOLE_ENABLE_HISTORY
                case 65: // up arrow -- previous history
                case 66: // down arrow -- next history
                    // wipe out the current line
                    while (pos > 0) {
                        pos--;
    ae1a:	3c01      	subs	r4, #1
                        if (echo) {
    ae1c:	b11b      	cbz	r3, ae26 <read_debug_line+0xce>
                            fputs("\b \b", stdout); // wipe out a character
    ae1e:	4839      	ldr	r0, [pc, #228]	; (af04 <read_debug_line+0x1ac>)
    ae20:	4937      	ldr	r1, [pc, #220]	; (af00 <read_debug_line+0x1a8>)
    ae22:	f001 fd03 	bl	c82c <fputs>
                    break;
#if CONSOLE_ENABLE_HISTORY
                case 65: // up arrow -- previous history
                case 66: // down arrow -- next history
                    // wipe out the current line
                    while (pos > 0) {
    ae26:	2c00      	cmp	r4, #0
    ae28:	4d34      	ldr	r5, [pc, #208]	; (aefc <read_debug_line+0x1a4>)
    ae2a:	dcf5      	bgt.n	ae18 <read_debug_line+0xc0>
                        if (echo) {
                            fputs("\b \b", stdout); // wipe out a character
                        }
                    }

                    if (c == 65)
    ae2c:	2f41      	cmp	r7, #65	; 0x41
    ae2e:	d111      	bne.n	ae54 <read_debug_line+0xfc>
    return 0;
}

static inline char *history_line(uint line)
{
    return history + line * LINE_LEN;
    ae30:	4b35      	ldr	r3, [pc, #212]	; (af08 <read_debug_line+0x1b0>)
    ae32:	681a      	ldr	r2, [r3, #0]
{
    uint i;
    const char *str = history_line(*cursor);

    /* if we are already at head, stop here */
    if (*cursor == history_next)
    ae34:	f8d9 3000 	ldr.w	r3, [r9]
    return 0;
}

static inline char *history_line(uint line)
{
    return history + line * LINE_LEN;
    ae38:	eb02 11c8 	add.w	r1, r2, r8, lsl #7
{
    uint i;
    const char *str = history_line(*cursor);

    /* if we are already at head, stop here */
    if (*cursor == history_next)
    ae3c:	4598      	cmp	r8, r3
    ae3e:	d018      	beq.n	ae72 <read_debug_line+0x11a>
    return (ptr + 1) % HISTORY_LEN;
}

static inline uint ptrprev(uint ptr)
{
    return (ptr - 1) % HISTORY_LEN;
    ae40:	f108 33ff 	add.w	r3, r8, #4294967295
    ae44:	f003 030f 	and.w	r3, r3, #15

    /* back up one */
    i = ptrprev(*cursor);

    /* if the next one is gonna be null */
    if (history_line(i)[0] == '\0')
    ae48:	01d8      	lsls	r0, r3, #7
    ae4a:	5c12      	ldrb	r2, [r2, r0]
        return str;

    /* update the cursor */
    *cursor = i;
    ae4c:	2a00      	cmp	r2, #0
    ae4e:	bf18      	it	ne
    ae50:	4698      	movne	r8, r3
    ae52:	e00e      	b.n	ae72 <read_debug_line+0x11a>
    return history + line * LINE_LEN;
}

static inline uint ptrnext(uint ptr)
{
    return (ptr + 1) % HISTORY_LEN;
    ae54:	f108 0301 	add.w	r3, r8, #1

static const char *next_history(uint *cursor)
{
    uint i = ptrnext(*cursor);

    if (i == history_next)
    ae58:	f8d9 2000 	ldr.w	r2, [r9]
    return history + line * LINE_LEN;
}

static inline uint ptrnext(uint ptr)
{
    return (ptr + 1) % HISTORY_LEN;
    ae5c:	f003 030f 	and.w	r3, r3, #15

static const char *next_history(uint *cursor)
{
    uint i = ptrnext(*cursor);

    if (i == history_next)
    ae60:	4293      	cmp	r3, r2
    ae62:	d005      	beq.n	ae70 <read_debug_line+0x118>
    return 0;
}

static inline char *history_line(uint line)
{
    return history + line * LINE_LEN;
    ae64:	4a28      	ldr	r2, [pc, #160]	; (af08 <read_debug_line+0x1b0>)
    ae66:	4698      	mov	r8, r3
    ae68:	6811      	ldr	r1, [r2, #0]

    if (i == history_next)
        return ""; // can't let the cursor hit the head

    *cursor = i;
    return history_line(i);
    ae6a:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
    ae6e:	e000      	b.n	ae72 <read_debug_line+0x11a>
static const char *next_history(uint *cursor)
{
    uint i = ptrnext(*cursor);

    if (i == history_next)
        return ""; // can't let the cursor hit the head
    ae70:	4926      	ldr	r1, [pc, #152]	; (af0c <read_debug_line+0x1b4>)
                    }

                    if (c == 65)
                        strlcpy(buffer, prev_history(&history_cursor), LINE_LEN);
                    else
                        strlcpy(buffer, next_history(&history_cursor), LINE_LEN);
    ae72:	2280      	movs	r2, #128	; 0x80
    ae74:	4630      	mov	r0, r6
    ae76:	f001 fd3b 	bl	c8f0 <strlcpy>
                    pos = strlen(buffer);
    ae7a:	4630      	mov	r0, r6
    ae7c:	f001 fd4f 	bl	c91e <strlen>
                    if (echo)
    ae80:	782d      	ldrb	r5, [r5, #0]

                    if (c == 65)
                        strlcpy(buffer, prev_history(&history_cursor), LINE_LEN);
                    else
                        strlcpy(buffer, next_history(&history_cursor), LINE_LEN);
                    pos = strlen(buffer);
    ae82:	4604      	mov	r4, r0
                    if (echo)
    ae84:	b15d      	cbz	r5, ae9e <read_debug_line+0x146>
                        fputs(buffer, stdout);
    ae86:	4630      	mov	r0, r6
    ae88:	491d      	ldr	r1, [pc, #116]	; (af00 <read_debug_line+0x1a8>)
    ae8a:	f001 fccf 	bl	c82c <fputs>
    ae8e:	e003      	b.n	ae98 <read_debug_line+0x140>
                        fputs("\b \b", stdout); // wipe out a character
                    }
                    break;

                case 0x1b: // escape
                    escape_level++;
    ae90:	2501      	movs	r5, #1
    ae92:	e004      	b.n	ae9e <read_debug_line+0x146>
                    break;

                default:
                    buffer[pos++] = c;
    ae94:	465c      	mov	r4, r11
    ae96:	e002      	b.n	ae9e <read_debug_line+0x146>
                    break;
#endif
                default:
                    break;
            }
            escape_level = 0;
    ae98:	2500      	movs	r5, #0
    ae9a:	e000      	b.n	ae9e <read_debug_line+0x146>
                escape_level = 0;
            }
        } else { // escape_level > 1
            switch (c) {
                case 67: // right arrow
                    buffer[pos++] = ' ';
    ae9c:	463c      	mov	r4, r7
            }
            escape_level = 0;
        }

        /* end of line. */
        if (pos == (LINE_LEN - 1)) {
    ae9e:	2c7f      	cmp	r4, #127	; 0x7f
    aea0:	f47f af67 	bne.w	ad72 <read_debug_line+0x1a>
            fputs("\nerror: line too long\n", stdout);
    aea4:	481a      	ldr	r0, [pc, #104]	; (af10 <read_debug_line+0x1b8>)
    aea6:	4916      	ldr	r1, [pc, #88]	; (af00 <read_debug_line+0x1a8>)
    aea8:	f001 fcc0 	bl	c82c <fputs>
            pos = 0;
    aeac:	2400      	movs	r4, #0

done:
//  dprintf("returning pos %d\n", pos);

    // null terminate
    buffer[pos] = 0;
    aeae:	2300      	movs	r3, #0
    aeb0:	5533      	strb	r3, [r6, r4]
}

static void add_history(const char *line)
{
    // reject some stuff
    if (line[0] == 0)
    aeb2:	7833      	ldrb	r3, [r6, #0]
    aeb4:	b1cb      	cbz	r3, aeea <read_debug_line+0x192>
        return;

    uint last = ptrprev(history_next);
    aeb6:	f8d9 8000 	ldr.w	r8, [r9]
    return 0;
}

static inline char *history_line(uint line)
{
    return history + line * LINE_LEN;
    aeba:	4b13      	ldr	r3, [pc, #76]	; (af08 <read_debug_line+0x1b0>)
    return (ptr + 1) % HISTORY_LEN;
}

static inline uint ptrprev(uint ptr)
{
    return (ptr - 1) % HISTORY_LEN;
    aebc:	f108 31ff 	add.w	r1, r8, #4294967295
    return 0;
}

static inline char *history_line(uint line)
{
    return history + line * LINE_LEN;
    aec0:	681f      	ldr	r7, [r3, #0]
    return (ptr + 1) % HISTORY_LEN;
}

static inline uint ptrprev(uint ptr)
{
    return (ptr - 1) % HISTORY_LEN;
    aec2:	f001 010f 	and.w	r1, r1, #15
    // reject some stuff
    if (line[0] == 0)
        return;

    uint last = ptrprev(history_next);
    if (strcmp(line, history_line(last)) == 0)
    aec6:	4630      	mov	r0, r6
    aec8:	eb07 11c1 	add.w	r1, r7, r1, lsl #7
{
    // reject some stuff
    if (line[0] == 0)
        return;

    uint last = ptrprev(history_next);
    aecc:	4d09      	ldr	r5, [pc, #36]	; (aef4 <read_debug_line+0x19c>)
    if (strcmp(line, history_line(last)) == 0)
    aece:	f001 fd02 	bl	c8d6 <strcmp>
    aed2:	b150      	cbz	r0, aeea <read_debug_line+0x192>
        return;

    strlcpy(history_line(history_next), line, LINE_LEN);
    aed4:	eb07 10c8 	add.w	r0, r7, r8, lsl #7
    aed8:	4631      	mov	r1, r6
    aeda:	2280      	movs	r2, #128	; 0x80
    aedc:	f001 fd08 	bl	c8f0 <strlcpy>
    return history + line * LINE_LEN;
}

static inline uint ptrnext(uint ptr)
{
    return (ptr + 1) % HISTORY_LEN;
    aee0:	682b      	ldr	r3, [r5, #0]
    aee2:	3301      	adds	r3, #1
    aee4:	f003 030f 	and.w	r3, r3, #15
    uint last = ptrprev(history_next);
    if (strcmp(line, history_line(last)) == 0)
        return;

    strlcpy(history_line(history_next), line, LINE_LEN);
    history_next = ptrnext(history_next);
    aee8:	602b      	str	r3, [r5, #0]
    // add to history
    add_history(buffer);
#endif

    // return a pointer to our buffer
    *outbuffer = buffer;
    aeea:	f8ca 6000 	str.w	r6, [r10]

    return pos;
}
    aeee:	4620      	mov	r0, r4
    aef0:	e8bd 8ff8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r10, r11, r15}
    aef4:	2000096c 	.word	0x2000096c
    aef8:	20000964 	.word	0x20000964
    aefc:	20000058 	.word	0x20000058
    af00:	2000006c 	.word	0x2000006c
    af04:	000179f8 	.word	0x000179f8
    af08:	20000960 	.word	0x20000960
    af0c:	000179fb 	.word	0x000179fb
    af10:	000179fc 	.word	0x000179fc

0000af14 <match_command>:
static const cmd *match_command(const char *command, const uint8_t availability_mask)
{
    cmd_block *block;
    size_t i;

    for (block = command_list; block != NULL; block = block->next) {
    af14:	4b0f      	ldr	r3, [pc, #60]	; (af54 <match_command+0x40>)
    return ERR_INVALID_ARGS;
}
#endif  // CONSOLE_ENABLE_REPEAT

static const cmd *match_command(const char *command, const uint8_t availability_mask)
{
    af16:	e92d 47f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r14}
    cmd_block *block;
    size_t i;

    for (block = command_list; block != NULL; block = block->next) {
    af1a:	681c      	ldr	r4, [r3, #0]
    return ERR_INVALID_ARGS;
}
#endif  // CONSOLE_ENABLE_REPEAT

static const cmd *match_command(const char *command, const uint8_t availability_mask)
{
    af1c:	4681      	mov	r9, r0
    af1e:	468a      	mov	r10, r1
    cmd_block *block;
    size_t i;

    for (block = command_list; block != NULL; block = block->next) {
    af20:	b1a4      	cbz	r4, af4c <match_command+0x38>
        const cmd *curr_cmd = block->list;
        for (i = 0; i < block->count; i++) {
    af22:	f8d4 8004 	ldr.w	r8, [r4, #4]
    af26:	68a5      	ldr	r5, [r4, #8]
    af28:	2600      	movs	r6, #0
    af2a:	4546      	cmp	r6, r8
    af2c:	d00c      	beq.n	af48 <match_command+0x34>
            if ((availability_mask & curr_cmd[i].availability_mask) == 0) {
    af2e:	7b2b      	ldrb	r3, [r5, #12]
    af30:	462f      	mov	r7, r5
    af32:	ea1a 0f03 	tst.w	r10, r3
    af36:	d004      	beq.n	af42 <match_command+0x2e>
                continue;
            }
            if (strcmp(command, curr_cmd[i].cmd_str) == 0) {
    af38:	4648      	mov	r0, r9
    af3a:	6829      	ldr	r1, [r5, #0]
    af3c:	f001 fccb 	bl	c8d6 <strcmp>
    af40:	b128      	cbz	r0, af4e <match_command+0x3a>
    cmd_block *block;
    size_t i;

    for (block = command_list; block != NULL; block = block->next) {
        const cmd *curr_cmd = block->list;
        for (i = 0; i < block->count; i++) {
    af42:	3601      	adds	r6, #1
    af44:	3510      	adds	r5, #16
    af46:	e7f0      	b.n	af2a <match_command+0x16>
static const cmd *match_command(const char *command, const uint8_t availability_mask)
{
    cmd_block *block;
    size_t i;

    for (block = command_list; block != NULL; block = block->next) {
    af48:	6824      	ldr	r4, [r4, #0]
    af4a:	e7e9      	b.n	af20 <match_command+0xc>
                return &curr_cmd[i];
            }
        }
    }

    return NULL;
    af4c:	4627      	mov	r7, r4
}
    af4e:	4638      	mov	r0, r7
    af50:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
    af54:	20000970 	.word	0x20000970

0000af58 <convert_args>:
    buffer[outpos] = 0;
    return arg;
}

static void convert_args(int argc, cmd_args *argv)
{
    af58:	b5f8      	push	{r3, r4, r5, r6, r7, r14}
    af5a:	4607      	mov	r7, r0
    af5c:	460c      	mov	r4, r1
    int i;

    for (i = 0; i < argc; i++) {
    af5e:	2600      	movs	r6, #0
    af60:	42be      	cmp	r6, r7
    af62:	da29      	bge.n	afb8 <convert_args+0x60>
        unsigned long u = atoul(argv[i].str);
    af64:	6820      	ldr	r0, [r4, #0]
    af66:	f000 fedd 	bl	bd24 <atoul>
        argv[i].u = u;
    af6a:	6060      	str	r0, [r4, #4]
        argv[i].p = (void *)u;
    af6c:	60a0      	str	r0, [r4, #8]
        argv[i].i = atol(argv[i].str);
    af6e:	6820      	ldr	r0, [r4, #0]
    af70:	f000 feaa 	bl	bcc8 <atol>

        if (!strcmp(argv[i].str, "true") || !strcmp(argv[i].str, "on")) {
    af74:	6825      	ldr	r5, [r4, #0]

    for (i = 0; i < argc; i++) {
        unsigned long u = atoul(argv[i].str);
        argv[i].u = u;
        argv[i].p = (void *)u;
        argv[i].i = atol(argv[i].str);
    af76:	60e0      	str	r0, [r4, #12]

        if (!strcmp(argv[i].str, "true") || !strcmp(argv[i].str, "on")) {
    af78:	4910      	ldr	r1, [pc, #64]	; (afbc <convert_args+0x64>)
    af7a:	4628      	mov	r0, r5
    af7c:	f001 fcab 	bl	c8d6 <strcmp>
    af80:	b120      	cbz	r0, af8c <convert_args+0x34>
    af82:	4628      	mov	r0, r5
    af84:	490e      	ldr	r1, [pc, #56]	; (afc0 <convert_args+0x68>)
    af86:	f001 fca6 	bl	c8d6 <strcmp>
    af8a:	b908      	cbnz	r0, af90 <convert_args+0x38>
            argv[i].b = true;
    af8c:	2301      	movs	r3, #1
    af8e:	e00f      	b.n	afb0 <convert_args+0x58>
        } else if (!strcmp(argv[i].str, "false") || !strcmp(argv[i].str, "off")) {
    af90:	4628      	mov	r0, r5
    af92:	490c      	ldr	r1, [pc, #48]	; (afc4 <convert_args+0x6c>)
    af94:	f001 fc9f 	bl	c8d6 <strcmp>
    af98:	b120      	cbz	r0, afa4 <convert_args+0x4c>
    af9a:	4628      	mov	r0, r5
    af9c:	490a      	ldr	r1, [pc, #40]	; (afc8 <convert_args+0x70>)
    af9e:	f001 fc9a 	bl	c8d6 <strcmp>
    afa2:	b908      	cbnz	r0, afa8 <convert_args+0x50>
            argv[i].b = false;
    afa4:	2300      	movs	r3, #0
    afa6:	e003      	b.n	afb0 <convert_args+0x58>
        } else {
            argv[i].b = (argv[i].u == 0) ? false : true;
    afa8:	6863      	ldr	r3, [r4, #4]
    afaa:	3300      	adds	r3, #0
    afac:	bf18      	it	ne
    afae:	2301      	movne	r3, #1
    afb0:	7423      	strb	r3, [r4, #16]

static void convert_args(int argc, cmd_args *argv)
{
    int i;

    for (i = 0; i < argc; i++) {
    afb2:	3601      	adds	r6, #1
    afb4:	3414      	adds	r4, #20
    afb6:	e7d3      	b.n	af60 <convert_args+0x8>
            argv[i].b = false;
        } else {
            argv[i].b = (argv[i].u == 0) ? false : true;
        }
    }
}
    afb8:	bdf8      	pop	{r3, r4, r5, r6, r7, r15}
    afba:	bf00      	nop
    afbc:	0001083a 	.word	0x0001083a
    afc0:	0001314f 	.word	0x0001314f
    afc4:	0001081b 	.word	0x0001081b
    afc8:	000131a4 	.word	0x000131a4

0000afcc <command_loop>:


static status_t command_loop(int (*get_line)(const char **, void *), void *get_line_cookie, bool showprompt, bool locked)
{
    afcc:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    afd0:	b08b      	sub	sp, #44	; 0x2c
    afd2:	9006      	str	r0, [sp, #24]
    cmd_args *args = NULL;
    const char *buffer;
    const char *continuebuffer;
    char *outbuf = NULL;

    args = (cmd_args *) malloc (MAX_NUM_ARGS * sizeof(cmd_args));
    afd4:	f44f 70a0 	mov.w	r0, #320	; 0x140
    afd8:	4677      	mov	r7, r14
    }
}


static status_t command_loop(int (*get_line)(const char **, void *), void *get_line_cookie, bool showprompt, bool locked)
{
    afda:	9107      	str	r1, [sp, #28]
    afdc:	9204      	str	r2, [sp, #16]
    afde:	9305      	str	r3, [sp, #20]
    cmd_args *args = NULL;
    const char *buffer;
    const char *continuebuffer;
    char *outbuf = NULL;

    args = (cmd_args *) malloc (MAX_NUM_ARGS * sizeof(cmd_args));
    afe0:	f000 fba0 	bl	b724 <malloc>
    if (unlikely(args == NULL)) {
    afe4:	4606      	mov	r6, r0
    afe6:	2800      	cmp	r0, #0
    afe8:	f000 8139 	beq.w	b25e <command_loop+0x292>
        goto no_mem_error;
    }

    const size_t outbuflen = 1024;
    outbuf = malloc(outbuflen);
    afec:	f44f 6080 	mov.w	r0, #1024	; 0x400
    aff0:	f000 fb98 	bl	b724 <malloc>
    if (unlikely(outbuf == NULL)) {
    aff4:	4605      	mov	r5, r0
    aff6:	2800      	cmp	r0, #0
    aff8:	f000 812e 	beq.w	b258 <command_loop+0x28c>
    affc:	2400      	movs	r4, #0

    exit = false;
    continuebuffer = NULL;
    while (!exit) {
        // read a new line if it hadn't been split previously and passed back from tokenize_command
        if (continuebuffer == NULL) {
    affe:	b9ac      	cbnz	r4, b02c <command_loop+0x60>
            if (showprompt)
    b000:	9a04      	ldr	r2, [sp, #16]
    b002:	b11a      	cbz	r2, b00c <command_loop+0x40>
                fputs("] ", stdout);
    b004:	489a      	ldr	r0, [pc, #616]	; (b270 <command_loop+0x2a4>)
    b006:	499b      	ldr	r1, [pc, #620]	; (b274 <command_loop+0x2a8>)
    b008:	f001 fc10 	bl	c82c <fputs>

            int len = get_line(&buffer, get_line_cookie);
    b00c:	a809      	add	r0, sp, #36	; 0x24
    b00e:	9907      	ldr	r1, [sp, #28]
    b010:	9b06      	ldr	r3, [sp, #24]
    b012:	4798      	blx	r3
            if (len < 0)
    b014:	2800      	cmp	r0, #0
    b016:	da07      	bge.n	b028 <command_loop+0x5c>

        if (!locked)
            mutex_release(command_lock);
    }

    free(outbuf);
    b018:	4628      	mov	r0, r5
    b01a:	f000 fc13 	bl	b844 <free>
    free(args);
    b01e:	4630      	mov	r0, r6
    b020:	f000 fc10 	bl	b844 <free>
    return NO_ERROR;
    b024:	2000      	movs	r0, #0
    b026:	e120      	b.n	b26a <command_loop+0x29e>
                fputs("] ", stdout);

            int len = get_line(&buffer, get_line_cookie);
            if (len < 0)
                break;
            if (len == 0)
    b028:	d0ea      	beq.n	b000 <command_loop+0x34>
    b02a:	e000      	b.n	b02e <command_loop+0x62>
                continue;
        } else {
            buffer = continuebuffer;
    b02c:	9409      	str	r4, [sp, #36]	; 0x24
        }

//      dprintf("line = '%s'\n", buffer);

        /* tokenize the line */
        int argc = tokenize_command(buffer, &continuebuffer, outbuf, outbuflen,
    b02e:	9a09      	ldr	r2, [sp, #36]	; 0x24

    inpos = 0;
    outpos = 0;
    arg = 0;
    varnamepos = 0;
    state = INITIAL;
    b030:	f04f 0a00 	mov.w	r10, #0
        }

//      dprintf("line = '%s'\n", buffer);

        /* tokenize the line */
        int argc = tokenize_command(buffer, &continuebuffer, outbuf, outbuflen,
    b034:	9203      	str	r2, [sp, #12]
    char varname[128];
    int varnamepos;

    inpos = 0;
    outpos = 0;
    arg = 0;
    b036:	46d3      	mov	r11, r10
    } state;
    char varname[128];
    int varnamepos;

    inpos = 0;
    outpos = 0;
    b038:	46d0      	mov	r8, r10
        COMMAND_SEP,
    } state;
    char varname[128];
    int varnamepos;

    inpos = 0;
    b03a:	46d1      	mov	r9, r10
    varnamepos = 0;
    state = INITIAL;
    *continuebuffer = NULL;

    for (;;) {
        char c = inbuffer[inpos];
    b03c:	9b03      	ldr	r3, [sp, #12]

//      dprintf(SPEW, "c 0x%hhx state %d arg %d inpos %d pos %d\n", c, state, arg, inpos, outpos);

        switch (state) {
    b03e:	f1aa 0002 	sub.w	r0, r10, #2
    varnamepos = 0;
    state = INITIAL;
    *continuebuffer = NULL;

    for (;;) {
        char c = inbuffer[inpos];
    b042:	f813 4009 	ldrb.w	r4, [r3, r9]

//      dprintf(SPEW, "c 0x%hhx state %d arg %d inpos %d pos %d\n", c, state, arg, inpos, outpos);

        switch (state) {
    b046:	2808      	cmp	r0, #8
    b048:	d809      	bhi.n	b05e <command_loop+0x92>
    b04a:	e8df f000 	tbb	[r15, r0]
    b04e:	1905      	.short	0x1905
    b050:	705a4428 	.word	0x705a4428
    b054:	9c87      	.short	0x9c87
    b056:	b4          	.byte	0xb4
    b057:	00          	.byte	0x00
                    state = COMMAND_SEP;
                else
                    state = TOKEN;
                break;
            case SPACE:
                state = IN_SPACE;
    b058:	f04f 0a03 	mov.w	r10, #3
    b05c:	e7ee      	b.n	b03c <command_loop+0x70>
//      dprintf(SPEW, "c 0x%hhx state %d arg %d inpos %d pos %d\n", c, state, arg, inpos, outpos);

        switch (state) {
            case INITIAL:
            case NEXT_FIELD:
                if (c == '\0')
    b05e:	2c00      	cmp	r4, #0
    b060:	f000 80b9 	beq.w	b1d6 <command_loop+0x20a>
                    goto done;
                if (isspace(c))
    b064:	4620      	mov	r0, r4
    b066:	f000 fe82 	bl	bd6e <isspace>
    b06a:	b110      	cbz	r0, b072 <command_loop+0xa6>
                    state = SPACE;
    b06c:	f04f 0a02 	mov.w	r10, #2
    b070:	e7e4      	b.n	b03c <command_loop+0x70>
                else if (c == ';')
                    state = COMMAND_SEP;
    b072:	2c3b      	cmp	r4, #59	; 0x3b
    b074:	bf14      	ite	ne
    b076:	f04f 0a04 	movne.w	r10, #4
    b07a:	f04f 0a0a 	moveq.w	r10, #10
    b07e:	e7dd      	b.n	b03c <command_loop+0x70>
                break;
            case SPACE:
                state = IN_SPACE;
                break;
            case IN_SPACE:
                if (c == '\0')
    b080:	2c00      	cmp	r4, #0
    b082:	f000 80a8 	beq.w	b1d6 <command_loop+0x20a>
                    goto done;
                if (c == ';') {
    b086:	2c3b      	cmp	r4, #59	; 0x3b
    b088:	d102      	bne.n	b090 <command_loop+0xc4>
                    state = COMMAND_SEP;
    b08a:	f04f 0a0a 	mov.w	r10, #10
    b08e:	e7d5      	b.n	b03c <command_loop+0x70>
                } else if (!isspace(c)) {
    b090:	4620      	mov	r0, r4
    b092:	f000 fe6c 	bl	bd6e <isspace>
    b096:	bb88      	cbnz	r0, b0fc <command_loop+0x130>
                    state = TOKEN;
    b098:	f04f 0a04 	mov.w	r10, #4
    b09c:	e7ce      	b.n	b03c <command_loop+0x70>
                    inpos++; // consume the space
                }
                break;
            case TOKEN:
                // start of a token
                DEBUG_ASSERT(c != '\0');
    b09e:	b93c      	cbnz	r4, b0b0 <command_loop+0xe4>
    b0a0:	4b75      	ldr	r3, [pc, #468]	; (b278 <command_loop+0x2ac>)
    b0a2:	4638      	mov	r0, r7
    b0a4:	9300      	str	r3, [sp, #0]
    b0a6:	4975      	ldr	r1, [pc, #468]	; (b27c <command_loop+0x2b0>)
    b0a8:	4a75      	ldr	r2, [pc, #468]	; (b280 <command_loop+0x2b4>)
    b0aa:	f44f 73ed 	mov.w	r3, #474	; 0x1da
    b0ae:	e031      	b.n	b114 <command_loop+0x148>
                if (c == '"') {
    b0b0:	2c22      	cmp	r4, #34	; 0x22
    b0b2:	d102      	bne.n	b0ba <command_loop+0xee>
                    // start of a quoted token
                    state = QUOTED_TOKEN;
    b0b4:	f04f 0a06 	mov.w	r10, #6
    b0b8:	e7c0      	b.n	b03c <command_loop+0x70>
                } else if (c == '$') {
    b0ba:	2c24      	cmp	r4, #36	; 0x24
    b0bc:	d102      	bne.n	b0c4 <command_loop+0xf8>
                    // start of a variable
                    state = VAR;
    b0be:	f04f 0a08 	mov.w	r10, #8
    b0c2:	e7bb      	b.n	b03c <command_loop+0x70>
                } else {
                    // regular, unquoted token
                    state = IN_TOKEN;
                    args[arg].str = &buffer[outpos];
    b0c4:	2114      	movs	r1, #20
    b0c6:	fb01 f10b 	mul.w	r1, r1, r11
    b0ca:	eb05 0008 	add.w	r0, r5, r8
    b0ce:	5070      	str	r0, [r6, r1]
                } else if (c == '$') {
                    // start of a variable
                    state = VAR;
                } else {
                    // regular, unquoted token
                    state = IN_TOKEN;
    b0d0:	f04f 0a05 	mov.w	r10, #5
    b0d4:	e7b2      	b.n	b03c <command_loop+0x70>
                    args[arg].str = &buffer[outpos];
                }
                break;
            case IN_TOKEN:
                if (c == '\0') {
    b0d6:	b35c      	cbz	r4, b130 <command_loop+0x164>
                    arg++;
                    goto done;
                }
                if (isspace(c) || c == ';') {
    b0d8:	4620      	mov	r0, r4
    b0da:	f000 fe48 	bl	bd6e <isspace>
    b0de:	f108 0e01 	add.w	r14, r8, #1
    b0e2:	b908      	cbnz	r0, b0e8 <command_loop+0x11c>
    b0e4:	2c3b      	cmp	r4, #59	; 0x3b
    b0e6:	d106      	bne.n	b0f6 <command_loop+0x12a>
                    arg++;
                    buffer[outpos] = 0;
    b0e8:	2400      	movs	r4, #0
    b0ea:	f805 4008 	strb.w	r4, [r5, r8]
                if (c == '\0') {
                    arg++;
                    goto done;
                }
                if (isspace(c) || c == ';') {
                    arg++;
    b0ee:	f10b 0b01 	add.w	r11, r11, #1
                    buffer[outpos] = 0;
                    outpos++;
    b0f2:	46f0      	mov	r8, r14
    b0f4:	e059      	b.n	b1aa <command_loop+0x1de>
                    /* are we out of tokens? */
                    if (arg == arg_count)
                        goto done;
                    state = NEXT_FIELD;
                } else {
                    buffer[outpos] = c;
    b0f6:	f805 4008 	strb.w	r4, [r5, r8]
                    outpos++;
    b0fa:	46f0      	mov	r8, r14
                    inpos++;
    b0fc:	f109 0901 	add.w	r9, r9, #1
    b100:	e79c      	b.n	b03c <command_loop+0x70>
                }
                break;
            case QUOTED_TOKEN:
                // start of a quoted token
                DEBUG_ASSERT(c == '"');
    b102:	2c22      	cmp	r4, #34	; 0x22
    b104:	d008      	beq.n	b118 <command_loop+0x14c>
    b106:	4b5f      	ldr	r3, [pc, #380]	; (b284 <command_loop+0x2b8>)
    b108:	495c      	ldr	r1, [pc, #368]	; (b27c <command_loop+0x2b0>)
    b10a:	4a5d      	ldr	r2, [pc, #372]	; (b280 <command_loop+0x2b4>)
    b10c:	9300      	str	r3, [sp, #0]
    b10e:	4638      	mov	r0, r7
    b110:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
    b114:	f000 f9ce 	bl	b4b4 <_panic>

                state = IN_QUOTED_TOKEN;
                args[arg].str = &buffer[outpos];
    b118:	2114      	movs	r1, #20
    b11a:	fb01 f10b 	mul.w	r1, r1, r11
    b11e:	eb05 0008 	add.w	r0, r5, r8
    b122:	5070      	str	r0, [r6, r1]
                inpos++; // consume the quote
    b124:	f109 0901 	add.w	r9, r9, #1
                break;
            case QUOTED_TOKEN:
                // start of a quoted token
                DEBUG_ASSERT(c == '"');

                state = IN_QUOTED_TOKEN;
    b128:	f04f 0a07 	mov.w	r10, #7
    b12c:	e786      	b.n	b03c <command_loop+0x70>
                args[arg].str = &buffer[outpos];
                inpos++; // consume the quote
                break;
            case IN_QUOTED_TOKEN:
                if (c == '\0') {
    b12e:	b914      	cbnz	r4, b136 <command_loop+0x16a>
                    arg++;
    b130:	f10b 0b01 	add.w	r11, r11, #1
    b134:	e04f      	b.n	b1d6 <command_loop+0x20a>
                    goto done;
                }
                if (c == '"') {
    b136:	2c22      	cmp	r4, #34	; 0x22
    b138:	d10b      	bne.n	b152 <command_loop+0x186>
                    arg++;
    b13a:	f10b 0b01 	add.w	r11, r11, #1
                    buffer[outpos] = 0;
    b13e:	2100      	movs	r1, #0
                    outpos++;
                    /* are we out of tokens? */
                    if (arg == arg_count)
    b140:	f1bb 0f10 	cmp.w	r11, #16
                    arg++;
                    goto done;
                }
                if (c == '"') {
                    arg++;
                    buffer[outpos] = 0;
    b144:	f805 1008 	strb.w	r1, [r5, r8]
                    outpos++;
    b148:	f108 0801 	add.w	r8, r8, #1
                    /* are we out of tokens? */
                    if (arg == arg_count)
    b14c:	d042      	beq.n	b1d4 <command_loop+0x208>
                        goto done;

                    state = NEXT_FIELD;
    b14e:	f04f 0a01 	mov.w	r10, #1
                }
                buffer[outpos] = c;
    b152:	f805 4008 	strb.w	r4, [r5, r8]
                outpos++;
    b156:	f108 0801 	add.w	r8, r8, #1
    b15a:	e7cf      	b.n	b0fc <command_loop+0x130>
                inpos++;
                break;
            case VAR:
                DEBUG_ASSERT(c == '$');
    b15c:	2c24      	cmp	r4, #36	; 0x24
    b15e:	d007      	beq.n	b170 <command_loop+0x1a4>
    b160:	4b49      	ldr	r3, [pc, #292]	; (b288 <command_loop+0x2bc>)
    b162:	4638      	mov	r0, r7
    b164:	9300      	str	r3, [sp, #0]
    b166:	4945      	ldr	r1, [pc, #276]	; (b27c <command_loop+0x2b0>)
    b168:	4a45      	ldr	r2, [pc, #276]	; (b280 <command_loop+0x2b4>)
    b16a:	f240 2316 	movw	r3, #534	; 0x216
    b16e:	e7d1      	b.n	b114 <command_loop+0x148>

                state = IN_VAR;
                args[arg].str = &buffer[outpos];
    b170:	2114      	movs	r1, #20
    b172:	fb01 f10b 	mul.w	r1, r1, r11
    b176:	eb05 0008 	add.w	r0, r5, r8
    b17a:	5070      	str	r0, [r6, r1]
                inpos++; // consume the dollar sign
    b17c:	f109 0901 	add.w	r9, r9, #1
                inpos++;
                break;
            case VAR:
                DEBUG_ASSERT(c == '$');

                state = IN_VAR;
    b180:	f04f 0a09 	mov.w	r10, #9
    b184:	e75a      	b.n	b03c <command_loop+0x70>

                // initialize the place to store the variable name
                varnamepos = 0;
                break;
            case IN_VAR:
                if (c == '\0' || isspace(c) || c == ';') {
    b186:	b12c      	cbz	r4, b194 <command_loop+0x1c8>
    b188:	4620      	mov	r0, r4
    b18a:	f000 fdf0 	bl	bd6e <isspace>
    b18e:	b908      	cbnz	r0, b194 <command_loop+0x1c8>
    b190:	2c3b      	cmp	r4, #59	; 0x3b
    b192:	d1b3      	bne.n	b0fc <command_loop+0x130>
#else
                    (void)varname[0]; // nuke a warning
                    int rc = -1;
#endif
                    if (rc < 0) {
                        buffer[outpos++] = '0';
    b194:	f108 0101 	add.w	r1, r8, #1
    b198:	2030      	movs	r0, #48	; 0x30
                        buffer[outpos++] = 0;
    b19a:	2400      	movs	r4, #0
#else
                    (void)varname[0]; // nuke a warning
                    int rc = -1;
#endif
                    if (rc < 0) {
                        buffer[outpos++] = '0';
    b19c:	f805 0008 	strb.w	r0, [r5, r8]
                        buffer[outpos++] = 0;
                    } else {
                        outpos += strlen(&buffer[outpos]) + 1;
                    }
                    arg++;
    b1a0:	f10b 0b01 	add.w	r11, r11, #1
                    (void)varname[0]; // nuke a warning
                    int rc = -1;
#endif
                    if (rc < 0) {
                        buffer[outpos++] = '0';
                        buffer[outpos++] = 0;
    b1a4:	546c      	strb	r4, [r5, r1]
    b1a6:	f108 0802 	add.w	r8, r8, #2
                    } else {
                        outpos += strlen(&buffer[outpos]) + 1;
                    }
                    arg++;
                    /* are we out of tokens? */
                    if (arg == arg_count)
    b1aa:	f1bb 0f10 	cmp.w	r11, #16
    b1ae:	d012      	beq.n	b1d6 <command_loop+0x20a>
                        goto done;

                    state = NEXT_FIELD;
    b1b0:	f04f 0a01 	mov.w	r10, #1
    b1b4:	e742      	b.n	b03c <command_loop+0x70>
                    inpos++;
                }
                break;
            case COMMAND_SEP:
                // we hit a ;, so terminate the command and pass the remainder of the command back in continuebuffer
                DEBUG_ASSERT(c == ';');
    b1b6:	2c3b      	cmp	r4, #59	; 0x3b
    b1b8:	d007      	beq.n	b1ca <command_loop+0x1fe>
    b1ba:	4b34      	ldr	r3, [pc, #208]	; (b28c <command_loop+0x2c0>)
    b1bc:	4638      	mov	r0, r7
    b1be:	9300      	str	r3, [sp, #0]
    b1c0:	492e      	ldr	r1, [pc, #184]	; (b27c <command_loop+0x2b0>)
    b1c2:	4a2f      	ldr	r2, [pc, #188]	; (b280 <command_loop+0x2b4>)
    b1c4:	f240 233d 	movw	r3, #573	; 0x23d
    b1c8:	e7a4      	b.n	b114 <command_loop+0x148>

                inpos++; // consume the ';'
                *continuebuffer = &inbuffer[inpos];
    b1ca:	9b03      	ldr	r3, [sp, #12]
                break;
            case COMMAND_SEP:
                // we hit a ;, so terminate the command and pass the remainder of the command back in continuebuffer
                DEBUG_ASSERT(c == ';');

                inpos++; // consume the ';'
    b1cc:	f109 0401 	add.w	r4, r9, #1
                *continuebuffer = &inbuffer[inpos];
    b1d0:	441c      	add	r4, r3
    b1d2:	e000      	b.n	b1d6 <command_loop+0x20a>
    inpos = 0;
    outpos = 0;
    arg = 0;
    varnamepos = 0;
    state = INITIAL;
    *continuebuffer = NULL;
    b1d4:	460c      	mov	r4, r1
                goto done;
        }
    }

done:
    buffer[outpos] = 0;
    b1d6:	2100      	movs	r1, #0
    b1d8:	f805 1008 	strb.w	r1, [r5, r8]
                                    args, MAX_NUM_ARGS);
        if (argc < 0) {
            if (showprompt)
                printf("syntax error\n");
            continue;
        } else if (argc == 0) {
    b1dc:	f1bb 0f00 	cmp.w	r11, #0
    b1e0:	f43f af0d 	beq.w	affe <command_loop+0x32>
//      dprintf("after tokenize: argc %d\n", argc);
//      for (int i = 0; i < argc; i++)
//          dprintf("%d: '%s'\n", i, args[i].str);

        /* convert the args */
        convert_args(argc, args);
    b1e4:	4658      	mov	r0, r11
    b1e6:	4631      	mov	r1, r6
    b1e8:	f7ff feb6 	bl	af58 <convert_args>

        /* try to match the command */
        const cmd *command = match_command(args[0].str, CMD_AVAIL_NORMAL);
    b1ec:	6830      	ldr	r0, [r6, #0]
    b1ee:	2101      	movs	r1, #1
    b1f0:	f7ff fe90 	bl	af14 <match_command>
        if (!command) {
    b1f4:	4603      	mov	r3, r0
    b1f6:	b938      	cbnz	r0, b208 <command_loop+0x23c>
            if (showprompt)
    b1f8:	9a04      	ldr	r2, [sp, #16]
    b1fa:	2a00      	cmp	r2, #0
    b1fc:	f43f aeff 	beq.w	affe <command_loop+0x32>
                printf("command not found\n");
    b200:	4823      	ldr	r0, [pc, #140]	; (b290 <command_loop+0x2c4>)
    b202:	f001 fb41 	bl	c888 <_printf>
    b206:	e6fa      	b.n	affe <command_loop+0x32>
            continue;
        }

        if (!locked)
    b208:	9a05      	ldr	r2, [sp, #20]
    b20a:	b93a      	cbnz	r2, b21c <command_loop+0x250>
            mutex_acquire(command_lock);
    b20c:	4a21      	ldr	r2, [pc, #132]	; (b294 <command_loop+0x2c8>)
    b20e:	f04f 31ff 	mov.w	r1, #4294967295
    b212:	6810      	ldr	r0, [r2, #0]
    b214:	9302      	str	r3, [sp, #8]
    b216:	f7f9 f9a5 	bl	4564 <mutex_acquire_timeout>
    b21a:	9b02      	ldr	r3, [sp, #8]

        abort_script = false;
    b21c:	f8df a084 	ldr.w	r10, [r15, #132]	; b2a4 <command_loop+0x2d8>
    b220:	2200      	movs	r2, #0
    b222:	f88a 2000 	strb.w	r2, [r10]
        lastresult = command->cmd_callback(argc, args);
    b226:	f8d3 c008 	ldr.w	r12, [r3, #8]
    b22a:	4658      	mov	r0, r11
    b22c:	9202      	str	r2, [sp, #8]
    b22e:	4631      	mov	r1, r6
    b230:	47e0      	blx	r12
    b232:	4b19      	ldr	r3, [pc, #100]	; (b298 <command_loop+0x2cc>)
#endif

        // someone must have aborted the current script
        if (abort_script)
            exit = true;
        abort_script = false;
    b234:	9a02      	ldr	r2, [sp, #8]

        if (!locked)
            mutex_acquire(command_lock);

        abort_script = false;
        lastresult = command->cmd_callback(argc, args);
    b236:	6018      	str	r0, [r3, #0]
        // stuff the result in an environment var
        env_set_int("?", lastresult, true);
#endif

        // someone must have aborted the current script
        if (abort_script)
    b238:	f89a 3000 	ldrb.w	r3, [r10]
            exit = true;
        abort_script = false;
    b23c:	f88a 2000 	strb.w	r2, [r10]

        if (!locked)
    b240:	9a05      	ldr	r2, [sp, #20]
    b242:	b92a      	cbnz	r2, b250 <command_loop+0x284>
            mutex_release(command_lock);
    b244:	4a13      	ldr	r2, [pc, #76]	; (b294 <command_loop+0x2c8>)
    b246:	6810      	ldr	r0, [r2, #0]
    b248:	9302      	str	r3, [sp, #8]
    b24a:	f7f9 f9db 	bl	4604 <mutex_release>
    b24e:	9b02      	ldr	r3, [sp, #8]
        goto no_mem_error;
    }

    exit = false;
    continuebuffer = NULL;
    while (!exit) {
    b250:	2b00      	cmp	r3, #0
    b252:	f43f aed4 	beq.w	affe <command_loop+0x32>
    b256:	e6df      	b.n	b018 <command_loop+0x4c>
no_mem_error:
    if (outbuf)
        free(outbuf);

    if (args)
        free(args);
    b258:	4630      	mov	r0, r6
    b25a:	f000 faf3 	bl	b844 <free>

    dprintf(INFO, "%s: not enough memory\n", __func__);
    b25e:	480f      	ldr	r0, [pc, #60]	; (b29c <command_loop+0x2d0>)
    b260:	490f      	ldr	r1, [pc, #60]	; (b2a0 <command_loop+0x2d4>)
    b262:	f001 fb11 	bl	c888 <_printf>
    return ERR_NO_MEMORY;
    b266:	f06f 0004 	mvn.w	r0, #4
}
    b26a:	b00b      	add	sp, #44	; 0x2c
    b26c:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    b270:	00017a13 	.word	0x00017a13
    b274:	2000006c 	.word	0x2000006c
    b278:	00017a2c 	.word	0x00017a2c
    b27c:	0001076e 	.word	0x0001076e
    b280:	00017a16 	.word	0x00017a16
    b284:	00017a36 	.word	0x00017a36
    b288:	00017a3f 	.word	0x00017a3f
    b28c:	00017a48 	.word	0x00017a48
    b290:	00017a51 	.word	0x00017a51
    b294:	20000974 	.word	0x20000974
    b298:	2000095c 	.word	0x2000095c
    b29c:	00017a64 	.word	0x00017a64
    b2a0:	00017920 	.word	0x00017920
    b2a4:	20000968 	.word	0x20000968

0000b2a8 <console_run_script_etc>:

    return bufpos;
}

static int console_run_script_etc(const char *string, bool locked)
{
    b2a8:	b530      	push	{r4, r5, r14}
    b2aa:	b085      	sub	sp, #20
    struct line_read_struct lineread;

    lineread.string = string;
    b2ac:	9000      	str	r0, [sp, #0]
    lineread.pos = 0;
    b2ae:	2400      	movs	r4, #0
    lineread.buffer = malloc(LINE_LEN);
    b2b0:	2080      	movs	r0, #128	; 0x80

    return bufpos;
}

static int console_run_script_etc(const char *string, bool locked)
{
    b2b2:	460d      	mov	r5, r1
    struct line_read_struct lineread;

    lineread.string = string;
    lineread.pos = 0;
    b2b4:	9401      	str	r4, [sp, #4]
    lineread.buffer = malloc(LINE_LEN);
    b2b6:	f000 fa35 	bl	b724 <malloc>
    lineread.buflen = LINE_LEN;
    b2ba:	2380      	movs	r3, #128	; 0x80
{
    struct line_read_struct lineread;

    lineread.string = string;
    lineread.pos = 0;
    lineread.buffer = malloc(LINE_LEN);
    b2bc:	9002      	str	r0, [sp, #8]
    lineread.buflen = LINE_LEN;
    b2be:	9303      	str	r3, [sp, #12]

    command_loop(&fetch_next_line, (void *)&lineread, false, locked);
    b2c0:	4669      	mov	r1, r13
    b2c2:	462b      	mov	r3, r5
    b2c4:	4622      	mov	r2, r4
    b2c6:	4805      	ldr	r0, [pc, #20]	; (b2dc <console_run_script_etc+0x34>)
    b2c8:	f7ff fe80 	bl	afcc <command_loop>

    free(lineread.buffer);
    b2cc:	9802      	ldr	r0, [sp, #8]
    b2ce:	f000 fab9 	bl	b844 <free>

    return lastresult;
}
    b2d2:	4b03      	ldr	r3, [pc, #12]	; (b2e0 <console_run_script_etc+0x38>)
    b2d4:	6818      	ldr	r0, [r3, #0]
    b2d6:	b005      	add	sp, #20
    b2d8:	bd30      	pop	{r4, r5, r15}
    b2da:	bf00      	nop
    b2dc:	0000ac1d 	.word	0x0000ac1d
    b2e0:	2000095c 	.word	0x2000095c

0000b2e4 <console_start>:
{
    abort_script = true;
}

void console_start(void)
{
    b2e4:	b510      	push	{r4, r14}
    debug_buffer = malloc(LINE_LEN);
    b2e6:	2080      	movs	r0, #128	; 0x80
    b2e8:	f000 fa1c 	bl	b724 <malloc>
    b2ec:	4c0a      	ldr	r4, [pc, #40]	; (b318 <console_start+0x34>)
    b2ee:	6020      	str	r0, [r4, #0]

    dprintf(INFO, "entering main console loop\n");
    b2f0:	480a      	ldr	r0, [pc, #40]	; (b31c <console_start+0x38>)
    b2f2:	f001 fac9 	bl	c888 <_printf>


    while (command_loop(&read_debug_line, NULL, true, false) == NO_ERROR)
    b2f6:	2100      	movs	r1, #0
    b2f8:	4809      	ldr	r0, [pc, #36]	; (b320 <console_start+0x3c>)
    b2fa:	2201      	movs	r2, #1
    b2fc:	460b      	mov	r3, r1
    b2fe:	f7ff fe65 	bl	afcc <command_loop>
    b302:	2800      	cmp	r0, #0
    b304:	d0f7      	beq.n	b2f6 <console_start+0x12>
        ;

    dprintf(INFO, "exiting main console loop\n");
    b306:	4807      	ldr	r0, [pc, #28]	; (b324 <console_start+0x40>)
    b308:	f001 fabe 	bl	c888 <_printf>

    free (debug_buffer);
    b30c:	6820      	ldr	r0, [r4, #0]
}
    b30e:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
    while (command_loop(&read_debug_line, NULL, true, false) == NO_ERROR)
        ;

    dprintf(INFO, "exiting main console loop\n");

    free (debug_buffer);
    b312:	f000 ba97 	b.w	b844 <free>
    b316:	bf00      	nop
    b318:	20000964 	.word	0x20000964
    b31c:	00017a7b 	.word	0x00017a7b
    b320:	0000ad59 	.word	0x0000ad59
    b324:	00017a97 	.word	0x00017a97

0000b328 <console_run_script_locked>:
    return console_run_script_etc(string, false);
}

int console_run_script_locked(const char *string)
{
    return console_run_script_etc(string, true);
    b328:	2101      	movs	r1, #1
    b32a:	f7ff bfbd 	b.w	b2a8 <console_run_script_etc>
	...

0000b330 <cmd_repeat>:
}
#endif  // CONSOLE_ENABLE_HISTORY

#if CONSOLE_ENABLE_REPEAT
static int cmd_repeat(int argc, const cmd_args* argv)
{
    b330:	e92d 41f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r14}
    if (argc < 4) goto usage;
    b334:	2803      	cmp	r0, #3
}
#endif  // CONSOLE_ENABLE_HISTORY

#if CONSOLE_ENABLE_REPEAT
static int cmd_repeat(int argc, const cmd_args* argv)
{
    b336:	b0ac      	sub	sp, #176	; 0xb0
    if (argc < 4) goto usage;
    b338:	dd4a      	ble.n	b3d0 <cmd_repeat+0xa0>
    int times = argv[1].i;
    b33a:	6a0f      	ldr	r7, [r1, #32]
    int delay = argv[2].i;
    b33c:	f8d1 8034 	ldr.w	r8, [r1, #52]	; 0x34
    if (times <= 0) goto usage;
    b340:	2f00      	cmp	r7, #0
    b342:	dd45      	ble.n	b3d0 <cmd_repeat+0xa0>
    if (delay < 0) goto usage;
    b344:	f1b8 0f00 	cmp.w	r8, #0
    b348:	db42      	blt.n	b3d0 <cmd_repeat+0xa0>
    b34a:	2503      	movs	r5, #3
    b34c:	2300      	movs	r3, #0
    for (int i = 3; i < argc; ++i) {
        if (i != 3) {
            // Add a space before all args but the first.
            line[idx++] = ' ';
        }
        line[idx++] = '"';
    b34e:	aa2c      	add	r2, sp, #176	; 0xb0
    b350:	2422      	movs	r4, #34	; 0x22
    b352:	441a      	add	r2, r3
    b354:	f802 4cb0 	strb.w	r4, [r2, #-176]
    b358:	2214      	movs	r2, #20
    b35a:	436a      	muls	r2, r5
        for (const char* src = argv[i].str; *src != '\0'; src++) {
    b35c:	f851 e002 	ldr.w	r14, [r1, r2]
    for (int i = 3; i < argc; ++i) {
        if (i != 3) {
            // Add a space before all args but the first.
            line[idx++] = ' ';
        }
        line[idx++] = '"';
    b360:	1c5c      	adds	r4, r3, #1
    b362:	ebc3 020e 	rsb	r2, r3, r14
    b366:	4422      	add	r2, r4
        for (const char* src = argv[i].str; *src != '\0'; src++) {
    b368:	f812 6c01 	ldrb.w	r6, [r2, #-1]
    b36c:	1c62      	adds	r2, r4, #1
    b36e:	b11e      	cbz	r6, b378 <cmd_repeat+0x48>
            line[idx++] = *src;
    b370:	f80d 6004 	strb.w	r6, [r13, r4]
    b374:	4614      	mov	r4, r2
    b376:	e7f4      	b.n	b362 <cmd_repeat+0x32>
        }
        line[idx++] = '"';
    b378:	4613      	mov	r3, r2
    b37a:	aa2c      	add	r2, sp, #176	; 0xb0
    b37c:	4422      	add	r2, r4
    b37e:	f04f 0e22 	mov.w	r14, #34	; 0x22
    // Worst case line length with quoting.
    char line[LINE_LEN + MAX_NUM_ARGS * 3];

    // Paste together all arguments, and quote them.
    int idx = 0;
    for (int i = 3; i < argc; ++i) {
    b382:	3501      	adds	r5, #1
        }
        line[idx++] = '"';
        for (const char* src = argv[i].str; *src != '\0'; src++) {
            line[idx++] = *src;
        }
        line[idx++] = '"';
    b384:	f802 ecb0 	strb.w	r14, [r2, #-176]
    // Worst case line length with quoting.
    char line[LINE_LEN + MAX_NUM_ARGS * 3];

    // Paste together all arguments, and quote them.
    int idx = 0;
    for (int i = 3; i < argc; ++i) {
    b388:	4285      	cmp	r5, r0
    b38a:	aa2c      	add	r2, sp, #176	; 0xb0
    b38c:	441a      	add	r2, r3
    b38e:	d006      	beq.n	b39e <cmd_repeat+0x6e>
        if (i != 3) {
    b390:	2d03      	cmp	r5, #3
    b392:	d0dc      	beq.n	b34e <cmd_repeat+0x1e>
            // Add a space before all args but the first.
            line[idx++] = ' ';
    b394:	2320      	movs	r3, #32
    b396:	f802 3cb0 	strb.w	r3, [r2, #-176]
    b39a:	1ca3      	adds	r3, r4, #2
    b39c:	e7d7      	b.n	b34e <cmd_repeat+0x1e>
        for (const char* src = argv[i].str; *src != '\0'; src++) {
            line[idx++] = *src;
        }
        line[idx++] = '"';
    }
    line[idx] = '\0';
    b39e:	f802 6cb0 	strb.w	r6, [r2, #-176]

    for (int i = 0; i < times; ++i) {
    b3a2:	4634      	mov	r4, r6
        printf("[%d/%d]\n", i + 1, times);
    b3a4:	3401      	adds	r4, #1
    b3a6:	4621      	mov	r1, r4
    b3a8:	463a      	mov	r2, r7
    b3aa:	480e      	ldr	r0, [pc, #56]	; (b3e4 <cmd_repeat+0xb4>)
    b3ac:	f001 fa6c 	bl	c888 <_printf>
        int result = console_run_script_locked(line);
    b3b0:	4668      	mov	r0, r13
    b3b2:	f7ff ffb9 	bl	b328 <console_run_script_locked>
        if (result != 0) {
    b3b6:	4605      	mov	r5, r0
    b3b8:	b120      	cbz	r0, b3c4 <cmd_repeat+0x94>
            printf("terminating repeat loop, command exited with status %d\n",
    b3ba:	4629      	mov	r1, r5
    b3bc:	480a      	ldr	r0, [pc, #40]	; (b3e8 <cmd_repeat+0xb8>)
    b3be:	f001 fa63 	bl	c888 <_printf>
    b3c2:	e00b      	b.n	b3dc <cmd_repeat+0xac>
                    result);
            return result;
        }
        thread_sleep(delay);
    b3c4:	4640      	mov	r0, r8
    b3c6:	f7f9 fd09 	bl	4ddc <thread_sleep>
        }
        line[idx++] = '"';
    }
    line[idx] = '\0';

    for (int i = 0; i < times; ++i) {
    b3ca:	42bc      	cmp	r4, r7
    b3cc:	d1ea      	bne.n	b3a4 <cmd_repeat+0x74>
    b3ce:	e005      	b.n	b3dc <cmd_repeat+0xac>
        thread_sleep(delay);
    }
    return NO_ERROR;

usage:
    printf("Usage: repeat <times> <delay in ms> <cmd> [args..]\n");
    b3d0:	4806      	ldr	r0, [pc, #24]	; (b3ec <cmd_repeat+0xbc>)
    b3d2:	f001 fa59 	bl	c888 <_printf>
    return ERR_INVALID_ARGS;
    b3d6:	f06f 0007 	mvn.w	r0, #7
    b3da:	e000      	b.n	b3de <cmd_repeat+0xae>
                    result);
            return result;
        }
        thread_sleep(delay);
    }
    return NO_ERROR;
    b3dc:	4628      	mov	r0, r5

usage:
    printf("Usage: repeat <times> <delay in ms> <cmd> [args..]\n");
    return ERR_INVALID_ARGS;
}
    b3de:	b02c      	add	sp, #176	; 0xb0
    b3e0:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    b3e4:	00017ab2 	.word	0x00017ab2
    b3e8:	00017abb 	.word	0x00017abb
    b3ec:	00017af3 	.word	0x00017af3

0000b3f0 <console_register_commands>:
    else
        return NULL;
}

void console_register_commands(cmd_block *block)
{
    b3f0:	b507      	push	{r0, r1, r2, r14}
    DEBUG_ASSERT(block);
    b3f2:	b938      	cbnz	r0, b404 <console_register_commands+0x14>
    b3f4:	4b0c      	ldr	r3, [pc, #48]	; (b428 <console_register_commands+0x38>)
    b3f6:	4670      	mov	r0, r14
    b3f8:	9300      	str	r3, [sp, #0]
    b3fa:	490c      	ldr	r1, [pc, #48]	; (b42c <console_register_commands+0x3c>)
    b3fc:	4a0c      	ldr	r2, [pc, #48]	; (b430 <console_register_commands+0x40>)
    b3fe:	f44f 734b 	mov.w	r3, #812	; 0x32c
    b402:	e008      	b.n	b416 <console_register_commands+0x26>
    DEBUG_ASSERT(block->next == NULL);
    b404:	6801      	ldr	r1, [r0, #0]
    b406:	b141      	cbz	r1, b41a <console_register_commands+0x2a>
    b408:	4b0a      	ldr	r3, [pc, #40]	; (b434 <console_register_commands+0x44>)
    b40a:	4908      	ldr	r1, [pc, #32]	; (b42c <console_register_commands+0x3c>)
    b40c:	4a08      	ldr	r2, [pc, #32]	; (b430 <console_register_commands+0x40>)
    b40e:	9300      	str	r3, [sp, #0]
    b410:	4670      	mov	r0, r14
    b412:	f240 332d 	movw	r3, #813	; 0x32d
    b416:	f000 f84d 	bl	b4b4 <_panic>

    block->next = command_list;
    b41a:	4a07      	ldr	r2, [pc, #28]	; (b438 <console_register_commands+0x48>)
    b41c:	6811      	ldr	r1, [r2, #0]
    command_list = block;
    b41e:	6010      	str	r0, [r2, #0]
void console_register_commands(cmd_block *block)
{
    DEBUG_ASSERT(block);
    DEBUG_ASSERT(block->next == NULL);

    block->next = command_list;
    b420:	6001      	str	r1, [r0, #0]
    command_list = block;
}
    b422:	b003      	add	sp, #12
    b424:	f85d fb04 	ldr.w	r15, [r13], #4
    b428:	00017b27 	.word	0x00017b27
    b42c:	0001076e 	.word	0x0001076e
    b430:	00017a16 	.word	0x00017a16
    b434:	00017b2d 	.word	0x00017b2d
    b438:	20000970 	.word	0x20000970

0000b43c <console_init>:
#endif
#endif
STATIC_COMMAND_END(help);

int console_init(void)
{
    b43c:	b510      	push	{r4, r14}
    LTRACE_ENTRY;

    command_lock = calloc(sizeof(mutex_t), 1);
    b43e:	2101      	movs	r1, #1
    b440:	201c      	movs	r0, #28
    b442:	f000 f9b1 	bl	b7a8 <calloc>
    b446:	4b0c      	ldr	r3, [pc, #48]	; (b478 <console_init+0x3c>)
    mutex_init(command_lock);

    /* add all the statically defined commands to the list */
    cmd_block *block;
    for (block = &__commands_start; block != &__commands_end; block++) {
    b448:	4c0c      	ldr	r4, [pc, #48]	; (b47c <console_init+0x40>)

int console_init(void)
{
    LTRACE_ENTRY;

    command_lock = calloc(sizeof(mutex_t), 1);
    b44a:	6018      	str	r0, [r3, #0]
    mutex_init(command_lock);
    b44c:	f7f9 f838 	bl	44c0 <mutex_init>

    /* add all the statically defined commands to the list */
    cmd_block *block;
    for (block = &__commands_start; block != &__commands_end; block++) {
    b450:	4b0b      	ldr	r3, [pc, #44]	; (b480 <console_init+0x44>)
    b452:	429c      	cmp	r4, r3
    b454:	d004      	beq.n	b460 <console_init+0x24>
        console_register_commands(block);
    b456:	4620      	mov	r0, r4
    b458:	f7ff ffca 	bl	b3f0 <console_register_commands>
    command_lock = calloc(sizeof(mutex_t), 1);
    mutex_init(command_lock);

    /* add all the statically defined commands to the list */
    cmd_block *block;
    for (block = &__commands_start; block != &__commands_end; block++) {
    b45c:	340c      	adds	r4, #12
    b45e:	e7f7      	b.n	b450 <console_init+0x14>
}

static void init_history(void)
{
    /* allocate and set up the history buffer */
    history = calloc(1, HISTORY_LEN * LINE_LEN);
    b460:	f44f 6100 	mov.w	r1, #2048	; 0x800
    b464:	2001      	movs	r0, #1
    b466:	f000 f99f 	bl	b7a8 <calloc>
    b46a:	4b06      	ldr	r3, [pc, #24]	; (b484 <console_init+0x48>)
    b46c:	6018      	str	r0, [r3, #0]
    history_next = 0;
    b46e:	4b06      	ldr	r3, [pc, #24]	; (b488 <console_init+0x4c>)
    b470:	2000      	movs	r0, #0
    b472:	6018      	str	r0, [r3, #0]
#if CONSOLE_ENABLE_HISTORY
    init_history();
#endif

    return 0;
}
    b474:	bd10      	pop	{r4, r15}
    b476:	bf00      	nop
    b478:	20000974 	.word	0x20000974
    b47c:	20000084 	.word	0x20000084
    b480:	20000120 	.word	0x20000120
    b484:	20000960 	.word	0x20000960
    b488:	2000096c 	.word	0x2000096c

0000b48c <spin>:
#include <platform.h>
#include <platform/debug.h>
#include <kernel/spinlock.h>

void spin(uint32_t usecs)
{
    b48c:	e92d 4130 	stmdb	r13!, {r4, r5, r8, r14}
    b490:	4680      	mov	r8, r0
    lk_bigtime_t start = current_time_hires();
    b492:	f7f8 fd03 	bl	3e9c <current_time_hires>
    b496:	4604      	mov	r4, r0
    b498:	460d      	mov	r5, r1

    while ((current_time_hires() - start) < usecs)
    b49a:	f7f8 fcff 	bl	3e9c <current_time_hires>
    b49e:	4642      	mov	r2, r8
    b4a0:	1b00      	subs	r0, r0, r4
    b4a2:	eb61 0105 	sbc.w	r1, r1, r5
    b4a6:	2300      	movs	r3, #0
    b4a8:	4299      	cmp	r1, r3
    b4aa:	bf08      	it	eq
    b4ac:	4290      	cmpeq	r0, r2
    b4ae:	d3f4      	bcc.n	b49a <spin+0xe>
        ;
}
    b4b0:	e8bd 8130 	ldmia.w	r13!, {r4, r5, r8, r15}

0000b4b4 <_panic>:

void _panic(void *caller, const char *fmt, ...)
{
    b4b4:	b40e      	push	{r1, r2, r3}
    b4b6:	b503      	push	{r0, r1, r14}
    b4b8:	ac03      	add	r4, sp, #12
    b4ba:	f854 5b04 	ldr.w	r5, [r4], #4
    b4be:	4601      	mov	r1, r0
    printf("panic (caller %p): ", caller);
    b4c0:	4805      	ldr	r0, [pc, #20]	; (b4d8 <_panic+0x24>)
    b4c2:	f001 f9e1 	bl	c888 <_printf>

    va_list ap;
    va_start(ap, fmt);
    vprintf(fmt, ap);
    b4c6:	4621      	mov	r1, r4
    b4c8:	4628      	mov	r0, r5
void _panic(void *caller, const char *fmt, ...)
{
    printf("panic (caller %p): ", caller);

    va_list ap;
    va_start(ap, fmt);
    b4ca:	9401      	str	r4, [sp, #4]
    vprintf(fmt, ap);
    b4cc:	f001 f9ec 	bl	c8a8 <_vprintf>
    va_end(ap);

    platform_halt(HALT_ACTION_HALT, HALT_REASON_SW_PANIC);
    b4d0:	2000      	movs	r0, #0
    b4d2:	2109      	movs	r1, #9
    b4d4:	f7fe f936 	bl	9744 <platform_halt>
    b4d8:	00017bc7 	.word	0x00017bc7

0000b4dc <hexdump>:

    return &panic_fd;
}

void hexdump(const void *ptr, size_t len)
{
    b4dc:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    b4e0:	4681      	mov	r9, r0
    b4e2:	b085      	sub	sp, #20
    b4e4:	4688      	mov	r8, r1
    addr_t address = (addr_t)ptr;
    b4e6:	4606      	mov	r6, r0
    size_t count;

    for (count = 0 ; count < len; count += 16) {
    b4e8:	2400      	movs	r4, #0
    b4ea:	4544      	cmp	r4, r8
    b4ec:	d246      	bcs.n	b57c <hexdump+0xa0>
            uint8_t  cbuf[16];
        } u;
        size_t s = ROUNDUP(MIN(len - count, 16), 4);
        size_t i;

        printf("0x%08lx: ", address);
    b4ee:	4825      	ldr	r0, [pc, #148]	; (b584 <hexdump+0xa8>)
    b4f0:	4631      	mov	r1, r6
    b4f2:	f001 f9c9 	bl	c888 <_printf>
    b4f6:	ebc4 0a08 	rsb	r10, r4, r8
    for (count = 0 ; count < len; count += 16) {
        union {
            uint32_t buf[4];
            uint8_t  cbuf[16];
        } u;
        size_t s = ROUNDUP(MIN(len - count, 16), 4);
    b4fa:	f1ba 0f10 	cmp.w	r10, #16
    b4fe:	bf28      	it	cs
    b500:	f04f 0a10 	movcs.w	r10, #16
    b504:	f10a 0a03 	add.w	r10, r10, #3
    b508:	f02a 0a03 	bic.w	r10, r10, #3
        size_t i;

        printf("0x%08lx: ", address);
        for (i = 0; i < s / 4; i++) {
    b50c:	ea4f 059a 	mov.w	r5, r10, lsr #2
    b510:	f1a6 0b04 	sub.w	r11, r6, #4
    b514:	2700      	movs	r7, #0
    b516:	42af      	cmp	r7, r5
    b518:	d00c      	beq.n	b534 <hexdump+0x58>
    b51a:	466b      	mov	r3, r13
            u.buf[i] = ((const uint32_t *)address)[i];
    b51c:	f85b 1f04 	ldr.w	r1, [r11, #4]!
    b520:	ebc9 0303 	rsb	r3, r9, r3
    b524:	1b1b      	subs	r3, r3, r4
    b526:	f843 100b 	str.w	r1, [r3, r11]
            printf("%08x ", u.buf[i]);
    b52a:	4817      	ldr	r0, [pc, #92]	; (b588 <hexdump+0xac>)
    b52c:	f001 f9ac 	bl	c888 <_printf>
        } u;
        size_t s = ROUNDUP(MIN(len - count, 16), 4);
        size_t i;

        printf("0x%08lx: ", address);
        for (i = 0; i < s / 4; i++) {
    b530:	3701      	adds	r7, #1
    b532:	e7f0      	b.n	b516 <hexdump+0x3a>
            u.buf[i] = ((const uint32_t *)address)[i];
            printf("%08x ", u.buf[i]);
        }
        for (; i < 4; i++) {
    b534:	2d04      	cmp	r5, #4
    b536:	d004      	beq.n	b542 <hexdump+0x66>
            printf("         ");
    b538:	4814      	ldr	r0, [pc, #80]	; (b58c <hexdump+0xb0>)
    b53a:	f001 f9a5 	bl	c888 <_printf>
        printf("0x%08lx: ", address);
        for (i = 0; i < s / 4; i++) {
            u.buf[i] = ((const uint32_t *)address)[i];
            printf("%08x ", u.buf[i]);
        }
        for (; i < 4; i++) {
    b53e:	3501      	adds	r5, #1
    b540:	e7f8      	b.n	b534 <hexdump+0x58>
            printf("         ");
        }
        printf("|");
    b542:	4813      	ldr	r0, [pc, #76]	; (b590 <hexdump+0xb4>)
    b544:	f001 f9a0 	bl	c888 <_printf>

        for (i=0; i < 16; i++) {
    b548:	2500      	movs	r5, #0
            char c = u.cbuf[i];
            if (i < s && isprint(c)) {
    b54a:	4555      	cmp	r5, r10
            printf("         ");
        }
        printf("|");

        for (i=0; i < 16; i++) {
            char c = u.cbuf[i];
    b54c:	f81d 7005 	ldrb.w	r7, [r13, r5]
            if (i < s && isprint(c)) {
    b550:	d208      	bcs.n	b564 <hexdump+0x88>
    b552:	4638      	mov	r0, r7
    b554:	f000 fc22 	bl	bd9c <isprint>
    b558:	b120      	cbz	r0, b564 <hexdump+0x88>
                printf("%c", c);
    b55a:	4639      	mov	r1, r7
    b55c:	480d      	ldr	r0, [pc, #52]	; (b594 <hexdump+0xb8>)
    b55e:	f001 f993 	bl	c888 <_printf>
    b562:	e002      	b.n	b56a <hexdump+0x8e>
            } else {
                printf(".");
    b564:	480c      	ldr	r0, [pc, #48]	; (b598 <hexdump+0xbc>)
    b566:	f001 f98f 	bl	c888 <_printf>
        for (; i < 4; i++) {
            printf("         ");
        }
        printf("|");

        for (i=0; i < 16; i++) {
    b56a:	3501      	adds	r5, #1
    b56c:	2d10      	cmp	r5, #16
    b56e:	d1ec      	bne.n	b54a <hexdump+0x6e>
                printf("%c", c);
            } else {
                printf(".");
            }
        }
        printf("|\n");
    b570:	480a      	ldr	r0, [pc, #40]	; (b59c <hexdump+0xc0>)
    b572:	f001 f989 	bl	c888 <_printf>
        address += 16;
    b576:	3610      	adds	r6, #16
void hexdump(const void *ptr, size_t len)
{
    addr_t address = (addr_t)ptr;
    size_t count;

    for (count = 0 ; count < len; count += 16) {
    b578:	3410      	adds	r4, #16
    b57a:	e7b6      	b.n	b4ea <hexdump+0xe>
            }
        }
        printf("|\n");
        address += 16;
    }
}
    b57c:	b005      	add	sp, #20
    b57e:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    b582:	bf00      	nop
    b584:	00012bd8 	.word	0x00012bd8
    b588:	00012be2 	.word	0x00012be2
    b58c:	00017bdb 	.word	0x00017bdb
    b590:	00017be5 	.word	0x00017be5
    b594:	0000e465 	.word	0x0000e465
    b598:	00012c34 	.word	0x00012c34
    b59c:	00017be7 	.word	0x00017be7

0000b5a0 <hexdump8_ex>:

void hexdump8_ex(const void *ptr, size_t len, uint64_t disp_addr)
{
    b5a0:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    b5a4:	4614      	mov	r4, r2
    addr_t address = (addr_t)ptr;
    size_t count;
    size_t i;
    const char *addr_fmt = ((disp_addr + len) > 0xFFFFFFFF)
    b5a6:	1852      	adds	r2, r2, r1
        address += 16;
    }
}

void hexdump8_ex(const void *ptr, size_t len, uint64_t disp_addr)
{
    b5a8:	461d      	mov	r5, r3
    addr_t address = (addr_t)ptr;
    size_t count;
    size_t i;
    const char *addr_fmt = ((disp_addr + len) > 0xFFFFFFFF)
    b5aa:	f143 0300 	adc.w	r3, r3, #0
                           ? "0x%016llx: "
                           : "0x%08llx: ";
    b5ae:	2b01      	cmp	r3, #1
    b5b0:	bf08      	it	eq
    b5b2:	2a00      	cmpeq	r2, #0
    b5b4:	4b26      	ldr	r3, [pc, #152]	; (b650 <hexdump8_ex+0xb0>)
    b5b6:	4a27      	ldr	r2, [pc, #156]	; (b654 <hexdump8_ex+0xb4>)
        address += 16;
    }
}

void hexdump8_ex(const void *ptr, size_t len, uint64_t disp_addr)
{
    b5b8:	b085      	sub	sp, #20
    b5ba:	9003      	str	r0, [sp, #12]
    b5bc:	4688      	mov	r8, r1
    addr_t address = (addr_t)ptr;
    size_t count;
    size_t i;
    const char *addr_fmt = ((disp_addr + len) > 0xFFFFFFFF)
                           ? "0x%016llx: "
                           : "0x%08llx: ";
    b5be:	bf34      	ite	cc
    b5c0:	4693      	movcc	r11, r2
    b5c2:	469b      	movcs	r11, r3

    for (count = 0 ; count < len; count += 16) {
    b5c4:	2600      	movs	r6, #0
    b5c6:	f8dd a00c 	ldr.w	r10, [r13, #12]
    b5ca:	4546      	cmp	r6, r8
    b5cc:	44b2      	add	r10, r6
    b5ce:	d23b      	bcs.n	b648 <hexdump8_ex+0xa8>
        printf(addr_fmt, disp_addr + count);
    b5d0:	19a2      	adds	r2, r4, r6
    b5d2:	4658      	mov	r0, r11
    b5d4:	f145 0300 	adc.w	r3, r5, #0
    b5d8:	f001 f956 	bl	c888 <_printf>

        for (i=0; i < MIN(len - count, 16); i++) {
    b5dc:	f04f 0900 	mov.w	r9, #0
    b5e0:	ebc6 0708 	rsb	r7, r6, r8
    b5e4:	2f10      	cmp	r7, #16
    b5e6:	bf28      	it	cs
    b5e8:	2710      	movcs	r7, #16
    b5ea:	45b9      	cmp	r9, r7
    b5ec:	d207      	bcs.n	b5fe <hexdump8_ex+0x5e>
            printf("%02hhx ", *(const uint8_t *)(address + i));
    b5ee:	f819 100a 	ldrb.w	r1, [r9, r10]
    b5f2:	4819      	ldr	r0, [pc, #100]	; (b658 <hexdump8_ex+0xb8>)
    b5f4:	f001 f948 	bl	c888 <_printf>
                           : "0x%08llx: ";

    for (count = 0 ; count < len; count += 16) {
        printf(addr_fmt, disp_addr + count);

        for (i=0; i < MIN(len - count, 16); i++) {
    b5f8:	f109 0901 	add.w	r9, r9, #1
    b5fc:	e7f0      	b.n	b5e0 <hexdump8_ex+0x40>
            printf("%02hhx ", *(const uint8_t *)(address + i));
        }

        for (; i < 16; i++) {
    b5fe:	f1b9 0f0f 	cmp.w	r9, #15
    b602:	d805      	bhi.n	b610 <hexdump8_ex+0x70>
            printf("   ");
    b604:	4815      	ldr	r0, [pc, #84]	; (b65c <hexdump8_ex+0xbc>)
    b606:	f001 f93f 	bl	c888 <_printf>

        for (i=0; i < MIN(len - count, 16); i++) {
            printf("%02hhx ", *(const uint8_t *)(address + i));
        }

        for (; i < 16; i++) {
    b60a:	f109 0901 	add.w	r9, r9, #1
    b60e:	e7f6      	b.n	b5fe <hexdump8_ex+0x5e>
            printf("   ");
        }

        printf("|");
    b610:	4813      	ldr	r0, [pc, #76]	; (b660 <hexdump8_ex+0xc0>)
    b612:	f001 f939 	bl	c888 <_printf>

        for (i=0; i < MIN(len - count, 16); i++) {
    b616:	2300      	movs	r3, #0
    b618:	42bb      	cmp	r3, r7
    b61a:	d010      	beq.n	b63e <hexdump8_ex+0x9e>
            char c = ((const char *)address)[i];
            printf("%c", isprint(c) ? c : '.');
    b61c:	f813 100a 	ldrb.w	r1, [r3, r10]
    b620:	9301      	str	r3, [sp, #4]
    b622:	4608      	mov	r0, r1
    b624:	9102      	str	r1, [sp, #8]
    b626:	f000 fbb9 	bl	bd9c <isprint>
    b62a:	9902      	ldr	r1, [sp, #8]
    b62c:	2800      	cmp	r0, #0
    b62e:	bf08      	it	eq
    b630:	212e      	moveq	r1, #46	; 0x2e
    b632:	480c      	ldr	r0, [pc, #48]	; (b664 <hexdump8_ex+0xc4>)
    b634:	f001 f928 	bl	c888 <_printf>
            printf("   ");
        }

        printf("|");

        for (i=0; i < MIN(len - count, 16); i++) {
    b638:	9b01      	ldr	r3, [sp, #4]
    b63a:	3301      	adds	r3, #1
    b63c:	e7ec      	b.n	b618 <hexdump8_ex+0x78>
            char c = ((const char *)address)[i];
            printf("%c", isprint(c) ? c : '.');
        }

        printf("\n");
    b63e:	480a      	ldr	r0, [pc, #40]	; (b668 <hexdump8_ex+0xc8>)
    b640:	f001 f922 	bl	c888 <_printf>
    size_t i;
    const char *addr_fmt = ((disp_addr + len) > 0xFFFFFFFF)
                           ? "0x%016llx: "
                           : "0x%08llx: ";

    for (count = 0 ; count < len; count += 16) {
    b644:	3610      	adds	r6, #16
    b646:	e7be      	b.n	b5c6 <hexdump8_ex+0x26>
        }

        printf("\n");
        address += 16;
    }
}
    b648:	b005      	add	sp, #20
    b64a:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    b64e:	bf00      	nop
    b650:	00017bea 	.word	0x00017bea
    b654:	00017bf6 	.word	0x00017bf6
    b658:	00012bef 	.word	0x00012bef
    b65c:	00017be1 	.word	0x00017be1
    b660:	00017be5 	.word	0x00017be5
    b664:	0000e465 	.word	0x0000e465
    b668:	0000e7b4 	.word	0x0000e7b4

0000b66c <arch_interrupt_restore.constprop.0>:
static inline void
arch_interrupt_restore(spin_lock_saved_state_t old_state, spin_lock_save_flags_t flags)
{
    if ((flags & SPIN_LOCK_FLAG_FIQ) && (old_state & SPIN_LOCK_STATE_RESTORE_FIQ))
        arch_enable_fiqs();
    if ((flags & SPIN_LOCK_FLAG_IRQ) && (old_state & SPIN_LOCK_STATE_RESTORE_IRQ))
    b66c:	07c3      	lsls	r3, r0, #31
    b66e:	d500      	bpl.n	b672 <arch_interrupt_restore.constprop.0+0x6>

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
    b670:	b662      	cpsie	i
    b672:	4770      	bx	r14

0000b674 <arch_interrupt_save.constprop.1>:
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    b674:	f3ef 8310 	mrs	r3, PRIMASK

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    if ((flags & SPIN_LOCK_FLAG_IRQ) && !arch_ints_disabled()) {
    b678:	07da      	lsls	r2, r3, #31
    b67a:	d402      	bmi.n	b682 <arch_interrupt_save.constprop.1+0xe>
    __asm__ volatile("cpsie i");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
    b67c:	b672      	cpsid	i
        state |= SPIN_LOCK_STATE_RESTORE_IRQ;
    b67e:	2301      	movs	r3, #1
    b680:	e000      	b.n	b684 <arch_interrupt_save.constprop.1+0x10>
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    b682:	2300      	movs	r3, #0
    }
    if ((flags & SPIN_LOCK_FLAG_FIQ) && !arch_fiqs_disabled()) {
        state |= SPIN_LOCK_STATE_RESTORE_FIQ;
        arch_disable_fiqs();
    }
    *statep = state;
    b684:	6003      	str	r3, [r0, #0]
    b686:	4770      	bx	r14

0000b688 <heap_free_delayed_list>:
#else
#error need to select valid heap implementation or provide wrapper
#endif

static void heap_free_delayed_list(void)
{
    b688:	b51f      	push	{r0, r1, r2, r3, r4, r14}
#define LIST_INITIAL_VALUE(list) { &(list), &(list) }
#define LIST_INITIAL_CLEARED_VALUE { NULL, NULL }

static inline void list_initialize(struct list_node *list)
{
    list->prev = list->next = list;
    b68a:	ac02      	add	r4, sp, #8
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    b68c:	a801      	add	r0, sp, #4
    b68e:	9403      	str	r4, [sp, #12]
    b690:	9402      	str	r4, [sp, #8]
    b692:	f7ff ffef 	bl	b674 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    b696:	4b15      	ldr	r3, [pc, #84]	; (b6ec <heap_free_delayed_list+0x64>)
    b698:	2201      	movs	r2, #1
    b69a:	601a      	str	r2, [r3, #0]
    b69c:	4618      	mov	r0, r3
    item->prev = item->next = 0;
}

static inline struct list_node *list_remove_head(struct list_node *list)
{
    if (list->next != list) {
    b69e:	4a14      	ldr	r2, [pc, #80]	; (b6f0 <heap_free_delayed_list+0x68>)
    b6a0:	6853      	ldr	r3, [r2, #4]
    b6a2:	4293      	cmp	r3, r2
    b6a4:	d00d      	beq.n	b6c2 <heap_free_delayed_list+0x3a>

#define list_add_before(entry, new_entry) list_add_tail(entry, new_entry)

static inline void list_delete(struct list_node *item)
{
    item->next->prev = item->prev;
    b6a6:	e893 0006 	ldmia.w	r3, {r1, r2}
    b6aa:	6011      	str	r1, [r2, #0]
    item->prev->next = item->next;
    b6ac:	6819      	ldr	r1, [r3, #0]
    b6ae:	604a      	str	r2, [r1, #4]
    item->prev = item->next = 0;
    b6b0:	2200      	movs	r2, #0
    b6b2:	605a      	str	r2, [r3, #4]
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    b6b4:	9a03      	ldr	r2, [sp, #12]
    item->prev = list;
    b6b6:	601c      	str	r4, [r3, #0]
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    b6b8:	605a      	str	r2, [r3, #4]
    item->prev = list;
    list->next->prev = item;
    b6ba:	9a03      	ldr	r2, [sp, #12]
    b6bc:	6013      	str	r3, [r2, #0]
    list->next = item;
    b6be:	9303      	str	r3, [sp, #12]
    b6c0:	e7ed      	b.n	b69e <heap_free_delayed_list+0x16>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    b6c2:	2300      	movs	r3, #0
    b6c4:	6003      	str	r3, [r0, #0]
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    b6c6:	9801      	ldr	r0, [sp, #4]
    b6c8:	f7ff ffd0 	bl	b66c <arch_interrupt_restore.constprop.0>
    item->prev = item->next = 0;
}

static inline struct list_node *list_remove_head(struct list_node *list)
{
    if (list->next != list) {
    b6cc:	9803      	ldr	r0, [sp, #12]
    b6ce:	42a0      	cmp	r0, r4
    b6d0:	d00a      	beq.n	b6e8 <heap_free_delayed_list+0x60>

#define list_add_before(entry, new_entry) list_add_tail(entry, new_entry)

static inline void list_delete(struct list_node *item)
{
    item->next->prev = item->prev;
    b6d2:	e890 000c 	ldmia.w	r0, {r2, r3}
    b6d6:	601a      	str	r2, [r3, #0]
    item->prev->next = item->next;
    b6d8:	6802      	ldr	r2, [r0, #0]
    b6da:	6053      	str	r3, [r2, #4]
    item->prev = item->next = 0;
    b6dc:	2300      	movs	r3, #0
    b6de:	6043      	str	r3, [r0, #4]
    b6e0:	6003      	str	r3, [r0, #0]
    }
    spin_unlock_irqrestore(&delayed_free_lock, state);

    while ((node = list_remove_head(&list))) {
        LTRACEF("freeing node %p\n", node);
        HEAP_FREE(node);
    b6e2:	f001 fa9f 	bl	cc24 <miniheap_free>
    b6e6:	e7f1      	b.n	b6cc <heap_free_delayed_list+0x44>
    }
}
    b6e8:	b004      	add	sp, #16
    b6ea:	bd10      	pop	{r4, r15}
    b6ec:	2000097c 	.word	0x2000097c
    b6f0:	2000005c 	.word	0x2000005c

0000b6f4 <heap_init>:

void heap_init(void)
{
    b6f4:	b507      	push	{r0, r1, r2, r14}
}
static inline void HEAP_INIT(void)
{
    /* start the heap off with some spare memory in the page allocator */
    size_t len;
    void *ptr = page_first_alloc(&len);
    b6f6:	a801      	add	r0, sp, #4
    b6f8:	f000 fa62 	bl	bbc0 <page_first_alloc>
    miniheap_init(ptr, len);
    b6fc:	9901      	ldr	r1, [sp, #4]
    b6fe:	f001 fb5f 	bl	cdc0 <miniheap_init>
}

void heap_init(void)
{
    HEAP_INIT();
}
    b702:	b003      	add	sp, #12
    b704:	f85d fb04 	ldr.w	r15, [r13], #4

0000b708 <heap_trim>:

void heap_trim(void)
{
    b708:	b508      	push	{r3, r14}
        &(entry)->member != (list);\
        entry = temp_entry, temp_entry = containerof((temp_entry)->member.next, type, member))

static inline bool list_is_empty(struct list_node *list)
{
    return (list->next == list) ? true : false;
    b70a:	4b05      	ldr	r3, [pc, #20]	; (b720 <heap_trim+0x18>)
    // deal with the pending free list
    if (unlikely(!list_is_empty(&delayed_free_list))) {
    b70c:	685a      	ldr	r2, [r3, #4]
    b70e:	429a      	cmp	r2, r3
    b710:	d001      	beq.n	b716 <heap_trim+0xe>
        heap_free_delayed_list();
    b712:	f7ff ffb9 	bl	b688 <heap_free_delayed_list>
    }

    HEAP_TRIM();
}
    b716:	e8bd 4008 	ldmia.w	r13!, {r3, r14}
    // deal with the pending free list
    if (unlikely(!list_is_empty(&delayed_free_list))) {
        heap_free_delayed_list();
    }

    HEAP_TRIM();
    b71a:	f001 bac7 	b.w	ccac <miniheap_trim>
    b71e:	bf00      	nop
    b720:	2000005c 	.word	0x2000005c

0000b724 <malloc>:
    b724:	4b0c      	ldr	r3, [pc, #48]	; (b758 <malloc+0x34>)
}

void *malloc(size_t size)
{
    b726:	b570      	push	{r4, r5, r6, r14}
    LTRACEF("size %zd\n", size);

    // deal with the pending free list
    if (unlikely(!list_is_empty(&delayed_free_list))) {
    b728:	685a      	ldr	r2, [r3, #4]
    b72a:	4676      	mov	r6, r14
    b72c:	429a      	cmp	r2, r3

    HEAP_TRIM();
}

void *malloc(size_t size)
{
    b72e:	4604      	mov	r4, r0
    LTRACEF("size %zd\n", size);

    // deal with the pending free list
    if (unlikely(!list_is_empty(&delayed_free_list))) {
    b730:	d001      	beq.n	b736 <malloc+0x12>
        heap_free_delayed_list();
    b732:	f7ff ffa9 	bl	b688 <heap_free_delayed_list>

#if WITH_LIB_HEAP_MINIHEAP
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
    b736:	4620      	mov	r0, r4
    b738:	2100      	movs	r1, #0
    b73a:	f001 f9a3 	bl	ca84 <miniheap_alloc>
    if (unlikely(!list_is_empty(&delayed_free_list))) {
        heap_free_delayed_list();
    }

    void *ptr = HEAP_MALLOC(size);
    if (heap_trace)
    b73e:	4b07      	ldr	r3, [pc, #28]	; (b75c <malloc+0x38>)

#if WITH_LIB_HEAP_MINIHEAP
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
    b740:	4605      	mov	r5, r0
    if (unlikely(!list_is_empty(&delayed_free_list))) {
        heap_free_delayed_list();
    }

    void *ptr = HEAP_MALLOC(size);
    if (heap_trace)
    b742:	781b      	ldrb	r3, [r3, #0]
    b744:	b12b      	cbz	r3, b752 <malloc+0x2e>
        printf("caller %p malloc %zu -> %p\n", __GET_CALLER(), size, ptr);
    b746:	4806      	ldr	r0, [pc, #24]	; (b760 <malloc+0x3c>)
    b748:	4631      	mov	r1, r6
    b74a:	4622      	mov	r2, r4
    b74c:	462b      	mov	r3, r5
    b74e:	f001 f89b 	bl	c888 <_printf>
    return ptr;
}
    b752:	4628      	mov	r0, r5
    b754:	bd70      	pop	{r4, r5, r6, r15}
    b756:	bf00      	nop
    b758:	2000005c 	.word	0x2000005c
    b75c:	20000978 	.word	0x20000978
    b760:	00017c01 	.word	0x00017c01

0000b764 <memalign>:
    b764:	4b0d      	ldr	r3, [pc, #52]	; (b79c <memalign+0x38>)

void *memalign(size_t boundary, size_t size)
{
    b766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    LTRACEF("boundary %zu, size %zd\n", boundary, size);

    // deal with the pending free list
    if (unlikely(!list_is_empty(&delayed_free_list))) {
    b768:	685a      	ldr	r2, [r3, #4]
    b76a:	4677      	mov	r7, r14
    b76c:	429a      	cmp	r2, r3
        printf("caller %p malloc %zu -> %p\n", __GET_CALLER(), size, ptr);
    return ptr;
}

void *memalign(size_t boundary, size_t size)
{
    b76e:	4605      	mov	r5, r0
    b770:	460c      	mov	r4, r1
    LTRACEF("boundary %zu, size %zd\n", boundary, size);

    // deal with the pending free list
    if (unlikely(!list_is_empty(&delayed_free_list))) {
    b772:	d001      	beq.n	b778 <memalign+0x14>
        heap_free_delayed_list();
    b774:	f7ff ff88 	bl	b688 <heap_free_delayed_list>
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
static inline void *HEAP_REALLOC(void *ptr, size_t s) { return miniheap_realloc(ptr, s); }
static inline void *HEAP_MEMALIGN(size_t boundary, size_t s) { return miniheap_alloc(s, boundary); }
    b778:	4620      	mov	r0, r4
    b77a:	4629      	mov	r1, r5
    b77c:	f001 f982 	bl	ca84 <miniheap_alloc>
    if (unlikely(!list_is_empty(&delayed_free_list))) {
        heap_free_delayed_list();
    }

    void *ptr = HEAP_MEMALIGN(boundary, size);
    if (heap_trace)
    b780:	4b07      	ldr	r3, [pc, #28]	; (b7a0 <memalign+0x3c>)
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
static inline void *HEAP_REALLOC(void *ptr, size_t s) { return miniheap_realloc(ptr, s); }
static inline void *HEAP_MEMALIGN(size_t boundary, size_t s) { return miniheap_alloc(s, boundary); }
    b782:	4606      	mov	r6, r0
    if (unlikely(!list_is_empty(&delayed_free_list))) {
        heap_free_delayed_list();
    }

    void *ptr = HEAP_MEMALIGN(boundary, size);
    if (heap_trace)
    b784:	781b      	ldrb	r3, [r3, #0]
    b786:	b133      	cbz	r3, b796 <memalign+0x32>
        printf("caller %p memalign %zu, %zu -> %p\n", __GET_CALLER(), boundary, size, ptr);
    b788:	9000      	str	r0, [sp, #0]
    b78a:	4639      	mov	r1, r7
    b78c:	4805      	ldr	r0, [pc, #20]	; (b7a4 <memalign+0x40>)
    b78e:	462a      	mov	r2, r5
    b790:	4623      	mov	r3, r4
    b792:	f001 f879 	bl	c888 <_printf>
    return ptr;
}
    b796:	4630      	mov	r0, r6
    b798:	b003      	add	sp, #12
    b79a:	bdf0      	pop	{r4, r5, r6, r7, r15}
    b79c:	2000005c 	.word	0x2000005c
    b7a0:	20000978 	.word	0x20000978
    b7a4:	00017c1d 	.word	0x00017c1d

0000b7a8 <calloc>:
    b7a8:	4b12      	ldr	r3, [pc, #72]	; (b7f4 <calloc+0x4c>)

void *calloc(size_t count, size_t size)
{
    b7aa:	e92d 41f3 	stmdb	r13!, {r0, r1, r4, r5, r6, r7, r8, r14}
    LTRACEF("count %zu, size %zd\n", count, size);

    // deal with the pending free list
    if (unlikely(!list_is_empty(&delayed_free_list))) {
    b7ae:	685a      	ldr	r2, [r3, #4]
    b7b0:	46f0      	mov	r8, r14
    b7b2:	429a      	cmp	r2, r3
        printf("caller %p memalign %zu, %zu -> %p\n", __GET_CALLER(), boundary, size, ptr);
    return ptr;
}

void *calloc(size_t count, size_t size)
{
    b7b4:	4606      	mov	r6, r0
    b7b6:	460d      	mov	r5, r1
    LTRACEF("count %zu, size %zd\n", count, size);

    // deal with the pending free list
    if (unlikely(!list_is_empty(&delayed_free_list))) {
    b7b8:	d001      	beq.n	b7be <calloc+0x16>
        heap_free_delayed_list();
    b7ba:	f7ff ff65 	bl	b688 <heap_free_delayed_list>
static inline void *HEAP_REALLOC(void *ptr, size_t s) { return miniheap_realloc(ptr, s); }
static inline void *HEAP_MEMALIGN(size_t boundary, size_t s) { return miniheap_alloc(s, boundary); }
#define HEAP_FREE miniheap_free
static inline void *HEAP_CALLOC(size_t n, size_t s)
{
    size_t realsize = n * s;
    b7be:	fb05 f706 	mul.w	r7, r5, r6

    void *ptr = miniheap_alloc(realsize, 0);
    b7c2:	2100      	movs	r1, #0
    b7c4:	4638      	mov	r0, r7
    b7c6:	f001 f95d 	bl	ca84 <miniheap_alloc>
    if (likely(ptr))
    b7ca:	4604      	mov	r4, r0
    b7cc:	b118      	cbz	r0, b7d6 <calloc+0x2e>
        memset(ptr, 0, realsize);
    b7ce:	2100      	movs	r1, #0
    b7d0:	463a      	mov	r2, r7
    b7d2:	f000 fa41 	bl	bc58 <memset>
    if (unlikely(!list_is_empty(&delayed_free_list))) {
        heap_free_delayed_list();
    }

    void *ptr = HEAP_CALLOC(count, size);
    if (heap_trace)
    b7d6:	4b08      	ldr	r3, [pc, #32]	; (b7f8 <calloc+0x50>)
    b7d8:	781b      	ldrb	r3, [r3, #0]
    b7da:	b133      	cbz	r3, b7ea <calloc+0x42>
        printf("caller %p calloc %zu, %zu -> %p\n", __GET_CALLER(), count, size, ptr);
    b7dc:	9400      	str	r4, [sp, #0]
    b7de:	4807      	ldr	r0, [pc, #28]	; (b7fc <calloc+0x54>)
    b7e0:	4641      	mov	r1, r8
    b7e2:	4632      	mov	r2, r6
    b7e4:	462b      	mov	r3, r5
    b7e6:	f001 f84f 	bl	c888 <_printf>
    return ptr;
}
    b7ea:	4620      	mov	r0, r4
    b7ec:	b002      	add	sp, #8
    b7ee:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    b7f2:	bf00      	nop
    b7f4:	2000005c 	.word	0x2000005c
    b7f8:	20000978 	.word	0x20000978
    b7fc:	00017c40 	.word	0x00017c40

0000b800 <realloc>:
    b800:	4b0d      	ldr	r3, [pc, #52]	; (b838 <realloc+0x38>)

void *realloc(void *ptr, size_t size)
{
    b802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    LTRACEF("ptr %p, size %zd\n", ptr, size);

    // deal with the pending free list
    if (unlikely(!list_is_empty(&delayed_free_list))) {
    b804:	685a      	ldr	r2, [r3, #4]
    b806:	4677      	mov	r7, r14
    b808:	429a      	cmp	r2, r3
        printf("caller %p calloc %zu, %zu -> %p\n", __GET_CALLER(), count, size, ptr);
    return ptr;
}

void *realloc(void *ptr, size_t size)
{
    b80a:	4605      	mov	r5, r0
    b80c:	460c      	mov	r4, r1
    LTRACEF("ptr %p, size %zd\n", ptr, size);

    // deal with the pending free list
    if (unlikely(!list_is_empty(&delayed_free_list))) {
    b80e:	d001      	beq.n	b814 <realloc+0x14>
        heap_free_delayed_list();
    b810:	f7ff ff3a 	bl	b688 <heap_free_delayed_list>
#if WITH_LIB_HEAP_MINIHEAP
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
static inline void *HEAP_REALLOC(void *ptr, size_t s) { return miniheap_realloc(ptr, s); }
    b814:	4628      	mov	r0, r5
    b816:	4621      	mov	r1, r4
    b818:	f001 fa2a 	bl	cc70 <miniheap_realloc>
    if (unlikely(!list_is_empty(&delayed_free_list))) {
        heap_free_delayed_list();
    }

    void *ptr2 = HEAP_REALLOC(ptr, size);
    if (heap_trace)
    b81c:	4b07      	ldr	r3, [pc, #28]	; (b83c <realloc+0x3c>)
#if WITH_LIB_HEAP_MINIHEAP
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
static inline void *HEAP_REALLOC(void *ptr, size_t s) { return miniheap_realloc(ptr, s); }
    b81e:	4606      	mov	r6, r0
    if (unlikely(!list_is_empty(&delayed_free_list))) {
        heap_free_delayed_list();
    }

    void *ptr2 = HEAP_REALLOC(ptr, size);
    if (heap_trace)
    b820:	781b      	ldrb	r3, [r3, #0]
    b822:	b133      	cbz	r3, b832 <realloc+0x32>
        printf("caller %p realloc %p, %zu -> %p\n", __GET_CALLER(), ptr, size, ptr2);
    b824:	9000      	str	r0, [sp, #0]
    b826:	4639      	mov	r1, r7
    b828:	4805      	ldr	r0, [pc, #20]	; (b840 <realloc+0x40>)
    b82a:	462a      	mov	r2, r5
    b82c:	4623      	mov	r3, r4
    b82e:	f001 f82b 	bl	c888 <_printf>
    return ptr2;
}
    b832:	4630      	mov	r0, r6
    b834:	b003      	add	sp, #12
    b836:	bdf0      	pop	{r4, r5, r6, r7, r15}
    b838:	2000005c 	.word	0x2000005c
    b83c:	20000978 	.word	0x20000978
    b840:	00017c61 	.word	0x00017c61

0000b844 <free>:

void free(void *ptr)
{
    LTRACEF("ptr %p\n", ptr);
    if (heap_trace)
    b844:	4b07      	ldr	r3, [pc, #28]	; (b864 <free+0x20>)
        printf("caller %p realloc %p, %zu -> %p\n", __GET_CALLER(), ptr, size, ptr2);
    return ptr2;
}

void free(void *ptr)
{
    b846:	b510      	push	{r4, r14}
    LTRACEF("ptr %p\n", ptr);
    if (heap_trace)
    b848:	781b      	ldrb	r3, [r3, #0]
    b84a:	4671      	mov	r1, r14
        printf("caller %p realloc %p, %zu -> %p\n", __GET_CALLER(), ptr, size, ptr2);
    return ptr2;
}

void free(void *ptr)
{
    b84c:	4604      	mov	r4, r0
    LTRACEF("ptr %p\n", ptr);
    if (heap_trace)
    b84e:	b11b      	cbz	r3, b858 <free+0x14>
        printf("caller %p free %p\n", __GET_CALLER(), ptr);
    b850:	4805      	ldr	r0, [pc, #20]	; (b868 <free+0x24>)
    b852:	4622      	mov	r2, r4
    b854:	f001 f818 	bl	c888 <_printf>

    HEAP_FREE(ptr);
    b858:	4620      	mov	r0, r4
}
    b85a:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
{
    LTRACEF("ptr %p\n", ptr);
    if (heap_trace)
        printf("caller %p free %p\n", __GET_CALLER(), ptr);

    HEAP_FREE(ptr);
    b85e:	f001 b9e1 	b.w	cc24 <miniheap_free>
    b862:	bf00      	nop
    b864:	20000978 	.word	0x20000978
    b868:	00017c82 	.word	0x00017c82

0000b86c <cmd_heap>:
STATIC_COMMAND_START
STATIC_COMMAND("heap", "heap debug commands", &cmd_heap)
STATIC_COMMAND_END(heap);

static int cmd_heap(int argc, const cmd_args *argv)
{
    b86c:	e92d 47f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r14}
    if (argc < 2) {
    b870:	2801      	cmp	r0, #1
STATIC_COMMAND_START
STATIC_COMMAND("heap", "heap debug commands", &cmd_heap)
STATIC_COMMAND_END(heap);

static int cmd_heap(int argc, const cmd_args *argv)
{
    b872:	b092      	sub	sp, #72	; 0x48
    b874:	46f0      	mov	r8, r14
    b876:	4607      	mov	r7, r0
    b878:	460d      	mov	r5, r1
    if (argc < 2) {
    b87a:	dc20      	bgt.n	b8be <cmd_heap+0x52>
notenoughargs:
        printf("not enough arguments\n");
    b87c:	488d      	ldr	r0, [pc, #564]	; (bab4 <cmd_heap+0x248>)
    b87e:	f001 f803 	bl	c888 <_printf>
usage:
        printf("usage:\n");
    b882:	488d      	ldr	r0, [pc, #564]	; (bab8 <cmd_heap+0x24c>)
    b884:	f001 f800 	bl	c888 <_printf>
        printf("\t%s info\n", argv[0].str);
    b888:	6829      	ldr	r1, [r5, #0]
    b88a:	488c      	ldr	r0, [pc, #560]	; (babc <cmd_heap+0x250>)
    b88c:	f000 fffc 	bl	c888 <_printf>
        printf("\t%s trace\n", argv[0].str);
    b890:	6829      	ldr	r1, [r5, #0]
    b892:	488b      	ldr	r0, [pc, #556]	; (bac0 <cmd_heap+0x254>)
    b894:	f000 fff8 	bl	c888 <_printf>
        printf("\t%s trim\n", argv[0].str);
    b898:	6829      	ldr	r1, [r5, #0]
    b89a:	488a      	ldr	r0, [pc, #552]	; (bac4 <cmd_heap+0x258>)
    b89c:	f000 fff4 	bl	c888 <_printf>
        printf("\t%s alloc <size> [alignment]\n", argv[0].str);
    b8a0:	6829      	ldr	r1, [r5, #0]
    b8a2:	4889      	ldr	r0, [pc, #548]	; (bac8 <cmd_heap+0x25c>)
    b8a4:	f000 fff0 	bl	c888 <_printf>
        printf("\t%s realloc <ptr> <size>\n", argv[0].str);
    b8a8:	6829      	ldr	r1, [r5, #0]
    b8aa:	4888      	ldr	r0, [pc, #544]	; (bacc <cmd_heap+0x260>)
    b8ac:	f000 ffec 	bl	c888 <_printf>
        printf("\t%s free <address>\n", argv[0].str);
    b8b0:	4887      	ldr	r0, [pc, #540]	; (bad0 <cmd_heap+0x264>)
    b8b2:	6829      	ldr	r1, [r5, #0]
    b8b4:	f000 ffe8 	bl	c888 <_printf>
        return -1;
    b8b8:	f04f 34ff 	mov.w	r4, #4294967295
    b8bc:	e0f5      	b.n	baaa <cmd_heap+0x23e>
    }

    if (strcmp(argv[1].str, "info") == 0) {
    b8be:	694e      	ldr	r6, [r1, #20]
    b8c0:	4984      	ldr	r1, [pc, #528]	; (bad4 <cmd_heap+0x268>)
    b8c2:	4630      	mov	r0, r6
    b8c4:	f001 f807 	bl	c8d6 <strcmp>
    b8c8:	4604      	mov	r4, r0
    b8ca:	b9e0      	cbnz	r0, b906 <cmd_heap+0x9a>
    spin_unlock_irqrestore(&delayed_free_lock, state);
}

static void heap_dump(void)
{
    HEAP_DUMP();
    b8cc:	f001 f8ac 	bl	ca28 <miniheap_dump>

    printf("\tdelayed free list:\n");
    b8d0:	4881      	ldr	r0, [pc, #516]	; (bad8 <cmd_heap+0x26c>)
    b8d2:	f000 ffd9 	bl	c888 <_printf>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    b8d6:	a802      	add	r0, sp, #8
    b8d8:	f7ff fecc 	bl	b674 <arch_interrupt_save.constprop.1>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    b8dc:	4a7f      	ldr	r2, [pc, #508]	; (badc <cmd_heap+0x270>)
    b8de:	2301      	movs	r3, #1
    b8e0:	6013      	str	r3, [r2, #0]
    spin_lock_saved_state_t state;
    spin_lock_irqsave(&delayed_free_lock, state);
    struct list_node *node;
    list_for_every(&delayed_free_list, node) {
    b8e2:	4b7f      	ldr	r3, [pc, #508]	; (bae0 <cmd_heap+0x274>)
    b8e4:	4616      	mov	r6, r2
    b8e6:	685d      	ldr	r5, [r3, #4]
    b8e8:	461f      	mov	r7, r3
    b8ea:	42bd      	cmp	r5, r7
    b8ec:	d005      	beq.n	b8fa <cmd_heap+0x8e>
        printf("\t\tnode %p\n", node);
    b8ee:	4629      	mov	r1, r5
    b8f0:	487c      	ldr	r0, [pc, #496]	; (bae4 <cmd_heap+0x278>)
    b8f2:	f000 ffc9 	bl	c888 <_printf>

    printf("\tdelayed free list:\n");
    spin_lock_saved_state_t state;
    spin_lock_irqsave(&delayed_free_lock, state);
    struct list_node *node;
    list_for_every(&delayed_free_list, node) {
    b8f6:	686d      	ldr	r5, [r5, #4]
    b8f8:	e7f7      	b.n	b8ea <cmd_heap+0x7e>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    b8fa:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    b8fc:	9802      	ldr	r0, [sp, #8]
    b8fe:	6033      	str	r3, [r6, #0]
    b900:	f7ff feb4 	bl	b66c <arch_interrupt_restore.constprop.0>
    b904:	e0d1      	b.n	baaa <cmd_heap+0x23e>
        return -1;
    }

    if (strcmp(argv[1].str, "info") == 0) {
        heap_dump();
    } else if (strcmp(argv[1].str, "test") == 0) {
    b906:	4630      	mov	r0, r6
    b908:	4977      	ldr	r1, [pc, #476]	; (bae8 <cmd_heap+0x27c>)
    b90a:	f000 ffe4 	bl	c8d6 <strcmp>
    b90e:	4604      	mov	r4, r0
    b910:	2800      	cmp	r0, #0
    b912:	d17e      	bne.n	ba12 <cmd_heap+0x1a6>

#if WITH_LIB_HEAP_MINIHEAP
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
    b914:	4621      	mov	r1, r4
    b916:	2008      	movs	r0, #8
    b918:	f001 f8b4 	bl	ca84 <miniheap_alloc>
    b91c:	4621      	mov	r1, r4
    b91e:	4607      	mov	r7, r0
#if WITH_LIB_HEAP_CMPCTMALLOC
    cmpct_test();
#else
    void *ptr[16];

    ptr[0] = HEAP_MALLOC(8);
    b920:	9002      	str	r0, [sp, #8]

#if WITH_LIB_HEAP_MINIHEAP
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
    b922:	2020      	movs	r0, #32
    b924:	f001 f8ae 	bl	ca84 <miniheap_alloc>
    b928:	4621      	mov	r1, r4
    b92a:	4682      	mov	r10, r0
    cmpct_test();
#else
    void *ptr[16];

    ptr[0] = HEAP_MALLOC(8);
    ptr[1] = HEAP_MALLOC(32);
    b92c:	9003      	str	r0, [sp, #12]

#if WITH_LIB_HEAP_MINIHEAP
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
    b92e:	2007      	movs	r0, #7
    b930:	f001 f8a8 	bl	ca84 <miniheap_alloc>
    b934:	4621      	mov	r1, r4
    b936:	4605      	mov	r5, r0
#else
    void *ptr[16];

    ptr[0] = HEAP_MALLOC(8);
    ptr[1] = HEAP_MALLOC(32);
    ptr[2] = HEAP_MALLOC(7);
    b938:	9004      	str	r0, [sp, #16]

#if WITH_LIB_HEAP_MINIHEAP
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
    b93a:	4620      	mov	r0, r4
    b93c:	f001 f8a2 	bl	ca84 <miniheap_alloc>
    b940:	4621      	mov	r1, r4
    b942:	4681      	mov	r9, r0
    void *ptr[16];

    ptr[0] = HEAP_MALLOC(8);
    ptr[1] = HEAP_MALLOC(32);
    ptr[2] = HEAP_MALLOC(7);
    ptr[3] = HEAP_MALLOC(0);
    b944:	9005      	str	r0, [sp, #20]

#if WITH_LIB_HEAP_MINIHEAP
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
    b946:	4869      	ldr	r0, [pc, #420]	; (baec <cmd_heap+0x280>)
    b948:	f001 f89c 	bl	ca84 <miniheap_alloc>
    b94c:	4621      	mov	r1, r4
    b94e:	4606      	mov	r6, r0

    ptr[0] = HEAP_MALLOC(8);
    ptr[1] = HEAP_MALLOC(32);
    ptr[2] = HEAP_MALLOC(7);
    ptr[3] = HEAP_MALLOC(0);
    ptr[4] = HEAP_MALLOC(98713);
    b950:	9006      	str	r0, [sp, #24]

#if WITH_LIB_HEAP_MINIHEAP
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
    b952:	2010      	movs	r0, #16
    b954:	f001 f896 	bl	ca84 <miniheap_alloc>
    ptr[0] = HEAP_MALLOC(8);
    ptr[1] = HEAP_MALLOC(32);
    ptr[2] = HEAP_MALLOC(7);
    ptr[3] = HEAP_MALLOC(0);
    ptr[4] = HEAP_MALLOC(98713);
    ptr[5] = HEAP_MALLOC(16);
    b958:	9007      	str	r0, [sp, #28]

    HEAP_FREE(ptr[5]);
    b95a:	f001 f963 	bl	cc24 <miniheap_free>
    HEAP_FREE(ptr[1]);
    b95e:	4650      	mov	r0, r10
    b960:	f001 f960 	bl	cc24 <miniheap_free>
    HEAP_FREE(ptr[3]);
    b964:	4648      	mov	r0, r9
    b966:	f001 f95d 	bl	cc24 <miniheap_free>
    HEAP_FREE(ptr[0]);
    b96a:	4638      	mov	r0, r7
    b96c:	f001 f95a 	bl	cc24 <miniheap_free>
    HEAP_FREE(ptr[4]);
    b970:	4630      	mov	r0, r6
    b972:	f001 f957 	bl	cc24 <miniheap_free>
    HEAP_FREE(ptr[2]);
    b976:	4628      	mov	r0, r5
    b978:	f001 f954 	bl	cc24 <miniheap_free>

    HEAP_DUMP();
    b97c:	f001 f854 	bl	ca28 <miniheap_dump>
    b980:	4623      	mov	r3, r4

    int i;
    for (i=0; i < 16; i++)
        ptr[i] = 0;
    b982:	af02      	add	r7, sp, #8
    b984:	2500      	movs	r5, #0
    b986:	51dd      	str	r5, [r3, r7]
    b988:	3304      	adds	r3, #4
    HEAP_FREE(ptr[2]);

    HEAP_DUMP();

    int i;
    for (i=0; i < 16; i++)
    b98a:	2b40      	cmp	r3, #64	; 0x40
    b98c:	d1f9      	bne.n	b982 <cmd_heap+0x116>
        ptr[i] = 0;

    for (i=0; i < 32768; i++) {
        unsigned int index = (unsigned int)rand() % 16;
    b98e:	f000 ff23 	bl	c7d8 <rand>

        if ((i % (16*1024)) == 0)
    b992:	f3c5 030d 	ubfx	r3, r5, #0, #14
    int i;
    for (i=0; i < 16; i++)
        ptr[i] = 0;

    for (i=0; i < 32768; i++) {
        unsigned int index = (unsigned int)rand() % 16;
    b996:	f000 090f 	and.w	r9, r0, #15

        if ((i % (16*1024)) == 0)
    b99a:	b91b      	cbnz	r3, b9a4 <cmd_heap+0x138>
            printf("pass %d\n", i);
    b99c:	4854      	ldr	r0, [pc, #336]	; (baf0 <cmd_heap+0x284>)
    b99e:	4629      	mov	r1, r5
    b9a0:	f000 ff72 	bl	c888 <_printf>

//      printf("index 0x%x\n", index);
        if (ptr[index]) {
    b9a4:	ea4f 0989 	mov.w	r9, r9, lsl #2
    b9a8:	ab12      	add	r3, sp, #72	; 0x48
    b9aa:	444b      	add	r3, r9
    b9ac:	f853 0c40 	ldr.w	r0, [r3, #-64]
    b9b0:	b108      	cbz	r0, b9b6 <cmd_heap+0x14a>
//          printf("freeing ptr[0x%x] = %p\n", index, ptr[index]);
            HEAP_FREE(ptr[index]);
    b9b2:	f001 f937 	bl	cc24 <miniheap_free>
            ptr[index] = 0;
        }
        unsigned int align = 1 << ((unsigned int)rand() % 8);
    b9b6:	f000 ff0f 	bl	c7d8 <rand>
    b9ba:	2601      	movs	r6, #1
    b9bc:	f000 0007 	and.w	r0, r0, #7
    b9c0:	4086      	lsls	r6, r0
        ptr[index] = HEAP_MEMALIGN(align, (unsigned int)rand() % 32768);
    b9c2:	f000 ff09 	bl	c7d8 <rand>
/* miniheap implementation */
#include <lib/miniheap.h>

static inline void *HEAP_MALLOC(size_t s) { return miniheap_alloc(s, 0); }
static inline void *HEAP_REALLOC(void *ptr, size_t s) { return miniheap_realloc(ptr, s); }
static inline void *HEAP_MEMALIGN(size_t boundary, size_t s) { return miniheap_alloc(s, boundary); }
    b9c6:	4631      	mov	r1, r6
    b9c8:	f3c0 000e 	ubfx	r0, r0, #0, #15
    b9cc:	f001 f85a 	bl	ca84 <miniheap_alloc>
//          printf("freeing ptr[0x%x] = %p\n", index, ptr[index]);
            HEAP_FREE(ptr[index]);
            ptr[index] = 0;
        }
        unsigned int align = 1 << ((unsigned int)rand() % 8);
        ptr[index] = HEAP_MEMALIGN(align, (unsigned int)rand() % 32768);
    b9d0:	ab12      	add	r3, sp, #72	; 0x48
    b9d2:	444b      	add	r3, r9
    b9d4:	f843 0c40 	str.w	r0, [r3, #-64]
//      printf("ptr[0x%x] = %p, align 0x%x\n", index, ptr[index], align);

        DEBUG_ASSERT(((addr_t)ptr[index] % align) == 0);
    b9d8:	fbb0 f3f6 	udiv	r3, r0, r6
    b9dc:	fb06 0613 	mls	r6, r6, r3, r0
    b9e0:	b146      	cbz	r6, b9f4 <cmd_heap+0x188>
    b9e2:	4b44      	ldr	r3, [pc, #272]	; (baf4 <cmd_heap+0x288>)
    b9e4:	4640      	mov	r0, r8
    b9e6:	9300      	str	r3, [sp, #0]
    b9e8:	4943      	ldr	r1, [pc, #268]	; (baf8 <cmd_heap+0x28c>)
    b9ea:	4a44      	ldr	r2, [pc, #272]	; (bafc <cmd_heap+0x290>)
    b9ec:	f240 133b 	movw	r3, #315	; 0x13b
    b9f0:	f7ff fd60 	bl	b4b4 <_panic>

    int i;
    for (i=0; i < 16; i++)
        ptr[i] = 0;

    for (i=0; i < 32768; i++) {
    b9f4:	3501      	adds	r5, #1
    b9f6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    b9fa:	d1c8      	bne.n	b98e <cmd_heap+0x122>
    b9fc:	4635      	mov	r5, r6
        DEBUG_ASSERT(((addr_t)ptr[index] % align) == 0);
//      heap_dump();
    }

    for (i=0; i < 16; i++) {
        if (ptr[i])
    b9fe:	5978      	ldr	r0, [r7, r5]
    ba00:	b108      	cbz	r0, ba06 <cmd_heap+0x19a>
            HEAP_FREE(ptr[i]);
    ba02:	f001 f90f 	bl	cc24 <miniheap_free>
    ba06:	3504      	adds	r5, #4

        DEBUG_ASSERT(((addr_t)ptr[index] % align) == 0);
//      heap_dump();
    }

    for (i=0; i < 16; i++) {
    ba08:	2d40      	cmp	r5, #64	; 0x40
    ba0a:	d1f8      	bne.n	b9fe <cmd_heap+0x192>
        if (ptr[i])
            HEAP_FREE(ptr[i]);
    }

    HEAP_DUMP();
    ba0c:	f001 f80c 	bl	ca28 <miniheap_dump>
    ba10:	e04b      	b.n	baaa <cmd_heap+0x23e>

    if (strcmp(argv[1].str, "info") == 0) {
        heap_dump();
    } else if (strcmp(argv[1].str, "test") == 0) {
        heap_test();
    } else if (strcmp(argv[1].str, "trace") == 0) {
    ba12:	4630      	mov	r0, r6
    ba14:	493a      	ldr	r1, [pc, #232]	; (bb00 <cmd_heap+0x294>)
    ba16:	f000 ff5e 	bl	c8d6 <strcmp>
    ba1a:	4604      	mov	r4, r0
    ba1c:	b958      	cbnz	r0, ba36 <cmd_heap+0x1ca>
        heap_trace = !heap_trace;
    ba1e:	4a39      	ldr	r2, [pc, #228]	; (bb04 <cmd_heap+0x298>)
        printf("heap trace is now %s\n", heap_trace ? "on" : "off");
    ba20:	4939      	ldr	r1, [pc, #228]	; (bb08 <cmd_heap+0x29c>)
    if (strcmp(argv[1].str, "info") == 0) {
        heap_dump();
    } else if (strcmp(argv[1].str, "test") == 0) {
        heap_test();
    } else if (strcmp(argv[1].str, "trace") == 0) {
        heap_trace = !heap_trace;
    ba22:	7813      	ldrb	r3, [r2, #0]
        printf("heap trace is now %s\n", heap_trace ? "on" : "off");
    ba24:	4839      	ldr	r0, [pc, #228]	; (bb0c <cmd_heap+0x2a0>)
    if (strcmp(argv[1].str, "info") == 0) {
        heap_dump();
    } else if (strcmp(argv[1].str, "test") == 0) {
        heap_test();
    } else if (strcmp(argv[1].str, "trace") == 0) {
        heap_trace = !heap_trace;
    ba26:	f083 0301 	eor.w	r3, r3, #1
    ba2a:	7013      	strb	r3, [r2, #0]
        printf("heap trace is now %s\n", heap_trace ? "on" : "off");
    ba2c:	4a38      	ldr	r2, [pc, #224]	; (bb10 <cmd_heap+0x2a4>)
    ba2e:	2b00      	cmp	r3, #0
    ba30:	bf18      	it	ne
    ba32:	4611      	movne	r1, r2
    ba34:	e02a      	b.n	ba8c <cmd_heap+0x220>
    } else if (strcmp(argv[1].str, "trim") == 0) {
    ba36:	4630      	mov	r0, r6
    ba38:	4936      	ldr	r1, [pc, #216]	; (bb14 <cmd_heap+0x2a8>)
    ba3a:	f000 ff4c 	bl	c8d6 <strcmp>
    ba3e:	4604      	mov	r4, r0
    ba40:	b910      	cbnz	r0, ba48 <cmd_heap+0x1dc>
        heap_trim();
    ba42:	f7ff fe61 	bl	b708 <heap_trim>
    ba46:	e030      	b.n	baaa <cmd_heap+0x23e>
    } else if (strcmp(argv[1].str, "alloc") == 0) {
    ba48:	4630      	mov	r0, r6
    ba4a:	4933      	ldr	r1, [pc, #204]	; (bb18 <cmd_heap+0x2ac>)
    ba4c:	f000 ff43 	bl	c8d6 <strcmp>
    ba50:	4604      	mov	r4, r0
    ba52:	b960      	cbnz	r0, ba6e <cmd_heap+0x202>
        if (argc < 3) goto notenoughargs;
    ba54:	2f02      	cmp	r7, #2
    ba56:	f43f af11 	beq.w	b87c <cmd_heap+0x10>

        void *ptr = memalign((argc >= 4) ? argv[3].u : 0, argv[2].u);
    ba5a:	2f03      	cmp	r7, #3
    ba5c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    ba5e:	bf14      	ite	ne
    ba60:	6c28      	ldrne	r0, [r5, #64]	; 0x40
    ba62:	4620      	moveq	r0, r4
    ba64:	f7ff fe7e 	bl	b764 <memalign>
    ba68:	4601      	mov	r1, r0
        printf("memalign returns %p\n", ptr);
    ba6a:	482c      	ldr	r0, [pc, #176]	; (bb1c <cmd_heap+0x2b0>)
    ba6c:	e00e      	b.n	ba8c <cmd_heap+0x220>
    } else if (strcmp(argv[1].str, "realloc") == 0) {
    ba6e:	4630      	mov	r0, r6
    ba70:	492b      	ldr	r1, [pc, #172]	; (bb20 <cmd_heap+0x2b4>)
    ba72:	f000 ff30 	bl	c8d6 <strcmp>
    ba76:	4604      	mov	r4, r0
    ba78:	b958      	cbnz	r0, ba92 <cmd_heap+0x226>
        if (argc < 4) goto notenoughargs;
    ba7a:	2f03      	cmp	r7, #3
    ba7c:	f77f aefe 	ble.w	b87c <cmd_heap+0x10>

        void *ptr = realloc(argv[2].p, argv[3].u);
    ba80:	6c29      	ldr	r1, [r5, #64]	; 0x40
    ba82:	6b28      	ldr	r0, [r5, #48]	; 0x30
    ba84:	f7ff febc 	bl	b800 <realloc>
    ba88:	4601      	mov	r1, r0
        printf("realloc returns %p\n", ptr);
    ba8a:	4826      	ldr	r0, [pc, #152]	; (bb24 <cmd_heap+0x2b8>)
    ba8c:	f000 fefc 	bl	c888 <_printf>
    ba90:	e00b      	b.n	baaa <cmd_heap+0x23e>
    } else if (strcmp(argv[1].str, "free") == 0) {
    ba92:	4630      	mov	r0, r6
    ba94:	4924      	ldr	r1, [pc, #144]	; (bb28 <cmd_heap+0x2bc>)
    ba96:	f000 ff1e 	bl	c8d6 <strcmp>
    ba9a:	4604      	mov	r4, r0
    ba9c:	b918      	cbnz	r0, baa6 <cmd_heap+0x23a>
        if (argc < 2) goto notenoughargs;

        free(argv[2].p);
    ba9e:	6b28      	ldr	r0, [r5, #48]	; 0x30
    baa0:	f7ff fed0 	bl	b844 <free>
    baa4:	e001      	b.n	baaa <cmd_heap+0x23e>
    } else {
        printf("unrecognized command\n");
    baa6:	4821      	ldr	r0, [pc, #132]	; (bb2c <cmd_heap+0x2c0>)
    baa8:	e6e9      	b.n	b87e <cmd_heap+0x12>
        goto usage;
    }

    return 0;
}
    baaa:	4620      	mov	r0, r4
    baac:	b012      	add	sp, #72	; 0x48
    baae:	e8bd 87f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r15}
    bab2:	bf00      	nop
    bab4:	0000f1c9 	.word	0x0000f1c9
    bab8:	00017787 	.word	0x00017787
    babc:	0001778f 	.word	0x0001778f
    bac0:	00017c95 	.word	0x00017c95
    bac4:	00017ca0 	.word	0x00017ca0
    bac8:	00017caa 	.word	0x00017caa
    bacc:	00017cc8 	.word	0x00017cc8
    bad0:	00017ce2 	.word	0x00017ce2
    bad4:	000177e7 	.word	0x000177e7
    bad8:	00017cf6 	.word	0x00017cf6
    badc:	2000097c 	.word	0x2000097c
    bae0:	2000005c 	.word	0x2000005c
    bae4:	00017d0b 	.word	0x00017d0b
    bae8:	00012dfa 	.word	0x00012dfa
    baec:	00018199 	.word	0x00018199
    baf0:	00017d16 	.word	0x00017d16
    baf4:	00017d37 	.word	0x00017d37
    baf8:	0001076e 	.word	0x0001076e
    bafc:	00017d1f 	.word	0x00017d1f
    bb00:	00017d59 	.word	0x00017d59
    bb04:	20000978 	.word	0x20000978
    bb08:	000131a4 	.word	0x000131a4
    bb0c:	00017d5f 	.word	0x00017d5f
    bb10:	0001314f 	.word	0x0001314f
    bb14:	00017d75 	.word	0x00017d75
    bb18:	00017dea 	.word	0x00017dea
    bb1c:	00017d7a 	.word	0x00017d7a
    bb20:	00017d8f 	.word	0x00017d8f
    bb24:	00017d97 	.word	0x00017d97
    bb28:	0001788d 	.word	0x0001788d
    bb2c:	000178b4 	.word	0x000178b4

0000bb30 <heap_delayed_free>:
    HEAP_FREE(ptr);
}

/* critical section time delayed free */
void heap_delayed_free(void *ptr)
{
    bb30:	b513      	push	{r0, r1, r4, r14}
    bb32:	4604      	mov	r4, r0
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    bb34:	a801      	add	r0, sp, #4
    bb36:	f7ff fd9d 	bl	b674 <arch_interrupt_save.constprop.1>
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    bb3a:	4b07      	ldr	r3, [pc, #28]	; (bb58 <heap_delayed_free+0x28>)
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    bb3c:	9801      	ldr	r0, [sp, #4]
    bb3e:	685a      	ldr	r2, [r3, #4]
    item->prev = list;
    bb40:	6023      	str	r3, [r4, #0]
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    bb42:	6062      	str	r2, [r4, #4]
    item->prev = list;
    list->next->prev = item;
    bb44:	685a      	ldr	r2, [r3, #4]
    bb46:	6014      	str	r4, [r2, #0]
    list->next = item;
    bb48:	605c      	str	r4, [r3, #4]
    bb4a:	4b04      	ldr	r3, [pc, #16]	; (bb5c <heap_delayed_free+0x2c>)
    bb4c:	2200      	movs	r2, #0
    bb4e:	601a      	str	r2, [r3, #0]
    bb50:	f7ff fd8c 	bl	b66c <arch_interrupt_restore.constprop.0>

    spin_lock_saved_state_t state;
    spin_lock_irqsave(&delayed_free_lock, state);
    list_add_head(&delayed_free_list, node);
    spin_unlock_irqrestore(&delayed_free_lock, state);
}
    bb54:	b002      	add	sp, #8
    bb56:	bd10      	pop	{r4, r15}
    bb58:	2000005c 	.word	0x2000005c
    bb5c:	2000097c 	.word	0x2000097c

0000bb60 <cmd_page_alloc>:
STATIC_COMMAND("page_alloc", "page allocator debug commands", &cmd_page_alloc)
STATIC_COMMAND_END(page_alloc);

static int cmd_page_alloc(int argc, const cmd_args *argv)
{
    if (argc != 2) {
    bb60:	2802      	cmp	r0, #2
STATIC_COMMAND_START
STATIC_COMMAND("page_alloc", "page allocator debug commands", &cmd_page_alloc)
STATIC_COMMAND_END(page_alloc);

static int cmd_page_alloc(int argc, const cmd_args *argv)
{
    bb62:	b538      	push	{r3, r4, r5, r14}
    bb64:	460d      	mov	r5, r1
    if (argc != 2) {
    bb66:	d00c      	beq.n	bb82 <cmd_page_alloc+0x22>
notenoughargs:
        printf("not enough arguments\n");
    bb68:	480d      	ldr	r0, [pc, #52]	; (bba0 <cmd_page_alloc+0x40>)
    bb6a:	f000 fe8d 	bl	c888 <_printf>
usage:
        printf("usage:\n");
    bb6e:	480d      	ldr	r0, [pc, #52]	; (bba4 <cmd_page_alloc+0x44>)
    bb70:	f000 fe8a 	bl	c888 <_printf>
        printf("\t%s info\n", argv[0].str);
    bb74:	480c      	ldr	r0, [pc, #48]	; (bba8 <cmd_page_alloc+0x48>)
    bb76:	6829      	ldr	r1, [r5, #0]
    bb78:	f000 fe86 	bl	c888 <_printf>
    bb7c:	f04f 34ff 	mov.w	r4, #4294967295
    bb80:	e00b      	b.n	bb9a <cmd_page_alloc+0x3a>
        return -1;
    }

    if (strcmp(argv[1].str, "info") == 0) {
    bb82:	6948      	ldr	r0, [r1, #20]
    bb84:	4909      	ldr	r1, [pc, #36]	; (bbac <cmd_page_alloc+0x4c>)
    bb86:	f000 fea6 	bl	c8d6 <strcmp>
    bb8a:	4604      	mov	r4, r0
    bb8c:	b918      	cbnz	r0, bb96 <cmd_page_alloc+0x36>
static void page_alloc_dump(void)
{
#ifdef WITH_KERNEL_VM
    dprintf(INFO, "Page allocator is based on pmm\n");
#else
    dprintf(INFO, "Page allocator is based on novm\n");
    bb8e:	4808      	ldr	r0, [pc, #32]	; (bbb0 <cmd_page_alloc+0x50>)
    bb90:	f000 fe7a 	bl	c888 <_printf>
    bb94:	e001      	b.n	bb9a <cmd_page_alloc+0x3a>
    }

    if (strcmp(argv[1].str, "info") == 0) {
        page_alloc_dump();
    } else {
        printf("unrecognized command\n");
    bb96:	4807      	ldr	r0, [pc, #28]	; (bbb4 <cmd_page_alloc+0x54>)
    bb98:	e7e7      	b.n	bb6a <cmd_page_alloc+0xa>
        goto usage;
    }

    return 0;
}
    bb9a:	4620      	mov	r0, r4
    bb9c:	bd38      	pop	{r3, r4, r5, r15}
    bb9e:	bf00      	nop
    bba0:	0000f1c9 	.word	0x0000f1c9
    bba4:	00017787 	.word	0x00017787
    bba8:	0001778f 	.word	0x0001778f
    bbac:	000177e7 	.word	0x000177e7
    bbb0:	00017dc4 	.word	0x00017dc4
    bbb4:	000178b4 	.word	0x000178b4

0000bbb8 <page_alloc>:
{
#if WITH_KERNEL_VM
    void *result = pmm_alloc_kpages(pages, NULL);
    return result;
#else
    void *result = novm_alloc_pages(pages, arena);
    bbb8:	f7fe bef6 	b.w	a9a8 <novm_alloc_pages>

0000bbbc <page_free>:
#if WITH_KERNEL_VM
    DEBUG_ASSERT(IS_PAGE_ALIGNED((uintptr_t)ptr));

    pmm_free_kpages(ptr, pages);
#else
    novm_free_pages(ptr, pages);
    bbbc:	f7fe bf18 	b.w	a9f0 <novm_free_pages>

0000bbc0 <page_first_alloc>:
{
#if WITH_KERNEL_VM
    *size_return = PAGE_SIZE;
    return page_alloc(1, PAGE_ALLOC_ANY_ARENA);
#else
    return novm_alloc_unaligned(size_return);
    bbc0:	f7fe bf02 	b.w	a9c8 <novm_alloc_unaligned>

0000bbc4 <bcopy>:
.align 2

/* void bcopy(const void *src, void *dest, size_t n); */
FUNCTION(bcopy)
    // swap args for bcopy
    mov     r12, r0
    bbc4:	4684      	mov	r12, r0
    mov     r0, r1
    bbc6:	4608      	mov	r0, r1
    mov     r1, r12
    bbc8:	4661      	mov	r1, r12

0000bbca <memcpy>:

/* void *memcpy(void *dest, const void *src, size_t count) */
FUNCTION(memcpy)
    push    { r0, r14 }
    bbca:	b501      	push	{r0, r14}

    // test for zero length or pointers being equivalent
    cbz     r2, .L_done
    bbcc:	b332      	cbz	r2, bc1c <memcpy+0x52>
    cmp     r0, r1
    bbce:	4288      	cmp	r0, r1
    beq     .L_done
    bbd0:	d024      	beq.n	bc1c <memcpy+0x52>

    // check for a short copy len
    cmp     r2, #16
    bbd2:	2a10      	cmp	r2, #16
    blt     .L_bytewise
    bbd4:	db1c      	blt.n	bc10 <memcpy+0x46>

    // check to see if the pointers are similarly dword aligned
    eors    r3, r0, r1
    bbd6:	ea90 0301 	eors.w	r3, r0, r1
    ands    r3, #7
    bbda:	f013 0307 	ands.w	r3, r3, #7
    beq     .L_prepare_dword
    bbde:	d01e      	beq.n	bc1e <memcpy+0x54>

    // see how many bytes we need to move to align dest to word boundary
    and     r3, r0, #3
    bbe0:	f000 0303 	and.w	r3, r0, #3
    cbz     r3, .L_prepare_wordwise
    bbe4:	b143      	cbz	r3, bbf8 <memcpy+0x2e>
    rsb     r3, #4
    bbe6:	f1c3 0304 	rsb	r3, r3, #4
    subs    r2, r3
    bbea:	1ad2      	subs	r2, r2, r3

    .align 2
.L_bytewise_align:
    // bytewise to align memcpy
    ldrb    r12, [r1], #1
    bbec:	f811 cb01 	ldrb.w	r12, [r1], #1
    subs    r3, r3, #1
    bbf0:	3b01      	subs	r3, #1
    strb    r12, [r0], #1
    bbf2:	f800 cb01 	strb.w	r12, [r0], #1
    bgt     .L_bytewise_align
    bbf6:	dcf9      	bgt.n	bbec <memcpy+0x22>

.L_prepare_wordwise:
    // load the number of words left
    lsrs    r3, r2, #2
    bbf8:	0893      	lsrs	r3, r2, #2
    bbfa:	bf00      	nop

    .align 2
.L_wordwise:
    // wordwise copy
    ldr     r12, [r1], #4
    bbfc:	f851 cb04 	ldr.w	r12, [r1], #4
    subs    r3, r3, #1
    bc00:	3b01      	subs	r3, #1
    str     r12, [r0], #4
    bc02:	f840 cb04 	str.w	r12, [r0], #4
    bgt     .L_wordwise
    bc06:	dcf9      	bgt.n	bbfc <memcpy+0x32>

    // remaining bytes
    ands     r2, #3
    bc08:	f012 0203 	ands.w	r2, r2, #3
    beq     .L_done
    bc0c:	d006      	beq.n	bc1c <memcpy+0x52>
    bc0e:	bf00      	nop

    .align 2
.L_bytewise:
    // simple bytewise copy
    ldrb    r12, [r1], #1
    bc10:	f811 cb01 	ldrb.w	r12, [r1], #1
    subs    r2, r2, #1
    bc14:	3a01      	subs	r2, #1
    strb    r12, [r0], #1
    bc16:	f800 cb01 	strb.w	r12, [r0], #1
    bgt     .L_bytewise
    bc1a:	dcf9      	bgt.n	bc10 <memcpy+0x46>

.L_done:
    pop     { r0, pc }
    bc1c:	bd01      	pop	{r0, r15}

// Handle copying by dword (8 bytes at a time) increments
.L_prepare_dword:
    // see how many bytes we need to move to align dest to dword boundary
    and     r3, r0, #7
    bc1e:	f000 0307 	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    bc22:	b14b      	cbz	r3, bc38 <memcpy+0x6e>
    rsb     r3, #8
    bc24:	f1c3 0308 	rsb	r3, r3, #8
    subs    r2, r3
    bc28:	1ad2      	subs	r2, r2, r3
    bc2a:	bf00      	nop

    .align 2
.L_bytewise_align_dword:
    // bytewise to align memcpy
    ldrb    r12, [r1], #1
    bc2c:	f811 cb01 	ldrb.w	r12, [r1], #1
    subs    r3, r3, #1
    bc30:	3b01      	subs	r3, #1
    strb    r12, [r0], #1
    bc32:	f800 cb01 	strb.w	r12, [r0], #1
    bgt     .L_bytewise_align_dword
    bc36:	dcf9      	bgt.n	bc2c <memcpy+0x62>

.L_prepare_dwordwise:
    // load the number of dwords left
    lsrs    r3, r2, #3
    bc38:	08d3      	lsrs	r3, r2, #3

    push    { r5 }
    bc3a:	b420      	push	{r5}

    .align 2
.L_dwordwise:
    // dwordwise copy
    ldrd    r5, r12, [r1], #8
    bc3c:	e8f1 5c02 	ldrd	r5, r12, [r1], #8
    subs    r3, r3, #1
    bc40:	3b01      	subs	r3, #1
    strd    r5, r12, [r0], #8
    bc42:	e8e0 5c02 	strd	r5, r12, [r0], #8
    bgt     .L_dwordwise
    bc46:	dcf9      	bgt.n	bc3c <memcpy+0x72>

    pop     { r5 }
    bc48:	bc20      	pop	{r5}

    // remaining bytes
    ands     r2, #7
    bc4a:	f012 0207 	ands.w	r2, r2, #7
    beq     .L_done
    bc4e:	d0e5      	beq.n	bc1c <memcpy+0x52>

    // finish the remaining bytes and exit
    b       .L_bytewise
    bc50:	e7de      	b.n	bc10 <memcpy+0x46>
    bc52:	bf00      	nop

0000bc54 <bzero>:
.thumb
.align 2

/* void bzero(void *s, size_t n); */
FUNCTION(bzero)
    mov     r2, r1
    bc54:	460a      	mov	r2, r1
    movs    r1, #0
    bc56:	2100      	movs	r1, #0

0000bc58 <memset>:

/* void *memset(void *s, int c, size_t n); */
FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    bc58:	b501      	push	{r0, r14}

    // check for zero length
    cbz     r2, .L_done
    bc5a:	b1ea      	cbz	r2, bc98 <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    bc5c:	2a10      	cmp	r2, #16
    blt     .L_bytewise
    bc5e:	db17      	blt.n	bc90 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    bc60:	f000 0307 	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    bc64:	b133      	cbz	r3, bc74 <memset+0x1c>
    rsb     r3, #8
    bc66:	f1c3 0308 	rsb	r3, r3, #8
    subs    r2, r3
    bc6a:	1ad2      	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    bc6c:	3b01      	subs	r3, #1
    strb    r1, [r0], #1
    bc6e:	f800 1b01 	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    bc72:	dcfb      	bgt.n	bc6c <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    bc74:	b2c9      	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    bc76:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    bc7a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    bc7e:	468c      	mov	r12, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    bc80:	08d3      	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
    subs    r3, r3, #1
    bc82:	3b01      	subs	r3, #1
    strd    r1, r12, [r0], #8
    bc84:	e8e0 1c02 	strd	r1, r12, [r0], #8
    bgt     .L_dwordwise
    bc88:	dcfb      	bgt.n	bc82 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    bc8a:	f012 0207 	ands.w	r2, r2, #7
    beq     .L_done
    bc8e:	d003      	beq.n	bc98 <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    bc90:	3a01      	subs	r2, #1
    strb    r1, [r0], #1
    bc92:	f800 1b01 	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    bc96:	dcfb      	bgt.n	bc90 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    bc98:	bd01      	pop	{r0, r15}
    bc9a:	bf00      	nop

0000bc9c <hexval>:

#define LONG_IS_INT 1

static int hexval(char c)
{
    if (c >= '0' && c <= '9')
    bc9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    bca0:	b2da      	uxtb	r2, r3
    bca2:	2a09      	cmp	r2, #9
    bca4:	d801      	bhi.n	bcaa <hexval+0xe>
        return c - '0';
    bca6:	4618      	mov	r0, r3
    bca8:	4770      	bx	r14
    else if (c >= 'a' && c <= 'f')
    bcaa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    bcae:	b2db      	uxtb	r3, r3
    bcb0:	2b05      	cmp	r3, #5
    bcb2:	d801      	bhi.n	bcb8 <hexval+0x1c>
        return c - 'a' + 10;
    bcb4:	3857      	subs	r0, #87	; 0x57
    bcb6:	4770      	bx	r14
    else if (c >= 'A' && c <= 'F')
    bcb8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    bcbc:	b2db      	uxtb	r3, r3
    bcbe:	2b05      	cmp	r3, #5
        return c - 'A' + 10;
    bcc0:	bf94      	ite	ls
    bcc2:	3837      	subls	r0, #55	; 0x37

    return 0;
    bcc4:	2000      	movhi	r0, #0
}
    bcc6:	4770      	bx	r14

0000bcc8 <atol>:
    return atoul(num);
#endif
}

long atol(const char *num)
{
    bcc8:	b570      	push	{r4, r5, r6, r14}
    long value = 0;
    int neg = 0;

    if (num[0] == '0' && num[1] == 'x') {
    bcca:	7803      	ldrb	r3, [r0, #0]
    bccc:	2b30      	cmp	r3, #48	; 0x30
    bcce:	d111      	bne.n	bcf4 <atol+0x2c>
    bcd0:	7843      	ldrb	r3, [r0, #1]
    bcd2:	2b78      	cmp	r3, #120	; 0x78
    bcd4:	d113      	bne.n	bcfe <atol+0x36>
    bcd6:	1c46      	adds	r6, r0, #1
#endif
}

long atol(const char *num)
{
    long value = 0;
    bcd8:	2400      	movs	r4, #0
    int neg = 0;

    if (num[0] == '0' && num[1] == 'x') {
        // hex
        num += 2;
        while (*num && isxdigit(*num))
    bcda:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    bcde:	b1fd      	cbz	r5, bd20 <atol+0x58>
    bce0:	4628      	mov	r0, r5
    bce2:	f000 f84d 	bl	bd80 <isxdigit>
    bce6:	b1d8      	cbz	r0, bd20 <atol+0x58>
            value = value * 16 + hexval(*num++);
    bce8:	4628      	mov	r0, r5
    bcea:	f7ff ffd7 	bl	bc9c <hexval>
    bcee:	0124      	lsls	r4, r4, #4
    bcf0:	4404      	add	r4, r0
    bcf2:	e7f2      	b.n	bcda <atol+0x12>
    } else {
        // decimal
        if (num[0] == '-') {
    bcf4:	2b2d      	cmp	r3, #45	; 0x2d
    bcf6:	d102      	bne.n	bcfe <atol+0x36>
            neg = 1;
            num++;
    bcf8:	3001      	adds	r0, #1
        while (*num && isxdigit(*num))
            value = value * 16 + hexval(*num++);
    } else {
        // decimal
        if (num[0] == '-') {
            neg = 1;
    bcfa:	2301      	movs	r3, #1
    bcfc:	e000      	b.n	bd00 <atol+0x38>
}

long atol(const char *num)
{
    long value = 0;
    int neg = 0;
    bcfe:	2300      	movs	r3, #0
    bd00:	3801      	subs	r0, #1
    bd02:	2400      	movs	r4, #0
        // decimal
        if (num[0] == '-') {
            neg = 1;
            num++;
        }
        while (*num && isdigit(*num))
    bd04:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    bd08:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    bd0c:	b2c9      	uxtb	r1, r1
    bd0e:	2909      	cmp	r1, #9
    bd10:	d804      	bhi.n	bd1c <atol+0x54>
            value = value * 10 + *num++  - '0';
    bd12:	210a      	movs	r1, #10
    bd14:	fb01 2404 	mla	r4, r1, r4, r2
    bd18:	3c30      	subs	r4, #48	; 0x30
    bd1a:	e7f3      	b.n	bd04 <atol+0x3c>
    }

    if (neg)
    bd1c:	b103      	cbz	r3, bd20 <atol+0x58>
        value = -value;
    bd1e:	4264      	negs	r4, r4

    return value;
}
    bd20:	4620      	mov	r0, r4
    bd22:	bd70      	pop	{r4, r5, r6, r15}

0000bd24 <atoul>:

unsigned long atoul(const char *num)
{
    bd24:	b570      	push	{r4, r5, r6, r14}
    unsigned long value = 0;
    if (num[0] == '0' && num[1] == 'x') {
    bd26:	7803      	ldrb	r3, [r0, #0]
    bd28:	2b30      	cmp	r3, #48	; 0x30
    bd2a:	d002      	beq.n	bd32 <atoul+0xe>
    bd2c:	3801      	subs	r0, #1
    return value;
}

unsigned long atoul(const char *num)
{
    unsigned long value = 0;
    bd2e:	2400      	movs	r4, #0
    bd30:	e011      	b.n	bd56 <atoul+0x32>
    if (num[0] == '0' && num[1] == 'x') {
    bd32:	7843      	ldrb	r3, [r0, #1]
    bd34:	2b78      	cmp	r3, #120	; 0x78
    bd36:	d1f9      	bne.n	bd2c <atoul+0x8>
    bd38:	1c46      	adds	r6, r0, #1
    return value;
}

unsigned long atoul(const char *num)
{
    unsigned long value = 0;
    bd3a:	2400      	movs	r4, #0
    if (num[0] == '0' && num[1] == 'x') {
        // hex
        num += 2;
        while (*num && isxdigit(*num))
    bd3c:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    bd40:	b19d      	cbz	r5, bd6a <atoul+0x46>
    bd42:	4628      	mov	r0, r5
    bd44:	f000 f81c 	bl	bd80 <isxdigit>
    bd48:	b178      	cbz	r0, bd6a <atoul+0x46>
            value = value * 16 + hexval(*num++);
    bd4a:	4628      	mov	r0, r5
    bd4c:	f7ff ffa6 	bl	bc9c <hexval>
    bd50:	0124      	lsls	r4, r4, #4
    bd52:	4404      	add	r4, r0
    bd54:	e7f2      	b.n	bd3c <atoul+0x18>
    } else {
        // decimal
        while (*num && isdigit(*num))
    bd56:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    bd5a:	3b30      	subs	r3, #48	; 0x30
    bd5c:	b2da      	uxtb	r2, r3
    bd5e:	2a09      	cmp	r2, #9
    bd60:	d803      	bhi.n	bd6a <atoul+0x46>
            value = value * 10 + *num++  - '0';
    bd62:	220a      	movs	r2, #10
    bd64:	fb02 3404 	mla	r4, r2, r4, r3
    bd68:	e7f5      	b.n	bd56 <atoul+0x32>
    }

    return value;
}
    bd6a:	4620      	mov	r0, r4
    bd6c:	bd70      	pop	{r4, r5, r6, r15}

0000bd6e <isspace>:
    return (c == ' ' || c == '\t');
}

int isspace(int c)
{
    return (c == ' ' || c == '\f' || c == '\n' || c == '\r' || c == '\t' || c == '\v');
    bd6e:	2820      	cmp	r0, #32
    bd70:	d101      	bne.n	bd76 <isspace+0x8>
    bd72:	2001      	movs	r0, #1
    bd74:	4770      	bx	r14
    bd76:	3809      	subs	r0, #9
    bd78:	2804      	cmp	r0, #4
    bd7a:	d9fa      	bls.n	bd72 <isspace+0x4>
    bd7c:	2000      	movs	r0, #0
}
    bd7e:	4770      	bx	r14

0000bd80 <isxdigit>:
    return isalpha(c) || isdigit(c);
}

int isxdigit(int c)
{
    return isdigit(c) || ((c >= 'a') && (c <= 'f')) || ((c >= 'A') && (c <= 'F'));
    bd80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    bd84:	2b09      	cmp	r3, #9
    bd86:	d907      	bls.n	bd98 <isxdigit+0x18>
    bd88:	f020 0020 	bic.w	r0, r0, #32
    bd8c:	3841      	subs	r0, #65	; 0x41
    bd8e:	2805      	cmp	r0, #5
    bd90:	bf8c      	ite	hi
    bd92:	2000      	movhi	r0, #0
    bd94:	2001      	movls	r0, #1
    bd96:	4770      	bx	r14
    bd98:	2001      	movs	r0, #1
}
    bd9a:	4770      	bx	r14

0000bd9c <isprint>:
    return ((c < ' ') || (c == 0x7f));
}

int isprint(int c)
{
    return ((c >= 0x20) && (c < 0x7f));
    bd9c:	3820      	subs	r0, #32
}
    bd9e:	285e      	cmp	r0, #94	; 0x5e
    bda0:	bf8c      	ite	hi
    bda2:	2000      	movhi	r0, #0
    bda4:	2001      	movls	r0, #1
    bda6:	4770      	bx	r14

0000bda8 <_vsnprintf_output>:
    size_t len;
    size_t pos;
};

static int _vsnprintf_output(const char *str, size_t len, void *state)
{
    bda8:	b570      	push	{r4, r5, r6, r14}
    struct _output_args *args = state;

    size_t count = 0;
    bdaa:	2300      	movs	r3, #0
    while (count < len) {
    bdac:	428b      	cmp	r3, r1
    bdae:	d00a      	beq.n	bdc6 <_vsnprintf_output+0x1e>
        if (args->pos < args->len) {
    bdb0:	6894      	ldr	r4, [r2, #8]
    bdb2:	6855      	ldr	r5, [r2, #4]
    bdb4:	42ac      	cmp	r4, r5
    bdb6:	d204      	bcs.n	bdc2 <_vsnprintf_output+0x1a>
            args->outstr[args->pos++] = *str;
    bdb8:	1c66      	adds	r6, r4, #1
    bdba:	6096      	str	r6, [r2, #8]
    bdbc:	6815      	ldr	r5, [r2, #0]
    bdbe:	5cc6      	ldrb	r6, [r0, r3]
    bdc0:	552e      	strb	r6, [r5, r4]
        }

        str++;
        count++;
    bdc2:	3301      	adds	r3, #1
    bdc4:	e7f2      	b.n	bdac <_vsnprintf_output+0x4>
    }

    return count;
}
    bdc6:	4618      	mov	r0, r3
    bdc8:	bd70      	pop	{r4, r5, r6, r15}

0000bdca <longlong_to_string>:
#define LEFTFORMATFLAG 0x00000800
#define LEADZEROFLAG   0x00001000
#define BLANKPOSFLAG   0x00002000

__NO_INLINE static char *longlong_to_string(char *buf, unsigned long long n, size_t len, uint flag, char *signchar)
{
    bdca:	e92d 4ff8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r10, r11, r14}
    bdce:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bdd0:	4681      	mov	r9, r0
    size_t pos = len;
    int negative = 0;

    if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    bdd2:	f416 6880 	ands.w	r8, r6, #1024	; 0x400
#define LEFTFORMATFLAG 0x00000800
#define LEADZEROFLAG   0x00001000
#define BLANKPOSFLAG   0x00002000

__NO_INLINE static char *longlong_to_string(char *buf, unsigned long long n, size_t len, uint flag, char *signchar)
{
    bdd6:	4614      	mov	r4, r2
    bdd8:	461d      	mov	r5, r3
    bdda:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    size_t pos = len;
    int negative = 0;

    if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    bddc:	d00b      	beq.n	bdf6 <longlong_to_string+0x2c>
    bdde:	2c00      	cmp	r4, #0
    bde0:	f175 0300 	sbcs.w	r3, r5, #0
    bde4:	da05      	bge.n	bdf2 <longlong_to_string+0x28>
        negative = 1;
        n = -n;
    bde6:	4264      	negs	r4, r4
    bde8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
{
    size_t pos = len;
    int negative = 0;

    if ((flag & SIGNEDFLAG) && (long long)n < 0) {
        negative = 1;
    bdec:	f04f 0801 	mov.w	r8, #1
    bdf0:	e001      	b.n	bdf6 <longlong_to_string+0x2c>
#define BLANKPOSFLAG   0x00002000

__NO_INLINE static char *longlong_to_string(char *buf, unsigned long long n, size_t len, uint flag, char *signchar)
{
    size_t pos = len;
    int negative = 0;
    bdf2:	f04f 0800 	mov.w	r8, #0
    if ((flag & SIGNEDFLAG) && (long long)n < 0) {
        negative = 1;
        n = -n;
    }

    buf[--pos] = 0;
    bdf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bdf8:	2200      	movs	r2, #0
    bdfa:	3b01      	subs	r3, #1
    bdfc:	f809 2003 	strb.w	r2, [r9, r3]

    /* only do the math if the number is >= 10 */
    while (n >= 10) {
    be00:	2d00      	cmp	r5, #0
    be02:	bf08      	it	eq
    be04:	2c0a      	cmpeq	r4, #10
    be06:	f103 3aff 	add.w	r10, r3, #4294967295
    be0a:	d314      	bcc.n	be36 <longlong_to_string+0x6c>
        int digit = n % 10;
    be0c:	4620      	mov	r0, r4
    be0e:	4629      	mov	r1, r5
    be10:	220a      	movs	r2, #10
    be12:	2300      	movs	r3, #0
    be14:	f001 fff6 	bl	de04 <__aeabi_uldivmod>

        n /= 10;
    be18:	4620      	mov	r0, r4

    buf[--pos] = 0;

    /* only do the math if the number is >= 10 */
    while (n >= 10) {
        int digit = n % 10;
    be1a:	4693      	mov	r11, r2

        n /= 10;
    be1c:	4629      	mov	r1, r5
    be1e:	2300      	movs	r3, #0
    be20:	220a      	movs	r2, #10
    be22:	f001 ffef 	bl	de04 <__aeabi_uldivmod>

        buf[--pos] = digit + '0';
    be26:	f10b 0b30 	add.w	r11, r11, #48	; 0x30

    /* only do the math if the number is >= 10 */
    while (n >= 10) {
        int digit = n % 10;

        n /= 10;
    be2a:	4604      	mov	r4, r0
    be2c:	460d      	mov	r5, r1

        buf[--pos] = digit + '0';
    be2e:	4653      	mov	r3, r10
    be30:	f809 b00a 	strb.w	r11, [r9, r10]
    be34:	e7e4      	b.n	be00 <longlong_to_string+0x36>
    }
    buf[--pos] = n + '0';
    be36:	3430      	adds	r4, #48	; 0x30
    be38:	eb09 000a 	add.w	r0, r9, r10
    be3c:	f809 400a 	strb.w	r4, [r9, r10]

    if (negative)
    be40:	f1b8 0f00 	cmp.w	r8, #0
    be44:	d001      	beq.n	be4a <longlong_to_string+0x80>
        *signchar = '-';
    be46:	232d      	movs	r3, #45	; 0x2d
    be48:	e002      	b.n	be50 <longlong_to_string+0x86>
    else if ((flag & SHOWSIGNFLAG))
    be4a:	05b2      	lsls	r2, r6, #22
    be4c:	d503      	bpl.n	be56 <longlong_to_string+0x8c>
        *signchar = '+';
    be4e:	232b      	movs	r3, #43	; 0x2b
    be50:	703b      	strb	r3, [r7, #0]
    be52:	e8bd 8ff8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r10, r11, r15}
    else if ((flag & BLANKPOSFLAG))
    be56:	04b3      	lsls	r3, r6, #18
    be58:	d501      	bpl.n	be5e <longlong_to_string+0x94>
        *signchar = ' ';
    be5a:	2320      	movs	r3, #32
    be5c:	e7f8      	b.n	be50 <longlong_to_string+0x86>
    else
        *signchar = '\0';
    be5e:	f887 8000 	strb.w	r8, [r7]

    return &buf[pos];
}
    be62:	e8bd 8ff8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r10, r11, r15}

0000be66 <exponent_to_string>:
__NO_INLINE static size_t exponent_to_string(char *buf, int32_t exponent)
{
    size_t pos = 0;

    /* handle sign */
    if (exponent < 0) {
    be66:	2900      	cmp	r1, #0
#define OUT(c) buf[pos++] = (c)
#define OUTSTR(str) do { for (size_t i = 0; (str)[i] != 0; i++) OUT((str)[i]); } while (0)

/* print up to a 4 digit exponent as string, with sign */
__NO_INLINE static size_t exponent_to_string(char *buf, int32_t exponent)
{
    be68:	b510      	push	{r4, r14}
    size_t pos = 0;

    /* handle sign */
    if (exponent < 0) {
    be6a:	da03      	bge.n	be74 <exponent_to_string+0xe>
        OUT('-');
    be6c:	232d      	movs	r3, #45	; 0x2d
    be6e:	7003      	strb	r3, [r0, #0]
        exponent = -exponent;
    be70:	4249      	negs	r1, r1
    be72:	e001      	b.n	be78 <exponent_to_string+0x12>
    } else {
        OUT('+');
    be74:	232b      	movs	r3, #43	; 0x2b
    be76:	7003      	strb	r3, [r0, #0]
    }

    /* see how far we need to bump into the string to print from the right */
    if (exponent >= 1000) pos += 4;
    be78:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
    be7c:	da06      	bge.n	be8c <exponent_to_string+0x26>
    else if (exponent >= 100) pos += 3;
    be7e:	2963      	cmp	r1, #99	; 0x63
    be80:	dc06      	bgt.n	be90 <exponent_to_string+0x2a>
    else if (exponent >= 10) pos += 2;
    be82:	2909      	cmp	r1, #9
    be84:	bfd4      	ite	le
    be86:	2302      	movle	r3, #2
    be88:	2303      	movgt	r3, #3
    be8a:	e002      	b.n	be92 <exponent_to_string+0x2c>
    } else {
        OUT('+');
    }

    /* see how far we need to bump into the string to print from the right */
    if (exponent >= 1000) pos += 4;
    be8c:	2305      	movs	r3, #5
    be8e:	e000      	b.n	be92 <exponent_to_string+0x2c>
    else if (exponent >= 100) pos += 3;
    be90:	2304      	movs	r3, #4
    be92:	4418      	add	r0, r3
    else pos++;

    /* print decimal string, from the right */
    uint i = pos;
    do {
        uint digit = (uint32_t)exponent % 10;
    be94:	220a      	movs	r2, #10
    be96:	fbb1 f4f2 	udiv	r4, r1, r2
    be9a:	fb02 1414 	mls	r4, r2, r4, r1

        buf[--i] = digit + '0';

        exponent /= 10;
    be9e:	fb91 f1f2 	sdiv	r1, r1, r2
    /* print decimal string, from the right */
    uint i = pos;
    do {
        uint digit = (uint32_t)exponent % 10;

        buf[--i] = digit + '0';
    bea2:	3430      	adds	r4, #48	; 0x30
    bea4:	f800 4d01 	strb.w	r4, [r0, #-1]!

        exponent /= 10;
    } while (exponent != 0);
    bea8:	2900      	cmp	r1, #0
    beaa:	d1f3      	bne.n	be94 <exponent_to_string+0x2e>

    /* return number of characters printed */
    return pos;
}
    beac:	4618      	mov	r0, r3
    beae:	bd10      	pop	{r4, r15}

0000beb0 <double_to_hexstring.isra.0>:

    buf[pos] = 0;
    return buf;
}

__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    beb0:	e92d 4ff7 	stmdb	r13!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, r11, r14}
{
    size_t pos = 0;
    union double_int u = { d };

    uint32_t exponent = (u.i >> 52) & 0x7ff;
    uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    beb4:	4d67      	ldr	r5, [pc, #412]	; (c054 <double_to_hexstring.isra.0+0x1a4>)

    buf[pos] = 0;
    return buf;
}

__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    beb6:	4606      	mov	r6, r0
    uint32_t exponent = (u.i >> 52) & 0x7ff;
    uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    bool neg = !!(u.i & (1ULL << 63));

    /* start constructing the string */
    if (neg) {
    beb8:	2a00      	cmp	r2, #0
    beba:	f173 0000 	sbcs.w	r0, r3, #0
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
{
    size_t pos = 0;
    union double_int u = { d };

    uint32_t exponent = (u.i >> 52) & 0x7ff;
    bebe:	f3c3 510a 	ubfx	r1, r3, #20, #11
    uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    bec2:	ea05 0503 	and.w	r5, r5, r3
    bool neg = !!(u.i & (1ULL << 63));

    /* start constructing the string */
    if (neg) {
        OUT('-');
    bec6:	bfbc      	itt	lt
    bec8:	232d      	movlt	r3, #45	; 0x2d
    beca:	7033      	strblt	r3, [r6, #0]
{
    size_t pos = 0;
    union double_int u = { d };

    uint32_t exponent = (u.i >> 52) & 0x7ff;
    uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    becc:	f04f 34ff 	mov.w	r4, #4294967295
    if (neg) {
        OUT('-');
    }

    /* look for special cases */
    if (exponent == 0x7ff) {
    bed0:	f240 73ff 	movw	r3, #2047	; 0x7ff
{
    size_t pos = 0;
    union double_int u = { d };

    uint32_t exponent = (u.i >> 52) & 0x7ff;
    uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    bed4:	ea04 0402 	and.w	r4, r4, r2
    bool neg = !!(u.i & (1ULL << 63));

    /* start constructing the string */
    if (neg) {
        OUT('-');
    bed8:	bfb4      	ite	lt
    beda:	2201      	movlt	r2, #1
    return buf;
}

__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
{
    size_t pos = 0;
    bedc:	2200      	movge	r2, #0
    if (neg) {
        OUT('-');
    }

    /* look for special cases */
    if (exponent == 0x7ff) {
    bede:	4299      	cmp	r1, r3
    bee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bee2:	f403 7880 	and.w	r8, r3, #256	; 0x100
    bee6:	d12d      	bne.n	bf44 <double_to_hexstring.isra.0+0x94>
        if (fraction == 0) {
    bee8:	ea54 0305 	orrs.w	r3, r4, r5
            /* infinity */
            if (flag & CAPSFLAG) OUTSTR("INF");
    beec:	4610      	mov	r0, r2
        OUT('-');
    }

    /* look for special cases */
    if (exponent == 0x7ff) {
        if (fraction == 0) {
    beee:	d114      	bne.n	bf1a <double_to_hexstring.isra.0+0x6a>
            /* infinity */
            if (flag & CAPSFLAG) OUTSTR("INF");
    bef0:	f1b8 0f00 	cmp.w	r8, #0
    bef4:	d008      	beq.n	bf08 <double_to_hexstring.isra.0+0x58>
    bef6:	4958      	ldr	r1, [pc, #352]	; (c058 <double_to_hexstring.isra.0+0x1a8>)
    bef8:	1a89      	subs	r1, r1, r2
    befa:	5c09      	ldrb	r1, [r1, r0]
    befc:	2900      	cmp	r1, #0
    befe:	f000 80a2 	beq.w	c046 <double_to_hexstring.isra.0+0x196>
    bf02:	5431      	strb	r1, [r6, r0]
    bf04:	3001      	adds	r0, #1
    bf06:	e7f6      	b.n	bef6 <double_to_hexstring.isra.0+0x46>
    bf08:	4954      	ldr	r1, [pc, #336]	; (c05c <double_to_hexstring.isra.0+0x1ac>)
    bf0a:	1a89      	subs	r1, r1, r2
            else OUTSTR("inf");
    bf0c:	5c09      	ldrb	r1, [r1, r0]
    bf0e:	2900      	cmp	r1, #0
    bf10:	f000 8099 	beq.w	c046 <double_to_hexstring.isra.0+0x196>
    bf14:	5431      	strb	r1, [r6, r0]
    bf16:	3001      	adds	r0, #1
    bf18:	e7f6      	b.n	bf08 <double_to_hexstring.isra.0+0x58>
        } else {
            /* NaN */
            if (flag & CAPSFLAG) OUTSTR("NAN");
    bf1a:	f1b8 0f00 	cmp.w	r8, #0
    bf1e:	d008      	beq.n	bf32 <double_to_hexstring.isra.0+0x82>
    bf20:	494f      	ldr	r1, [pc, #316]	; (c060 <double_to_hexstring.isra.0+0x1b0>)
    bf22:	1a89      	subs	r1, r1, r2
    bf24:	5c09      	ldrb	r1, [r1, r0]
    bf26:	2900      	cmp	r1, #0
    bf28:	f000 808d 	beq.w	c046 <double_to_hexstring.isra.0+0x196>
    bf2c:	5431      	strb	r1, [r6, r0]
    bf2e:	3001      	adds	r0, #1
    bf30:	e7f6      	b.n	bf20 <double_to_hexstring.isra.0+0x70>
    bf32:	494c      	ldr	r1, [pc, #304]	; (c064 <double_to_hexstring.isra.0+0x1b4>)
    bf34:	1a89      	subs	r1, r1, r2
            else OUTSTR("nan");
    bf36:	5c09      	ldrb	r1, [r1, r0]
    bf38:	2900      	cmp	r1, #0
    bf3a:	f000 8084 	beq.w	c046 <double_to_hexstring.isra.0+0x196>
    bf3e:	5431      	strb	r1, [r6, r0]
    bf40:	3001      	adds	r0, #1
    bf42:	e7f6      	b.n	bf32 <double_to_hexstring.isra.0+0x82>
        }
    } else if (exponent == 0) {
    bf44:	bb49      	cbnz	r1, bf9a <double_to_hexstring.isra.0+0xea>
        if (fraction == 0) {
    bf46:	ea54 0005 	orrs.w	r0, r4, r5
            /* zero */
            if (flag & CAPSFLAG) OUTSTR("0X0P+0");
    bf4a:	4610      	mov	r0, r2
            /* NaN */
            if (flag & CAPSFLAG) OUTSTR("NAN");
            else OUTSTR("nan");
        }
    } else if (exponent == 0) {
        if (fraction == 0) {
    bf4c:	d112      	bne.n	bf74 <double_to_hexstring.isra.0+0xc4>
            /* zero */
            if (flag & CAPSFLAG) OUTSTR("0X0P+0");
    bf4e:	f1b8 0f00 	cmp.w	r8, #0
    bf52:	d007      	beq.n	bf64 <double_to_hexstring.isra.0+0xb4>
    bf54:	4944      	ldr	r1, [pc, #272]	; (c068 <double_to_hexstring.isra.0+0x1b8>)
    bf56:	1a89      	subs	r1, r1, r2
    bf58:	5c09      	ldrb	r1, [r1, r0]
    bf5a:	2900      	cmp	r1, #0
    bf5c:	d073      	beq.n	c046 <double_to_hexstring.isra.0+0x196>
    bf5e:	5431      	strb	r1, [r6, r0]
    bf60:	3001      	adds	r0, #1
    bf62:	e7f7      	b.n	bf54 <double_to_hexstring.isra.0+0xa4>
    bf64:	4941      	ldr	r1, [pc, #260]	; (c06c <double_to_hexstring.isra.0+0x1bc>)
    bf66:	1a89      	subs	r1, r1, r2
            else OUTSTR("0x0p+0");
    bf68:	5c09      	ldrb	r1, [r1, r0]
    bf6a:	2900      	cmp	r1, #0
    bf6c:	d06b      	beq.n	c046 <double_to_hexstring.isra.0+0x196>
    bf6e:	5431      	strb	r1, [r6, r0]
    bf70:	3001      	adds	r0, #1
    bf72:	e7f7      	b.n	bf64 <double_to_hexstring.isra.0+0xb4>
        } else {
            /* denormalized */
            /* XXX does not handle */
            if (flag & CAPSFLAG) OUTSTR("DEN");
    bf74:	f1b8 0f00 	cmp.w	r8, #0
    bf78:	d007      	beq.n	bf8a <double_to_hexstring.isra.0+0xda>
    bf7a:	493d      	ldr	r1, [pc, #244]	; (c070 <double_to_hexstring.isra.0+0x1c0>)
    bf7c:	1a89      	subs	r1, r1, r2
    bf7e:	5c09      	ldrb	r1, [r1, r0]
    bf80:	2900      	cmp	r1, #0
    bf82:	d060      	beq.n	c046 <double_to_hexstring.isra.0+0x196>
    bf84:	5431      	strb	r1, [r6, r0]
    bf86:	3001      	adds	r0, #1
    bf88:	e7f7      	b.n	bf7a <double_to_hexstring.isra.0+0xca>
    bf8a:	493a      	ldr	r1, [pc, #232]	; (c074 <double_to_hexstring.isra.0+0x1c4>)
    bf8c:	1a89      	subs	r1, r1, r2
            else OUTSTR("den");
    bf8e:	5c09      	ldrb	r1, [r1, r0]
    bf90:	2900      	cmp	r1, #0
    bf92:	d058      	beq.n	c046 <double_to_hexstring.isra.0+0x196>
    bf94:	5431      	strb	r1, [r6, r0]
    bf96:	3001      	adds	r0, #1
    bf98:	e7f7      	b.n	bf8a <double_to_hexstring.isra.0+0xda>
         * 0x1p+1
         * 0x1.0000000000001p+1
         * 0X1.FFFFFFFFFFFFFP+1023
         * 0x1.FFFFFFFFFFFFFP+1023
         */
        int exponent_signed = exponent - 1023;
    bf9a:	f2a1 3bff 	subw	r11, r1, #1023	; 0x3ff

        /* implicit 1. */
        if (flag & CAPSFLAG) OUTSTR("0X1");
    bf9e:	4617      	mov	r7, r2
    bfa0:	f1b8 0f00 	cmp.w	r8, #0
    bfa4:	d009      	beq.n	bfba <double_to_hexstring.isra.0+0x10a>
    bfa6:	4b34      	ldr	r3, [pc, #208]	; (c078 <double_to_hexstring.isra.0+0x1c8>)
    bfa8:	1a9b      	subs	r3, r3, r2
    bfaa:	5ddb      	ldrb	r3, [r3, r7]
    bfac:	b113      	cbz	r3, bfb4 <double_to_hexstring.isra.0+0x104>
    bfae:	55f3      	strb	r3, [r6, r7]
    bfb0:	3701      	adds	r7, #1
    bfb2:	e7f8      	b.n	bfa6 <double_to_hexstring.isra.0+0xf6>
        else OUTSTR("0x1");

        /* select the appropriate hex case table */
        const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    bfb4:	f8df c0c8 	ldr.w	r12, [r15, #200]	; c080 <double_to_hexstring.isra.0+0x1d0>
    bfb8:	e008      	b.n	bfcc <double_to_hexstring.isra.0+0x11c>
    bfba:	4b30      	ldr	r3, [pc, #192]	; (c07c <double_to_hexstring.isra.0+0x1cc>)
    bfbc:	1a9b      	subs	r3, r3, r2
         */
        int exponent_signed = exponent - 1023;

        /* implicit 1. */
        if (flag & CAPSFLAG) OUTSTR("0X1");
        else OUTSTR("0x1");
    bfbe:	5ddb      	ldrb	r3, [r3, r7]
    bfc0:	b113      	cbz	r3, bfc8 <double_to_hexstring.isra.0+0x118>
    bfc2:	55f3      	strb	r3, [r6, r7]
    bfc4:	3701      	adds	r7, #1
    bfc6:	e7f8      	b.n	bfba <double_to_hexstring.isra.0+0x10a>

        /* select the appropriate hex case table */
        const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    bfc8:	f8df c0b8 	ldr.w	r12, [r15, #184]	; c084 <double_to_hexstring.isra.0+0x1d4>

        int zero_count = 0;
        bool output_dot = false;
    bfcc:	2300      	movs	r3, #0
        else OUTSTR("0x1");

        /* select the appropriate hex case table */
        const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;

        int zero_count = 0;
    bfce:	4699      	mov	r9, r3
        bool output_dot = false;
        for (int i = 52 - 4; i >= 0; i -= 4) {
    bfd0:	f04f 0a30 	mov.w	r10, #48	; 0x30
            uint digit = (fraction >> i) & 0xf;
    bfd4:	4620      	mov	r0, r4
    bfd6:	4629      	mov	r1, r5
    bfd8:	4652      	mov	r2, r10
    bfda:	e88d 1008 	stmia.w	r13, {r3, r12}
    bfde:	f000 ff97 	bl	cf10 <__aeabi_llsr>

            if (digit == 0) {
    bfe2:	e89d 1008 	ldmia.w	r13, {r3, r12}
    bfe6:	f010 000f 	ands.w	r0, r0, #15
    bfea:	d102      	bne.n	bff2 <double_to_hexstring.isra.0+0x142>
                zero_count++;
    bfec:	f109 0901 	add.w	r9, r9, #1
    bff0:	e015      	b.n	c01e <double_to_hexstring.isra.0+0x16e>
            } else {
                /* output a . the first time we output a char */
                if (!output_dot) {
    bff2:	b913      	cbnz	r3, bffa <double_to_hexstring.isra.0+0x14a>
                    OUT('.');
    bff4:	232e      	movs	r3, #46	; 0x2e
    bff6:	55f3      	strb	r3, [r6, r7]
    bff8:	3701      	adds	r7, #1
    bffa:	2300      	movs	r3, #0
                    output_dot = true;
                }
                /* if we have a non zero digit, see if we need to output a string of zeros */
                while (zero_count > 0) {
    bffc:	454b      	cmp	r3, r9
    bffe:	d004      	beq.n	c00a <double_to_hexstring.isra.0+0x15a>
    c000:	19f2      	adds	r2, r6, r7
                    OUT('0');
    c002:	2130      	movs	r1, #48	; 0x30
    c004:	54d1      	strb	r1, [r2, r3]
    c006:	3301      	adds	r3, #1
    c008:	e7f8      	b.n	bffc <double_to_hexstring.isra.0+0x14c>
                    zero_count--;
                }
                buf[pos++] = table[digit];
    c00a:	f81c 3000 	ldrb.w	r3, [r12, r0]
    c00e:	44b9      	add	r9, r7
    c010:	f806 3009 	strb.w	r3, [r6, r9]
    c014:	f109 0701 	add.w	r7, r9, #1
    c018:	2301      	movs	r3, #1
    c01a:	f04f 0900 	mov.w	r9, #0
        /* select the appropriate hex case table */
        const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;

        int zero_count = 0;
        bool output_dot = false;
        for (int i = 52 - 4; i >= 0; i -= 4) {
    c01e:	f1aa 0a04 	sub.w	r10, r10, #4
    c022:	f11a 0f04 	cmn.w	r10, #4
    c026:	d1d5      	bne.n	bfd4 <double_to_hexstring.isra.0+0x124>
                buf[pos++] = table[digit];
            }
        }

        /* handle the exponent */
        buf[pos++] = (flag & CAPSFLAG) ? 'P' : 'p';
    c028:	1c7c      	adds	r4, r7, #1
    c02a:	f1b8 0f00 	cmp.w	r8, #0
    c02e:	bf0c      	ite	eq
    c030:	f04f 0870 	moveq.w	r8, #112	; 0x70
    c034:	f04f 0850 	movne.w	r8, #80	; 0x50
    c038:	f806 8007 	strb.w	r8, [r6, r7]
        pos += exponent_to_string(&buf[pos], exponent_signed);
    c03c:	1930      	adds	r0, r6, r4
    c03e:	4659      	mov	r1, r11
    c040:	f7ff ff11 	bl	be66 <exponent_to_string>
    c044:	4420      	add	r0, r4
    }

    buf[pos] = 0;
    c046:	2200      	movs	r2, #0
    c048:	5432      	strb	r2, [r6, r0]
    return buf;
}
    c04a:	4630      	mov	r0, r6
    c04c:	b003      	add	sp, #12
    c04e:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    c052:	bf00      	nop
    c054:	000fffff 	.word	0x000fffff
    c058:	00017e30 	.word	0x00017e30
    c05c:	00017e34 	.word	0x00017e34
    c060:	00017e38 	.word	0x00017e38
    c064:	00017e3c 	.word	0x00017e3c
    c068:	00017e40 	.word	0x00017e40
    c06c:	00017e47 	.word	0x00017e47
    c070:	00017e4e 	.word	0x00017e4e
    c074:	00017e52 	.word	0x00017e52
    c078:	00017e56 	.word	0x00017e56
    c07c:	00017e5a 	.word	0x00017e5a
    c080:	00017eb2 	.word	0x00017eb2
    c084:	00017ea2 	.word	0x00017ea2

0000c088 <longlong_to_hexstring.constprop.1>:
}

static const char hextable[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
static const char hextable_caps[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };

__NO_INLINE static char *longlong_to_hexstring(char *buf, unsigned long long u, size_t len, uint flag)
    c088:	b570      	push	{r4, r5, r6, r14}
{
    size_t pos = len;
    const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    c08a:	9904      	ldr	r1, [sp, #16]
    c08c:	4d0c      	ldr	r5, [pc, #48]	; (c0c0 <longlong_to_hexstring.constprop.1+0x38>)
    c08e:	f411 7f80 	tst.w	r1, #256	; 0x100
    c092:	490c      	ldr	r1, [pc, #48]	; (c0c4 <longlong_to_hexstring.constprop.1+0x3c>)
    c094:	bf18      	it	ne
    c096:	460d      	movne	r5, r1

    buf[--pos] = 0;
    c098:	2100      	movs	r1, #0
    c09a:	77c1      	strb	r1, [r0, #31]
    c09c:	f100 011e 	add.w	r1, r0, #30
    do {
        unsigned int digit = u % 16;
    c0a0:	f002 040f 	and.w	r4, r2, #15
        u /= 16;
    c0a4:	0910      	lsrs	r0, r2, #4
    c0a6:	ea40 7003 	orr.w	r0, r0, r3, lsl #28

        buf[--pos] = table[digit];
    c0aa:	5d2c      	ldrb	r4, [r5, r4]
    const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;

    buf[--pos] = 0;
    do {
        unsigned int digit = u % 16;
        u /= 16;
    c0ac:	091e      	lsrs	r6, r3, #4
    c0ae:	4602      	mov	r2, r0
    c0b0:	4633      	mov	r3, r6

        buf[--pos] = table[digit];
    c0b2:	4608      	mov	r0, r1
    c0b4:	f801 4901 	strb.w	r4, [r1], #-1
    } while (u != 0);
    c0b8:	ea52 0403 	orrs.w	r4, r2, r3
    c0bc:	d1f0      	bne.n	c0a0 <longlong_to_hexstring.constprop.1+0x18>

    return &buf[pos];
}
    c0be:	bd70      	pop	{r4, r5, r6, r15}
    c0c0:	00017ea2 	.word	0x00017ea2
    c0c4:	00017eb2 	.word	0x00017eb2

0000c0c8 <double_to_string.constprop.2>:

    /* return number of characters printed */
    return pos;
}

__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    c0c8:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    c0cc:	461d      	mov	r5, r3
{
    size_t pos = 0;
    union double_int u = { d };

    uint32_t exponent = (u.i >> 52) & 0x7ff;
    uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    c0ce:	f8df 9214 	ldr.w	r9, [r15, #532]	; c2e4 <double_to_string.constprop.2+0x21c>

    /* return number of characters printed */
    return pos;
}

__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    c0d2:	4614      	mov	r4, r2
    c0d4:	b089      	sub	sp, #36	; 0x24
{
    size_t pos = 0;
    union double_int u = { d };

    uint32_t exponent = (u.i >> 52) & 0x7ff;
    uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    c0d6:	f04f 38ff 	mov.w	r8, #4294967295
    bool neg = !!(u.i & (1ULL << 63));

    /* start constructing the string */
    if (neg) {
    c0da:	ea5f 7bd5 	movs.w	r11, r5, lsr #31

    /* return number of characters printed */
    return pos;
}

__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    c0de:	4682      	mov	r10, r0
    c0e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
{
    size_t pos = 0;
    union double_int u = { d };

    uint32_t exponent = (u.i >> 52) & 0x7ff;
    c0e2:	f3c5 520a 	ubfx	r2, r5, #20, #11
    uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    c0e6:	ea08 0804 	and.w	r8, r8, r4
    c0ea:	ea09 0905 	and.w	r9, r9, r5
    bool neg = !!(u.i & (1ULL << 63));

    /* start constructing the string */
    if (neg) {
    c0ee:	d006      	beq.n	c0fe <double_to_string.constprop.2+0x36>
        OUT('-');
    c0f0:	212d      	movs	r1, #45	; 0x2d
    c0f2:	7001      	strb	r1, [r0, #0]
        d = -d;
    c0f4:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
    c0f8:	460d      	mov	r5, r1
    uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    bool neg = !!(u.i & (1ULL << 63));

    /* start constructing the string */
    if (neg) {
        OUT('-');
    c0fa:	2101      	movs	r1, #1
    c0fc:	e000      	b.n	c100 <double_to_string.constprop.2+0x38>
    return pos;
}

__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
{
    size_t pos = 0;
    c0fe:	4659      	mov	r1, r11
    /* longest:
     * 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000o
     */

    /* look for special cases */
    if (exponent == 0x7ff) {
    c100:	f240 70ff 	movw	r0, #2047	; 0x7ff
    c104:	4282      	cmp	r2, r0
    c106:	d134      	bne.n	c172 <double_to_string.constprop.2+0xaa>
        if (fraction == 0) {
    c108:	ea58 0209 	orrs.w	r2, r8, r9
    c10c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    c110:	d117      	bne.n	c142 <double_to_string.constprop.2+0x7a>
            /* infinity */
            if (flag & CAPSFLAG) OUTSTR("INF");
    c112:	b90b      	cbnz	r3, c118 <double_to_string.constprop.2+0x50>
    c114:	460b      	mov	r3, r1
    c116:	e00a      	b.n	c12e <double_to_string.constprop.2+0x66>
    c118:	460b      	mov	r3, r1
    c11a:	4a69      	ldr	r2, [pc, #420]	; (c2c0 <double_to_string.constprop.2+0x1f8>)
    c11c:	1a52      	subs	r2, r2, r1
    c11e:	5cd2      	ldrb	r2, [r2, r3]
    c120:	2a00      	cmp	r2, #0
    c122:	f000 80c0 	beq.w	c2a6 <double_to_string.constprop.2+0x1de>
    c126:	f80a 2003 	strb.w	r2, [r10, r3]
    c12a:	3301      	adds	r3, #1
    c12c:	e7f5      	b.n	c11a <double_to_string.constprop.2+0x52>
    c12e:	4a65      	ldr	r2, [pc, #404]	; (c2c4 <double_to_string.constprop.2+0x1fc>)
    c130:	1a52      	subs	r2, r2, r1
            else OUTSTR("inf");
    c132:	5cd2      	ldrb	r2, [r2, r3]
    c134:	2a00      	cmp	r2, #0
    c136:	f000 80b6 	beq.w	c2a6 <double_to_string.constprop.2+0x1de>
    c13a:	f80a 2003 	strb.w	r2, [r10, r3]
    c13e:	3301      	adds	r3, #1
    c140:	e7f5      	b.n	c12e <double_to_string.constprop.2+0x66>
        } else {
            /* NaN */
            if (flag & CAPSFLAG) OUTSTR("NAN");
    c142:	b90b      	cbnz	r3, c148 <double_to_string.constprop.2+0x80>
    c144:	460b      	mov	r3, r1
    c146:	e00a      	b.n	c15e <double_to_string.constprop.2+0x96>
    c148:	460b      	mov	r3, r1
    c14a:	4a5f      	ldr	r2, [pc, #380]	; (c2c8 <double_to_string.constprop.2+0x200>)
    c14c:	1a52      	subs	r2, r2, r1
    c14e:	5cd2      	ldrb	r2, [r2, r3]
    c150:	2a00      	cmp	r2, #0
    c152:	f000 80a8 	beq.w	c2a6 <double_to_string.constprop.2+0x1de>
    c156:	f80a 2003 	strb.w	r2, [r10, r3]
    c15a:	3301      	adds	r3, #1
    c15c:	e7f5      	b.n	c14a <double_to_string.constprop.2+0x82>
    c15e:	4a5b      	ldr	r2, [pc, #364]	; (c2cc <double_to_string.constprop.2+0x204>)
    c160:	1a52      	subs	r2, r2, r1
            else OUTSTR("nan");
    c162:	5cd2      	ldrb	r2, [r2, r3]
    c164:	2a00      	cmp	r2, #0
    c166:	f000 809e 	beq.w	c2a6 <double_to_string.constprop.2+0x1de>
    c16a:	f80a 2003 	strb.w	r2, [r10, r3]
    c16e:	3301      	adds	r3, #1
    c170:	e7f5      	b.n	c15e <double_to_string.constprop.2+0x96>
        }
    } else if (exponent == 0) {
    c172:	bb22      	cbnz	r2, c1be <double_to_string.constprop.2+0xf6>
        if (fraction == 0) {
    c174:	ea58 0209 	orrs.w	r2, r8, r9
    c178:	d10a      	bne.n	c190 <double_to_string.constprop.2+0xc8>
    c17a:	460b      	mov	r3, r1
    c17c:	4a54      	ldr	r2, [pc, #336]	; (c2d0 <double_to_string.constprop.2+0x208>)
    c17e:	1a52      	subs	r2, r2, r1
            /* zero */
            OUTSTR("0.000000");
    c180:	5cd2      	ldrb	r2, [r2, r3]
    c182:	2a00      	cmp	r2, #0
    c184:	f000 808f 	beq.w	c2a6 <double_to_string.constprop.2+0x1de>
    c188:	f80a 2003 	strb.w	r2, [r10, r3]
    c18c:	3301      	adds	r3, #1
    c18e:	e7f5      	b.n	c17c <double_to_string.constprop.2+0xb4>
        } else {
            /* denormalized */
            /* XXX does not handle */
            if (flag & CAPSFLAG) OUTSTR("DEN");
    c190:	f413 7f80 	tst.w	r3, #256	; 0x100
    c194:	460b      	mov	r3, r1
    c196:	d009      	beq.n	c1ac <double_to_string.constprop.2+0xe4>
    c198:	4a4e      	ldr	r2, [pc, #312]	; (c2d4 <double_to_string.constprop.2+0x20c>)
    c19a:	1a52      	subs	r2, r2, r1
    c19c:	5cd2      	ldrb	r2, [r2, r3]
    c19e:	2a00      	cmp	r2, #0
    c1a0:	f000 8081 	beq.w	c2a6 <double_to_string.constprop.2+0x1de>
    c1a4:	f80a 2003 	strb.w	r2, [r10, r3]
    c1a8:	3301      	adds	r3, #1
    c1aa:	e7f5      	b.n	c198 <double_to_string.constprop.2+0xd0>
    c1ac:	4a4a      	ldr	r2, [pc, #296]	; (c2d8 <double_to_string.constprop.2+0x210>)
    c1ae:	1a52      	subs	r2, r2, r1
            else OUTSTR("den");
    c1b0:	5cd2      	ldrb	r2, [r2, r3]
    c1b2:	2a00      	cmp	r2, #0
    c1b4:	d077      	beq.n	c2a6 <double_to_string.constprop.2+0x1de>
    c1b6:	f80a 2003 	strb.w	r2, [r10, r3]
    c1ba:	3301      	adds	r3, #1
    c1bc:	e7f6      	b.n	c1ac <double_to_string.constprop.2+0xe4>
        }
    } else {
        /* see if it's in the range of floats we can easily print */
        int exponent_signed = exponent - 1023;
        if (exponent_signed < -52 || exponent_signed > 52) {
    c1be:	f2a2 30cb 	subw	r0, r2, #971	; 0x3cb
    c1c2:	2868      	cmp	r0, #104	; 0x68
    c1c4:	d909      	bls.n	c1da <double_to_string.constprop.2+0x112>
    c1c6:	460b      	mov	r3, r1
    c1c8:	4a44      	ldr	r2, [pc, #272]	; (c2dc <double_to_string.constprop.2+0x214>)
    c1ca:	1a52      	subs	r2, r2, r1
            OUTSTR("<range>");
    c1cc:	5cd2      	ldrb	r2, [r2, r3]
    c1ce:	2a00      	cmp	r2, #0
    c1d0:	d069      	beq.n	c2a6 <double_to_string.constprop.2+0x1de>
    c1d2:	f80a 2003 	strb.w	r2, [r10, r3]
    c1d6:	3301      	adds	r3, #1
    c1d8:	e7f6      	b.n	c1c8 <double_to_string.constprop.2+0x100>
        } else {
            /* start by walking backwards through the string */
#define OUTREV(c) do { if (&buf[pos] == buf) goto done; else buf[--pos] = (c); } while (0)
            pos = len;
            OUTREV(0);
    c1da:	2100      	movs	r1, #0
    c1dc:	f88a 101f 	strb.w	r1, [r10, #31]
    c1e0:	211f      	movs	r1, #31

            /* reserve space for the fractional component first */
            for (int i = 0; i <= 6; i++)
                OUTREV('0');
    c1e2:	3901      	subs	r1, #1
    c1e4:	2030      	movs	r0, #48	; 0x30
#define OUTREV(c) do { if (&buf[pos] == buf) goto done; else buf[--pos] = (c); } while (0)
            pos = len;
            OUTREV(0);

            /* reserve space for the fractional component first */
            for (int i = 0; i <= 6; i++)
    c1e6:	2918      	cmp	r1, #24
                OUTREV('0');
    c1e8:	f80a 0001 	strb.w	r0, [r10, r1]
#define OUTREV(c) do { if (&buf[pos] == buf) goto done; else buf[--pos] = (c); } while (0)
            pos = len;
            OUTREV(0);

            /* reserve space for the fractional component first */
            for (int i = 0; i <= 6; i++)
    c1ec:	d1f9      	bne.n	c1e2 <double_to_string.constprop.2+0x11a>
            if (flag & CAPSFLAG) OUTSTR("DEN");
            else OUTSTR("den");
        }
    } else {
        /* see if it's in the range of floats we can easily print */
        int exponent_signed = exponent - 1023;
    c1ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
                OUTREV('0');
            size_t decimal_spot = pos;

            /* print the integer portion */
            uint64_t u;
            if (exponent_signed >= 0) {
    c1f2:	2a00      	cmp	r2, #0
    c1f4:	db1e      	blt.n	c234 <double_to_string.constprop.2+0x16c>
                u = fraction;
                u |= (1ULL<<52);
                u >>= (52 - exponent_signed);
    c1f6:	2000      	movs	r0, #0
    c1f8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    c1fc:	ea40 0008 	orr.w	r0, r0, r8
    c200:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
    c204:	ea41 0109 	orr.w	r1, r1, r9
    c208:	9305      	str	r3, [sp, #20]
    c20a:	f000 fe81 	bl	cf10 <__aeabi_llsr>

                char *s = longlong_to_string(buf, u, pos + 1, flag, &(char) {0});
    c20e:	aa08      	add	r2, sp, #32
            /* print the integer portion */
            uint64_t u;
            if (exponent_signed >= 0) {
                u = fraction;
                u |= (1ULL<<52);
                u >>= (52 - exponent_signed);
    c210:	460f      	mov	r7, r1

                char *s = longlong_to_string(buf, u, pos + 1, flag, &(char) {0});
    c212:	2100      	movs	r1, #0
    c214:	f802 1d01 	strb.w	r1, [r2, #-1]!
    c218:	9b05      	ldr	r3, [sp, #20]
            /* print the integer portion */
            uint64_t u;
            if (exponent_signed >= 0) {
                u = fraction;
                u |= (1ULL<<52);
                u >>= (52 - exponent_signed);
    c21a:	4606      	mov	r6, r0

                char *s = longlong_to_string(buf, u, pos + 1, flag, &(char) {0});
    c21c:	2119      	movs	r1, #25
    c21e:	9301      	str	r3, [sp, #4]
    c220:	9202      	str	r2, [sp, #8]
    c222:	9100      	str	r1, [sp, #0]
    c224:	4650      	mov	r0, r10
    c226:	4632      	mov	r2, r6
    c228:	463b      	mov	r3, r7
    c22a:	f7ff fdce 	bl	bdca <longlong_to_string>

                pos = s - buf;
    c22e:	ebca 0800 	rsb	r8, r10, r0
    c232:	e005      	b.n	c240 <double_to_string.constprop.2+0x178>
            } else {
                /* exponent is negative */
                u = 0;
                OUTREV('0');
    c234:	f88a 0017 	strb.w	r0, [r10, #23]
                char *s = longlong_to_string(buf, u, pos + 1, flag, &(char) {0});

                pos = s - buf;
            } else {
                /* exponent is negative */
                u = 0;
    c238:	2600      	movs	r6, #0
    c23a:	2700      	movs	r7, #0
                OUTREV('0');
    c23c:	f04f 0817 	mov.w	r8, #23
            }

            buf[decimal_spot] = '.';
    c240:	232e      	movs	r3, #46	; 0x2e
    c242:	f88a 3018 	strb.w	r3, [r10, #24]

            /* handle the fractional part */
            uint32_t frac = ((d - u) * 1000000) + .5;
    c246:	4630      	mov	r0, r6
    c248:	4639      	mov	r1, r7
    c24a:	f000 ffef 	bl	d22c <__aeabi_ul2d>
    c24e:	4602      	mov	r2, r0
    c250:	460b      	mov	r3, r1
    c252:	4620      	mov	r0, r4
    c254:	4629      	mov	r1, r5
    c256:	f000 fe6b 	bl	cf30 <__aeabi_dsub>
    c25a:	a317      	add	r3, pc, #92	; (adr r3, c2b8 <double_to_string.constprop.2+0x1f0>)
    c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c260:	f001 f81a 	bl	d298 <__aeabi_dmul>
    c264:	4b1e      	ldr	r3, [pc, #120]	; (c2e0 <double_to_string.constprop.2+0x218>)
    c266:	2200      	movs	r2, #0
    c268:	f000 fe64 	bl	cf34 <__adddf3>
    c26c:	f001 fad6 	bl	d81c <__aeabi_d2uiz>
    c270:	f10a 031f 	add.w	r3, r10, #31

            uint i = decimal_spot + 6 + 1;
            while (frac != 0) {
    c274:	b148      	cbz	r0, c28a <double_to_string.constprop.2+0x1c2>
                uint digit = frac % 10;
    c276:	210a      	movs	r1, #10
    c278:	fbb0 f2f1 	udiv	r2, r0, r1
    c27c:	fb01 0112 	mls	r1, r1, r2, r0

                buf[--i] = digit + '0';
    c280:	3130      	adds	r1, #48	; 0x30
    c282:	f803 1d01 	strb.w	r1, [r3, #-1]!

                frac /= 10;
    c286:	4610      	mov	r0, r2
    c288:	e7f4      	b.n	c274 <double_to_string.constprop.2+0x1ac>
            }

            if (neg)
    c28a:	f1bb 0f00 	cmp.w	r11, #0
    c28e:	d007      	beq.n	c2a0 <double_to_string.constprop.2+0x1d8>
                OUTREV('-');
    c290:	f1b8 0f00 	cmp.w	r8, #0
    c294:	d004      	beq.n	c2a0 <double_to_string.constprop.2+0x1d8>
    c296:	f108 38ff 	add.w	r8, r8, #4294967295
    c29a:	232d      	movs	r3, #45	; 0x2d
    c29c:	f80a 3008 	strb.w	r3, [r10, r8]

done:
            /* separate return path, since we've been walking backwards through the string */
            return &buf[pos];
    c2a0:	eb0a 0008 	add.w	r0, r10, r8
    c2a4:	e003      	b.n	c2ae <double_to_string.constprop.2+0x1e6>
        }
#undef OUTREV
    }

    buf[pos] = 0;
    c2a6:	2200      	movs	r2, #0
    c2a8:	f80a 2003 	strb.w	r2, [r10, r3]
    c2ac:	4650      	mov	r0, r10
    return buf;
}
    c2ae:	b009      	add	sp, #36	; 0x24
    c2b0:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    c2b4:	f3af 8000 	nop.w
    c2b8:	00000000 	.word	0x00000000
    c2bc:	412e8480 	.word	0x412e8480
    c2c0:	00017e30 	.word	0x00017e30
    c2c4:	00017e34 	.word	0x00017e34
    c2c8:	00017e38 	.word	0x00017e38
    c2cc:	00017e3c 	.word	0x00017e3c
    c2d0:	00017e5e 	.word	0x00017e5e
    c2d4:	00017e4e 	.word	0x00017e4e
    c2d8:	00017e52 	.word	0x00017e52
    c2dc:	00017e67 	.word	0x00017e67
    c2e0:	3fe00000 	.word	0x3fe00000
    c2e4:	000fffff 	.word	0x000fffff

0000c2e8 <_printf_engine>:
#undef OUTSTR

#endif // FLOAT_PRINTF

int _printf_engine(_printf_engine_output_func out, void *state, const char *fmt, va_list ap)
{
    c2e8:	e92d 4ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r14}
    c2ec:	b091      	sub	sp, #68	; 0x44
    c2ee:	4607      	mov	r7, r0
    c2f0:	4688      	mov	r8, r1
    c2f2:	9205      	str	r2, [sp, #20]
    c2f4:	469b      	mov	r11, r3
    unsigned long long n;
    void *ptr;
    int flags;
    unsigned int format_num;
    char signchar;
    size_t chars_written = 0;
    c2f6:	2600      	movs	r6, #0

    for (;;) {
        /* reset the format state */
        flags = 0;
        format_num = 0;
        signchar = '\0';
    c2f8:	2300      	movs	r3, #0

        /* handle regular chars that aren't format related */
        s = fmt;
        string_len = 0;
        while ((c = *fmt++) != 0) {
    c2fa:	9d05      	ldr	r5, [sp, #20]

    for (;;) {
        /* reset the format state */
        flags = 0;
        format_num = 0;
        signchar = '\0';
    c2fc:	f88d 301f 	strb.w	r3, [r13, #31]
    c300:	9b05      	ldr	r3, [sp, #20]
    c302:	1ae9      	subs	r1, r5, r3

        /* handle regular chars that aren't format related */
        s = fmt;
        string_len = 0;
        while ((c = *fmt++) != 0) {
    c304:	f815 4b01 	ldrb.w	r4, [r5], #1
    c308:	b10c      	cbz	r4, c30e <_printf_engine+0x26>
            if (c == '%')
    c30a:	2c25      	cmp	r4, #37	; 0x25
    c30c:	d1f8      	bne.n	c300 <_printf_engine+0x18>
                break; /* we saw a '%', break and start parsing format */
            string_len++;
        }

        /* output the string we've accumulated */
        OUTPUT_STRING(s, string_len);
    c30e:	9805      	ldr	r0, [sp, #20]
    c310:	4642      	mov	r2, r8
    c312:	47b8      	blx	r7
    c314:	f1b0 0c00 	subs.w	r12, r0, #0
    c318:	f2c0 821d 	blt.w	c756 <_printf_engine+0x46e>
    c31c:	4466      	add	r6, r12

        /* make sure we haven't just hit the end of the string */
        if (c == 0)
    c31e:	2c00      	cmp	r4, #0
    c320:	f000 821b 	beq.w	c75a <_printf_engine+0x472>
    c324:	f04f 0900 	mov.w	r9, #0
    c328:	464c      	mov	r4, r9
            break;

next_format:
        /* grab the next format character */
        c = *fmt++;
    c32a:	462b      	mov	r3, r5
    c32c:	f813 5b01 	ldrb.w	r5, [r3], #1
    c330:	9305      	str	r3, [sp, #20]
        if (c == 0)
    c332:	2d00      	cmp	r5, #0
    c334:	f000 8211 	beq.w	c75a <_printf_engine+0x472>
            break;

        switch (c) {
    c338:	2d63      	cmp	r5, #99	; 0x63
    c33a:	d07d      	beq.n	c438 <_printf_engine+0x150>
    c33c:	d82d      	bhi.n	c39a <_printf_engine+0xb2>
    c33e:	2d2e      	cmp	r5, #46	; 0x2e
    c340:	d101      	bne.n	c346 <_printf_engine+0x5e>
        if (c == 0)
            break;

next_format:
        /* grab the next format character */
        c = *fmt++;
    c342:	9d05      	ldr	r5, [sp, #20]
    c344:	e7f1      	b.n	c32a <_printf_engine+0x42>
        if (c == 0)
            break;

        switch (c) {
    c346:	d813      	bhi.n	c370 <_printf_engine+0x88>
    c348:	2d25      	cmp	r5, #37	; 0x25
    c34a:	d069      	beq.n	c420 <_printf_engine+0x138>
    c34c:	d808      	bhi.n	c360 <_printf_engine+0x78>
    c34e:	2d20      	cmp	r5, #32
    c350:	f000 8084 	beq.w	c45c <_printf_engine+0x174>
    c354:	2d23      	cmp	r5, #35	; 0x23
    c356:	f040 817f 	bne.w	c658 <_printf_engine+0x370>
                goto next_format;
            case ' ':
                flags |= BLANKPOSFLAG;
                goto next_format;
            case '#':
                flags |= ALTFLAG;
    c35a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
                goto next_format;
    c35e:	e7f0      	b.n	c342 <_printf_engine+0x5a>
        /* grab the next format character */
        c = *fmt++;
        if (c == 0)
            break;

        switch (c) {
    c360:	2d2b      	cmp	r5, #43	; 0x2b
    c362:	d078      	beq.n	c456 <_printf_engine+0x16e>
    c364:	2d2d      	cmp	r5, #45	; 0x2d
    c366:	f040 8177 	bne.w	c658 <_printf_engine+0x370>
                if (s == 0)
                    s = "<null>";
                flags &= ~LEADZEROFLAG; /* doesn't make sense for strings */
                goto _output_string;
            case '-':
                flags |= LEFTFORMATFLAG;
    c36a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
                goto next_format;
    c36e:	e7e8      	b.n	c342 <_printf_engine+0x5a>
        /* grab the next format character */
        c = *fmt++;
        if (c == 0)
            break;

        switch (c) {
    c370:	2d41      	cmp	r5, #65	; 0x41
    c372:	f000 8161 	beq.w	c638 <_printf_engine+0x350>
    c376:	d804      	bhi.n	c382 <_printf_engine+0x9a>
    c378:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    c37c:	2b09      	cmp	r3, #9
    c37e:	d944      	bls.n	c40a <_printf_engine+0x122>
    c380:	e16a      	b.n	c658 <_printf_engine+0x370>
    c382:	2d58      	cmp	r5, #88	; 0x58
    c384:	f000 80e1 	beq.w	c54a <_printf_engine+0x262>
    c388:	2d61      	cmp	r5, #97	; 0x61
    c38a:	f000 8157 	beq.w	c63c <_printf_engine+0x354>
    c38e:	2d46      	cmp	r5, #70	; 0x46
    c390:	f040 8162 	bne.w	c658 <_printf_engine+0x370>
                else
                    *(int *)ptr = chars_written;
                break;
#if FLOAT_PRINTF
            case 'F':
                flags |= CAPSFLAG;
    c394:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    c398:	e141      	b.n	c61e <_printf_engine+0x336>
        /* grab the next format character */
        c = *fmt++;
        if (c == 0)
            break;

        switch (c) {
    c39a:	2d6e      	cmp	r5, #110	; 0x6e
    c39c:	f000 8127 	beq.w	c5ee <_printf_engine+0x306>
    c3a0:	d815      	bhi.n	c3ce <_printf_engine+0xe6>
    c3a2:	2d68      	cmp	r5, #104	; 0x68
    c3a4:	d05d      	beq.n	c462 <_printf_engine+0x17a>
    c3a6:	d805      	bhi.n	c3b4 <_printf_engine+0xcc>
    c3a8:	2d64      	cmp	r5, #100	; 0x64
    c3aa:	d06a      	beq.n	c482 <_printf_engine+0x19a>
    c3ac:	2d66      	cmp	r5, #102	; 0x66
    c3ae:	f000 8136 	beq.w	c61e <_printf_engine+0x336>
    c3b2:	e151      	b.n	c658 <_printf_engine+0x370>
    c3b4:	2d6a      	cmp	r5, #106	; 0x6a
    c3b6:	d05e      	beq.n	c476 <_printf_engine+0x18e>
    c3b8:	d363      	bcc.n	c482 <_printf_engine+0x19a>
    c3ba:	2d6c      	cmp	r5, #108	; 0x6c
    c3bc:	f040 814c 	bne.w	c658 <_printf_engine+0x370>
                goto next_format;
            case '#':
                flags |= ALTFLAG;
                goto next_format;
            case 'l':
                if (flags & LONGFLAG)
    c3c0:	07e3      	lsls	r3, r4, #31
                    flags |= LONGLONGFLAG;
    c3c2:	bf48      	it	mi
    c3c4:	f044 0402 	orrmi.w	r4, r4, #2
                flags |= LONGFLAG;
    c3c8:	f044 0401 	orr.w	r4, r4, #1
                goto next_format;
    c3cc:	e7b9      	b.n	c342 <_printf_engine+0x5a>
        /* grab the next format character */
        c = *fmt++;
        if (c == 0)
            break;

        switch (c) {
    c3ce:	2d74      	cmp	r5, #116	; 0x74
    c3d0:	d054      	beq.n	c47c <_printf_engine+0x194>
    c3d2:	d811      	bhi.n	c3f8 <_printf_engine+0x110>
    c3d4:	2d70      	cmp	r5, #112	; 0x70
    c3d6:	f000 80b5 	beq.w	c544 <_printf_engine+0x25c>
    c3da:	2d73      	cmp	r5, #115	; 0x73
    c3dc:	f040 813c 	bne.w	c658 <_printf_engine+0x370>
            case 'c':
                uc = va_arg(ap, unsigned int);
                OUTPUT_CHAR(uc);
                break;
            case 's':
                s = va_arg(ap, const char *);
    c3e0:	f8db a000 	ldr.w	r10, [r11]
                if (s == 0)
                    s = "<null>";
    c3e4:	4aab      	ldr	r2, [pc, #684]	; (c694 <_printf_engine+0x3ac>)
            case 'c':
                uc = va_arg(ap, unsigned int);
                OUTPUT_CHAR(uc);
                break;
            case 's':
                s = va_arg(ap, const char *);
    c3e6:	f10b 0504 	add.w	r5, r11, #4
                if (s == 0)
                    s = "<null>";
    c3ea:	f1ba 0f00 	cmp.w	r10, #0
    c3ee:	bf08      	it	eq
    c3f0:	4692      	moveq	r10, r2
                flags &= ~LEADZEROFLAG; /* doesn't make sense for strings */
    c3f2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
                goto _output_string;
    c3f6:	e14f      	b.n	c698 <_printf_engine+0x3b0>
        /* grab the next format character */
        c = *fmt++;
        if (c == 0)
            break;

        switch (c) {
    c3f8:	2d78      	cmp	r5, #120	; 0x78
    c3fa:	f000 80a8 	beq.w	c54e <_printf_engine+0x266>
    c3fe:	2d7a      	cmp	r5, #122	; 0x7a
    c400:	d036      	beq.n	c470 <_printf_engine+0x188>
    c402:	2d75      	cmp	r5, #117	; 0x75
    c404:	f040 8128 	bne.w	c658 <_printf_engine+0x370>
    c408:	e068      	b.n	c4dc <_printf_engine+0x1f4>
            case '0'...'9':
                if (c == '0' && format_num == 0)
    c40a:	2d30      	cmp	r5, #48	; 0x30
    c40c:	d104      	bne.n	c418 <_printf_engine+0x130>
    c40e:	f1b9 0f00 	cmp.w	r9, #0
    c412:	d101      	bne.n	c418 <_printf_engine+0x130>
                    flags |= LEADZEROFLAG;
    c414:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
                format_num *= 10;
                format_num += c - '0';
    c418:	220a      	movs	r2, #10
    c41a:	fb02 3909 	mla	r9, r2, r9, r3
                goto next_format;
    c41e:	e790      	b.n	c342 <_printf_engine+0x5a>
            case '.':
                /* XXX for now eat numeric formatting */
                goto next_format;
            case '%':
                OUTPUT_CHAR('%');
    c420:	a810      	add	r0, sp, #64	; 0x40
    c422:	f800 5d24 	strb.w	r5, [r0, #-36]!
    c426:	2101      	movs	r1, #1
    c428:	4642      	mov	r2, r8
    c42a:	47b8      	blx	r7
    c42c:	f1b0 0c00 	subs.w	r12, r0, #0
    c430:	f2c0 8191 	blt.w	c756 <_printf_engine+0x46e>
    c434:	4466      	add	r6, r12
    c436:	e128      	b.n	c68a <_printf_engine+0x3a2>
                break;
            case 'c':
                uc = va_arg(ap, unsigned int);
    c438:	f8db 3000 	ldr.w	r3, [r11]
    c43c:	a810      	add	r0, sp, #64	; 0x40
    c43e:	f800 3d24 	strb.w	r3, [r0, #-36]!
                OUTPUT_CHAR(uc);
    c442:	2101      	movs	r1, #1
    c444:	4642      	mov	r2, r8
    c446:	47b8      	blx	r7
    c448:	f1b0 0c00 	subs.w	r12, r0, #0
    c44c:	f2c0 8183 	blt.w	c756 <_printf_engine+0x46e>
                goto next_format;
            case '%':
                OUTPUT_CHAR('%');
                break;
            case 'c':
                uc = va_arg(ap, unsigned int);
    c450:	f10b 0504 	add.w	r5, r11, #4
    c454:	e17d      	b.n	c752 <_printf_engine+0x46a>
                goto _output_string;
            case '-':
                flags |= LEFTFORMATFLAG;
                goto next_format;
            case '+':
                flags |= SHOWSIGNFLAG;
    c456:	f444 7400 	orr.w	r4, r4, #512	; 0x200
                goto next_format;
    c45a:	e772      	b.n	c342 <_printf_engine+0x5a>
            case ' ':
                flags |= BLANKPOSFLAG;
    c45c:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
                goto next_format;
    c460:	e76f      	b.n	c342 <_printf_engine+0x5a>
                if (flags & LONGFLAG)
                    flags |= LONGLONGFLAG;
                flags |= LONGFLAG;
                goto next_format;
            case 'h':
                if (flags & HALFFLAG)
    c462:	0765      	lsls	r5, r4, #29
                    flags |= HALFHALFFLAG;
    c464:	bf48      	it	mi
    c466:	f044 0408 	orrmi.w	r4, r4, #8
                flags |= HALFFLAG;
    c46a:	f044 0404 	orr.w	r4, r4, #4
                goto next_format;
    c46e:	e768      	b.n	c342 <_printf_engine+0x5a>
            case 'z':
                flags |= SIZETFLAG;
    c470:	f044 0410 	orr.w	r4, r4, #16
                goto next_format;
    c474:	e765      	b.n	c342 <_printf_engine+0x5a>
            case 'j':
                flags |= INTMAXFLAG;
    c476:	f044 0420 	orr.w	r4, r4, #32
                goto next_format;
    c47a:	e762      	b.n	c342 <_printf_engine+0x5a>
            case 't':
                flags |= PTRDIFFFLAG;
    c47c:	f044 0440 	orr.w	r4, r4, #64	; 0x40
                goto next_format;
    c480:	e75f      	b.n	c342 <_printf_engine+0x5a>
            case 'i':
            case 'd':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c482:	07a0      	lsls	r0, r4, #30
    c484:	d419      	bmi.n	c4ba <_printf_engine+0x1d2>
    c486:	07e1      	lsls	r1, r4, #31
    c488:	d410      	bmi.n	c4ac <_printf_engine+0x1c4>
    c48a:	0722      	lsls	r2, r4, #28
    c48c:	d505      	bpl.n	c49a <_printf_engine+0x1b2>
    c48e:	f99b 2000 	ldrsb.w	r2, [r11]
                    (flags & LONGFLAG) ? va_arg(ap, long) :
                    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
    c492:	f10b 0504 	add.w	r5, r11, #4
            case 't':
                flags |= PTRDIFFFLAG;
                goto next_format;
            case 'i':
            case 'd':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c496:	17d3      	asrs	r3, r2, #31
    c498:	e01d      	b.n	c4d6 <_printf_engine+0x1ee>
    c49a:	0763      	lsls	r3, r4, #29
    c49c:	d504      	bpl.n	c4a8 <_printf_engine+0x1c0>
                    (flags & LONGFLAG) ? va_arg(ap, long) :
                    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
                    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
    c49e:	f10b 0504 	add.w	r5, r11, #4
            case 't':
                flags |= PTRDIFFFLAG;
                goto next_format;
            case 'i':
            case 'd':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c4a2:	f9bb 2000 	ldrsh.w	r2, [r11]
    c4a6:	e7f6      	b.n	c496 <_printf_engine+0x1ae>
    c4a8:	06e5      	lsls	r5, r4, #27
    c4aa:	d504      	bpl.n	c4b6 <_printf_engine+0x1ce>
                    (flags & LONGFLAG) ? va_arg(ap, long) :
                    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
                    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
                    (flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
    c4ac:	f10b 0504 	add.w	r5, r11, #4
            case 't':
                flags |= PTRDIFFFLAG;
                goto next_format;
            case 'i':
            case 'd':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c4b0:	f8db 2000 	ldr.w	r2, [r11]
    c4b4:	e7ef      	b.n	c496 <_printf_engine+0x1ae>
    c4b6:	06a0      	lsls	r0, r4, #26
    c4b8:	d508      	bpl.n	c4cc <_printf_engine+0x1e4>
                    (flags & LONGFLAG) ? va_arg(ap, long) :
                    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
                    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
                    (flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
                    (flags & INTMAXFLAG) ? va_arg(ap, intmax_t) :
    c4ba:	f10b 0b07 	add.w	r11, r11, #7
    c4be:	f02b 0307 	bic.w	r3, r11, #7
    c4c2:	f103 0508 	add.w	r5, r3, #8
            case 't':
                flags |= PTRDIFFFLAG;
                goto next_format;
            case 'i':
            case 'd':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    c4ca:	e004      	b.n	c4d6 <_printf_engine+0x1ee>
    c4cc:	f8db 2000 	ldr.w	r2, [r11]
    c4d0:	f10b 0504 	add.w	r5, r11, #4
    c4d4:	17d3      	asrs	r3, r2, #31
                    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
                    (flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
                    (flags & INTMAXFLAG) ? va_arg(ap, intmax_t) :
                    (flags & PTRDIFFFLAG) ? va_arg(ap, ptrdiff_t) :
                    va_arg(ap, int);
                flags |= SIGNEDFLAG;
    c4d6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    c4da:	e029      	b.n	c530 <_printf_engine+0x248>
                s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
                goto _output_string;
            case 'u':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    c4dc:	07a1      	lsls	r1, r4, #30
    c4de:	d419      	bmi.n	c514 <_printf_engine+0x22c>
                    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c4e0:	07e2      	lsls	r2, r4, #31
    c4e2:	d410      	bmi.n	c506 <_printf_engine+0x21e>
    c4e4:	0723      	lsls	r3, r4, #28
    c4e6:	d505      	bpl.n	c4f4 <_printf_engine+0x20c>
    c4e8:	f89b 2000 	ldrb.w	r2, [r11]
                    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    c4ec:	f10b 0504 	add.w	r5, r11, #4
                flags |= SIGNEDFLAG;
                s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
                goto _output_string;
            case 'u':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
                    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c4f0:	2300      	movs	r3, #0
    c4f2:	e01d      	b.n	c530 <_printf_engine+0x248>
    c4f4:	0765      	lsls	r5, r4, #29
    c4f6:	d504      	bpl.n	c502 <_printf_engine+0x21a>
                    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
                    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    c4f8:	f10b 0504 	add.w	r5, r11, #4
                flags |= SIGNEDFLAG;
                s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
                goto _output_string;
            case 'u':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
                    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c4fc:	f8bb 2000 	ldrh.w	r2, [r11]
    c500:	e7f6      	b.n	c4f0 <_printf_engine+0x208>
    c502:	06e0      	lsls	r0, r4, #27
    c504:	d504      	bpl.n	c510 <_printf_engine+0x228>
                    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
                    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
                    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    c506:	f10b 0504 	add.w	r5, r11, #4
                flags |= SIGNEDFLAG;
                s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
                goto _output_string;
            case 'u':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
                    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c50a:	f8db 2000 	ldr.w	r2, [r11]
    c50e:	e7ef      	b.n	c4f0 <_printf_engine+0x208>
    c510:	06a1      	lsls	r1, r4, #26
    c512:	d508      	bpl.n	c526 <_printf_engine+0x23e>
    c514:	f10b 0b07 	add.w	r11, r11, #7
    c518:	f02b 0307 	bic.w	r3, r11, #7
    c51c:	f103 0508 	add.w	r5, r3, #8
    c520:	e9d3 2300 	ldrd	r2, r3, [r3]
    c524:	e004      	b.n	c530 <_printf_engine+0x248>
    c526:	f8db 2000 	ldr.w	r2, [r11]
    c52a:	2300      	movs	r3, #0
    c52c:	f10b 0504 	add.w	r5, r11, #4
                    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
                    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
                    (flags & INTMAXFLAG) ? va_arg(ap, uintmax_t) :
                    (flags & PTRDIFFFLAG) ? (uintptr_t)va_arg(ap, ptrdiff_t) :
                    va_arg(ap, unsigned int);
                s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    c530:	2120      	movs	r1, #32
    c532:	e88d 0012 	stmia.w	r13, {r1, r4}
    c536:	f10d 011f 	add.w	r1, r13, #31
    c53a:	9102      	str	r1, [sp, #8]
    c53c:	a808      	add	r0, sp, #32
    c53e:	f7ff fc44 	bl	bdca <longlong_to_string>
    c542:	e087      	b.n	c654 <_printf_engine+0x36c>
                goto _output_string;
            case 'p':
                flags |= LONGFLAG | ALTFLAG;
    c544:	f044 0481 	orr.w	r4, r4, #129	; 0x81
                goto hex;
    c548:	e001      	b.n	c54e <_printf_engine+0x266>
            case 'X':
                flags |= CAPSFLAG;
    c54a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
                /* fallthrough */
hex:
            case 'x':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    c54e:	07a2      	lsls	r2, r4, #30
    c550:	d419      	bmi.n	c586 <_printf_engine+0x29e>
                    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c552:	07e3      	lsls	r3, r4, #31
    c554:	d410      	bmi.n	c578 <_printf_engine+0x290>
    c556:	0725      	lsls	r5, r4, #28
    c558:	d505      	bpl.n	c566 <_printf_engine+0x27e>
    c55a:	f89b 2000 	ldrb.w	r2, [r11]
                    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    c55e:	f10b 0504 	add.w	r5, r11, #4
                flags |= CAPSFLAG;
                /* fallthrough */
hex:
            case 'x':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
                    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c562:	2300      	movs	r3, #0
    c564:	e01d      	b.n	c5a2 <_printf_engine+0x2ba>
    c566:	0760      	lsls	r0, r4, #29
    c568:	d504      	bpl.n	c574 <_printf_engine+0x28c>
                    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
                    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    c56a:	f10b 0504 	add.w	r5, r11, #4
                flags |= CAPSFLAG;
                /* fallthrough */
hex:
            case 'x':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
                    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c56e:	f8bb 2000 	ldrh.w	r2, [r11]
    c572:	e7f6      	b.n	c562 <_printf_engine+0x27a>
    c574:	06e1      	lsls	r1, r4, #27
    c576:	d504      	bpl.n	c582 <_printf_engine+0x29a>
                    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
                    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
                    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    c578:	f10b 0504 	add.w	r5, r11, #4
                flags |= CAPSFLAG;
                /* fallthrough */
hex:
            case 'x':
                n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
                    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    c57c:	f8db 2000 	ldr.w	r2, [r11]
    c580:	e7ef      	b.n	c562 <_printf_engine+0x27a>
    c582:	06a2      	lsls	r2, r4, #26
    c584:	d508      	bpl.n	c598 <_printf_engine+0x2b0>
    c586:	f10b 0b07 	add.w	r11, r11, #7
    c58a:	f02b 0307 	bic.w	r3, r11, #7
    c58e:	f103 0508 	add.w	r5, r3, #8
    c592:	e9d3 2300 	ldrd	r2, r3, [r3]
    c596:	e004      	b.n	c5a2 <_printf_engine+0x2ba>
    c598:	f8db 2000 	ldr.w	r2, [r11]
    c59c:	2300      	movs	r3, #0
    c59e:	f10b 0504 	add.w	r5, r11, #4
                    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
                    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
                    (flags & INTMAXFLAG) ? va_arg(ap, uintmax_t) :
                    (flags & PTRDIFFFLAG) ? (uintptr_t)va_arg(ap, ptrdiff_t) :
                    va_arg(ap, unsigned int);
                s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
    c5a2:	9400      	str	r4, [sp, #0]
    c5a4:	a808      	add	r0, sp, #32
    c5a6:	f7ff fd6f 	bl	c088 <longlong_to_hexstring.constprop.1>
                if (flags & ALTFLAG) {
    c5aa:	0623      	lsls	r3, r4, #24
                    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
                    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
                    (flags & INTMAXFLAG) ? va_arg(ap, uintmax_t) :
                    (flags & PTRDIFFFLAG) ? (uintptr_t)va_arg(ap, ptrdiff_t) :
                    va_arg(ap, unsigned int);
                s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
    c5ac:	4682      	mov	r10, r0
                if (flags & ALTFLAG) {
    c5ae:	d573      	bpl.n	c698 <_printf_engine+0x3b0>
                    OUTPUT_CHAR('0');
    c5b0:	f10d 0b40 	add.w	r11, r13, #64	; 0x40
    c5b4:	2230      	movs	r2, #48	; 0x30
    c5b6:	f80b 2d24 	strb.w	r2, [r11, #-36]!
    c5ba:	4658      	mov	r0, r11
    c5bc:	2101      	movs	r1, #1
    c5be:	4642      	mov	r2, r8
    c5c0:	47b8      	blx	r7
    c5c2:	f1b0 0c00 	subs.w	r12, r0, #0
    c5c6:	f2c0 80c6 	blt.w	c756 <_printf_engine+0x46e>
                    OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    c5ca:	f414 7f80 	tst.w	r4, #256	; 0x100
    c5ce:	bf0c      	ite	eq
    c5d0:	2278      	moveq	r2, #120	; 0x78
    c5d2:	2258      	movne	r2, #88	; 0x58
    c5d4:	f88d 201c 	strb.w	r2, [r13, #28]
    c5d8:	4658      	mov	r0, r11
    c5da:	2101      	movs	r1, #1
    c5dc:	4642      	mov	r2, r8
                    (flags & INTMAXFLAG) ? va_arg(ap, uintmax_t) :
                    (flags & PTRDIFFFLAG) ? (uintptr_t)va_arg(ap, ptrdiff_t) :
                    va_arg(ap, unsigned int);
                s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
                if (flags & ALTFLAG) {
                    OUTPUT_CHAR('0');
    c5de:	4466      	add	r6, r12
                    OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    c5e0:	47b8      	blx	r7
    c5e2:	f1b0 0c00 	subs.w	r12, r0, #0
    c5e6:	f2c0 80b6 	blt.w	c756 <_printf_engine+0x46e>
    c5ea:	4466      	add	r6, r12
    c5ec:	e054      	b.n	c698 <_printf_engine+0x3b0>
                }
                goto _output_string;
            case 'n':
                ptr = va_arg(ap, void *);
                if (flags & LONGLONGFLAG)
    c5ee:	07a0      	lsls	r0, r4, #30
                    OUTPUT_CHAR('0');
                    OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
                }
                goto _output_string;
            case 'n':
                ptr = va_arg(ap, void *);
    c5f0:	f10b 0504 	add.w	r5, r11, #4
    c5f4:	f8db 1000 	ldr.w	r1, [r11]
                if (flags & LONGLONGFLAG)
    c5f8:	d505      	bpl.n	c606 <_printf_engine+0x31e>
                    *(long long *)ptr = chars_written;
    c5fa:	4632      	mov	r2, r6
    c5fc:	2300      	movs	r3, #0
    c5fe:	e9c1 2300 	strd	r2, r3, [r1]
            case '.':
                /* XXX for now eat numeric formatting */
                goto next_format;
            case '%':
                OUTPUT_CHAR('%');
                break;
    c602:	46ab      	mov	r11, r5
    c604:	e678      	b.n	c2f8 <_printf_engine+0x10>
                goto _output_string;
            case 'n':
                ptr = va_arg(ap, void *);
                if (flags & LONGLONGFLAG)
                    *(long long *)ptr = chars_written;
                else if (flags & LONGFLAG)
    c606:	07e2      	lsls	r2, r4, #31
    c608:	d407      	bmi.n	c61a <_printf_engine+0x332>
                    *(long *)ptr = chars_written;
                else if (flags & HALFHALFFLAG)
    c60a:	0723      	lsls	r3, r4, #28
    c60c:	d501      	bpl.n	c612 <_printf_engine+0x32a>
                    *(signed char *)ptr = chars_written;
    c60e:	700e      	strb	r6, [r1, #0]
    c610:	e7f7      	b.n	c602 <_printf_engine+0x31a>
                else if (flags & HALFFLAG)
    c612:	0760      	lsls	r0, r4, #29
    c614:	d501      	bpl.n	c61a <_printf_engine+0x332>
                    *(short *)ptr = chars_written;
    c616:	800e      	strh	r6, [r1, #0]
    c618:	e7f3      	b.n	c602 <_printf_engine+0x31a>
                else if (flags & SIZETFLAG)
                    *(size_t *)ptr = chars_written;
                else
                    *(int *)ptr = chars_written;
    c61a:	600e      	str	r6, [r1, #0]
    c61c:	e7f1      	b.n	c602 <_printf_engine+0x31a>
#if FLOAT_PRINTF
            case 'F':
                flags |= CAPSFLAG;
                /* fallthrough */
            case 'f': {
                double d = va_arg(ap, double);
    c61e:	f10b 0b07 	add.w	r11, r11, #7
    c622:	f02b 0307 	bic.w	r3, r11, #7
                s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    c626:	9400      	str	r4, [sp, #0]
#if FLOAT_PRINTF
            case 'F':
                flags |= CAPSFLAG;
                /* fallthrough */
            case 'f': {
                double d = va_arg(ap, double);
    c628:	f103 0508 	add.w	r5, r3, #8
                s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    c62c:	a808      	add	r0, sp, #32
    c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
    c632:	f7ff fd49 	bl	c0c8 <double_to_string.constprop.2>
    c636:	e00d      	b.n	c654 <_printf_engine+0x36c>
                goto _output_string;
            }
            case 'A':
                flags |= CAPSFLAG;
    c638:	f444 7480 	orr.w	r4, r4, #256	; 0x100
                /* fallthrough */
            case 'a': {
                double d = va_arg(ap, double);
    c63c:	f10b 0b07 	add.w	r11, r11, #7
    c640:	f02b 0307 	bic.w	r3, r11, #7
                s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    c644:	9400      	str	r4, [sp, #0]
            }
            case 'A':
                flags |= CAPSFLAG;
                /* fallthrough */
            case 'a': {
                double d = va_arg(ap, double);
    c646:	f103 0508 	add.w	r5, r3, #8
                s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    c64a:	a808      	add	r0, sp, #32
    c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
    c650:	f7ff fc2e 	bl	beb0 <double_to_hexstring.isra.0>
    c654:	4682      	mov	r10, r0
                goto _output_string;
    c656:	e01f      	b.n	c698 <_printf_engine+0x3b0>
            }
#endif
            default:
                OUTPUT_CHAR('%');
    c658:	ac10      	add	r4, sp, #64	; 0x40
    c65a:	2325      	movs	r3, #37	; 0x25
    c65c:	f804 3d24 	strb.w	r3, [r4, #-36]!
    c660:	4620      	mov	r0, r4
    c662:	2101      	movs	r1, #1
    c664:	4642      	mov	r2, r8
    c666:	47b8      	blx	r7
    c668:	f1b0 0c00 	subs.w	r12, r0, #0
    c66c:	db73      	blt.n	c756 <_printf_engine+0x46e>
                OUTPUT_CHAR(c);
    c66e:	f8cd c010 	str.w	r12, [r13, #16]
    c672:	f88d 501c 	strb.w	r5, [r13, #28]
    c676:	4620      	mov	r0, r4
    c678:	2101      	movs	r1, #1
    c67a:	4642      	mov	r2, r8
    c67c:	47b8      	blx	r7
    c67e:	2800      	cmp	r0, #0
    c680:	f8dd c010 	ldr.w	r12, [r13, #16]
    c684:	db03      	blt.n	c68e <_printf_engine+0x3a6>
                s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
                goto _output_string;
            }
#endif
            default:
                OUTPUT_CHAR('%');
    c686:	4466      	add	r6, r12
                OUTPUT_CHAR(c);
    c688:	4406      	add	r6, r0
                break;
    c68a:	465d      	mov	r5, r11
    c68c:	e7b9      	b.n	c602 <_printf_engine+0x31a>
                goto _output_string;
            }
#endif
            default:
                OUTPUT_CHAR('%');
                OUTPUT_CHAR(c);
    c68e:	4684      	mov	r12, r0
    c690:	e061      	b.n	c756 <_printf_engine+0x46e>
    c692:	bf00      	nop
    c694:	00017e6f 	.word	0x00017e6f
        /* move on to the next field */
        continue;

        /* shared output code */
_output_string:
        string_len = strlen(s);
    c698:	4650      	mov	r0, r10
    c69a:	f000 f940 	bl	c91e <strlen>

        if (flags & LEFTFORMATFLAG) {
    c69e:	0521      	lsls	r1, r4, #20
        /* move on to the next field */
        continue;

        /* shared output code */
_output_string:
        string_len = strlen(s);
    c6a0:	4683      	mov	r11, r0

        if (flags & LEFTFORMATFLAG) {
    c6a2:	d518      	bpl.n	c6d6 <_printf_engine+0x3ee>
            /* left justify the text */
            OUTPUT_STRING(s, string_len);
    c6a4:	4650      	mov	r0, r10
    c6a6:	4659      	mov	r1, r11
    c6a8:	4642      	mov	r2, r8
    c6aa:	47b8      	blx	r7
    c6ac:	f1b0 0c00 	subs.w	r12, r0, #0
    c6b0:	db51      	blt.n	c756 <_printf_engine+0x46e>
    c6b2:	4664      	mov	r4, r12
    c6b4:	4466      	add	r6, r12
            uint written = err;

            /* pad to the right (if necessary) */
            for (; format_num > written; format_num--)
    c6b6:	45a1      	cmp	r9, r4
    c6b8:	d9a3      	bls.n	c602 <_printf_engine+0x31a>
                OUTPUT_CHAR(' ');
    c6ba:	a810      	add	r0, sp, #64	; 0x40
    c6bc:	2320      	movs	r3, #32
    c6be:	f800 3d24 	strb.w	r3, [r0, #-36]!
    c6c2:	2101      	movs	r1, #1
    c6c4:	4642      	mov	r2, r8
    c6c6:	47b8      	blx	r7
    c6c8:	f1b0 0c00 	subs.w	r12, r0, #0
    c6cc:	db43      	blt.n	c756 <_printf_engine+0x46e>
    c6ce:	4466      	add	r6, r12
            /* left justify the text */
            OUTPUT_STRING(s, string_len);
            uint written = err;

            /* pad to the right (if necessary) */
            for (; format_num > written; format_num--)
    c6d0:	f109 39ff 	add.w	r9, r9, #4294967295
    c6d4:	e7ef      	b.n	c6b6 <_printf_engine+0x3ce>
        } else {
            /* right justify the text (digits) */

            /* if we're going to print a sign digit,
               it'll chew up one byte of the format size */
            if (signchar != '\0' && format_num > 0)
    c6d6:	f89d 201f 	ldrb.w	r2, [r13, #31]
    c6da:	b122      	cbz	r2, c6e6 <_printf_engine+0x3fe>
    c6dc:	f1b9 0f00 	cmp.w	r9, #0
    c6e0:	d001      	beq.n	c6e6 <_printf_engine+0x3fe>
                format_num--;
    c6e2:	f109 39ff 	add.w	r9, r9, #4294967295

            /* output the sign char before the leading zeros */
            if (flags & LEADZEROFLAG && signchar != '\0')
    c6e6:	f414 5480 	ands.w	r4, r4, #4096	; 0x1000
    c6ea:	d01b      	beq.n	c724 <_printf_engine+0x43c>
    c6ec:	b1d2      	cbz	r2, c724 <_printf_engine+0x43c>
                OUTPUT_CHAR(signchar);
    c6ee:	a810      	add	r0, sp, #64	; 0x40
    c6f0:	f800 2d24 	strb.w	r2, [r0, #-36]!
    c6f4:	2101      	movs	r1, #1
    c6f6:	4642      	mov	r2, r8
    c6f8:	47b8      	blx	r7
    c6fa:	f1b0 0c00 	subs.w	r12, r0, #0
    c6fe:	db2a      	blt.n	c756 <_printf_engine+0x46e>
    c700:	4466      	add	r6, r12
    c702:	e00f      	b.n	c724 <_printf_engine+0x43c>

            /* pad according to the format string */
            for (; format_num > string_len; format_num--)
                OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
    c704:	2c00      	cmp	r4, #0
    c706:	bf0c      	ite	eq
    c708:	2220      	moveq	r2, #32
    c70a:	2230      	movne	r2, #48	; 0x30
    c70c:	a810      	add	r0, sp, #64	; 0x40
    c70e:	f800 2d24 	strb.w	r2, [r0, #-36]!
    c712:	2101      	movs	r1, #1
    c714:	4642      	mov	r2, r8
    c716:	47b8      	blx	r7
    c718:	f1b0 0c00 	subs.w	r12, r0, #0
    c71c:	db1b      	blt.n	c756 <_printf_engine+0x46e>
    c71e:	4466      	add	r6, r12
            /* output the sign char before the leading zeros */
            if (flags & LEADZEROFLAG && signchar != '\0')
                OUTPUT_CHAR(signchar);

            /* pad according to the format string */
            for (; format_num > string_len; format_num--)
    c720:	f109 39ff 	add.w	r9, r9, #4294967295
    c724:	45d9      	cmp	r9, r11
    c726:	d8ed      	bhi.n	c704 <_printf_engine+0x41c>
                OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');

            /* if not leading zeros, output the sign char just before the number */
            if (!(flags & LEADZEROFLAG) && signchar != '\0')
    c728:	b964      	cbnz	r4, c744 <_printf_engine+0x45c>
    c72a:	f89d 201f 	ldrb.w	r2, [r13, #31]
    c72e:	b14a      	cbz	r2, c744 <_printf_engine+0x45c>
                OUTPUT_CHAR(signchar);
    c730:	a810      	add	r0, sp, #64	; 0x40
    c732:	f800 2d24 	strb.w	r2, [r0, #-36]!
    c736:	2101      	movs	r1, #1
    c738:	4642      	mov	r2, r8
    c73a:	47b8      	blx	r7
    c73c:	f1b0 0c00 	subs.w	r12, r0, #0
    c740:	db09      	blt.n	c756 <_printf_engine+0x46e>
    c742:	4466      	add	r6, r12

            /* output the string */
            OUTPUT_STRING(s, string_len);
    c744:	4650      	mov	r0, r10
    c746:	4659      	mov	r1, r11
    c748:	4642      	mov	r2, r8
    c74a:	47b8      	blx	r7
    c74c:	f1b0 0c00 	subs.w	r12, r0, #0
    c750:	db01      	blt.n	c756 <_printf_engine+0x46e>
    c752:	4466      	add	r6, r12
    c754:	e755      	b.n	c602 <_printf_engine+0x31a>
    c756:	4660      	mov	r0, r12
    c758:	e000      	b.n	c75c <_printf_engine+0x474>

#undef OUTPUT_STRING
#undef OUTPUT_CHAR

exit:
    return (err < 0) ? err : (int)chars_written;
    c75a:	4630      	mov	r0, r6
}
    c75c:	b011      	add	sp, #68	; 0x44
    c75e:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    c762:	bf00      	nop

0000c764 <vsnprintf>:

    return count;
}

int vsnprintf(char *str, size_t len, const char *fmt, va_list ap)
{
    c764:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, r14}
    c766:	4604      	mov	r4, r0
    c768:	460e      	mov	r6, r1
    struct _output_args args;
    int wlen;

    args.outstr = str;
    args.len = len;
    args.pos = 0;
    c76a:	2500      	movs	r5, #0
int vsnprintf(char *str, size_t len, const char *fmt, va_list ap)
{
    struct _output_args args;
    int wlen;

    args.outstr = str;
    c76c:	9001      	str	r0, [sp, #4]
    args.len = len;
    c76e:	9102      	str	r1, [sp, #8]
    args.pos = 0;

    wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    c770:	4806      	ldr	r0, [pc, #24]	; (c78c <vsnprintf+0x28>)
    c772:	a901      	add	r1, sp, #4
    struct _output_args args;
    int wlen;

    args.outstr = str;
    args.len = len;
    args.pos = 0;
    c774:	9503      	str	r5, [sp, #12]

    wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    c776:	f7ff fdb7 	bl	c2e8 <_printf_engine>
    if (args.pos >= len)
    c77a:	9b03      	ldr	r3, [sp, #12]
    c77c:	42b3      	cmp	r3, r6
        str[len-1] = '\0';
    c77e:	bf26      	itte	cs
    c780:	19a4      	addcs	r4, r4, r6
    c782:	f804 5c01 	strbcs.w	r5, [r4, #-1]
    else
        str[wlen] = '\0';
    c786:	5425      	strbcc	r5, [r4, r0]
    return wlen;
}
    c788:	b004      	add	sp, #16
    c78a:	bd70      	pop	{r4, r5, r6, r15}
    c78c:	0000bda9 	.word	0x0000bda9

0000c790 <snprintf>:

    return err;
}

int snprintf(char *str, size_t len, const char *fmt, ...)
{
    c790:	b40c      	push	{r2, r3}
    c792:	b507      	push	{r0, r1, r2, r14}
    c794:	ab04      	add	r3, sp, #16
    c796:	f853 2b04 	ldr.w	r2, [r3], #4
    int err;

    va_list ap;
    va_start(ap, fmt);
    c79a:	9301      	str	r3, [sp, #4]
    err = vsnprintf(str, len, fmt, ap);
    c79c:	f7ff ffe2 	bl	c764 <vsnprintf>
    va_end(ap);

    return err;
}
    c7a0:	b003      	add	sp, #12
    c7a2:	f85d eb04 	ldr.w	r14, [r13], #4
    c7a6:	b002      	add	sp, #8
    c7a8:	4770      	bx	r14

0000c7aa <vsprintf>:

int vsprintf(char *str, const char *fmt, va_list ap)
{
    c7aa:	b510      	push	{r4, r14}
    c7ac:	460c      	mov	r4, r1
    c7ae:	4613      	mov	r3, r2
    return vsnprintf(str, INT_MAX, fmt, ap);
    c7b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c7b4:	4622      	mov	r2, r4
}
    c7b6:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
    return err;
}

int vsprintf(char *str, const char *fmt, va_list ap)
{
    return vsnprintf(str, INT_MAX, fmt, ap);
    c7ba:	f7ff bfd3 	b.w	c764 <vsnprintf>

0000c7be <sprintf>:
#else
#define FLOAT_PRINTF 1
#endif

int sprintf(char *str, const char *fmt, ...)
{
    c7be:	b40e      	push	{r1, r2, r3}
    c7c0:	b503      	push	{r0, r1, r14}
    c7c2:	aa03      	add	r2, sp, #12
    c7c4:	f852 1b04 	ldr.w	r1, [r2], #4
    int err;

    va_list ap;
    va_start(ap, fmt);
    c7c8:	9201      	str	r2, [sp, #4]
    err = vsprintf(str, fmt, ap);
    c7ca:	f7ff ffee 	bl	c7aa <vsprintf>
    va_end(ap);

    return err;
}
    c7ce:	b002      	add	sp, #8
    c7d0:	f85d eb04 	ldr.w	r14, [r13], #4
    c7d4:	b003      	add	sp, #12
    c7d6:	4770      	bx	r14

0000c7d8 <rand>:
    randseed ^= enp;
}

int rand(void)
{
    return (randseed = randseed * 1664525 + 1013904223);
    c7d8:	4b03      	ldr	r3, [pc, #12]	; (c7e8 <rand+0x10>)
    c7da:	4904      	ldr	r1, [pc, #16]	; (c7ec <rand+0x14>)
    c7dc:	681a      	ldr	r2, [r3, #0]
    c7de:	4804      	ldr	r0, [pc, #16]	; (c7f0 <rand+0x18>)
    c7e0:	fb00 1002 	mla	r0, r0, r2, r1
    c7e4:	6018      	str	r0, [r3, #0]
}
    c7e6:	4770      	bx	r14
    c7e8:	20000064 	.word	0x20000064
    c7ec:	3c6ef35f 	.word	0x3c6ef35f
    c7f0:	0019660d 	.word	0x0019660d

0000c7f4 <_fprintf_output_func>:
{
    return getc(stdin);
}

static int _fprintf_output_func(const char *str, size_t len, void *state)
{
    c7f4:	b510      	push	{r4, r14}
    c7f6:	460b      	mov	r3, r1
    c7f8:	4604      	mov	r4, r0
    FILE *fp = (FILE *)state;

    return io_write(fp->io, str, len);
    c7fa:	4621      	mov	r1, r4
    c7fc:	6810      	ldr	r0, [r2, #0]
}
    c7fe:	e8bd 4010 	ldmia.w	r13!, {r4, r14}

static int _fprintf_output_func(const char *str, size_t len, void *state)
{
    FILE *fp = (FILE *)state;

    return io_write(fp->io, str, len);
    c802:	461a      	mov	r2, r3
    c804:	f000 bb48 	b.w	ce98 <io_write>

0000c808 <fputc>:
    DEFINE_STDIO_DESC(2), /* stderr */
};
#undef DEFINE_STDIO_DESC

int fputc(int _c, FILE *fp)
{
    c808:	b507      	push	{r0, r1, r2, r14}
    unsigned char c = _c;
    c80a:	ab02      	add	r3, sp, #8
    c80c:	f803 0d01 	strb.w	r0, [r3, #-1]!
    return io_write(fp->io, (char *)&c, 1);
    c810:	2201      	movs	r2, #1
    c812:	6808      	ldr	r0, [r1, #0]
    c814:	4619      	mov	r1, r3
    c816:	f000 fb3f 	bl	ce98 <io_write>
}
    c81a:	b003      	add	sp, #12
    c81c:	f85d fb04 	ldr.w	r15, [r13], #4

0000c820 <putchar>:

int putchar(int c)
{
    return fputc(c, stdout);
    c820:	4901      	ldr	r1, [pc, #4]	; (c828 <putchar+0x8>)
    c822:	f7ff bff1 	b.w	c808 <fputc>
    c826:	bf00      	nop
    c828:	2000006c 	.word	0x2000006c

0000c82c <fputs>:
        err = fputc('\n', stdout);
    return err;
}

int fputs(const char *s, FILE *fp)
{
    c82c:	b538      	push	{r3, r4, r5, r14}
    c82e:	460d      	mov	r5, r1
    c830:	4604      	mov	r4, r0
    size_t len = strlen(s);
    c832:	f000 f874 	bl	c91e <strlen>

    return io_write(fp->io, s, len);
    c836:	4621      	mov	r1, r4
    return err;
}

int fputs(const char *s, FILE *fp)
{
    size_t len = strlen(s);
    c838:	4602      	mov	r2, r0

    return io_write(fp->io, s, len);
    c83a:	6828      	ldr	r0, [r5, #0]
}
    c83c:	e8bd 4038 	ldmia.w	r13!, {r3, r4, r5, r14}

int fputs(const char *s, FILE *fp)
{
    size_t len = strlen(s);

    return io_write(fp->io, s, len);
    c840:	f000 bb2a 	b.w	ce98 <io_write>

0000c844 <getc>:
    bytes_written = io_write(fp->io, ptr, size * count);
    return bytes_written / size;
}

int getc(FILE *fp)
{
    c844:	b507      	push	{r0, r1, r2, r14}
    char c;
    ssize_t ret = io_read(fp->io, &c, sizeof(c));
    c846:	2201      	movs	r2, #1
    c848:	f10d 0107 	add.w	r1, r13, #7
    c84c:	6800      	ldr	r0, [r0, #0]
    c84e:	f000 fb41 	bl	ced4 <io_read>

    return (ret > 0) ? c : ret;
    c852:	2800      	cmp	r0, #0
    c854:	bfc8      	it	gt
    c856:	f89d 0007 	ldrbgt.w	r0, [r13, #7]
}
    c85a:	b003      	add	sp, #12
    c85c:	f85d fb04 	ldr.w	r15, [r13], #4

0000c860 <getchar>:

int getchar(void)
{
    return getc(stdin);
    c860:	4801      	ldr	r0, [pc, #4]	; (c868 <getchar+0x8>)
    c862:	f7ff bfef 	b.w	c844 <getc>
    c866:	bf00      	nop
    c868:	20000068 	.word	0x20000068

0000c86c <vfprintf>:

    return io_write(fp->io, str, len);
}

int vfprintf(FILE *fp, const char *fmt, va_list ap)
{
    c86c:	b530      	push	{r4, r5, r14}
    c86e:	4605      	mov	r5, r0
    c870:	460c      	mov	r4, r1
    c872:	4613      	mov	r3, r2
    return _printf_engine(&_fprintf_output_func, (void *)fp, fmt, ap);
    c874:	4629      	mov	r1, r5
    c876:	4622      	mov	r2, r4
    c878:	4802      	ldr	r0, [pc, #8]	; (c884 <vfprintf+0x18>)
}
    c87a:	e8bd 4030 	ldmia.w	r13!, {r4, r5, r14}
    return io_write(fp->io, str, len);
}

int vfprintf(FILE *fp, const char *fmt, va_list ap)
{
    return _printf_engine(&_fprintf_output_func, (void *)fp, fmt, ap);
    c87e:	f7ff bd33 	b.w	c2e8 <_printf_engine>
    c882:	bf00      	nop
    c884:	0000c7f5 	.word	0x0000c7f5

0000c888 <_printf>:
    va_end(ap);
    return err;
}

int _printf(const char *fmt, ...)
{
    c888:	b40f      	push	{r0, r1, r2, r3}
    c88a:	b507      	push	{r0, r1, r2, r14}
    c88c:	aa04      	add	r2, sp, #16
    c88e:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list ap;
    int err;

    va_start(ap, fmt);
    err = vfprintf(stdout, fmt, ap);
    c892:	4804      	ldr	r0, [pc, #16]	; (c8a4 <_printf+0x1c>)
int _printf(const char *fmt, ...)
{
    va_list ap;
    int err;

    va_start(ap, fmt);
    c894:	9201      	str	r2, [sp, #4]
    err = vfprintf(stdout, fmt, ap);
    c896:	f7ff ffe9 	bl	c86c <vfprintf>
    va_end(ap);

    return err;
}
    c89a:	b003      	add	sp, #12
    c89c:	f85d eb04 	ldr.w	r14, [r13], #4
    c8a0:	b004      	add	sp, #16
    c8a2:	4770      	bx	r14
    c8a4:	2000006c 	.word	0x2000006c

0000c8a8 <_vprintf>:

int _vprintf(const char *fmt, va_list ap)
{
    c8a8:	4603      	mov	r3, r0
    c8aa:	460a      	mov	r2, r1
    return vfprintf(stdout, fmt, ap);
    c8ac:	4801      	ldr	r0, [pc, #4]	; (c8b4 <_vprintf+0xc>)
    c8ae:	4619      	mov	r1, r3
    c8b0:	f7ff bfdc 	b.w	c86c <vfprintf>
    c8b4:	2000006c 	.word	0x2000006c

0000c8b8 <memcmp>:
#include <string.h>
#include <sys/types.h>

int
memcmp(const void *cs, const void *ct, size_t count)
{
    c8b8:	b530      	push	{r4, r5, r14}
    const unsigned char *su1, *su2;
    signed char res = 0;

    for (su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
    c8ba:	2300      	movs	r3, #0
    c8bc:	4293      	cmp	r3, r2
    c8be:	d007      	beq.n	c8d0 <memcmp+0x18>
        if ((res = *su1 - *su2) != 0)
    c8c0:	5cc5      	ldrb	r5, [r0, r3]
    c8c2:	5ccc      	ldrb	r4, [r1, r3]
    c8c4:	3301      	adds	r3, #1
    c8c6:	1b2c      	subs	r4, r5, r4
    c8c8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    c8cc:	d0f6      	beq.n	c8bc <memcmp+0x4>
    c8ce:	e000      	b.n	c8d2 <memcmp+0x1a>
    c8d0:	2400      	movs	r4, #0
            break;
    return res;
}
    c8d2:	b260      	sxtb	r0, r4
    c8d4:	bd30      	pop	{r4, r5, r15}

0000c8d6 <strcmp>:
#include <string.h>
#include <sys/types.h>

int
strcmp(char const *cs, char const *ct)
{
    c8d6:	b510      	push	{r4, r14}
    c8d8:	2300      	movs	r3, #0
    signed char __res;

    while (1) {
        if ((__res = *cs - *ct++) != 0 || !*cs++)
    c8da:	5cc2      	ldrb	r2, [r0, r3]
    c8dc:	5ccc      	ldrb	r4, [r1, r3]
    c8de:	1b14      	subs	r4, r2, r4
    c8e0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    c8e4:	d102      	bne.n	c8ec <strcmp+0x16>
    c8e6:	3301      	adds	r3, #1
    c8e8:	2a00      	cmp	r2, #0
    c8ea:	d1f6      	bne.n	c8da <strcmp+0x4>
            break;
    }

    return __res;
}
    c8ec:	b260      	sxtb	r0, r4
    c8ee:	bd10      	pop	{r4, r15}

0000c8f0 <strlcpy>:
#include <string.h>
#include <sys/types.h>

size_t
strlcpy(char *dst, char const *src, size_t s)
{
    c8f0:	b510      	push	{r4, r14}
    size_t i= 0;

    if (!s) {
    c8f2:	b10a      	cbz	r2, c8f8 <strlcpy+0x8>
    c8f4:	2400      	movs	r4, #0
    c8f6:	e008      	b.n	c90a <strlcpy+0x1a>
        return strlen(src);
    c8f8:	4608      	mov	r0, r1
    }

    dst[i]= 0;

    return i + strlen(src+i);
}
    c8fa:	e8bd 4010 	ldmia.w	r13!, {r4, r14}
strlcpy(char *dst, char const *src, size_t s)
{
    size_t i= 0;

    if (!s) {
        return strlen(src);
    c8fe:	f000 b80e 	b.w	c91e <strlen>
    }

    for (i= 0; ((i< s-1) && src[i]); i++) {
    c902:	5d0b      	ldrb	r3, [r1, r4]
    c904:	b123      	cbz	r3, c910 <strlcpy+0x20>
        dst[i]= src[i];
    c906:	5503      	strb	r3, [r0, r4]

    if (!s) {
        return strlen(src);
    }

    for (i= 0; ((i< s-1) && src[i]); i++) {
    c908:	3401      	adds	r4, #1
    c90a:	1e53      	subs	r3, r2, #1
    c90c:	429c      	cmp	r4, r3
    c90e:	d3f8      	bcc.n	c902 <strlcpy+0x12>
        dst[i]= src[i];
    }

    dst[i]= 0;
    c910:	2300      	movs	r3, #0
    c912:	5503      	strb	r3, [r0, r4]

    return i + strlen(src+i);
    c914:	1908      	adds	r0, r1, r4
    c916:	f000 f802 	bl	c91e <strlen>
    c91a:	4420      	add	r0, r4
    c91c:	bd10      	pop	{r4, r15}

0000c91e <strlen>:
size_t
strlen(char const *s)
{
    size_t i;

    i= 0;
    c91e:	2300      	movs	r3, #0
    while (s[i]) {
    c920:	5cc2      	ldrb	r2, [r0, r3]
    c922:	b10a      	cbz	r2, c928 <strlen+0xa>
        i+= 1;
    c924:	3301      	adds	r3, #1
    c926:	e7fb      	b.n	c920 <strlen+0x2>
    }

    return i;
}
    c928:	4618      	mov	r0, r3
    c92a:	4770      	bx	r14

0000c92c <list_delete>:

#define list_add_before(entry, new_entry) list_add_tail(entry, new_entry)

static inline void list_delete(struct list_node *item)
{
    item->next->prev = item->prev;
    c92c:	e890 000c 	ldmia.w	r0, {r2, r3}
    c930:	601a      	str	r2, [r3, #0]
    item->prev->next = item->next;
    c932:	6802      	ldr	r2, [r0, #0]
    c934:	6053      	str	r3, [r2, #4]
    item->prev = item->next = 0;
    c936:	2300      	movs	r3, #0
    c938:	6043      	str	r3, [r0, #4]
    c93a:	6003      	str	r3, [r0, #0]
    c93c:	4770      	bx	r14
	...

0000c940 <heap_create_free_chunk.isra.2>:
    return chunk;
}

static struct free_heap_chunk *heap_create_free_chunk(void *ptr, size_t len, bool allow_debug)
{
    DEBUG_ASSERT((len % sizeof(void *)) == 0); // size must be aligned on pointer boundary
    c940:	f011 0f03 	tst.w	r1, #3
    mutex_release(&theheap.lock);

    return chunk;
}

static struct free_heap_chunk *heap_create_free_chunk(void *ptr, size_t len, bool allow_debug)
    c944:	b507      	push	{r0, r1, r2, r14}
{
    DEBUG_ASSERT((len % sizeof(void *)) == 0); // size must be aligned on pointer boundary
    c946:	d007      	beq.n	c958 <heap_create_free_chunk.isra.2+0x18>
    c948:	4b05      	ldr	r3, [pc, #20]	; (c960 <heap_create_free_chunk.isra.2+0x20>)
    c94a:	4670      	mov	r0, r14
    c94c:	9300      	str	r3, [sp, #0]
    c94e:	4905      	ldr	r1, [pc, #20]	; (c964 <heap_create_free_chunk.isra.2+0x24>)
    c950:	4a05      	ldr	r2, [pc, #20]	; (c968 <heap_create_free_chunk.isra.2+0x28>)
    c952:	23ac      	movs	r3, #172	; 0xac
    c954:	f7fe fdae 	bl	b4b4 <_panic>
    if (allow_debug)
        memset(ptr, FREE_FILL, len);
#endif

    struct free_heap_chunk *chunk = (struct free_heap_chunk *)ptr;
    chunk->len = len;
    c958:	6081      	str	r1, [r0, #8]

    return chunk;
}
    c95a:	b003      	add	sp, #12
    c95c:	f85d fb04 	ldr.w	r15, [r13], #4
    c960:	00017ee9 	.word	0x00017ee9
    c964:	0001076e 	.word	0x0001076e
    c968:	00017ecc 	.word	0x00017ecc

0000c96c <mutex_acquire.constprop.5>:
    c96c:	4802      	ldr	r0, [pc, #8]	; (c978 <mutex_acquire.constprop.5+0xc>)
    c96e:	f04f 31ff 	mov.w	r1, #4294967295
    c972:	f7f7 bdf7 	b.w	4564 <mutex_acquire_timeout>
    c976:	bf00      	nop
    c978:	20000990 	.word	0x20000990

0000c97c <heap_insert_free_chunk>:
}

// try to insert this free chunk into the free list, consuming the chunk by merging it with
// nearby ones if possible. Returns base of whatever chunk it became in the list.
static struct free_heap_chunk *heap_insert_free_chunk(struct free_heap_chunk *chunk)
{
    c97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, r14}
    c97e:	4604      	mov	r4, r0
    c980:	4677      	mov	r7, r14
#if LK_DEBUGLEVEL > INFO
    vaddr_t chunk_end = (vaddr_t)chunk + chunk->len;
    c982:	6886      	ldr	r6, [r0, #8]
    LTRACEF("chunk ptr %p, size 0x%zx\n", chunk, chunk->len);

    struct free_heap_chunk *next_chunk;
    struct free_heap_chunk *last_chunk;

    mutex_acquire(&theheap.lock);
    c984:	f7ff fff2 	bl	c96c <mutex_acquire.constprop.5>

    theheap.remaining += chunk->len;
    c988:	4b22      	ldr	r3, [pc, #136]	; (ca14 <heap_insert_free_chunk+0x98>)
    c98a:	68a2      	ldr	r2, [r4, #8]
    c98c:	6899      	ldr	r1, [r3, #8]

    // walk through the list, finding the node to insert before
    list_for_every_entry(&theheap.free_list, next_chunk, struct free_heap_chunk, node) {
    c98e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
    struct free_heap_chunk *next_chunk;
    struct free_heap_chunk *last_chunk;

    mutex_acquire(&theheap.lock);

    theheap.remaining += chunk->len;
    c990:	4411      	add	r1, r2
    c992:	6099      	str	r1, [r3, #8]

    // walk through the list, finding the node to insert before
    list_for_every_entry(&theheap.free_list, next_chunk, struct free_heap_chunk, node) {
    c994:	4b1f      	ldr	r3, [pc, #124]	; (ca14 <heap_insert_free_chunk+0x98>)
    c996:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    c99a:	428d      	cmp	r5, r1
    c99c:	d015      	beq.n	c9ca <heap_insert_free_chunk+0x4e>
        if (chunk < next_chunk) {
    c99e:	42ac      	cmp	r4, r5
    c9a0:	d211      	bcs.n	c9c6 <heap_insert_free_chunk+0x4a>
// try to insert this free chunk into the free list, consuming the chunk by merging it with
// nearby ones if possible. Returns base of whatever chunk it became in the list.
static struct free_heap_chunk *heap_insert_free_chunk(struct free_heap_chunk *chunk)
{
#if LK_DEBUGLEVEL > INFO
    vaddr_t chunk_end = (vaddr_t)chunk + chunk->len;
    c9a2:	4426      	add	r6, r4
    theheap.remaining += chunk->len;

    // walk through the list, finding the node to insert before
    list_for_every_entry(&theheap.free_list, next_chunk, struct free_heap_chunk, node) {
        if (chunk < next_chunk) {
            DEBUG_ASSERT(chunk_end <= (vaddr_t)next_chunk);
    c9a4:	42b5      	cmp	r5, r6
    c9a6:	d207      	bcs.n	c9b8 <heap_insert_free_chunk+0x3c>
    c9a8:	4b1b      	ldr	r3, [pc, #108]	; (ca18 <heap_insert_free_chunk+0x9c>)
    c9aa:	4638      	mov	r0, r7
    c9ac:	9300      	str	r3, [sp, #0]
    c9ae:	491b      	ldr	r1, [pc, #108]	; (ca1c <heap_insert_free_chunk+0xa0>)
    c9b0:	4a1b      	ldr	r2, [pc, #108]	; (ca20 <heap_insert_free_chunk+0xa4>)
    c9b2:	237e      	movs	r3, #126	; 0x7e
    c9b4:	f7fe fd7e 	bl	b4b4 <_panic>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    c9b8:	682b      	ldr	r3, [r5, #0]
    item->next = list;
    c9ba:	e884 0028 	stmia.w	r4, {r3, r5}
    list->prev->next = item;
    c9be:	682b      	ldr	r3, [r5, #0]
    c9c0:	605c      	str	r4, [r3, #4]
    list->prev = item;
    c9c2:	602c      	str	r4, [r5, #0]
    c9c4:	e007      	b.n	c9d6 <heap_insert_free_chunk+0x5a>
    mutex_acquire(&theheap.lock);

    theheap.remaining += chunk->len;

    // walk through the list, finding the node to insert before
    list_for_every_entry(&theheap.free_list, next_chunk, struct free_heap_chunk, node) {
    c9c6:	686d      	ldr	r5, [r5, #4]
    c9c8:	e7e4      	b.n	c994 <heap_insert_free_chunk+0x18>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    c9ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    item->next = list;
    c9cc:	e884 0021 	stmia.w	r4, {r0, r5}
    list->prev->next = item;
    c9d0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    c9d2:	6044      	str	r4, [r0, #4]
    list->prev = item;
    c9d4:	62dc      	str	r4, [r3, #44]	; 0x2c
        if (chunk < next_chunk) {
            DEBUG_ASSERT(chunk_end <= (vaddr_t)next_chunk);

            list_add_before(&next_chunk->node, &chunk->node);
    c9d6:	6826      	ldr	r6, [r4, #0]
    __t;\
})

static inline struct list_node *list_prev(struct list_node *list, struct list_node *item)
{
    if (item->prev != list)
    c9d8:	428e      	cmp	r6, r1
    c9da:	d00a      	beq.n	c9f2 <heap_insert_free_chunk+0x76>
    // walked off the end of the list, add it at the tail
    list_add_tail(&theheap.free_list, &chunk->node);

    // try to merge with the previous chunk
try_merge:
    last_chunk = list_prev_type(&theheap.free_list, &chunk->node, struct free_heap_chunk, node);
    c9dc:	b14e      	cbz	r6, c9f2 <heap_insert_free_chunk+0x76>
    if (last_chunk) {
        if ((vaddr_t)last_chunk + last_chunk->len == (vaddr_t)chunk) {
    c9de:	68b3      	ldr	r3, [r6, #8]
    c9e0:	18f1      	adds	r1, r6, r3
    c9e2:	42a1      	cmp	r1, r4
    c9e4:	d105      	bne.n	c9f2 <heap_insert_free_chunk+0x76>
            // easy, just extend the previous chunk
            last_chunk->len += chunk->len;
    c9e6:	4413      	add	r3, r2

            // remove ourself from the list
            list_delete(&chunk->node);
    c9e8:	4620      	mov	r0, r4
try_merge:
    last_chunk = list_prev_type(&theheap.free_list, &chunk->node, struct free_heap_chunk, node);
    if (last_chunk) {
        if ((vaddr_t)last_chunk + last_chunk->len == (vaddr_t)chunk) {
            // easy, just extend the previous chunk
            last_chunk->len += chunk->len;
    c9ea:	60b3      	str	r3, [r6, #8]

            // remove ourself from the list
            list_delete(&chunk->node);
    c9ec:	f7ff ff9e 	bl	c92c <list_delete>
    c9f0:	4634      	mov	r4, r6
            chunk = last_chunk;
        }
    }

    // try to merge with the next chunk
    if (next_chunk) {
    c9f2:	b14d      	cbz	r5, ca08 <heap_insert_free_chunk+0x8c>
        if ((vaddr_t)chunk + chunk->len == (vaddr_t)next_chunk) {
    c9f4:	68a3      	ldr	r3, [r4, #8]
    c9f6:	18e2      	adds	r2, r4, r3
    c9f8:	4295      	cmp	r5, r2
    c9fa:	d105      	bne.n	ca08 <heap_insert_free_chunk+0x8c>
            // extend our chunk
            chunk->len += next_chunk->len;
    c9fc:	68aa      	ldr	r2, [r5, #8]

            // remove them from the list
            list_delete(&next_chunk->node);
    c9fe:	4628      	mov	r0, r5

    // try to merge with the next chunk
    if (next_chunk) {
        if ((vaddr_t)chunk + chunk->len == (vaddr_t)next_chunk) {
            // extend our chunk
            chunk->len += next_chunk->len;
    ca00:	4413      	add	r3, r2
    ca02:	60a3      	str	r3, [r4, #8]

            // remove them from the list
            list_delete(&next_chunk->node);
    ca04:	f7ff ff92 	bl	c92c <list_delete>
        }
    }

    mutex_release(&theheap.lock);
    ca08:	4806      	ldr	r0, [pc, #24]	; (ca24 <heap_insert_free_chunk+0xa8>)
    ca0a:	f7f7 fdfb 	bl	4604 <mutex_release>

    return chunk;
}
    ca0e:	4620      	mov	r0, r4
    ca10:	b003      	add	sp, #12
    ca12:	bdf0      	pop	{r4, r5, r6, r7, r15}
    ca14:	20000980 	.word	0x20000980
    ca18:	00017f05 	.word	0x00017f05
    ca1c:	0001076e 	.word	0x0001076e
    ca20:	00017ecc 	.word	0x00017ecc
    ca24:	20000990 	.word	0x20000990

0000ca28 <miniheap_dump>:
{
    dprintf(INFO, "\t\tbase %p, end 0x%lx, len 0x%zx\n", chunk, (vaddr_t)chunk + chunk->len, chunk->len);
}

void miniheap_dump(void)
{
    ca28:	b510      	push	{r4, r14}
    dprintf(INFO, "Heap dump (using miniheap):\n");
    dprintf(INFO, "\tbase %p, len 0x%zx\n", theheap.base, theheap.len);
    ca2a:	4c10      	ldr	r4, [pc, #64]	; (ca6c <miniheap_dump+0x44>)
    dprintf(INFO, "\t\tbase %p, end 0x%lx, len 0x%zx\n", chunk, (vaddr_t)chunk + chunk->len, chunk->len);
}

void miniheap_dump(void)
{
    dprintf(INFO, "Heap dump (using miniheap):\n");
    ca2c:	4810      	ldr	r0, [pc, #64]	; (ca70 <miniheap_dump+0x48>)
    ca2e:	f7ff ff2b 	bl	c888 <_printf>
    dprintf(INFO, "\tbase %p, len 0x%zx\n", theheap.base, theheap.len);
    ca32:	e894 0006 	ldmia.w	r4, {r1, r2}
    ca36:	480f      	ldr	r0, [pc, #60]	; (ca74 <miniheap_dump+0x4c>)
    ca38:	f7ff ff26 	bl	c888 <_printf>
    dprintf(INFO, "\tfree list:\n");
    ca3c:	480e      	ldr	r0, [pc, #56]	; (ca78 <miniheap_dump+0x50>)
    ca3e:	f7ff ff23 	bl	c888 <_printf>

    mutex_acquire(&theheap.lock);
    ca42:	f7ff ff93 	bl	c96c <mutex_acquire.constprop.5>

    struct free_heap_chunk *chunk;
    list_for_every_entry(&theheap.free_list, chunk, struct free_heap_chunk, node) {
    ca46:	6b24      	ldr	r4, [r4, #48]	; 0x30
    ca48:	4b0c      	ldr	r3, [pc, #48]	; (ca7c <miniheap_dump+0x54>)
    ca4a:	429c      	cmp	r4, r3
    ca4c:	d007      	beq.n	ca5e <miniheap_dump+0x36>

static ssize_t heap_grow(size_t len);

static void dump_free_chunk(struct free_heap_chunk *chunk)
{
    dprintf(INFO, "\t\tbase %p, end 0x%lx, len 0x%zx\n", chunk, (vaddr_t)chunk + chunk->len, chunk->len);
    ca4e:	68a3      	ldr	r3, [r4, #8]
    ca50:	4621      	mov	r1, r4
    ca52:	18e2      	adds	r2, r4, r3
    ca54:	480a      	ldr	r0, [pc, #40]	; (ca80 <miniheap_dump+0x58>)
    ca56:	f7ff ff17 	bl	c888 <_printf>
    dprintf(INFO, "\tfree list:\n");

    mutex_acquire(&theheap.lock);

    struct free_heap_chunk *chunk;
    list_for_every_entry(&theheap.free_list, chunk, struct free_heap_chunk, node) {
    ca5a:	6864      	ldr	r4, [r4, #4]
    ca5c:	e7f4      	b.n	ca48 <miniheap_dump+0x20>
        dump_free_chunk(chunk);
    }
    mutex_release(&theheap.lock);
    ca5e:	f1a3 001c 	sub.w	r0, r3, #28

}
    ca62:	e8bd 4010 	ldmia.w	r13!, {r4, r14}

    struct free_heap_chunk *chunk;
    list_for_every_entry(&theheap.free_list, chunk, struct free_heap_chunk, node) {
        dump_free_chunk(chunk);
    }
    mutex_release(&theheap.lock);
    ca66:	f7f7 bdcd 	b.w	4604 <mutex_release>
    ca6a:	bf00      	nop
    ca6c:	20000980 	.word	0x20000980
    ca70:	00017f26 	.word	0x00017f26
    ca74:	00017f43 	.word	0x00017f43
    ca78:	00017f58 	.word	0x00017f58
    ca7c:	200009ac 	.word	0x200009ac
    ca80:	00017f65 	.word	0x00017f65

0000ca84 <miniheap_alloc>:
#endif

    LTRACEF("size %zd, align %d\n", size, alignment);

    // alignment must be power of 2
    if (alignment & (alignment - 1))
    ca84:	1e4b      	subs	r3, r1, #1
    ca86:	420b      	tst	r3, r1

    return chunk;
}

void *miniheap_alloc(size_t size, unsigned int alignment)
{
    ca88:	e92d 4ff7 	stmdb	r13!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r10, r11, r14}
    ca8c:	46f2      	mov	r10, r14
    ca8e:	460e      	mov	r6, r1
#endif

    LTRACEF("size %zd, align %d\n", size, alignment);

    // alignment must be power of 2
    if (alignment & (alignment - 1))
    ca90:	d001      	beq.n	ca96 <miniheap_alloc+0x12>
        return NULL;
    ca92:	2000      	movs	r0, #0
    ca94:	e0b0      	b.n	cbf8 <miniheap_alloc+0x174>

    // we always put a size field + base pointer + magic in front of the allocation
    size += sizeof(struct alloc_struct_begin);
    ca96:	f100 050c 	add.w	r5, r0, #12

    // make sure we allocate at least the size of a struct free_heap_chunk so that
    // when we free it, we can create a struct free_heap_chunk struct and stick it
    // in the spot
    if (size < sizeof(struct free_heap_chunk))
        size = sizeof(struct free_heap_chunk);
    ca9a:	2d0b      	cmp	r5, #11
    ca9c:	bf98      	it	ls
    ca9e:	250c      	movls	r5, #12

    // round up size to a multiple of native pointer size
    size = ROUNDUP(size, sizeof(void *));
    caa0:	3503      	adds	r5, #3
    caa2:	f025 0503 	bic.w	r5, r5, #3

    // deal with nonzero alignments
    if (alignment > 0) {
    caa6:	b119      	cbz	r1, cab0 <miniheap_alloc+0x2c>
        if (alignment < 16)
            alignment = 16;
    caa8:	290f      	cmp	r1, #15
    caaa:	bf98      	it	ls
    caac:	2610      	movls	r6, #16

        // add alignment for worst case fit
        size += alignment;
    caae:	4435      	add	r5, r6
    }

    int retry_count = 0;
    cab0:	f04f 0900 	mov.w	r9, #0
    mutex_acquire(&theheap.lock);

    // walk through the list
    ptr = NULL;
    struct free_heap_chunk *chunk;
    list_for_every_entry(&theheap.free_list, chunk, struct free_heap_chunk, node) {
    cab4:	4f52      	ldr	r7, [pc, #328]	; (cc00 <miniheap_alloc+0x17c>)
        size += alignment;
    }

    int retry_count = 0;
retry:
    mutex_acquire(&theheap.lock);
    cab6:	f7ff ff59 	bl	c96c <mutex_acquire.constprop.5>

    // walk through the list
    ptr = NULL;
    struct free_heap_chunk *chunk;
    list_for_every_entry(&theheap.free_list, chunk, struct free_heap_chunk, node) {
    caba:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    cabc:	f8df b160 	ldr.w	r11, [r15, #352]	; cc20 <miniheap_alloc+0x19c>
    cac0:	455c      	cmp	r4, r11
    cac2:	d056      	beq.n	cb72 <miniheap_alloc+0xee>
        DEBUG_ASSERT((chunk->len % sizeof(void *)) == 0); // len should always be a multiple of pointer size
    cac4:	68a3      	ldr	r3, [r4, #8]
    cac6:	079a      	lsls	r2, r3, #30
    cac8:	d006      	beq.n	cad8 <miniheap_alloc+0x54>
    caca:	4b4e      	ldr	r3, [pc, #312]	; (cc04 <miniheap_alloc+0x180>)
    cacc:	4650      	mov	r0, r10
    cace:	9300      	str	r3, [sp, #0]
    cad0:	494d      	ldr	r1, [pc, #308]	; (cc08 <miniheap_alloc+0x184>)
    cad2:	4a4e      	ldr	r2, [pc, #312]	; (cc0c <miniheap_alloc+0x188>)
    cad4:	23e6      	movs	r3, #230	; 0xe6
    cad6:	e030      	b.n	cb3a <miniheap_alloc+0xb6>

        // is it big enough to service our allocation?
        if (chunk->len >= size) {
    cad8:	42ab      	cmp	r3, r5
    cada:	d348      	bcc.n	cb6e <miniheap_alloc+0xea>
            ptr = chunk;

            // remove it from the list
            struct list_node *next_node = list_next(&theheap.free_list, &chunk->node);
            list_delete(&chunk->node);
    cadc:	4620      	mov	r0, r4
        // is it big enough to service our allocation?
        if (chunk->len >= size) {
            ptr = chunk;

            // remove it from the list
            struct list_node *next_node = list_next(&theheap.free_list, &chunk->node);
    cade:	f8d4 8004 	ldr.w	r8, [r4, #4]
            list_delete(&chunk->node);
    cae2:	f7ff ff23 	bl	c92c <list_delete>

            if (chunk->len > size + sizeof(struct free_heap_chunk)) {
    cae6:	68a1      	ldr	r1, [r4, #8]
    cae8:	f105 030c 	add.w	r3, r5, #12
static inline struct list_node *list_next(struct list_node *list, struct list_node *item)
{
    if (item->next != list)
        return item->next;
    else
        return NULL;
    caec:	45d8      	cmp	r8, r11
    caee:	bf08      	it	eq
    caf0:	f04f 0800 	moveq.w	r8, #0
    caf4:	4299      	cmp	r1, r3
    caf6:	d917      	bls.n	cb28 <miniheap_alloc+0xa4>
                // there's enough space in this chunk to create a new one after the allocation
                struct free_heap_chunk *newchunk = heap_create_free_chunk((uint8_t *)ptr + size, chunk->len - size, true);
    caf8:	1960      	adds	r0, r4, r5
    cafa:	1b49      	subs	r1, r1, r5
    cafc:	f7ff ff20 	bl	c940 <heap_create_free_chunk.isra.2>

                // truncate this chunk
                chunk->len -= chunk->len - size;
    cb00:	60a5      	str	r5, [r4, #8]

                // add the new one where chunk used to be
                if (next_node)
    cb02:	f1b8 0f00 	cmp.w	r8, #0
    cb06:	d009      	beq.n	cb1c <miniheap_alloc+0x98>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    cb08:	f8d8 2000 	ldr.w	r2, [r8]
    item->next = list;
    cb0c:	e880 0104 	stmia.w	r0, {r2, r8}
    list->prev->next = item;
    cb10:	f8d8 2000 	ldr.w	r2, [r8]
    cb14:	6050      	str	r0, [r2, #4]
    list->prev = item;
    cb16:	f8c8 0000 	str.w	r0, [r8]
    cb1a:	e005      	b.n	cb28 <miniheap_alloc+0xa4>

#define list_add_after(entry, new_entry) list_add_head(entry, new_entry)

static inline void list_add_tail(struct list_node *list, struct list_node *item)
{
    item->prev = list->prev;
    cb1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    item->next = list;
    cb1e:	e880 0804 	stmia.w	r0, {r2, r11}
    list->prev->next = item;
    cb22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    cb24:	6050      	str	r0, [r2, #4]
    list->prev = item;
    cb26:	62f8      	str	r0, [r7, #44]	; 0x2c
                else
                    list_add_tail(&theheap.free_list, &newchunk->node);
            }

            // the allocated size is actually the length of this chunk, not the size requested
            DEBUG_ASSERT(chunk->len >= size);
    cb28:	68a3      	ldr	r3, [r4, #8]
    cb2a:	42ab      	cmp	r3, r5
    cb2c:	d207      	bcs.n	cb3e <miniheap_alloc+0xba>
    cb2e:	4b38      	ldr	r3, [pc, #224]	; (cc10 <miniheap_alloc+0x18c>)
    cb30:	4935      	ldr	r1, [pc, #212]	; (cc08 <miniheap_alloc+0x184>)
    cb32:	4a36      	ldr	r2, [pc, #216]	; (cc0c <miniheap_alloc+0x188>)
    cb34:	9300      	str	r3, [sp, #0]
    cb36:	4650      	mov	r0, r10
    cb38:	23ff      	movs	r3, #255	; 0xff
    cb3a:	f7fe fcbb 	bl	b4b4 <_panic>

#if DEBUG_HEAP
            memset(ptr, ALLOC_FILL, size);
#endif

            ptr = (void *)((addr_t)ptr + sizeof(struct alloc_struct_begin));
    cb3e:	f104 080c 	add.w	r8, r4, #12

            // align the output if requested
            if (alignment > 0) {
    cb42:	b126      	cbz	r6, cb4e <miniheap_alloc+0xca>
                ptr = (void *)ROUNDUP((addr_t)ptr, (addr_t)alignment);
    cb44:	1e72      	subs	r2, r6, #1
    cb46:	4490      	add	r8, r2
    cb48:	4272      	negs	r2, r6
    cb4a:	ea08 0802 	and.w	r8, r8, r2
            }

            struct alloc_struct_begin *as = (struct alloc_struct_begin *)ptr;
            as--;
#if LK_DEBUGLEVEL > 1
            as->magic = HEAP_MAGIC;
    cb4e:	4a31      	ldr	r2, [pc, #196]	; (cc14 <miniheap_alloc+0x190>)
#endif
            as->ptr = (void *)chunk;
            as->size = size;
            theheap.remaining -= size;

            if (theheap.remaining < theheap.low_watermark) {
    cb50:	68f9      	ldr	r1, [r7, #12]
            }

            struct alloc_struct_begin *as = (struct alloc_struct_begin *)ptr;
            as--;
#if LK_DEBUGLEVEL > 1
            as->magic = HEAP_MAGIC;
    cb52:	f848 2c0c 	str.w	r2, [r8, #-12]
#endif
            as->ptr = (void *)chunk;
            as->size = size;
            theheap.remaining -= size;
    cb56:	68ba      	ldr	r2, [r7, #8]
            struct alloc_struct_begin *as = (struct alloc_struct_begin *)ptr;
            as--;
#if LK_DEBUGLEVEL > 1
            as->magic = HEAP_MAGIC;
#endif
            as->ptr = (void *)chunk;
    cb58:	f848 4c08 	str.w	r4, [r8, #-8]
            as->size = size;
            theheap.remaining -= size;
    cb5c:	1ad2      	subs	r2, r2, r3

            if (theheap.remaining < theheap.low_watermark) {
    cb5e:	428a      	cmp	r2, r1
            as--;
#if LK_DEBUGLEVEL > 1
            as->magic = HEAP_MAGIC;
#endif
            as->ptr = (void *)chunk;
            as->size = size;
    cb60:	f848 3c04 	str.w	r3, [r8, #-4]
            theheap.remaining -= size;
    cb64:	60ba      	str	r2, [r7, #8]

            if (theheap.remaining < theheap.low_watermark) {
    cb66:	d207      	bcs.n	cb78 <miniheap_alloc+0xf4>
                theheap.low_watermark = theheap.remaining;
    cb68:	4925      	ldr	r1, [pc, #148]	; (cc00 <miniheap_alloc+0x17c>)
    cb6a:	60ca      	str	r2, [r1, #12]
    cb6c:	e004      	b.n	cb78 <miniheap_alloc+0xf4>
    mutex_acquire(&theheap.lock);

    // walk through the list
    ptr = NULL;
    struct free_heap_chunk *chunk;
    list_for_every_entry(&theheap.free_list, chunk, struct free_heap_chunk, node) {
    cb6e:	6864      	ldr	r4, [r4, #4]
    cb70:	e7a4      	b.n	cabc <miniheap_alloc+0x38>
    int retry_count = 0;
retry:
    mutex_acquire(&theheap.lock);

    // walk through the list
    ptr = NULL;
    cb72:	f04f 0800 	mov.w	r8, #0
    cb76:	e000      	b.n	cb7a <miniheap_alloc+0xf6>
    cb78:	461d      	mov	r5, r3

            break;
        }
    }

    mutex_release(&theheap.lock);
    cb7a:	f8df b084 	ldr.w	r11, [r15, #132]	; cc00 <miniheap_alloc+0x17c>
    cb7e:	f10b 0010 	add.w	r0, r11, #16
    cb82:	f7f7 fd3f 	bl	4604 <mutex_release>

    /* try to grow the heap if we can */
    if (ptr == NULL && retry_count == 0) {
    cb86:	f1b8 0f00 	cmp.w	r8, #0
    cb8a:	d134      	bne.n	cbf6 <miniheap_alloc+0x172>
    cb8c:	f1b9 0f00 	cmp.w	r9, #0
    cb90:	f47f af7f 	bne.w	ca92 <miniheap_alloc+0xe>
    mutex_release(&theheap.lock);
}

static ssize_t heap_grow(size_t size)
{
    size = ROUNDUP(size, PAGE_SIZE);
    cb94:	f605 74ff 	addw	r4, r5, #4095	; 0xfff
    cb98:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
    cb9c:	f024 040f 	bic.w	r4, r4, #15
    void *ptr = page_alloc(size / PAGE_SIZE, PAGE_ALLOC_ANY_ARENA);
    cba0:	0b20      	lsrs	r0, r4, #12
    cba2:	f04f 31ff 	mov.w	r1, #4294967295
    cba6:	f7ff f807 	bl	bbb8 <page_alloc>
    if (!ptr) {
    cbaa:	4680      	mov	r8, r0
    cbac:	b938      	cbnz	r0, cbbe <miniheap_alloc+0x13a>
        TRACEF("failed to grow kernel heap by 0x%zx bytes\n", size);
    cbae:	491a      	ldr	r1, [pc, #104]	; (cc18 <miniheap_alloc+0x194>)
    cbb0:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
    cbb4:	4623      	mov	r3, r4
    cbb6:	4819      	ldr	r0, [pc, #100]	; (cc1c <miniheap_alloc+0x198>)
    cbb8:	f7ff fe66 	bl	c888 <_printf>
    cbbc:	e769      	b.n	ca92 <miniheap_alloc+0xe>
        return ERR_NO_MEMORY;
    }

    LTRACEF("growing heap by 0x%zx bytes, new ptr %p\n", size, ptr);

    heap_insert_free_chunk(heap_create_free_chunk(ptr, size, true));
    cbbe:	4621      	mov	r1, r4
    cbc0:	f7ff febe 	bl	c940 <heap_create_free_chunk.isra.2>
    cbc4:	f7ff feda 	bl	c97c <heap_insert_free_chunk>

    /* change the heap start and end variables */
    if ((uintptr_t)ptr < (uintptr_t)theheap.base || theheap.base == 0)
    cbc8:	f8db 3000 	ldr.w	r3, [r11]
    cbcc:	4543      	cmp	r3, r8
    cbce:	d800      	bhi.n	cbd2 <miniheap_alloc+0x14e>
    cbd0:	b90b      	cbnz	r3, cbd6 <miniheap_alloc+0x152>
        theheap.base = ptr;
    cbd2:	f8c7 8000 	str.w	r8, [r7]

    uintptr_t endptr = (uintptr_t)ptr + size;
    if (endptr > (uintptr_t)theheap.base + theheap.len) {
    cbd6:	683b      	ldr	r3, [r7, #0]
    cbd8:	687a      	ldr	r2, [r7, #4]

    /* change the heap start and end variables */
    if ((uintptr_t)ptr < (uintptr_t)theheap.base || theheap.base == 0)
        theheap.base = ptr;

    uintptr_t endptr = (uintptr_t)ptr + size;
    cbda:	44a0      	add	r8, r4
    if (endptr > (uintptr_t)theheap.base + theheap.len) {
    cbdc:	441a      	add	r2, r3
    cbde:	4590      	cmp	r8, r2
    cbe0:	d903      	bls.n	cbea <miniheap_alloc+0x166>
        theheap.len = (uintptr_t)endptr - (uintptr_t)theheap.base;
    cbe2:	4a07      	ldr	r2, [pc, #28]	; (cc00 <miniheap_alloc+0x17c>)
    cbe4:	ebc3 0308 	rsb	r3, r3, r8
    cbe8:	6053      	str	r3, [r2, #4]
    mutex_release(&theheap.lock);

    /* try to grow the heap if we can */
    if (ptr == NULL && retry_count == 0) {
        ssize_t err = heap_grow(size);
        if (err >= 0) {
    cbea:	2c00      	cmp	r4, #0
    cbec:	f6ff af51 	blt.w	ca92 <miniheap_alloc+0xe>
            retry_count++;
    cbf0:	f04f 0901 	mov.w	r9, #1
    cbf4:	e75e      	b.n	cab4 <miniheap_alloc+0x30>
    cbf6:	4640      	mov	r0, r8
    }

    LTRACEF("returning ptr %p\n", ptr);

    return ptr;
}
    cbf8:	b003      	add	sp, #12
    cbfa:	e8bd 8ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11, r15}
    cbfe:	bf00      	nop
    cc00:	20000980 	.word	0x20000980
    cc04:	00017f86 	.word	0x00017f86
    cc08:	0001076e 	.word	0x0001076e
    cc0c:	00017ecc 	.word	0x00017ecc
    cc10:	00017fa9 	.word	0x00017fa9
    cc14:	48454150 	.word	0x48454150
    cc18:	00017ec2 	.word	0x00017ec2
    cc1c:	00017fbc 	.word	0x00017fbc
    cc20:	200009ac 	.word	0x200009ac

0000cc24 <miniheap_free>:

    return p;
}

void miniheap_free(void *ptr)
{
    cc24:	b507      	push	{r0, r1, r2, r14}
    if (!ptr)
    cc26:	4603      	mov	r3, r0
    cc28:	b1b0      	cbz	r0, cc58 <miniheap_free+0x34>

    // check for the old allocation structure
    struct alloc_struct_begin *as = (struct alloc_struct_begin *)ptr;
    as--;

    DEBUG_ASSERT(as->magic == HEAP_MAGIC);
    cc2a:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    cc2e:	480c      	ldr	r0, [pc, #48]	; (cc60 <miniheap_free+0x3c>)
    cc30:	4282      	cmp	r2, r0
    cc32:	d008      	beq.n	cc46 <miniheap_free+0x22>
    cc34:	4b0b      	ldr	r3, [pc, #44]	; (cc64 <miniheap_free+0x40>)
    cc36:	4670      	mov	r0, r14
    cc38:	9300      	str	r3, [sp, #0]
    cc3a:	490b      	ldr	r1, [pc, #44]	; (cc68 <miniheap_free+0x44>)
    cc3c:	4a0b      	ldr	r2, [pc, #44]	; (cc6c <miniheap_free+0x48>)
    cc3e:	f240 1355 	movw	r3, #341	; 0x155
    cc42:	f7fe fc37 	bl	b4b4 <_panic>
#endif

    LTRACEF("allocation was %zd bytes long at ptr %p\n", as->size, as->ptr);

    // looks good, create a free chunk and add it to the pool
    heap_insert_free_chunk(heap_create_free_chunk(as->ptr, as->size, true));
    cc46:	e913 0003 	ldmdb	r3, {r0, r1}
    cc4a:	f7ff fe79 	bl	c940 <heap_create_free_chunk.isra.2>

#if MINIHEAP_AUTOTRIM
    miniheap_trim();
#endif
}
    cc4e:	b003      	add	sp, #12
    cc50:	f85d eb04 	ldr.w	r14, [r13], #4
#endif

    LTRACEF("allocation was %zd bytes long at ptr %p\n", as->size, as->ptr);

    // looks good, create a free chunk and add it to the pool
    heap_insert_free_chunk(heap_create_free_chunk(as->ptr, as->size, true));
    cc54:	f7ff be92 	b.w	c97c <heap_insert_free_chunk>

#if MINIHEAP_AUTOTRIM
    miniheap_trim();
#endif
}
    cc58:	b003      	add	sp, #12
    cc5a:	f85d fb04 	ldr.w	r15, [r13], #4
    cc5e:	bf00      	nop
    cc60:	48454150 	.word	0x48454150
    cc64:	00017fee 	.word	0x00017fee
    cc68:	0001076e 	.word	0x0001076e
    cc6c:	00017ecc 	.word	0x00017ecc

0000cc70 <miniheap_realloc>:

    return ptr;
}

void *miniheap_realloc(void *ptr, size_t size)
{
    cc70:	b570      	push	{r4, r5, r6, r14}
    cc72:	460c      	mov	r4, r1
    /* slow implementation */
    if (!ptr)
    cc74:	4605      	mov	r5, r0
    cc76:	b928      	cbnz	r0, cc84 <miniheap_realloc+0x14>
        return miniheap_alloc(size, 0);
    cc78:	4608      	mov	r0, r1
    cc7a:	4629      	mov	r1, r5

    memcpy(p, ptr, size); // XXX wrong
    miniheap_free(ptr);

    return p;
}
    cc7c:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}

void *miniheap_realloc(void *ptr, size_t size)
{
    /* slow implementation */
    if (!ptr)
        return miniheap_alloc(size, 0);
    cc80:	f7ff bf00 	b.w	ca84 <miniheap_alloc>
    if (size == 0) {
    cc84:	b919      	cbnz	r1, cc8e <miniheap_realloc+0x1e>
        miniheap_free(ptr);
    cc86:	f7ff ffcd 	bl	cc24 <miniheap_free>
        return NULL;
    cc8a:	4620      	mov	r0, r4
    cc8c:	bd70      	pop	{r4, r5, r6, r15}
    }

    // XXX better implementation
    void *p = miniheap_alloc(size, 0);
    cc8e:	4608      	mov	r0, r1
    cc90:	2100      	movs	r1, #0
    cc92:	f7ff fef7 	bl	ca84 <miniheap_alloc>
    if (!p)
    cc96:	4606      	mov	r6, r0
    cc98:	b130      	cbz	r0, cca8 <miniheap_realloc+0x38>
        return NULL;

    memcpy(p, ptr, size); // XXX wrong
    cc9a:	4629      	mov	r1, r5
    cc9c:	4622      	mov	r2, r4
    cc9e:	f7fe ff94 	bl	bbca <memcpy>
    miniheap_free(ptr);
    cca2:	4628      	mov	r0, r5
    cca4:	f7ff ffbe 	bl	cc24 <miniheap_free>
    cca8:	4630      	mov	r0, r6

    return p;
}
    ccaa:	bd70      	pop	{r4, r5, r6, r15}

0000ccac <miniheap_trim>:
    miniheap_trim();
#endif
}

void miniheap_trim(void)
{
    ccac:	e92d 43f7 	stmdb	r13!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, r14}
    ccb0:	46f0      	mov	r8, r14
    LTRACE_ENTRY;

    mutex_acquire(&theheap.lock);
    ccb2:	f7ff fe5b 	bl	c96c <mutex_acquire.constprop.5>

    // walk through the list, finding free chunks that can be returned to the page allocator
    struct free_heap_chunk *chunk;
    struct free_heap_chunk *next_chunk;
    list_for_every_entry_safe(&theheap.free_list, chunk, next_chunk, struct free_heap_chunk, node) {
    ccb6:	4b3b      	ldr	r3, [pc, #236]	; (cda4 <miniheap_trim+0xf8>)
    ccb8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    ccba:	4699      	mov	r9, r3
    ccbc:	6867      	ldr	r7, [r4, #4]
    ccbe:	4b3a      	ldr	r3, [pc, #232]	; (cda8 <miniheap_trim+0xfc>)
    ccc0:	429c      	cmp	r4, r3
    ccc2:	d067      	beq.n	cd94 <miniheap_trim+0xe8>
        LTRACEF("looking at chunk %p, len 0x%zx\n", chunk, chunk->len);

        uintptr_t start = (uintptr_t)chunk;
        uintptr_t end = start + chunk->len;
    ccc4:	68a2      	ldr	r2, [r4, #8]
    ccc6:	18a3      	adds	r3, r4, r2
        DEBUG_ASSERT(end > start); // make sure it doesn't wrap the address space and has a positive len
    ccc8:	42a3      	cmp	r3, r4
    ccca:	d807      	bhi.n	ccdc <miniheap_trim+0x30>
    cccc:	4b37      	ldr	r3, [pc, #220]	; (cdac <miniheap_trim+0x100>)
    ccce:	4640      	mov	r0, r8
    ccd0:	9300      	str	r3, [sp, #0]
    ccd2:	4937      	ldr	r1, [pc, #220]	; (cdb0 <miniheap_trim+0x104>)
    ccd4:	4a37      	ldr	r2, [pc, #220]	; (cdb4 <miniheap_trim+0x108>)
    ccd6:	f44f 73bf 	mov.w	r3, #382	; 0x17e
    ccda:	e012      	b.n	cd02 <miniheap_trim+0x56>

        // compute the page aligned region in this free block (if any)
        uintptr_t start_page = ROUNDUP(start, PAGE_SIZE);
        uintptr_t end_page = ROUNDDOWN(end, PAGE_SIZE);
    ccdc:	f423 667f 	bic.w	r6, r3, #4080	; 0xff0
        uintptr_t start = (uintptr_t)chunk;
        uintptr_t end = start + chunk->len;
        DEBUG_ASSERT(end > start); // make sure it doesn't wrap the address space and has a positive len

        // compute the page aligned region in this free block (if any)
        uintptr_t start_page = ROUNDUP(start, PAGE_SIZE);
    cce0:	f604 75ff 	addw	r5, r4, #4095	; 0xfff
        uintptr_t end_page = ROUNDDOWN(end, PAGE_SIZE);
    cce4:	f026 060f 	bic.w	r6, r6, #15
        uintptr_t start = (uintptr_t)chunk;
        uintptr_t end = start + chunk->len;
        DEBUG_ASSERT(end > start); // make sure it doesn't wrap the address space and has a positive len

        // compute the page aligned region in this free block (if any)
        uintptr_t start_page = ROUNDUP(start, PAGE_SIZE);
    cce8:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
        uintptr_t end_page = ROUNDDOWN(end, PAGE_SIZE);
        DEBUG_ASSERT(end_page <= end);
    ccec:	429e      	cmp	r6, r3
        uintptr_t start = (uintptr_t)chunk;
        uintptr_t end = start + chunk->len;
        DEBUG_ASSERT(end > start); // make sure it doesn't wrap the address space and has a positive len

        // compute the page aligned region in this free block (if any)
        uintptr_t start_page = ROUNDUP(start, PAGE_SIZE);
    ccee:	f025 050f 	bic.w	r5, r5, #15
        uintptr_t end_page = ROUNDDOWN(end, PAGE_SIZE);
        DEBUG_ASSERT(end_page <= end);
    ccf2:	d908      	bls.n	cd06 <miniheap_trim+0x5a>
    ccf4:	4b30      	ldr	r3, [pc, #192]	; (cdb8 <miniheap_trim+0x10c>)
    ccf6:	492e      	ldr	r1, [pc, #184]	; (cdb0 <miniheap_trim+0x104>)
    ccf8:	4a2e      	ldr	r2, [pc, #184]	; (cdb4 <miniheap_trim+0x108>)
    ccfa:	9300      	str	r3, [sp, #0]
    ccfc:	4640      	mov	r0, r8
    ccfe:	f240 1383 	movw	r3, #387	; 0x183
    cd02:	f7fe fbd7 	bl	b4b4 <_panic>
        DEBUG_ASSERT(start_page >= start);
    cd06:	42a5      	cmp	r5, r4
    cd08:	d20e      	bcs.n	cd28 <miniheap_trim+0x7c>
    cd0a:	4b2c      	ldr	r3, [pc, #176]	; (cdbc <miniheap_trim+0x110>)
    cd0c:	4640      	mov	r0, r8
    cd0e:	9300      	str	r3, [sp, #0]
    cd10:	4927      	ldr	r1, [pc, #156]	; (cdb0 <miniheap_trim+0x104>)
    cd12:	4a28      	ldr	r2, [pc, #160]	; (cdb4 <miniheap_trim+0x108>)
    cd14:	f44f 73c2 	mov.w	r3, #388	; 0x184
    cd18:	e7f3      	b.n	cd02 <miniheap_trim+0x56>
        // see if the free block encompasses at least one page
        if (unlikely(end_page > start_page)) {
            LTRACEF("could trim: start 0x%lx, end 0x%lx\n", start_page, end_page);

            // cases where the start of the block is already page aligned
            if (start_page == start) {
    cd1a:	42a5      	cmp	r5, r4
    cd1c:	d007      	beq.n	cd2e <miniheap_trim+0x82>
                    goto free_chunk;
                }
            } else {
                // start of block is not page aligned,
                // will there be enough space before the block if we trim?
                if (start_page - start < sizeof(struct free_heap_chunk)) {
    cd1e:	1b29      	subs	r1, r5, r4
    cd20:	290b      	cmp	r1, #11
    cd22:	d808      	bhi.n	cd36 <miniheap_trim+0x8a>
                    LTRACEF("not enough space for free chunk before\n");
                    start_page += PAGE_SIZE;
    cd24:	f505 5580 	add.w	r5, r5, #4096	; 0x1000

        LTRACEF("start page 0x%lx, end page 0x%lx\n", start_page, end_page);

retry:
        // see if the free block encompasses at least one page
        if (unlikely(end_page > start_page)) {
    cd28:	42ae      	cmp	r6, r5
    cd2a:	d930      	bls.n	cd8e <miniheap_trim+0xe2>
    cd2c:	e7f5      	b.n	cd1a <miniheap_trim+0x6e>
            LTRACEF("could trim: start 0x%lx, end 0x%lx\n", start_page, end_page);

            // cases where the start of the block is already page aligned
            if (start_page == start) {
                // look for special case, we're going to completely remove the chunk
                if (end_page == end) {
    cd2e:	429e      	cmp	r6, r3
    cd30:	d101      	bne.n	cd36 <miniheap_trim+0x8a>
                    LTRACEF("special case, free chunk completely covers page(s)\n");
                    list_delete(&chunk->node);
    cd32:	4628      	mov	r0, r5
    cd34:	e015      	b.n	cd62 <miniheap_trim+0xb6>
                    goto retry;
                }
            }

            // do we need to split the free block and create a new block afterwards?
            if (end_page < end) {
    cd36:	429e      	cmp	r6, r3
    cd38:	d216      	bcs.n	cd68 <miniheap_trim+0xbc>
                size_t new_chunk_size = end - end_page;
    cd3a:	1b99      	subs	r1, r3, r6
                LTRACEF("will have to split, new chunk will be 0x%zx bytes long\n", new_chunk_size);

                // if there's not enough space afterwards for a free chunk, we can't free the last page
                if (new_chunk_size < sizeof(struct free_heap_chunk)) {
    cd3c:	290b      	cmp	r1, #11
    cd3e:	d802      	bhi.n	cd46 <miniheap_trim+0x9a>
                    LTRACEF("not enough space for free chunk afterwards\n");
                    end_page -= PAGE_SIZE;
    cd40:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
                    goto retry;
    cd44:	e7f0      	b.n	cd28 <miniheap_trim+0x7c>
                }

                // trim the new space off the end of the current chunk
                chunk->len -= new_chunk_size;
    cd46:	1a52      	subs	r2, r2, r1
    cd48:	60a2      	str	r2, [r4, #8]
                end = end_page;

                // create a new chunk after the one we're trimming
                struct free_heap_chunk *new_chunk = heap_create_free_chunk((void *)end_page, new_chunk_size, false);
    cd4a:	4630      	mov	r0, r6
    cd4c:	f7ff fdf8 	bl	c940 <heap_create_free_chunk.isra.2>
        return true;
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    cd50:	6862      	ldr	r2, [r4, #4]
                // link it with the current block
                list_add_after(&chunk->node, &new_chunk->node);
            }

            // check again to see if we are now completely covering a block
            if (start_page == start && end_page == end) {
    cd52:	42a5      	cmp	r5, r4
    cd54:	6042      	str	r2, [r0, #4]
    item->prev = list;
    list->next->prev = item;
    cd56:	6862      	ldr	r2, [r4, #4]
}

static inline void list_add_head(struct list_node *list, struct list_node *item)
{
    item->next = list->next;
    item->prev = list;
    cd58:	6004      	str	r4, [r0, #0]
    list->next->prev = item;
    cd5a:	6010      	str	r0, [r2, #0]
    list->next = item;
    cd5c:	6060      	str	r0, [r4, #4]
    cd5e:	d107      	bne.n	cd70 <miniheap_trim+0xc4>
                LTRACEF("special case, after splitting off new chunk, free chunk completely covers page(s)\n");
                list_delete(&chunk->node);
    cd60:	4620      	mov	r0, r4
    cd62:	f7ff fde3 	bl	c92c <list_delete>
                goto free_chunk;
    cd66:	e007      	b.n	cd78 <miniheap_trim+0xcc>
                // link it with the current block
                list_add_after(&chunk->node, &new_chunk->node);
            }

            // check again to see if we are now completely covering a block
            if (start_page == start && end_page == end) {
    cd68:	42a5      	cmp	r5, r4
    cd6a:	d101      	bne.n	cd70 <miniheap_trim+0xc4>
    cd6c:	429e      	cmp	r6, r3
    cd6e:	e7f6      	b.n	cd5e <miniheap_trim+0xb2>
                list_delete(&chunk->node);
                goto free_chunk;
            }

            // trim the size of the block
            chunk->len -= end_page - start_page;
    cd70:	68a3      	ldr	r3, [r4, #8]
    cd72:	442b      	add	r3, r5
    cd74:	1b9b      	subs	r3, r3, r6
    cd76:	60a3      	str	r3, [r4, #8]

free_chunk:
            // return it to the allocator
            LTRACEF("returning %p size 0x%lx to the page allocator\n", (void *)start_page, end_page - start_page);
            page_free((void *)start_page, (end_page - start_page) / PAGE_SIZE);
    cd78:	1b71      	subs	r1, r6, r5
    cd7a:	4628      	mov	r0, r5
    cd7c:	0b09      	lsrs	r1, r1, #12
    cd7e:	f7fe ff1d 	bl	bbbc <page_free>

            // tweak accounting
            theheap.remaining -= end_page - start_page;
    cd82:	f8d9 3008 	ldr.w	r3, [r9, #8]
    cd86:	441d      	add	r5, r3
    cd88:	1bae      	subs	r6, r5, r6
    cd8a:	f8c9 6008 	str.w	r6, [r9, #8]
    mutex_acquire(&theheap.lock);

    // walk through the list, finding free chunks that can be returned to the page allocator
    struct free_heap_chunk *chunk;
    struct free_heap_chunk *next_chunk;
    list_for_every_entry_safe(&theheap.free_list, chunk, next_chunk, struct free_heap_chunk, node) {
    cd8e:	463c      	mov	r4, r7
    cd90:	687f      	ldr	r7, [r7, #4]
    cd92:	e794      	b.n	ccbe <miniheap_trim+0x12>
            // tweak accounting
            theheap.remaining -= end_page - start_page;
        }
    }

    mutex_release(&theheap.lock);
    cd94:	f1a3 001c 	sub.w	r0, r3, #28
}
    cd98:	b003      	add	sp, #12
    cd9a:	e8bd 43f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r14}
            // tweak accounting
            theheap.remaining -= end_page - start_page;
        }
    }

    mutex_release(&theheap.lock);
    cd9e:	f7f7 bc31 	b.w	4604 <mutex_release>
    cda2:	bf00      	nop
    cda4:	20000980 	.word	0x20000980
    cda8:	200009ac 	.word	0x200009ac
    cdac:	00018006 	.word	0x00018006
    cdb0:	0001076e 	.word	0x0001076e
    cdb4:	00017ecc 	.word	0x00017ecc
    cdb8:	00018012 	.word	0x00018012
    cdbc:	00018022 	.word	0x00018022

0000cdc0 <miniheap_init>:

    return size;
}

void miniheap_init(void *ptr, size_t len)
{
    cdc0:	b570      	push	{r4, r5, r6, r14}
    LTRACEF("ptr %p, len %zu\n", ptr, len);

    // create a mutex
    mutex_init(&theheap.lock);
    cdc2:	4c0d      	ldr	r4, [pc, #52]	; (cdf8 <miniheap_init+0x38>)

    return size;
}

void miniheap_init(void *ptr, size_t len)
{
    cdc4:	4606      	mov	r6, r0
    LTRACEF("ptr %p, len %zu\n", ptr, len);

    // create a mutex
    mutex_init(&theheap.lock);
    cdc6:	f104 0010 	add.w	r0, r4, #16

    return size;
}

void miniheap_init(void *ptr, size_t len)
{
    cdca:	460d      	mov	r5, r1
    LTRACEF("ptr %p, len %zu\n", ptr, len);

    // create a mutex
    mutex_init(&theheap.lock);
    cdcc:	f7f7 fb78 	bl	44c0 <mutex_init>
#define LIST_INITIAL_VALUE(list) { &(list), &(list) }
#define LIST_INITIAL_CLEARED_VALUE { NULL, NULL }

static inline void list_initialize(struct list_node *list)
{
    list->prev = list->next = list;
    cdd0:	f104 032c 	add.w	r3, r4, #44	; 0x2c
    cdd4:	6323      	str	r3, [r4, #48]	; 0x30
    cdd6:	62e3      	str	r3, [r4, #44]	; 0x2c
    list_initialize(&theheap.free_list);

    // set the heap range
    theheap.base = ptr;
    theheap.len = len;
    theheap.remaining = 0; // will get set by heap_insert_free_chunk()
    cdd8:	2300      	movs	r3, #0

    // initialize the free list
    list_initialize(&theheap.free_list);

    // set the heap range
    theheap.base = ptr;
    cdda:	6026      	str	r6, [r4, #0]
    theheap.len = len;
    cddc:	6065      	str	r5, [r4, #4]
    theheap.remaining = 0; // will get set by heap_insert_free_chunk()
    cdde:	60a3      	str	r3, [r4, #8]
    theheap.low_watermark = 0;
    cde0:	60e3      	str	r3, [r4, #12]

    // if passed a default range, use it
    if (len > 0)
    cde2:	b13d      	cbz	r5, cdf4 <miniheap_init+0x34>
        heap_insert_free_chunk(heap_create_free_chunk(ptr, len, true));
    cde4:	4630      	mov	r0, r6
    cde6:	4629      	mov	r1, r5
    cde8:	f7ff fdaa 	bl	c940 <heap_create_free_chunk.isra.2>
}
    cdec:	e8bd 4070 	ldmia.w	r13!, {r4, r5, r6, r14}
    theheap.remaining = 0; // will get set by heap_insert_free_chunk()
    theheap.low_watermark = 0;

    // if passed a default range, use it
    if (len > 0)
        heap_insert_free_chunk(heap_create_free_chunk(ptr, len, true));
    cdf0:	f7ff bdc4 	b.w	c97c <heap_insert_free_chunk>
    cdf4:	bd70      	pop	{r4, r5, r6, r15}
    cdf6:	bf00      	nop
    cdf8:	20000980 	.word	0x20000980

0000cdfc <__debug_stdio_read>:
    out_count(s, len);
    return len;
}

static ssize_t __debug_stdio_read(io_handle_t *io, char *s, size_t len)
{
    cdfc:	b508      	push	{r3, r14}
    if (len == 0)
    cdfe:	b142      	cbz	r2, ce12 <__debug_stdio_read+0x16>

#if CONSOLE_HAS_INPUT_BUFFER
    ssize_t err = cbuf_read(&console_input_cbuf, s, len, true);
    return err;
#else
    int err = platform_dgetc(s, true);
    ce00:	4608      	mov	r0, r1
    ce02:	2101      	movs	r1, #1
    ce04:	f7f3 fa92 	bl	32c <platform_dgetc>
    if (err < 0)
        return err;

    return 1;
    ce08:	ea10 0020 	ands.w	r0, r0, r0, asr #32
    ce0c:	bf38      	it	cc
    ce0e:	2001      	movcc	r0, #1
    ce10:	bd08      	pop	{r3, r15}
}

static ssize_t __debug_stdio_read(io_handle_t *io, char *s, size_t len)
{
    if (len == 0)
        return 0;
    ce12:	4610      	mov	r0, r2
    if (err < 0)
        return err;

    return 1;
#endif
}
    ce14:	bd08      	pop	{r3, r15}

0000ce16 <arch_interrupt_restore.constprop.1>:
static inline void
arch_interrupt_restore(spin_lock_saved_state_t old_state, spin_lock_save_flags_t flags)
{
    if ((flags & SPIN_LOCK_FLAG_FIQ) && (old_state & SPIN_LOCK_STATE_RESTORE_FIQ))
        arch_enable_fiqs();
    if ((flags & SPIN_LOCK_FLAG_IRQ) && (old_state & SPIN_LOCK_STATE_RESTORE_IRQ))
    ce16:	07c3      	lsls	r3, r0, #31
    ce18:	d500      	bpl.n	ce1c <arch_interrupt_restore.constprop.1+0x6>

// override of some routines
static inline void arch_enable_ints(void)
{
    CF;
    __asm__ volatile("cpsie i");
    ce1a:	b662      	cpsie	i
    ce1c:	4770      	bx	r14

0000ce1e <arch_interrupt_save.constprop.2>:
static inline bool arch_ints_disabled(void)
{
    unsigned int state;

#if ARM_ISA_ARMV7M
    __asm__ volatile("mrs %0, primask" : "=r"(state));
    ce1e:	f3ef 8310 	mrs	r3, PRIMASK

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    if ((flags & SPIN_LOCK_FLAG_IRQ) && !arch_ints_disabled()) {
    ce22:	07da      	lsls	r2, r3, #31
    ce24:	d402      	bmi.n	ce2c <arch_interrupt_save.constprop.2+0xe>
    __asm__ volatile("cpsie i");
}

static inline void arch_disable_ints(void)
{
    __asm__ volatile("cpsid i");
    ce26:	b672      	cpsid	i
        state |= SPIN_LOCK_STATE_RESTORE_IRQ;
    ce28:	2301      	movs	r3, #1
    ce2a:	e000      	b.n	ce2e <arch_interrupt_save.constprop.2+0x10>
};

static inline void
arch_interrupt_save(spin_lock_saved_state_t *statep, spin_lock_save_flags_t flags)
{
    spin_lock_saved_state_t state = 0;
    ce2c:	2300      	movs	r3, #0
    }
    if ((flags & SPIN_LOCK_FLAG_FIQ) && !arch_fiqs_disabled()) {
        state |= SPIN_LOCK_STATE_RESTORE_FIQ;
        arch_disable_fiqs();
    }
    *statep = state;
    ce2e:	6003      	str	r3, [r0, #0]
    ce30:	4770      	bx	r14
	...

0000ce34 <__debug_stdio_write>:
        &(entry)->member != (list);\
        entry = temp_entry, temp_entry = containerof((temp_entry)->member.next, type, member))

static inline bool list_is_empty(struct list_node *list)
{
    return (list->next == list) ? true : false;
    ce34:	4b16      	ldr	r3, [pc, #88]	; (ce90 <__debug_stdio_write+0x5c>)

    spin_unlock_restore(&print_spin_lock, state, PRINT_LOCK_FLAGS);
}

static ssize_t __debug_stdio_write(io_handle_t *io, const char *s, size_t len)
{
    ce36:	e92d 41f3 	stmdb	r13!, {r0, r1, r4, r5, r6, r7, r8, r14}
    ce3a:	4615      	mov	r5, r2
{
    print_callback_t *cb;
    size_t i;

    /* print to any registered loggers */
    if (!list_is_empty(&print_callbacks)) {
    ce3c:	685a      	ldr	r2, [r3, #4]

    spin_unlock_restore(&print_spin_lock, state, PRINT_LOCK_FLAGS);
}

static ssize_t __debug_stdio_write(io_handle_t *io, const char *s, size_t len)
{
    ce3e:	460e      	mov	r6, r1
{
    print_callback_t *cb;
    size_t i;

    /* print to any registered loggers */
    if (!list_is_empty(&print_callbacks)) {
    ce40:	429a      	cmp	r2, r3
    ce42:	461f      	mov	r7, r3
    ce44:	d017      	beq.n	ce76 <__debug_stdio_write+0x42>
static inline void spin_lock_save(
    spin_lock_t *lock,
    spin_lock_saved_state_t *statep,
    spin_lock_save_flags_t flags)
{
    arch_interrupt_save(statep, flags);
    ce46:	a801      	add	r0, sp, #4
    ce48:	f7ff ffe9 	bl	ce1e <arch_interrupt_save.constprop.2>

#else

static inline void arch_spin_lock(spin_lock_t *lock)
{
    *lock = 1;
    ce4c:	4b11      	ldr	r3, [pc, #68]	; (ce94 <__debug_stdio_write+0x60>)
    ce4e:	2201      	movs	r2, #1
        spin_lock_saved_state_t state;
        spin_lock_save(&print_spin_lock, &state, PRINT_LOCK_FLAGS);

        list_for_every_entry(&print_callbacks, cb, print_callback_t, entry) {
    ce50:	687c      	ldr	r4, [r7, #4]
    ce52:	601a      	str	r2, [r3, #0]
    ce54:	4698      	mov	r8, r3
    ce56:	42bc      	cmp	r4, r7
    ce58:	d007      	beq.n	ce6a <__debug_stdio_write+0x36>
            if (cb->print)
    ce5a:	68a3      	ldr	r3, [r4, #8]
    ce5c:	b11b      	cbz	r3, ce66 <__debug_stdio_write+0x32>
                cb->print(cb, str, len);
    ce5e:	4620      	mov	r0, r4
    ce60:	4631      	mov	r1, r6
    ce62:	462a      	mov	r2, r5
    ce64:	4798      	blx	r3
    /* print to any registered loggers */
    if (!list_is_empty(&print_callbacks)) {
        spin_lock_saved_state_t state;
        spin_lock_save(&print_spin_lock, &state, PRINT_LOCK_FLAGS);

        list_for_every_entry(&print_callbacks, cb, print_callback_t, entry) {
    ce66:	6864      	ldr	r4, [r4, #4]
    ce68:	e7f5      	b.n	ce56 <__debug_stdio_write+0x22>
    return 0;
}

static inline void arch_spin_unlock(spin_lock_t *lock)
{
    *lock = 0;
    ce6a:	2300      	movs	r3, #0
    spin_lock_t *lock,
    spin_lock_saved_state_t old_state,
    spin_lock_save_flags_t flags)
{
    spin_unlock(lock);
    arch_interrupt_restore(old_state, flags);
    ce6c:	9801      	ldr	r0, [sp, #4]
    ce6e:	f8c8 3000 	str.w	r3, [r8]
    ce72:	f7ff ffd0 	bl	ce16 <arch_interrupt_restore.constprop.1>
    ce76:	4634      	mov	r4, r6
    ce78:	442e      	add	r6, r5

        spin_unlock_restore(&print_spin_lock, state, PRINT_LOCK_FLAGS);
    }

    /* write out the serial port */
    for (i = 0; i < len; i++) {
    ce7a:	42b4      	cmp	r4, r6
    ce7c:	d004      	beq.n	ce88 <__debug_stdio_write+0x54>
        platform_dputc(str[i]);
    ce7e:	f814 0b01 	ldrb.w	r0, [r4], #1
    ce82:	f7f3 fa43 	bl	30c <platform_dputc>
    ce86:	e7f8      	b.n	ce7a <__debug_stdio_write+0x46>

static ssize_t __debug_stdio_write(io_handle_t *io, const char *s, size_t len)
{
    out_count(s, len);
    return len;
}
    ce88:	4628      	mov	r0, r5
    ce8a:	b002      	add	sp, #8
    ce8c:	e8bd 81f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r15}
    ce90:	2000007c 	.word	0x2000007c
    ce94:	200009b4 	.word	0x200009b4

0000ce98 <io_write>:
#include <ctype.h>
#include <debug.h>
#include <assert.h>

ssize_t io_write(io_handle_t *io, const char *buf, size_t len)
{
    ce98:	b573      	push	{r0, r1, r4, r5, r6, r14}
    DEBUG_ASSERT(io->magic == IO_HANDLE_MAGIC);
    ce9a:	6804      	ldr	r4, [r0, #0]
    ce9c:	4e09      	ldr	r6, [pc, #36]	; (cec4 <io_write+0x2c>)
    ce9e:	42b4      	cmp	r4, r6
    cea0:	d007      	beq.n	ceb2 <io_write+0x1a>
    cea2:	4b09      	ldr	r3, [pc, #36]	; (cec8 <io_write+0x30>)
    cea4:	4670      	mov	r0, r14
    cea6:	9300      	str	r3, [sp, #0]
    cea8:	4908      	ldr	r1, [pc, #32]	; (cecc <io_write+0x34>)
    ceaa:	4a09      	ldr	r2, [pc, #36]	; (ced0 <io_write+0x38>)
    ceac:	2320      	movs	r3, #32
    ceae:	f7fe fb01 	bl	b4b4 <_panic>

    if (!io->hooks->write)
    ceb2:	6843      	ldr	r3, [r0, #4]
    ceb4:	681b      	ldr	r3, [r3, #0]
    ceb6:	b10b      	cbz	r3, cebc <io_write+0x24>
        return ERR_NOT_SUPPORTED;

    return io->hooks->write(io, buf, len);
    ceb8:	4798      	blx	r3
    ceba:	e001      	b.n	cec0 <io_write+0x28>
ssize_t io_write(io_handle_t *io, const char *buf, size_t len)
{
    DEBUG_ASSERT(io->magic == IO_HANDLE_MAGIC);

    if (!io->hooks->write)
        return ERR_NOT_SUPPORTED;
    cebc:	f06f 0017 	mvn.w	r0, #23

    return io->hooks->write(io, buf, len);
}
    cec0:	b002      	add	sp, #8
    cec2:	bd70      	pop	{r4, r5, r6, r15}
    cec4:	696f6820 	.word	0x696f6820
    cec8:	0001804c 	.word	0x0001804c
    cecc:	0001076e 	.word	0x0001076e
    ced0:	00018040 	.word	0x00018040

0000ced4 <io_read>:

ssize_t io_read(io_handle_t *io, char *buf, size_t len)
{
    ced4:	b573      	push	{r0, r1, r4, r5, r6, r14}
    DEBUG_ASSERT(io->magic == IO_HANDLE_MAGIC);
    ced6:	6804      	ldr	r4, [r0, #0]
    ced8:	4e09      	ldr	r6, [pc, #36]	; (cf00 <io_read+0x2c>)
    ceda:	42b4      	cmp	r4, r6
    cedc:	d007      	beq.n	ceee <io_read+0x1a>
    cede:	4b09      	ldr	r3, [pc, #36]	; (cf04 <io_read+0x30>)
    cee0:	4670      	mov	r0, r14
    cee2:	9300      	str	r3, [sp, #0]
    cee4:	4908      	ldr	r1, [pc, #32]	; (cf08 <io_read+0x34>)
    cee6:	4a09      	ldr	r2, [pc, #36]	; (cf0c <io_read+0x38>)
    cee8:	232a      	movs	r3, #42	; 0x2a
    ceea:	f7fe fae3 	bl	b4b4 <_panic>

    if (!io->hooks->read)
    ceee:	6843      	ldr	r3, [r0, #4]
    cef0:	685b      	ldr	r3, [r3, #4]
    cef2:	b10b      	cbz	r3, cef8 <io_read+0x24>
        return ERR_NOT_SUPPORTED;

    return io->hooks->read(io, buf, len);
    cef4:	4798      	blx	r3
    cef6:	e001      	b.n	cefc <io_read+0x28>
ssize_t io_read(io_handle_t *io, char *buf, size_t len)
{
    DEBUG_ASSERT(io->magic == IO_HANDLE_MAGIC);

    if (!io->hooks->read)
        return ERR_NOT_SUPPORTED;
    cef8:	f06f 0017 	mvn.w	r0, #23

    return io->hooks->read(io, buf, len);
}
    cefc:	b002      	add	sp, #8
    cefe:	bd70      	pop	{r4, r5, r6, r15}
    cf00:	696f6820 	.word	0x696f6820
    cf04:	0001804c 	.word	0x0001804c
    cf08:	0001076e 	.word	0x0001076e
    cf0c:	00018040 	.word	0x00018040

0000cf10 <__aeabi_llsr>:
    cf10:	40d0      	lsrs	r0, r2
    cf12:	1c0b      	adds	r3, r1, #0
    cf14:	40d1      	lsrs	r1, r2
    cf16:	469c      	mov	r12, r3
    cf18:	3a20      	subs	r2, #32
    cf1a:	40d3      	lsrs	r3, r2
    cf1c:	4318      	orrs	r0, r3
    cf1e:	4252      	negs	r2, r2
    cf20:	4663      	mov	r3, r12
    cf22:	4093      	lsls	r3, r2
    cf24:	4318      	orrs	r0, r3
    cf26:	4770      	bx	r14

0000cf28 <__aeabi_drsub>:
    cf28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    cf2c:	e002      	b.n	cf34 <__adddf3>
    cf2e:	bf00      	nop

0000cf30 <__aeabi_dsub>:
    cf30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000cf34 <__adddf3>:
    cf34:	b530      	push	{r4, r5, r14}
    cf36:	ea4f 0441 	mov.w	r4, r1, lsl #1
    cf3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    cf3e:	ea94 0f05 	teq	r4, r5
    cf42:	bf08      	it	eq
    cf44:	ea90 0f02 	teqeq	r0, r2
    cf48:	bf1f      	itttt	ne
    cf4a:	ea54 0c00 	orrsne.w	r12, r4, r0
    cf4e:	ea55 0c02 	orrsne.w	r12, r5, r2
    cf52:	ea7f 5c64 	mvnsne.w	r12, r4, asr #21
    cf56:	ea7f 5c65 	mvnsne.w	r12, r5, asr #21
    cf5a:	f000 80e2 	beq.w	d122 <__adddf3+0x1ee>
    cf5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    cf62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    cf66:	bfb8      	it	lt
    cf68:	426d      	neglt	r5, r5
    cf6a:	dd0c      	ble.n	cf86 <__adddf3+0x52>
    cf6c:	442c      	add	r4, r5
    cf6e:	ea80 0202 	eor.w	r2, r0, r2
    cf72:	ea81 0303 	eor.w	r3, r1, r3
    cf76:	ea82 0000 	eor.w	r0, r2, r0
    cf7a:	ea83 0101 	eor.w	r1, r3, r1
    cf7e:	ea80 0202 	eor.w	r2, r0, r2
    cf82:	ea81 0303 	eor.w	r3, r1, r3
    cf86:	2d36      	cmp	r5, #54	; 0x36
    cf88:	bf88      	it	hi
    cf8a:	bd30      	pophi	{r4, r5, r15}
    cf8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cf90:	ea4f 3101 	mov.w	r1, r1, lsl #12
    cf94:	f44f 1c80 	mov.w	r12, #1048576	; 0x100000
    cf98:	ea4c 3111 	orr.w	r1, r12, r1, lsr #12
    cf9c:	d002      	beq.n	cfa4 <__adddf3+0x70>
    cf9e:	4240      	negs	r0, r0
    cfa0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cfa4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    cfa8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    cfac:	ea4c 3313 	orr.w	r3, r12, r3, lsr #12
    cfb0:	d002      	beq.n	cfb8 <__adddf3+0x84>
    cfb2:	4252      	negs	r2, r2
    cfb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    cfb8:	ea94 0f05 	teq	r4, r5
    cfbc:	f000 80a7 	beq.w	d10e <__adddf3+0x1da>
    cfc0:	f1a4 0401 	sub.w	r4, r4, #1
    cfc4:	f1d5 0e20 	rsbs	r14, r5, #32
    cfc8:	db0d      	blt.n	cfe6 <__adddf3+0xb2>
    cfca:	fa02 fc0e 	lsl.w	r12, r2, r14
    cfce:	fa22 f205 	lsr.w	r2, r2, r5
    cfd2:	1880      	adds	r0, r0, r2
    cfd4:	f141 0100 	adc.w	r1, r1, #0
    cfd8:	fa03 f20e 	lsl.w	r2, r3, r14
    cfdc:	1880      	adds	r0, r0, r2
    cfde:	fa43 f305 	asr.w	r3, r3, r5
    cfe2:	4159      	adcs	r1, r3
    cfe4:	e00e      	b.n	d004 <__adddf3+0xd0>
    cfe6:	f1a5 0520 	sub.w	r5, r5, #32
    cfea:	f10e 0e20 	add.w	r14, r14, #32
    cfee:	2a01      	cmp	r2, #1
    cff0:	fa03 fc0e 	lsl.w	r12, r3, r14
    cff4:	bf28      	it	cs
    cff6:	f04c 0c02 	orrcs.w	r12, r12, #2
    cffa:	fa43 f305 	asr.w	r3, r3, r5
    cffe:	18c0      	adds	r0, r0, r3
    d000:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    d004:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d008:	d507      	bpl.n	d01a <__adddf3+0xe6>
    d00a:	f04f 0e00 	mov.w	r14, #0
    d00e:	f1dc 0c00 	rsbs	r12, r12, #0
    d012:	eb7e 0000 	sbcs.w	r0, r14, r0
    d016:	eb6e 0101 	sbc.w	r1, r14, r1
    d01a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    d01e:	d31b      	bcc.n	d058 <__adddf3+0x124>
    d020:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    d024:	d30c      	bcc.n	d040 <__adddf3+0x10c>
    d026:	0849      	lsrs	r1, r1, #1
    d028:	ea5f 0030 	movs.w	r0, r0, rrx
    d02c:	ea4f 0c3c 	mov.w	r12, r12, rrx
    d030:	f104 0401 	add.w	r4, r4, #1
    d034:	ea4f 5244 	mov.w	r2, r4, lsl #21
    d038:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    d03c:	f080 809a 	bcs.w	d174 <__adddf3+0x240>
    d040:	f1bc 4f00 	cmp.w	r12, #2147483648	; 0x80000000
    d044:	bf08      	it	eq
    d046:	ea5f 0c50 	movseq.w	r12, r0, lsr #1
    d04a:	f150 0000 	adcs.w	r0, r0, #0
    d04e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d052:	ea41 0105 	orr.w	r1, r1, r5
    d056:	bd30      	pop	{r4, r5, r15}
    d058:	ea5f 0c4c 	movs.w	r12, r12, lsl #1
    d05c:	4140      	adcs	r0, r0
    d05e:	eb41 0101 	adc.w	r1, r1, r1
    d062:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d066:	f1a4 0401 	sub.w	r4, r4, #1
    d06a:	d1e9      	bne.n	d040 <__adddf3+0x10c>
    d06c:	f091 0f00 	teq	r1, #0
    d070:	bf04      	itt	eq
    d072:	4601      	moveq	r1, r0
    d074:	2000      	moveq	r0, #0
    d076:	fab1 f381 	clz	r3, r1
    d07a:	bf08      	it	eq
    d07c:	3320      	addeq	r3, #32
    d07e:	f1a3 030b 	sub.w	r3, r3, #11
    d082:	f1b3 0220 	subs.w	r2, r3, #32
    d086:	da0c      	bge.n	d0a2 <__adddf3+0x16e>
    d088:	320c      	adds	r2, #12
    d08a:	dd08      	ble.n	d09e <__adddf3+0x16a>
    d08c:	f102 0c14 	add.w	r12, r2, #20
    d090:	f1c2 020c 	rsb	r2, r2, #12
    d094:	fa01 f00c 	lsl.w	r0, r1, r12
    d098:	fa21 f102 	lsr.w	r1, r1, r2
    d09c:	e00c      	b.n	d0b8 <__adddf3+0x184>
    d09e:	f102 0214 	add.w	r2, r2, #20
    d0a2:	bfd8      	it	le
    d0a4:	f1c2 0c20 	rsble	r12, r2, #32
    d0a8:	fa01 f102 	lsl.w	r1, r1, r2
    d0ac:	fa20 fc0c 	lsr.w	r12, r0, r12
    d0b0:	bfdc      	itt	le
    d0b2:	ea41 010c 	orrle.w	r1, r1, r12
    d0b6:	4090      	lslle	r0, r2
    d0b8:	1ae4      	subs	r4, r4, r3
    d0ba:	bfa2      	ittt	ge
    d0bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    d0c0:	4329      	orrge	r1, r5
    d0c2:	bd30      	popge	{r4, r5, r15}
    d0c4:	ea6f 0404 	mvn.w	r4, r4
    d0c8:	3c1f      	subs	r4, #31
    d0ca:	da1c      	bge.n	d106 <__adddf3+0x1d2>
    d0cc:	340c      	adds	r4, #12
    d0ce:	dc0e      	bgt.n	d0ee <__adddf3+0x1ba>
    d0d0:	f104 0414 	add.w	r4, r4, #20
    d0d4:	f1c4 0220 	rsb	r2, r4, #32
    d0d8:	fa20 f004 	lsr.w	r0, r0, r4
    d0dc:	fa01 f302 	lsl.w	r3, r1, r2
    d0e0:	ea40 0003 	orr.w	r0, r0, r3
    d0e4:	fa21 f304 	lsr.w	r3, r1, r4
    d0e8:	ea45 0103 	orr.w	r1, r5, r3
    d0ec:	bd30      	pop	{r4, r5, r15}
    d0ee:	f1c4 040c 	rsb	r4, r4, #12
    d0f2:	f1c4 0220 	rsb	r2, r4, #32
    d0f6:	fa20 f002 	lsr.w	r0, r0, r2
    d0fa:	fa01 f304 	lsl.w	r3, r1, r4
    d0fe:	ea40 0003 	orr.w	r0, r0, r3
    d102:	4629      	mov	r1, r5
    d104:	bd30      	pop	{r4, r5, r15}
    d106:	fa21 f004 	lsr.w	r0, r1, r4
    d10a:	4629      	mov	r1, r5
    d10c:	bd30      	pop	{r4, r5, r15}
    d10e:	f094 0f00 	teq	r4, #0
    d112:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    d116:	bf06      	itte	eq
    d118:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    d11c:	3401      	addeq	r4, #1
    d11e:	3d01      	subne	r5, #1
    d120:	e74e      	b.n	cfc0 <__adddf3+0x8c>
    d122:	ea7f 5c64 	mvns.w	r12, r4, asr #21
    d126:	bf18      	it	ne
    d128:	ea7f 5c65 	mvnsne.w	r12, r5, asr #21
    d12c:	d029      	beq.n	d182 <__adddf3+0x24e>
    d12e:	ea94 0f05 	teq	r4, r5
    d132:	bf08      	it	eq
    d134:	ea90 0f02 	teqeq	r0, r2
    d138:	d005      	beq.n	d146 <__adddf3+0x212>
    d13a:	ea54 0c00 	orrs.w	r12, r4, r0
    d13e:	bf04      	itt	eq
    d140:	4619      	moveq	r1, r3
    d142:	4610      	moveq	r0, r2
    d144:	bd30      	pop	{r4, r5, r15}
    d146:	ea91 0f03 	teq	r1, r3
    d14a:	bf1e      	ittt	ne
    d14c:	2100      	movne	r1, #0
    d14e:	2000      	movne	r0, #0
    d150:	bd30      	popne	{r4, r5, r15}
    d152:	ea5f 5c54 	movs.w	r12, r4, lsr #21
    d156:	d105      	bne.n	d164 <__adddf3+0x230>
    d158:	0040      	lsls	r0, r0, #1
    d15a:	4149      	adcs	r1, r1
    d15c:	bf28      	it	cs
    d15e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    d162:	bd30      	pop	{r4, r5, r15}
    d164:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    d168:	bf3c      	itt	cc
    d16a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    d16e:	bd30      	popcc	{r4, r5, r15}
    d170:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d174:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    d178:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d17c:	f04f 0000 	mov.w	r0, #0
    d180:	bd30      	pop	{r4, r5, r15}
    d182:	ea7f 5c64 	mvns.w	r12, r4, asr #21
    d186:	bf1a      	itte	ne
    d188:	4619      	movne	r1, r3
    d18a:	4610      	movne	r0, r2
    d18c:	ea7f 5c65 	mvnseq.w	r12, r5, asr #21
    d190:	bf1c      	itt	ne
    d192:	460b      	movne	r3, r1
    d194:	4602      	movne	r2, r0
    d196:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d19a:	bf06      	itte	eq
    d19c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    d1a0:	ea91 0f03 	teqeq	r1, r3
    d1a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    d1a8:	bd30      	pop	{r4, r5, r15}
    d1aa:	bf00      	nop

0000d1ac <__aeabi_ui2d>:
    d1ac:	f090 0f00 	teq	r0, #0
    d1b0:	bf04      	itt	eq
    d1b2:	2100      	moveq	r1, #0
    d1b4:	4770      	bxeq	r14
    d1b6:	b530      	push	{r4, r5, r14}
    d1b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d1bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d1c0:	f04f 0500 	mov.w	r5, #0
    d1c4:	f04f 0100 	mov.w	r1, #0
    d1c8:	e750      	b.n	d06c <__adddf3+0x138>
    d1ca:	bf00      	nop

0000d1cc <__aeabi_i2d>:
    d1cc:	f090 0f00 	teq	r0, #0
    d1d0:	bf04      	itt	eq
    d1d2:	2100      	moveq	r1, #0
    d1d4:	4770      	bxeq	r14
    d1d6:	b530      	push	{r4, r5, r14}
    d1d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d1dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d1e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    d1e4:	bf48      	it	mi
    d1e6:	4240      	negmi	r0, r0
    d1e8:	f04f 0100 	mov.w	r1, #0
    d1ec:	e73e      	b.n	d06c <__adddf3+0x138>
    d1ee:	bf00      	nop

0000d1f0 <__aeabi_f2d>:
    d1f0:	0042      	lsls	r2, r0, #1
    d1f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    d1f6:	ea4f 0131 	mov.w	r1, r1, rrx
    d1fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
    d1fe:	bf1f      	itttt	ne
    d200:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    d204:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d208:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    d20c:	4770      	bxne	r14
    d20e:	f092 0f00 	teq	r2, #0
    d212:	bf14      	ite	ne
    d214:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d218:	4770      	bxeq	r14
    d21a:	b530      	push	{r4, r5, r14}
    d21c:	f44f 7460 	mov.w	r4, #896	; 0x380
    d220:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d224:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d228:	e720      	b.n	d06c <__adddf3+0x138>
    d22a:	bf00      	nop

0000d22c <__aeabi_ul2d>:
    d22c:	ea50 0201 	orrs.w	r2, r0, r1
    d230:	bf08      	it	eq
    d232:	4770      	bxeq	r14
    d234:	b530      	push	{r4, r5, r14}
    d236:	f04f 0500 	mov.w	r5, #0
    d23a:	e00a      	b.n	d252 <__aeabi_l2d+0x16>

0000d23c <__aeabi_l2d>:
    d23c:	ea50 0201 	orrs.w	r2, r0, r1
    d240:	bf08      	it	eq
    d242:	4770      	bxeq	r14
    d244:	b530      	push	{r4, r5, r14}
    d246:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    d24a:	d502      	bpl.n	d252 <__aeabi_l2d+0x16>
    d24c:	4240      	negs	r0, r0
    d24e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d252:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d256:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d25a:	ea5f 5c91 	movs.w	r12, r1, lsr #22
    d25e:	f43f aedc 	beq.w	d01a <__adddf3+0xe6>
    d262:	f04f 0203 	mov.w	r2, #3
    d266:	ea5f 0cdc 	movs.w	r12, r12, lsr #3
    d26a:	bf18      	it	ne
    d26c:	3203      	addne	r2, #3
    d26e:	ea5f 0cdc 	movs.w	r12, r12, lsr #3
    d272:	bf18      	it	ne
    d274:	3203      	addne	r2, #3
    d276:	eb02 02dc 	add.w	r2, r2, r12, lsr #3
    d27a:	f1c2 0320 	rsb	r3, r2, #32
    d27e:	fa00 fc03 	lsl.w	r12, r0, r3
    d282:	fa20 f002 	lsr.w	r0, r0, r2
    d286:	fa01 fe03 	lsl.w	r14, r1, r3
    d28a:	ea40 000e 	orr.w	r0, r0, r14
    d28e:	fa21 f102 	lsr.w	r1, r1, r2
    d292:	4414      	add	r4, r2
    d294:	e6c1      	b.n	d01a <__adddf3+0xe6>
    d296:	bf00      	nop

0000d298 <__aeabi_dmul>:
    d298:	b570      	push	{r4, r5, r6, r14}
    d29a:	f04f 0cff 	mov.w	r12, #255	; 0xff
    d29e:	f44c 6ce0 	orr.w	r12, r12, #1792	; 0x700
    d2a2:	ea1c 5411 	ands.w	r4, r12, r1, lsr #20
    d2a6:	bf1d      	ittte	ne
    d2a8:	ea1c 5513 	andsne.w	r5, r12, r3, lsr #20
    d2ac:	ea94 0f0c 	teqne	r4, r12
    d2b0:	ea95 0f0c 	teqne	r5, r12
    d2b4:	f000 f8de 	bleq	d474 <__aeabi_dmul+0x1dc>
    d2b8:	442c      	add	r4, r5
    d2ba:	ea81 0603 	eor.w	r6, r1, r3
    d2be:	ea21 514c 	bic.w	r1, r1, r12, lsl #21
    d2c2:	ea23 534c 	bic.w	r3, r3, r12, lsl #21
    d2c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    d2ca:	bf18      	it	ne
    d2cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    d2d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d2d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d2d8:	d038      	beq.n	d34c <__aeabi_dmul+0xb4>
    d2da:	fba0 ce02 	umull	r12, r14, r0, r2
    d2de:	f04f 0500 	mov.w	r5, #0
    d2e2:	fbe1 e502 	umlal	r14, r5, r1, r2
    d2e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    d2ea:	fbe0 e503 	umlal	r14, r5, r0, r3
    d2ee:	f04f 0600 	mov.w	r6, #0
    d2f2:	fbe1 5603 	umlal	r5, r6, r1, r3
    d2f6:	f09c 0f00 	teq	r12, #0
    d2fa:	bf18      	it	ne
    d2fc:	f04e 0e01 	orrne.w	r14, r14, #1
    d300:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    d304:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    d308:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    d30c:	d204      	bcs.n	d318 <__aeabi_dmul+0x80>
    d30e:	ea5f 0e4e 	movs.w	r14, r14, lsl #1
    d312:	416d      	adcs	r5, r5
    d314:	eb46 0606 	adc.w	r6, r6, r6
    d318:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    d31c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    d320:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    d324:	ea40 505e 	orr.w	r0, r0, r14, lsr #21
    d328:	ea4f 2ece 	mov.w	r14, r14, lsl #11
    d32c:	f1b4 0cfd 	subs.w	r12, r4, #253	; 0xfd
    d330:	bf88      	it	hi
    d332:	f5bc 6fe0 	cmphi.w	r12, #1792	; 0x700
    d336:	d81e      	bhi.n	d376 <__aeabi_dmul+0xde>
    d338:	f1be 4f00 	cmp.w	r14, #2147483648	; 0x80000000
    d33c:	bf08      	it	eq
    d33e:	ea5f 0e50 	movseq.w	r14, r0, lsr #1
    d342:	f150 0000 	adcs.w	r0, r0, #0
    d346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d34a:	bd70      	pop	{r4, r5, r6, r15}
    d34c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    d350:	ea46 0101 	orr.w	r1, r6, r1
    d354:	ea40 0002 	orr.w	r0, r0, r2
    d358:	ea81 0103 	eor.w	r1, r1, r3
    d35c:	ebb4 045c 	subs.w	r4, r4, r12, lsr #1
    d360:	bfc2      	ittt	gt
    d362:	ebd4 050c 	rsbsgt	r5, r4, r12
    d366:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d36a:	bd70      	popgt	{r4, r5, r6, r15}
    d36c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d370:	f04f 0e00 	mov.w	r14, #0
    d374:	3c01      	subs	r4, #1
    d376:	f300 80ab 	bgt.w	d4d0 <__aeabi_dmul+0x238>
    d37a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    d37e:	bfde      	ittt	le
    d380:	2000      	movle	r0, #0
    d382:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    d386:	bd70      	pople	{r4, r5, r6, r15}
    d388:	f1c4 0400 	rsb	r4, r4, #0
    d38c:	3c20      	subs	r4, #32
    d38e:	da35      	bge.n	d3fc <__aeabi_dmul+0x164>
    d390:	340c      	adds	r4, #12
    d392:	dc1b      	bgt.n	d3cc <__aeabi_dmul+0x134>
    d394:	f104 0414 	add.w	r4, r4, #20
    d398:	f1c4 0520 	rsb	r5, r4, #32
    d39c:	fa00 f305 	lsl.w	r3, r0, r5
    d3a0:	fa20 f004 	lsr.w	r0, r0, r4
    d3a4:	fa01 f205 	lsl.w	r2, r1, r5
    d3a8:	ea40 0002 	orr.w	r0, r0, r2
    d3ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    d3b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d3b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d3b8:	fa21 f604 	lsr.w	r6, r1, r4
    d3bc:	eb42 0106 	adc.w	r1, r2, r6
    d3c0:	ea5e 0e43 	orrs.w	r14, r14, r3, lsl #1
    d3c4:	bf08      	it	eq
    d3c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d3ca:	bd70      	pop	{r4, r5, r6, r15}
    d3cc:	f1c4 040c 	rsb	r4, r4, #12
    d3d0:	f1c4 0520 	rsb	r5, r4, #32
    d3d4:	fa00 f304 	lsl.w	r3, r0, r4
    d3d8:	fa20 f005 	lsr.w	r0, r0, r5
    d3dc:	fa01 f204 	lsl.w	r2, r1, r4
    d3e0:	ea40 0002 	orr.w	r0, r0, r2
    d3e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d3e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    d3ec:	f141 0100 	adc.w	r1, r1, #0
    d3f0:	ea5e 0e43 	orrs.w	r14, r14, r3, lsl #1
    d3f4:	bf08      	it	eq
    d3f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d3fa:	bd70      	pop	{r4, r5, r6, r15}
    d3fc:	f1c4 0520 	rsb	r5, r4, #32
    d400:	fa00 f205 	lsl.w	r2, r0, r5
    d404:	ea4e 0e02 	orr.w	r14, r14, r2
    d408:	fa20 f304 	lsr.w	r3, r0, r4
    d40c:	fa01 f205 	lsl.w	r2, r1, r5
    d410:	ea43 0302 	orr.w	r3, r3, r2
    d414:	fa21 f004 	lsr.w	r0, r1, r4
    d418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d41c:	fa21 f204 	lsr.w	r2, r1, r4
    d420:	ea20 0002 	bic.w	r0, r0, r2
    d424:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    d428:	ea5e 0e43 	orrs.w	r14, r14, r3, lsl #1
    d42c:	bf08      	it	eq
    d42e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    d432:	bd70      	pop	{r4, r5, r6, r15}
    d434:	f094 0f00 	teq	r4, #0
    d438:	d10f      	bne.n	d45a <__aeabi_dmul+0x1c2>
    d43a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    d43e:	0040      	lsls	r0, r0, #1
    d440:	eb41 0101 	adc.w	r1, r1, r1
    d444:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d448:	bf08      	it	eq
    d44a:	3c01      	subeq	r4, #1
    d44c:	d0f7      	beq.n	d43e <__aeabi_dmul+0x1a6>
    d44e:	ea41 0106 	orr.w	r1, r1, r6
    d452:	f095 0f00 	teq	r5, #0
    d456:	bf18      	it	ne
    d458:	4770      	bxne	r14
    d45a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    d45e:	0052      	lsls	r2, r2, #1
    d460:	eb43 0303 	adc.w	r3, r3, r3
    d464:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    d468:	bf08      	it	eq
    d46a:	3d01      	subeq	r5, #1
    d46c:	d0f7      	beq.n	d45e <__aeabi_dmul+0x1c6>
    d46e:	ea43 0306 	orr.w	r3, r3, r6
    d472:	4770      	bx	r14
    d474:	ea94 0f0c 	teq	r4, r12
    d478:	ea0c 5513 	and.w	r5, r12, r3, lsr #20
    d47c:	bf18      	it	ne
    d47e:	ea95 0f0c 	teqne	r5, r12
    d482:	d00c      	beq.n	d49e <__aeabi_dmul+0x206>
    d484:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d488:	bf18      	it	ne
    d48a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d48e:	d1d1      	bne.n	d434 <__aeabi_dmul+0x19c>
    d490:	ea81 0103 	eor.w	r1, r1, r3
    d494:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d498:	f04f 0000 	mov.w	r0, #0
    d49c:	bd70      	pop	{r4, r5, r6, r15}
    d49e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d4a2:	bf06      	itte	eq
    d4a4:	4610      	moveq	r0, r2
    d4a6:	4619      	moveq	r1, r3
    d4a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d4ac:	d019      	beq.n	d4e2 <__aeabi_dmul+0x24a>
    d4ae:	ea94 0f0c 	teq	r4, r12
    d4b2:	d102      	bne.n	d4ba <__aeabi_dmul+0x222>
    d4b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    d4b8:	d113      	bne.n	d4e2 <__aeabi_dmul+0x24a>
    d4ba:	ea95 0f0c 	teq	r5, r12
    d4be:	d105      	bne.n	d4cc <__aeabi_dmul+0x234>
    d4c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    d4c4:	bf1c      	itt	ne
    d4c6:	4610      	movne	r0, r2
    d4c8:	4619      	movne	r1, r3
    d4ca:	d10a      	bne.n	d4e2 <__aeabi_dmul+0x24a>
    d4cc:	ea81 0103 	eor.w	r1, r1, r3
    d4d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    d4d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d4d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d4dc:	f04f 0000 	mov.w	r0, #0
    d4e0:	bd70      	pop	{r4, r5, r6, r15}
    d4e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    d4e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    d4ea:	bd70      	pop	{r4, r5, r6, r15}

0000d4ec <__aeabi_ddiv>:
    d4ec:	b570      	push	{r4, r5, r6, r14}
    d4ee:	f04f 0cff 	mov.w	r12, #255	; 0xff
    d4f2:	f44c 6ce0 	orr.w	r12, r12, #1792	; 0x700
    d4f6:	ea1c 5411 	ands.w	r4, r12, r1, lsr #20
    d4fa:	bf1d      	ittte	ne
    d4fc:	ea1c 5513 	andsne.w	r5, r12, r3, lsr #20
    d500:	ea94 0f0c 	teqne	r4, r12
    d504:	ea95 0f0c 	teqne	r5, r12
    d508:	f000 f8a7 	bleq	d65a <__aeabi_ddiv+0x16e>
    d50c:	eba4 0405 	sub.w	r4, r4, r5
    d510:	ea81 0e03 	eor.w	r14, r1, r3
    d514:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d518:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d51c:	f000 8088 	beq.w	d630 <__aeabi_ddiv+0x144>
    d520:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d524:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d528:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    d52c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    d530:	ea4f 2202 	mov.w	r2, r2, lsl #8
    d534:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    d538:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    d53c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    d540:	f00e 4100 	and.w	r1, r14, #2147483648	; 0x80000000
    d544:	429d      	cmp	r5, r3
    d546:	bf08      	it	eq
    d548:	4296      	cmpeq	r6, r2
    d54a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    d54e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    d552:	d202      	bcs.n	d55a <__aeabi_ddiv+0x6e>
    d554:	085b      	lsrs	r3, r3, #1
    d556:	ea4f 0232 	mov.w	r2, r2, rrx
    d55a:	1ab6      	subs	r6, r6, r2
    d55c:	eb65 0503 	sbc.w	r5, r5, r3
    d560:	085b      	lsrs	r3, r3, #1
    d562:	ea4f 0232 	mov.w	r2, r2, rrx
    d566:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    d56a:	f44f 2c00 	mov.w	r12, #524288	; 0x80000
    d56e:	ebb6 0e02 	subs.w	r14, r6, r2
    d572:	eb75 0e03 	sbcs.w	r14, r5, r3
    d576:	bf22      	ittt	cs
    d578:	1ab6      	subcs	r6, r6, r2
    d57a:	4675      	movcs	r5, r14
    d57c:	ea40 000c 	orrcs.w	r0, r0, r12
    d580:	085b      	lsrs	r3, r3, #1
    d582:	ea4f 0232 	mov.w	r2, r2, rrx
    d586:	ebb6 0e02 	subs.w	r14, r6, r2
    d58a:	eb75 0e03 	sbcs.w	r14, r5, r3
    d58e:	bf22      	ittt	cs
    d590:	1ab6      	subcs	r6, r6, r2
    d592:	4675      	movcs	r5, r14
    d594:	ea40 005c 	orrcs.w	r0, r0, r12, lsr #1
    d598:	085b      	lsrs	r3, r3, #1
    d59a:	ea4f 0232 	mov.w	r2, r2, rrx
    d59e:	ebb6 0e02 	subs.w	r14, r6, r2
    d5a2:	eb75 0e03 	sbcs.w	r14, r5, r3
    d5a6:	bf22      	ittt	cs
    d5a8:	1ab6      	subcs	r6, r6, r2
    d5aa:	4675      	movcs	r5, r14
    d5ac:	ea40 009c 	orrcs.w	r0, r0, r12, lsr #2
    d5b0:	085b      	lsrs	r3, r3, #1
    d5b2:	ea4f 0232 	mov.w	r2, r2, rrx
    d5b6:	ebb6 0e02 	subs.w	r14, r6, r2
    d5ba:	eb75 0e03 	sbcs.w	r14, r5, r3
    d5be:	bf22      	ittt	cs
    d5c0:	1ab6      	subcs	r6, r6, r2
    d5c2:	4675      	movcs	r5, r14
    d5c4:	ea40 00dc 	orrcs.w	r0, r0, r12, lsr #3
    d5c8:	ea55 0e06 	orrs.w	r14, r5, r6
    d5cc:	d018      	beq.n	d600 <__aeabi_ddiv+0x114>
    d5ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
    d5d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    d5d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    d5da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    d5de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    d5e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    d5e6:	ea5f 1c1c 	movs.w	r12, r12, lsr #4
    d5ea:	d1c0      	bne.n	d56e <__aeabi_ddiv+0x82>
    d5ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d5f0:	d10b      	bne.n	d60a <__aeabi_ddiv+0x11e>
    d5f2:	ea41 0100 	orr.w	r1, r1, r0
    d5f6:	f04f 0000 	mov.w	r0, #0
    d5fa:	f04f 4c00 	mov.w	r12, #2147483648	; 0x80000000
    d5fe:	e7b6      	b.n	d56e <__aeabi_ddiv+0x82>
    d600:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d604:	bf04      	itt	eq
    d606:	4301      	orreq	r1, r0
    d608:	2000      	moveq	r0, #0
    d60a:	f1b4 0cfd 	subs.w	r12, r4, #253	; 0xfd
    d60e:	bf88      	it	hi
    d610:	f5bc 6fe0 	cmphi.w	r12, #1792	; 0x700
    d614:	f63f aeaf 	bhi.w	d376 <__aeabi_dmul+0xde>
    d618:	ebb5 0c03 	subs.w	r12, r5, r3
    d61c:	bf04      	itt	eq
    d61e:	ebb6 0c02 	subseq.w	r12, r6, r2
    d622:	ea5f 0c50 	movseq.w	r12, r0, lsr #1
    d626:	f150 0000 	adcs.w	r0, r0, #0
    d62a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d62e:	bd70      	pop	{r4, r5, r6, r15}
    d630:	f00e 4e00 	and.w	r14, r14, #2147483648	; 0x80000000
    d634:	ea4e 3111 	orr.w	r1, r14, r1, lsr #12
    d638:	eb14 045c 	adds.w	r4, r4, r12, lsr #1
    d63c:	bfc2      	ittt	gt
    d63e:	ebd4 050c 	rsbsgt	r5, r4, r12
    d642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    d646:	bd70      	popgt	{r4, r5, r6, r15}
    d648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d64c:	f04f 0e00 	mov.w	r14, #0
    d650:	3c01      	subs	r4, #1
    d652:	e690      	b.n	d376 <__aeabi_dmul+0xde>
    d654:	ea45 0e06 	orr.w	r14, r5, r6
    d658:	e68d      	b.n	d376 <__aeabi_dmul+0xde>
    d65a:	ea0c 5513 	and.w	r5, r12, r3, lsr #20
    d65e:	ea94 0f0c 	teq	r4, r12
    d662:	bf08      	it	eq
    d664:	ea95 0f0c 	teqeq	r5, r12
    d668:	f43f af3b 	beq.w	d4e2 <__aeabi_dmul+0x24a>
    d66c:	ea94 0f0c 	teq	r4, r12
    d670:	d10a      	bne.n	d688 <__aeabi_ddiv+0x19c>
    d672:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d676:	f47f af34 	bne.w	d4e2 <__aeabi_dmul+0x24a>
    d67a:	ea95 0f0c 	teq	r5, r12
    d67e:	f47f af25 	bne.w	d4cc <__aeabi_dmul+0x234>
    d682:	4610      	mov	r0, r2
    d684:	4619      	mov	r1, r3
    d686:	e72c      	b.n	d4e2 <__aeabi_dmul+0x24a>
    d688:	ea95 0f0c 	teq	r5, r12
    d68c:	d106      	bne.n	d69c <__aeabi_ddiv+0x1b0>
    d68e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    d692:	f43f aefd 	beq.w	d490 <__aeabi_dmul+0x1f8>
    d696:	4610      	mov	r0, r2
    d698:	4619      	mov	r1, r3
    d69a:	e722      	b.n	d4e2 <__aeabi_dmul+0x24a>
    d69c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    d6a0:	bf18      	it	ne
    d6a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    d6a6:	f47f aec5 	bne.w	d434 <__aeabi_dmul+0x19c>
    d6aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    d6ae:	f47f af0d 	bne.w	d4cc <__aeabi_dmul+0x234>
    d6b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    d6b6:	f47f aeeb 	bne.w	d490 <__aeabi_dmul+0x1f8>
    d6ba:	e712      	b.n	d4e2 <__aeabi_dmul+0x24a>

0000d6bc <__gedf2>:
    d6bc:	f04f 3cff 	mov.w	r12, #4294967295
    d6c0:	e006      	b.n	d6d0 <__cmpdf2+0x4>
    d6c2:	bf00      	nop

0000d6c4 <__ledf2>:
    d6c4:	f04f 0c01 	mov.w	r12, #1
    d6c8:	e002      	b.n	d6d0 <__cmpdf2+0x4>
    d6ca:	bf00      	nop

0000d6cc <__cmpdf2>:
    d6cc:	f04f 0c01 	mov.w	r12, #1
    d6d0:	f84d cd04 	str.w	r12, [r13, #-4]!
    d6d4:	ea4f 0c41 	mov.w	r12, r1, lsl #1
    d6d8:	ea7f 5c6c 	mvns.w	r12, r12, asr #21
    d6dc:	ea4f 0c43 	mov.w	r12, r3, lsl #1
    d6e0:	bf18      	it	ne
    d6e2:	ea7f 5c6c 	mvnsne.w	r12, r12, asr #21
    d6e6:	d01b      	beq.n	d720 <__cmpdf2+0x54>
    d6e8:	b001      	add	sp, #4
    d6ea:	ea50 0c41 	orrs.w	r12, r0, r1, lsl #1
    d6ee:	bf0c      	ite	eq
    d6f0:	ea52 0c43 	orrseq.w	r12, r2, r3, lsl #1
    d6f4:	ea91 0f03 	teqne	r1, r3
    d6f8:	bf02      	ittt	eq
    d6fa:	ea90 0f02 	teqeq	r0, r2
    d6fe:	2000      	moveq	r0, #0
    d700:	4770      	bxeq	r14
    d702:	f110 0f00 	cmn.w	r0, #0
    d706:	ea91 0f03 	teq	r1, r3
    d70a:	bf58      	it	pl
    d70c:	4299      	cmppl	r1, r3
    d70e:	bf08      	it	eq
    d710:	4290      	cmpeq	r0, r2
    d712:	bf2c      	ite	cs
    d714:	17d8      	asrcs	r0, r3, #31
    d716:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    d71a:	f040 0001 	orr.w	r0, r0, #1
    d71e:	4770      	bx	r14
    d720:	ea4f 0c41 	mov.w	r12, r1, lsl #1
    d724:	ea7f 5c6c 	mvns.w	r12, r12, asr #21
    d728:	d102      	bne.n	d730 <__cmpdf2+0x64>
    d72a:	ea50 3c01 	orrs.w	r12, r0, r1, lsl #12
    d72e:	d107      	bne.n	d740 <__cmpdf2+0x74>
    d730:	ea4f 0c43 	mov.w	r12, r3, lsl #1
    d734:	ea7f 5c6c 	mvns.w	r12, r12, asr #21
    d738:	d1d6      	bne.n	d6e8 <__cmpdf2+0x1c>
    d73a:	ea52 3c03 	orrs.w	r12, r2, r3, lsl #12
    d73e:	d0d3      	beq.n	d6e8 <__cmpdf2+0x1c>
    d740:	f85d 0b04 	ldr.w	r0, [r13], #4
    d744:	4770      	bx	r14
    d746:	bf00      	nop

0000d748 <__aeabi_cdrcmple>:
    d748:	4684      	mov	r12, r0
    d74a:	4610      	mov	r0, r2
    d74c:	4662      	mov	r2, r12
    d74e:	468c      	mov	r12, r1
    d750:	4619      	mov	r1, r3
    d752:	4663      	mov	r3, r12
    d754:	e000      	b.n	d758 <__aeabi_cdcmpeq>
    d756:	bf00      	nop

0000d758 <__aeabi_cdcmpeq>:
    d758:	b501      	push	{r0, r14}
    d75a:	f7ff ffb7 	bl	d6cc <__cmpdf2>
    d75e:	2800      	cmp	r0, #0
    d760:	bf48      	it	mi
    d762:	f110 0f00 	cmnmi.w	r0, #0
    d766:	bd01      	pop	{r0, r15}

0000d768 <__aeabi_dcmpeq>:
    d768:	f84d ed08 	str.w	r14, [r13, #-8]!
    d76c:	f7ff fff4 	bl	d758 <__aeabi_cdcmpeq>
    d770:	bf0c      	ite	eq
    d772:	2001      	moveq	r0, #1
    d774:	2000      	movne	r0, #0
    d776:	f85d fb08 	ldr.w	r15, [r13], #8
    d77a:	bf00      	nop

0000d77c <__aeabi_dcmplt>:
    d77c:	f84d ed08 	str.w	r14, [r13, #-8]!
    d780:	f7ff ffea 	bl	d758 <__aeabi_cdcmpeq>
    d784:	bf34      	ite	cc
    d786:	2001      	movcc	r0, #1
    d788:	2000      	movcs	r0, #0
    d78a:	f85d fb08 	ldr.w	r15, [r13], #8
    d78e:	bf00      	nop

0000d790 <__aeabi_dcmple>:
    d790:	f84d ed08 	str.w	r14, [r13, #-8]!
    d794:	f7ff ffe0 	bl	d758 <__aeabi_cdcmpeq>
    d798:	bf94      	ite	ls
    d79a:	2001      	movls	r0, #1
    d79c:	2000      	movhi	r0, #0
    d79e:	f85d fb08 	ldr.w	r15, [r13], #8
    d7a2:	bf00      	nop

0000d7a4 <__aeabi_dcmpge>:
    d7a4:	f84d ed08 	str.w	r14, [r13, #-8]!
    d7a8:	f7ff ffce 	bl	d748 <__aeabi_cdrcmple>
    d7ac:	bf94      	ite	ls
    d7ae:	2001      	movls	r0, #1
    d7b0:	2000      	movhi	r0, #0
    d7b2:	f85d fb08 	ldr.w	r15, [r13], #8
    d7b6:	bf00      	nop

0000d7b8 <__aeabi_dcmpgt>:
    d7b8:	f84d ed08 	str.w	r14, [r13, #-8]!
    d7bc:	f7ff ffc4 	bl	d748 <__aeabi_cdrcmple>
    d7c0:	bf34      	ite	cc
    d7c2:	2001      	movcc	r0, #1
    d7c4:	2000      	movcs	r0, #0
    d7c6:	f85d fb08 	ldr.w	r15, [r13], #8
    d7ca:	bf00      	nop

0000d7cc <__aeabi_d2iz>:
    d7cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
    d7d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d7d4:	d215      	bcs.n	d802 <__aeabi_d2iz+0x36>
    d7d6:	d511      	bpl.n	d7fc <__aeabi_d2iz+0x30>
    d7d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d7dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d7e0:	d912      	bls.n	d808 <__aeabi_d2iz+0x3c>
    d7e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d7e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d7ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d7ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d7f2:	fa23 f002 	lsr.w	r0, r3, r2
    d7f6:	bf18      	it	ne
    d7f8:	4240      	negne	r0, r0
    d7fa:	4770      	bx	r14
    d7fc:	f04f 0000 	mov.w	r0, #0
    d800:	4770      	bx	r14
    d802:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d806:	d105      	bne.n	d814 <__aeabi_d2iz+0x48>
    d808:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    d80c:	bf08      	it	eq
    d80e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d812:	4770      	bx	r14
    d814:	f04f 0000 	mov.w	r0, #0
    d818:	4770      	bx	r14
    d81a:	bf00      	nop

0000d81c <__aeabi_d2uiz>:
    d81c:	004a      	lsls	r2, r1, #1
    d81e:	d211      	bcs.n	d844 <__aeabi_d2uiz+0x28>
    d820:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d824:	d211      	bcs.n	d84a <__aeabi_d2uiz+0x2e>
    d826:	d50d      	bpl.n	d844 <__aeabi_d2uiz+0x28>
    d828:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d82c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d830:	d40e      	bmi.n	d850 <__aeabi_d2uiz+0x34>
    d832:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d83a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d83e:	fa23 f002 	lsr.w	r0, r3, r2
    d842:	4770      	bx	r14
    d844:	f04f 0000 	mov.w	r0, #0
    d848:	4770      	bx	r14
    d84a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d84e:	d102      	bne.n	d856 <__aeabi_d2uiz+0x3a>
    d850:	f04f 30ff 	mov.w	r0, #4294967295
    d854:	4770      	bx	r14
    d856:	f04f 0000 	mov.w	r0, #0
    d85a:	4770      	bx	r14

0000d85c <__aeabi_d2f>:
    d85c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    d860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    d864:	bf24      	itt	cs
    d866:	f5b3 1c00 	subscs.w	r12, r3, #2097152	; 0x200000
    d86a:	f1dc 5cfe 	rsbscs	r12, r12, #532676608	; 0x1fc00000
    d86e:	d90d      	bls.n	d88c <__aeabi_d2f+0x30>
    d870:	f001 4c00 	and.w	r12, r1, #2147483648	; 0x80000000
    d874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    d878:	ea4c 7050 	orr.w	r0, r12, r0, lsr #29
    d87c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    d884:	bf08      	it	eq
    d886:	f020 0001 	biceq.w	r0, r0, #1
    d88a:	4770      	bx	r14
    d88c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    d890:	d121      	bne.n	d8d6 <__aeabi_d2f+0x7a>
    d892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    d896:	bfbc      	itt	lt
    d898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    d89c:	4770      	bxlt	r14
    d89e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d8a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
    d8a6:	f1c2 0218 	rsb	r2, r2, #24
    d8aa:	f1c2 0c20 	rsb	r12, r2, #32
    d8ae:	fa10 f30c 	lsls.w	r3, r0, r12
    d8b2:	fa20 f002 	lsr.w	r0, r0, r2
    d8b6:	bf18      	it	ne
    d8b8:	f040 0001 	orrne.w	r0, r0, #1
    d8bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d8c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    d8c4:	fa03 fc0c 	lsl.w	r12, r3, r12
    d8c8:	ea40 000c 	orr.w	r0, r0, r12
    d8cc:	fa23 f302 	lsr.w	r3, r3, r2
    d8d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
    d8d4:	e7cc      	b.n	d870 <__aeabi_d2f+0x14>
    d8d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
    d8da:	d107      	bne.n	d8ec <__aeabi_d2f+0x90>
    d8dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    d8e0:	bf1e      	ittt	ne
    d8e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    d8e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    d8ea:	4770      	bxne	r14
    d8ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    d8f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d8f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d8f8:	4770      	bx	r14
    d8fa:	bf00      	nop

0000d8fc <__aeabi_frsub>:
    d8fc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    d900:	e002      	b.n	d908 <__addsf3>
    d902:	bf00      	nop

0000d904 <__aeabi_fsub>:
    d904:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000d908 <__addsf3>:
    d908:	0042      	lsls	r2, r0, #1
    d90a:	bf1f      	itttt	ne
    d90c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    d910:	ea92 0f03 	teqne	r2, r3
    d914:	ea7f 6c22 	mvnsne.w	r12, r2, asr #24
    d918:	ea7f 6c23 	mvnsne.w	r12, r3, asr #24
    d91c:	d06a      	beq.n	d9f4 <__addsf3+0xec>
    d91e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    d922:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    d926:	bfc1      	itttt	gt
    d928:	18d2      	addgt	r2, r2, r3
    d92a:	4041      	eorgt	r1, r0
    d92c:	4048      	eorgt	r0, r1
    d92e:	4041      	eorgt	r1, r0
    d930:	bfb8      	it	lt
    d932:	425b      	neglt	r3, r3
    d934:	2b19      	cmp	r3, #25
    d936:	bf88      	it	hi
    d938:	4770      	bxhi	r14
    d93a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    d93e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d942:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d946:	bf18      	it	ne
    d948:	4240      	negne	r0, r0
    d94a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d94e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    d952:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    d956:	bf18      	it	ne
    d958:	4249      	negne	r1, r1
    d95a:	ea92 0f03 	teq	r2, r3
    d95e:	d03f      	beq.n	d9e0 <__addsf3+0xd8>
    d960:	f1a2 0201 	sub.w	r2, r2, #1
    d964:	fa41 fc03 	asr.w	r12, r1, r3
    d968:	eb10 000c 	adds.w	r0, r0, r12
    d96c:	f1c3 0320 	rsb	r3, r3, #32
    d970:	fa01 f103 	lsl.w	r1, r1, r3
    d974:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    d978:	d502      	bpl.n	d980 <__addsf3+0x78>
    d97a:	4249      	negs	r1, r1
    d97c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    d980:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    d984:	d313      	bcc.n	d9ae <__addsf3+0xa6>
    d986:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    d98a:	d306      	bcc.n	d99a <__addsf3+0x92>
    d98c:	0840      	lsrs	r0, r0, #1
    d98e:	ea4f 0131 	mov.w	r1, r1, rrx
    d992:	f102 0201 	add.w	r2, r2, #1
    d996:	2afe      	cmp	r2, #254	; 0xfe
    d998:	d251      	bcs.n	da3e <__addsf3+0x136>
    d99a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    d99e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d9a2:	bf08      	it	eq
    d9a4:	f020 0001 	biceq.w	r0, r0, #1
    d9a8:	ea40 0003 	orr.w	r0, r0, r3
    d9ac:	4770      	bx	r14
    d9ae:	0049      	lsls	r1, r1, #1
    d9b0:	eb40 0000 	adc.w	r0, r0, r0
    d9b4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    d9b8:	f1a2 0201 	sub.w	r2, r2, #1
    d9bc:	d1ed      	bne.n	d99a <__addsf3+0x92>
    d9be:	fab0 fc80 	clz	r12, r0
    d9c2:	f1ac 0c08 	sub.w	r12, r12, #8
    d9c6:	ebb2 020c 	subs.w	r2, r2, r12
    d9ca:	fa00 f00c 	lsl.w	r0, r0, r12
    d9ce:	bfaa      	itet	ge
    d9d0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    d9d4:	4252      	neglt	r2, r2
    d9d6:	4318      	orrge	r0, r3
    d9d8:	bfbc      	itt	lt
    d9da:	40d0      	lsrlt	r0, r2
    d9dc:	4318      	orrlt	r0, r3
    d9de:	4770      	bx	r14
    d9e0:	f092 0f00 	teq	r2, #0
    d9e4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    d9e8:	bf06      	itte	eq
    d9ea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    d9ee:	3201      	addeq	r2, #1
    d9f0:	3b01      	subne	r3, #1
    d9f2:	e7b5      	b.n	d960 <__addsf3+0x58>
    d9f4:	ea4f 0341 	mov.w	r3, r1, lsl #1
    d9f8:	ea7f 6c22 	mvns.w	r12, r2, asr #24
    d9fc:	bf18      	it	ne
    d9fe:	ea7f 6c23 	mvnsne.w	r12, r3, asr #24
    da02:	d021      	beq.n	da48 <__addsf3+0x140>
    da04:	ea92 0f03 	teq	r2, r3
    da08:	d004      	beq.n	da14 <__addsf3+0x10c>
    da0a:	f092 0f00 	teq	r2, #0
    da0e:	bf08      	it	eq
    da10:	4608      	moveq	r0, r1
    da12:	4770      	bx	r14
    da14:	ea90 0f01 	teq	r0, r1
    da18:	bf1c      	itt	ne
    da1a:	2000      	movne	r0, #0
    da1c:	4770      	bxne	r14
    da1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    da22:	d104      	bne.n	da2e <__addsf3+0x126>
    da24:	0040      	lsls	r0, r0, #1
    da26:	bf28      	it	cs
    da28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    da2c:	4770      	bx	r14
    da2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    da32:	bf3c      	itt	cc
    da34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    da38:	4770      	bxcc	r14
    da3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    da3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    da42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    da46:	4770      	bx	r14
    da48:	ea7f 6222 	mvns.w	r2, r2, asr #24
    da4c:	bf16      	itet	ne
    da4e:	4608      	movne	r0, r1
    da50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    da54:	4601      	movne	r1, r0
    da56:	0242      	lsls	r2, r0, #9
    da58:	bf06      	itte	eq
    da5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    da5e:	ea90 0f01 	teqeq	r0, r1
    da62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    da66:	4770      	bx	r14

0000da68 <__aeabi_ui2f>:
    da68:	f04f 0300 	mov.w	r3, #0
    da6c:	e004      	b.n	da78 <__aeabi_i2f+0x8>
    da6e:	bf00      	nop

0000da70 <__aeabi_i2f>:
    da70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    da74:	bf48      	it	mi
    da76:	4240      	negmi	r0, r0
    da78:	ea5f 0c00 	movs.w	r12, r0
    da7c:	bf08      	it	eq
    da7e:	4770      	bxeq	r14
    da80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    da84:	4601      	mov	r1, r0
    da86:	f04f 0000 	mov.w	r0, #0
    da8a:	e01c      	b.n	dac6 <__aeabi_l2f+0x2a>

0000da8c <__aeabi_ul2f>:
    da8c:	ea50 0201 	orrs.w	r2, r0, r1
    da90:	bf08      	it	eq
    da92:	4770      	bxeq	r14
    da94:	f04f 0300 	mov.w	r3, #0
    da98:	e00a      	b.n	dab0 <__aeabi_l2f+0x14>
    da9a:	bf00      	nop

0000da9c <__aeabi_l2f>:
    da9c:	ea50 0201 	orrs.w	r2, r0, r1
    daa0:	bf08      	it	eq
    daa2:	4770      	bxeq	r14
    daa4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    daa8:	d502      	bpl.n	dab0 <__aeabi_l2f+0x14>
    daaa:	4240      	negs	r0, r0
    daac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    dab0:	ea5f 0c01 	movs.w	r12, r1
    dab4:	bf02      	ittt	eq
    dab6:	4684      	moveq	r12, r0
    dab8:	4601      	moveq	r1, r0
    daba:	2000      	moveq	r0, #0
    dabc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    dac0:	bf08      	it	eq
    dac2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    dac6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    daca:	fabc f28c 	clz	r2, r12
    dace:	3a08      	subs	r2, #8
    dad0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    dad4:	db10      	blt.n	daf8 <__aeabi_l2f+0x5c>
    dad6:	fa01 fc02 	lsl.w	r12, r1, r2
    dada:	4463      	add	r3, r12
    dadc:	fa00 fc02 	lsl.w	r12, r0, r2
    dae0:	f1c2 0220 	rsb	r2, r2, #32
    dae4:	f1bc 4f00 	cmp.w	r12, #2147483648	; 0x80000000
    dae8:	fa20 f202 	lsr.w	r2, r0, r2
    daec:	eb43 0002 	adc.w	r0, r3, r2
    daf0:	bf08      	it	eq
    daf2:	f020 0001 	biceq.w	r0, r0, #1
    daf6:	4770      	bx	r14
    daf8:	f102 0220 	add.w	r2, r2, #32
    dafc:	fa01 fc02 	lsl.w	r12, r1, r2
    db00:	f1c2 0220 	rsb	r2, r2, #32
    db04:	ea50 004c 	orrs.w	r0, r0, r12, lsl #1
    db08:	fa21 f202 	lsr.w	r2, r1, r2
    db0c:	eb43 0002 	adc.w	r0, r3, r2
    db10:	bf08      	it	eq
    db12:	ea20 70dc 	biceq.w	r0, r0, r12, lsr #31
    db16:	4770      	bx	r14

0000db18 <__aeabi_fmul>:
    db18:	f04f 0cff 	mov.w	r12, #255	; 0xff
    db1c:	ea1c 52d0 	ands.w	r2, r12, r0, lsr #23
    db20:	bf1e      	ittt	ne
    db22:	ea1c 53d1 	andsne.w	r3, r12, r1, lsr #23
    db26:	ea92 0f0c 	teqne	r2, r12
    db2a:	ea93 0f0c 	teqne	r3, r12
    db2e:	d06f      	beq.n	dc10 <__aeabi_fmul+0xf8>
    db30:	441a      	add	r2, r3
    db32:	ea80 0c01 	eor.w	r12, r0, r1
    db36:	0240      	lsls	r0, r0, #9
    db38:	bf18      	it	ne
    db3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    db3e:	d01e      	beq.n	db7e <__aeabi_fmul+0x66>
    db40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    db44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    db48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    db4c:	fba0 3101 	umull	r3, r1, r0, r1
    db50:	f00c 4000 	and.w	r0, r12, #2147483648	; 0x80000000
    db54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    db58:	bf3e      	ittt	cc
    db5a:	0049      	lslcc	r1, r1, #1
    db5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    db60:	005b      	lslcc	r3, r3, #1
    db62:	ea40 0001 	orr.w	r0, r0, r1
    db66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    db6a:	2afd      	cmp	r2, #253	; 0xfd
    db6c:	d81d      	bhi.n	dbaa <__aeabi_fmul+0x92>
    db6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    db72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    db76:	bf08      	it	eq
    db78:	f020 0001 	biceq.w	r0, r0, #1
    db7c:	4770      	bx	r14
    db7e:	f090 0f00 	teq	r0, #0
    db82:	f00c 4c00 	and.w	r12, r12, #2147483648	; 0x80000000
    db86:	bf08      	it	eq
    db88:	0249      	lsleq	r1, r1, #9
    db8a:	ea4c 2050 	orr.w	r0, r12, r0, lsr #9
    db8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    db92:	3a7f      	subs	r2, #127	; 0x7f
    db94:	bfc2      	ittt	gt
    db96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    db9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    db9e:	4770      	bxgt	r14
    dba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    dba4:	f04f 0300 	mov.w	r3, #0
    dba8:	3a01      	subs	r2, #1
    dbaa:	dc5d      	bgt.n	dc68 <__aeabi_fmul+0x150>
    dbac:	f112 0f19 	cmn.w	r2, #25
    dbb0:	bfdc      	itt	le
    dbb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    dbb6:	4770      	bxle	r14
    dbb8:	f1c2 0200 	rsb	r2, r2, #0
    dbbc:	0041      	lsls	r1, r0, #1
    dbbe:	fa21 f102 	lsr.w	r1, r1, r2
    dbc2:	f1c2 0220 	rsb	r2, r2, #32
    dbc6:	fa00 fc02 	lsl.w	r12, r0, r2
    dbca:	ea5f 0031 	movs.w	r0, r1, rrx
    dbce:	f140 0000 	adc.w	r0, r0, #0
    dbd2:	ea53 034c 	orrs.w	r3, r3, r12, lsl #1
    dbd6:	bf08      	it	eq
    dbd8:	ea20 70dc 	biceq.w	r0, r0, r12, lsr #31
    dbdc:	4770      	bx	r14
    dbde:	f092 0f00 	teq	r2, #0
    dbe2:	f000 4c00 	and.w	r12, r0, #2147483648	; 0x80000000
    dbe6:	bf02      	ittt	eq
    dbe8:	0040      	lsleq	r0, r0, #1
    dbea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    dbee:	3a01      	subeq	r2, #1
    dbf0:	d0f9      	beq.n	dbe6 <__aeabi_fmul+0xce>
    dbf2:	ea40 000c 	orr.w	r0, r0, r12
    dbf6:	f093 0f00 	teq	r3, #0
    dbfa:	f001 4c00 	and.w	r12, r1, #2147483648	; 0x80000000
    dbfe:	bf02      	ittt	eq
    dc00:	0049      	lsleq	r1, r1, #1
    dc02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    dc06:	3b01      	subeq	r3, #1
    dc08:	d0f9      	beq.n	dbfe <__aeabi_fmul+0xe6>
    dc0a:	ea41 010c 	orr.w	r1, r1, r12
    dc0e:	e78f      	b.n	db30 <__aeabi_fmul+0x18>
    dc10:	ea0c 53d1 	and.w	r3, r12, r1, lsr #23
    dc14:	ea92 0f0c 	teq	r2, r12
    dc18:	bf18      	it	ne
    dc1a:	ea93 0f0c 	teqne	r3, r12
    dc1e:	d00a      	beq.n	dc36 <__aeabi_fmul+0x11e>
    dc20:	f030 4c00 	bics.w	r12, r0, #2147483648	; 0x80000000
    dc24:	bf18      	it	ne
    dc26:	f031 4c00 	bicsne.w	r12, r1, #2147483648	; 0x80000000
    dc2a:	d1d8      	bne.n	dbde <__aeabi_fmul+0xc6>
    dc2c:	ea80 0001 	eor.w	r0, r0, r1
    dc30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    dc34:	4770      	bx	r14
    dc36:	f090 0f00 	teq	r0, #0
    dc3a:	bf17      	itett	ne
    dc3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    dc40:	4608      	moveq	r0, r1
    dc42:	f091 0f00 	teqne	r1, #0
    dc46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    dc4a:	d014      	beq.n	dc76 <__aeabi_fmul+0x15e>
    dc4c:	ea92 0f0c 	teq	r2, r12
    dc50:	d101      	bne.n	dc56 <__aeabi_fmul+0x13e>
    dc52:	0242      	lsls	r2, r0, #9
    dc54:	d10f      	bne.n	dc76 <__aeabi_fmul+0x15e>
    dc56:	ea93 0f0c 	teq	r3, r12
    dc5a:	d103      	bne.n	dc64 <__aeabi_fmul+0x14c>
    dc5c:	024b      	lsls	r3, r1, #9
    dc5e:	bf18      	it	ne
    dc60:	4608      	movne	r0, r1
    dc62:	d108      	bne.n	dc76 <__aeabi_fmul+0x15e>
    dc64:	ea80 0001 	eor.w	r0, r0, r1
    dc68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    dc6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    dc70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    dc74:	4770      	bx	r14
    dc76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    dc7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    dc7e:	4770      	bx	r14

0000dc80 <__aeabi_fdiv>:
    dc80:	f04f 0cff 	mov.w	r12, #255	; 0xff
    dc84:	ea1c 52d0 	ands.w	r2, r12, r0, lsr #23
    dc88:	bf1e      	ittt	ne
    dc8a:	ea1c 53d1 	andsne.w	r3, r12, r1, lsr #23
    dc8e:	ea92 0f0c 	teqne	r2, r12
    dc92:	ea93 0f0c 	teqne	r3, r12
    dc96:	d069      	beq.n	dd6c <__aeabi_fdiv+0xec>
    dc98:	eba2 0203 	sub.w	r2, r2, r3
    dc9c:	ea80 0c01 	eor.w	r12, r0, r1
    dca0:	0249      	lsls	r1, r1, #9
    dca2:	ea4f 2040 	mov.w	r0, r0, lsl #9
    dca6:	d037      	beq.n	dd18 <__aeabi_fdiv+0x98>
    dca8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    dcac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    dcb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    dcb4:	f00c 4000 	and.w	r0, r12, #2147483648	; 0x80000000
    dcb8:	428b      	cmp	r3, r1
    dcba:	bf38      	it	cc
    dcbc:	005b      	lslcc	r3, r3, #1
    dcbe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    dcc2:	f44f 0c00 	mov.w	r12, #8388608	; 0x800000
    dcc6:	428b      	cmp	r3, r1
    dcc8:	bf24      	itt	cs
    dcca:	1a5b      	subcs	r3, r3, r1
    dccc:	ea40 000c 	orrcs.w	r0, r0, r12
    dcd0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    dcd4:	bf24      	itt	cs
    dcd6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    dcda:	ea40 005c 	orrcs.w	r0, r0, r12, lsr #1
    dcde:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    dce2:	bf24      	itt	cs
    dce4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    dce8:	ea40 009c 	orrcs.w	r0, r0, r12, lsr #2
    dcec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    dcf0:	bf24      	itt	cs
    dcf2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    dcf6:	ea40 00dc 	orrcs.w	r0, r0, r12, lsr #3
    dcfa:	011b      	lsls	r3, r3, #4
    dcfc:	bf18      	it	ne
    dcfe:	ea5f 1c1c 	movsne.w	r12, r12, lsr #4
    dd02:	d1e0      	bne.n	dcc6 <__aeabi_fdiv+0x46>
    dd04:	2afd      	cmp	r2, #253	; 0xfd
    dd06:	f63f af50 	bhi.w	dbaa <__aeabi_fmul+0x92>
    dd0a:	428b      	cmp	r3, r1
    dd0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    dd10:	bf08      	it	eq
    dd12:	f020 0001 	biceq.w	r0, r0, #1
    dd16:	4770      	bx	r14
    dd18:	f00c 4c00 	and.w	r12, r12, #2147483648	; 0x80000000
    dd1c:	ea4c 2050 	orr.w	r0, r12, r0, lsr #9
    dd20:	327f      	adds	r2, #127	; 0x7f
    dd22:	bfc2      	ittt	gt
    dd24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    dd28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    dd2c:	4770      	bxgt	r14
    dd2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    dd32:	f04f 0300 	mov.w	r3, #0
    dd36:	3a01      	subs	r2, #1
    dd38:	e737      	b.n	dbaa <__aeabi_fmul+0x92>
    dd3a:	f092 0f00 	teq	r2, #0
    dd3e:	f000 4c00 	and.w	r12, r0, #2147483648	; 0x80000000
    dd42:	bf02      	ittt	eq
    dd44:	0040      	lsleq	r0, r0, #1
    dd46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    dd4a:	3a01      	subeq	r2, #1
    dd4c:	d0f9      	beq.n	dd42 <__aeabi_fdiv+0xc2>
    dd4e:	ea40 000c 	orr.w	r0, r0, r12
    dd52:	f093 0f00 	teq	r3, #0
    dd56:	f001 4c00 	and.w	r12, r1, #2147483648	; 0x80000000
    dd5a:	bf02      	ittt	eq
    dd5c:	0049      	lsleq	r1, r1, #1
    dd5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    dd62:	3b01      	subeq	r3, #1
    dd64:	d0f9      	beq.n	dd5a <__aeabi_fdiv+0xda>
    dd66:	ea41 010c 	orr.w	r1, r1, r12
    dd6a:	e795      	b.n	dc98 <__aeabi_fdiv+0x18>
    dd6c:	ea0c 53d1 	and.w	r3, r12, r1, lsr #23
    dd70:	ea92 0f0c 	teq	r2, r12
    dd74:	d108      	bne.n	dd88 <__aeabi_fdiv+0x108>
    dd76:	0242      	lsls	r2, r0, #9
    dd78:	f47f af7d 	bne.w	dc76 <__aeabi_fmul+0x15e>
    dd7c:	ea93 0f0c 	teq	r3, r12
    dd80:	f47f af70 	bne.w	dc64 <__aeabi_fmul+0x14c>
    dd84:	4608      	mov	r0, r1
    dd86:	e776      	b.n	dc76 <__aeabi_fmul+0x15e>
    dd88:	ea93 0f0c 	teq	r3, r12
    dd8c:	d104      	bne.n	dd98 <__aeabi_fdiv+0x118>
    dd8e:	024b      	lsls	r3, r1, #9
    dd90:	f43f af4c 	beq.w	dc2c <__aeabi_fmul+0x114>
    dd94:	4608      	mov	r0, r1
    dd96:	e76e      	b.n	dc76 <__aeabi_fmul+0x15e>
    dd98:	f030 4c00 	bics.w	r12, r0, #2147483648	; 0x80000000
    dd9c:	bf18      	it	ne
    dd9e:	f031 4c00 	bicsne.w	r12, r1, #2147483648	; 0x80000000
    dda2:	d1ca      	bne.n	dd3a <__aeabi_fdiv+0xba>
    dda4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    dda8:	f47f af5c 	bne.w	dc64 <__aeabi_fmul+0x14c>
    ddac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    ddb0:	f47f af3c 	bne.w	dc2c <__aeabi_fmul+0x114>
    ddb4:	e75f      	b.n	dc76 <__aeabi_fmul+0x15e>
    ddb6:	bf00      	nop

0000ddb8 <__aeabi_f2iz>:
    ddb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
    ddbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    ddc0:	d30f      	bcc.n	dde2 <__aeabi_f2iz+0x2a>
    ddc2:	f04f 039e 	mov.w	r3, #158	; 0x9e
    ddc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    ddca:	d90d      	bls.n	dde8 <__aeabi_f2iz+0x30>
    ddcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
    ddd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ddd4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    ddd8:	fa23 f002 	lsr.w	r0, r3, r2
    dddc:	bf18      	it	ne
    ddde:	4240      	negne	r0, r0
    dde0:	4770      	bx	r14
    dde2:	f04f 0000 	mov.w	r0, #0
    dde6:	4770      	bx	r14
    dde8:	f112 0f61 	cmn.w	r2, #97	; 0x61
    ddec:	d101      	bne.n	ddf2 <__aeabi_f2iz+0x3a>
    ddee:	0242      	lsls	r2, r0, #9
    ddf0:	d105      	bne.n	ddfe <__aeabi_f2iz+0x46>
    ddf2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    ddf6:	bf08      	it	eq
    ddf8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    ddfc:	4770      	bx	r14
    ddfe:	f04f 0000 	mov.w	r0, #0
    de02:	4770      	bx	r14

0000de04 <__aeabi_uldivmod>:
    de04:	b94b      	cbnz	r3, de1a <__aeabi_uldivmod+0x16>
    de06:	b942      	cbnz	r2, de1a <__aeabi_uldivmod+0x16>
    de08:	2900      	cmp	r1, #0
    de0a:	bf08      	it	eq
    de0c:	2800      	cmpeq	r0, #0
    de0e:	d002      	beq.n	de16 <__aeabi_uldivmod+0x12>
    de10:	f04f 31ff 	mov.w	r1, #4294967295
    de14:	4608      	mov	r0, r1
    de16:	f000 b83b 	b.w	de90 <__aeabi_idiv0>
    de1a:	b082      	sub	sp, #8
    de1c:	46ec      	mov	r12, r13
    de1e:	e92d 5000 	stmdb	r13!, {r12, r14}
    de22:	f000 f81d 	bl	de60 <__gnu_uldivmod_helper>
    de26:	f8dd e004 	ldr.w	r14, [r13, #4]
    de2a:	b002      	add	sp, #8
    de2c:	bc0c      	pop	{r2, r3}
    de2e:	4770      	bx	r14

0000de30 <__gnu_ldivmod_helper>:
    de30:	e92d 43f8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r14}
    de34:	9c08      	ldr	r4, [sp, #32]
    de36:	4615      	mov	r5, r2
    de38:	4698      	mov	r8, r3
    de3a:	4606      	mov	r6, r0
    de3c:	460f      	mov	r7, r1
    de3e:	f000 f829 	bl	de94 <__divdi3>
    de42:	fb05 f901 	mul.w	r9, r5, r1
    de46:	fba5 2300 	umull	r2, r3, r5, r0
    de4a:	fb00 9c08 	mla	r12, r0, r8, r9
    de4e:	4463      	add	r3, r12
    de50:	1ab2      	subs	r2, r6, r2
    de52:	eb67 0303 	sbc.w	r3, r7, r3
    de56:	e9c4 2300 	strd	r2, r3, [r4]
    de5a:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}
    de5e:	bf00      	nop

0000de60 <__gnu_uldivmod_helper>:
    de60:	e92d 43f8 	stmdb	r13!, {r3, r4, r5, r6, r7, r8, r9, r14}
    de64:	9e08      	ldr	r6, [sp, #32]
    de66:	4617      	mov	r7, r2
    de68:	4680      	mov	r8, r0
    de6a:	4689      	mov	r9, r1
    de6c:	461d      	mov	r5, r3
    de6e:	f000 f96f 	bl	e150 <__udivdi3>
    de72:	fb00 f305 	mul.w	r3, r0, r5
    de76:	fba0 4507 	umull	r4, r5, r0, r7
    de7a:	fb07 3701 	mla	r7, r7, r1, r3
    de7e:	443d      	add	r5, r7
    de80:	ebb8 0404 	subs.w	r4, r8, r4
    de84:	eb69 0505 	sbc.w	r5, r9, r5
    de88:	e9c6 4500 	strd	r4, r5, [r6]
    de8c:	e8bd 83f8 	ldmia.w	r13!, {r3, r4, r5, r6, r7, r8, r9, r15}

0000de90 <__aeabi_idiv0>:
    de90:	4770      	bx	r14
    de92:	bf00      	nop

0000de94 <__divdi3>:
    de94:	2900      	cmp	r1, #0
    de96:	e92d 0ff0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9, r10, r11}
    de9a:	bfa8      	it	ge
    de9c:	2600      	movge	r6, #0
    de9e:	f2c0 80ab 	blt.w	dff8 <__divdi3+0x164>
    dea2:	2b00      	cmp	r3, #0
    dea4:	f2c0 80a3 	blt.w	dfee <__divdi3+0x15a>
    dea8:	4689      	mov	r9, r1
    deaa:	4690      	mov	r8, r2
    deac:	469c      	mov	r12, r3
    deae:	4614      	mov	r4, r2
    deb0:	4605      	mov	r5, r0
    deb2:	460f      	mov	r7, r1
    deb4:	2b00      	cmp	r3, #0
    deb6:	d148      	bne.n	df4a <__divdi3+0xb6>
    deb8:	428a      	cmp	r2, r1
    deba:	d95c      	bls.n	df76 <__divdi3+0xe2>
    debc:	fab2 f382 	clz	r3, r2
    dec0:	b153      	cbz	r3, ded8 <__divdi3+0x44>
    dec2:	f1c3 0220 	rsb	r2, r3, #32
    dec6:	fa01 f703 	lsl.w	r7, r1, r3
    deca:	fa20 f202 	lsr.w	r2, r0, r2
    dece:	fa08 f403 	lsl.w	r4, r8, r3
    ded2:	fa00 f503 	lsl.w	r5, r0, r3
    ded6:	4317      	orrs	r7, r2
    ded8:	0c21      	lsrs	r1, r4, #16
    deda:	fbb7 f2f1 	udiv	r2, r7, r1
    dede:	fb01 7712 	mls	r7, r1, r2, r7
    dee2:	b2a0      	uxth	r0, r4
    dee4:	fb00 f302 	mul.w	r3, r0, r2
    dee8:	ea4f 4c15 	mov.w	r12, r5, lsr #16
    deec:	ea4c 4707 	orr.w	r7, r12, r7, lsl #16
    def0:	42bb      	cmp	r3, r7
    def2:	d909      	bls.n	df08 <__divdi3+0x74>
    def4:	193f      	adds	r7, r7, r4
    def6:	f102 3cff 	add.w	r12, r2, #4294967295
    defa:	d204      	bcs.n	df06 <__divdi3+0x72>
    defc:	42bb      	cmp	r3, r7
    defe:	bf84      	itt	hi
    df00:	3a02      	subhi	r2, #2
    df02:	193f      	addhi	r7, r7, r4
    df04:	d800      	bhi.n	df08 <__divdi3+0x74>
    df06:	4662      	mov	r2, r12
    df08:	1aff      	subs	r7, r7, r3
    df0a:	fbb7 f3f1 	udiv	r3, r7, r1
    df0e:	fb01 7113 	mls	r1, r1, r3, r7
    df12:	fb00 f003 	mul.w	r0, r0, r3
    df16:	b2ad      	uxth	r5, r5
    df18:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
    df1c:	4288      	cmp	r0, r1
    df1e:	d908      	bls.n	df32 <__divdi3+0x9e>
    df20:	1909      	adds	r1, r1, r4
    df22:	f103 37ff 	add.w	r7, r3, #4294967295
    df26:	d203      	bcs.n	df30 <__divdi3+0x9c>
    df28:	4288      	cmp	r0, r1
    df2a:	bf88      	it	hi
    df2c:	3b02      	subhi	r3, #2
    df2e:	d800      	bhi.n	df32 <__divdi3+0x9e>
    df30:	463b      	mov	r3, r7
    df32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    df36:	2200      	movs	r2, #0
    df38:	4618      	mov	r0, r3
    df3a:	4611      	mov	r1, r2
    df3c:	b116      	cbz	r6, df44 <__divdi3+0xb0>
    df3e:	4240      	negs	r0, r0
    df40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    df44:	e8bd 0ff0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9, r10, r11}
    df48:	4770      	bx	r14
    df4a:	428b      	cmp	r3, r1
    df4c:	bf84      	itt	hi
    df4e:	2200      	movhi	r2, #0
    df50:	4613      	movhi	r3, r2
    df52:	d8f1      	bhi.n	df38 <__divdi3+0xa4>
    df54:	fabc f18c 	clz	r1, r12
    df58:	2900      	cmp	r1, #0
    df5a:	f040 8095 	bne.w	e088 <__divdi3+0x1f4>
    df5e:	45cc      	cmp	r12, r9
    df60:	bf28      	it	cs
    df62:	4580      	cmpcs	r8, r0
    df64:	bf8c      	ite	hi
    df66:	2200      	movhi	r2, #0
    df68:	2201      	movls	r2, #1
    df6a:	bf9c      	itt	ls
    df6c:	2301      	movls	r3, #1
    df6e:	460a      	movls	r2, r1
    df70:	d9e2      	bls.n	df38 <__divdi3+0xa4>
    df72:	4613      	mov	r3, r2
    df74:	e7e0      	b.n	df38 <__divdi3+0xa4>
    df76:	b912      	cbnz	r2, df7e <__divdi3+0xea>
    df78:	2301      	movs	r3, #1
    df7a:	fbb3 f4f2 	udiv	r4, r3, r2
    df7e:	fab4 f384 	clz	r3, r4
    df82:	2b00      	cmp	r3, #0
    df84:	d13e      	bne.n	e004 <__divdi3+0x170>
    df86:	1b3f      	subs	r7, r7, r4
    df88:	0c20      	lsrs	r0, r4, #16
    df8a:	fa1f fc84 	uxth.w	r12, r4
    df8e:	2201      	movs	r2, #1
    df90:	fbb7 f1f0 	udiv	r1, r7, r0
    df94:	fb00 7711 	mls	r7, r0, r1, r7
    df98:	fb0c f301 	mul.w	r3, r12, r1
    df9c:	ea4f 4815 	mov.w	r8, r5, lsr #16
    dfa0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
    dfa4:	42bb      	cmp	r3, r7
    dfa6:	d90a      	bls.n	dfbe <__divdi3+0x12a>
    dfa8:	193f      	adds	r7, r7, r4
    dfaa:	f101 38ff 	add.w	r8, r1, #4294967295
    dfae:	f080 80c7 	bcs.w	e140 <__divdi3+0x2ac>
    dfb2:	42bb      	cmp	r3, r7
    dfb4:	bf84      	itt	hi
    dfb6:	3902      	subhi	r1, #2
    dfb8:	193f      	addhi	r7, r7, r4
    dfba:	f240 80c1 	bls.w	e140 <__divdi3+0x2ac>
    dfbe:	1aff      	subs	r7, r7, r3
    dfc0:	fbb7 f3f0 	udiv	r3, r7, r0
    dfc4:	fb00 7013 	mls	r0, r0, r3, r7
    dfc8:	fb0c fc03 	mul.w	r12, r12, r3
    dfcc:	b2ad      	uxth	r5, r5
    dfce:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
    dfd2:	4584      	cmp	r12, r0
    dfd4:	d908      	bls.n	dfe8 <__divdi3+0x154>
    dfd6:	1900      	adds	r0, r0, r4
    dfd8:	f103 37ff 	add.w	r7, r3, #4294967295
    dfdc:	d203      	bcs.n	dfe6 <__divdi3+0x152>
    dfde:	4584      	cmp	r12, r0
    dfe0:	bf88      	it	hi
    dfe2:	3b02      	subhi	r3, #2
    dfe4:	d800      	bhi.n	dfe8 <__divdi3+0x154>
    dfe6:	463b      	mov	r3, r7
    dfe8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    dfec:	e7a4      	b.n	df38 <__divdi3+0xa4>
    dfee:	43f6      	mvns	r6, r6
    dff0:	4252      	negs	r2, r2
    dff2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    dff6:	e757      	b.n	dea8 <__divdi3+0x14>
    dff8:	4240      	negs	r0, r0
    dffa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    dffe:	f04f 36ff 	mov.w	r6, #4294967295
    e002:	e74e      	b.n	dea2 <__divdi3+0xe>
    e004:	409c      	lsls	r4, r3
    e006:	f1c3 0920 	rsb	r9, r3, #32
    e00a:	fa27 f109 	lsr.w	r1, r7, r9
    e00e:	fa25 f909 	lsr.w	r9, r5, r9
    e012:	409f      	lsls	r7, r3
    e014:	0c20      	lsrs	r0, r4, #16
    e016:	fbb1 f2f0 	udiv	r2, r1, r0
    e01a:	fb00 1112 	mls	r1, r0, r2, r1
    e01e:	fa1f fc84 	uxth.w	r12, r4
    e022:	fb0c f802 	mul.w	r8, r12, r2
    e026:	ea49 0907 	orr.w	r9, r9, r7
    e02a:	ea4f 4719 	mov.w	r7, r9, lsr #16
    e02e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
    e032:	4588      	cmp	r8, r1
    e034:	fa05 f503 	lsl.w	r5, r5, r3
    e038:	d909      	bls.n	e04e <__divdi3+0x1ba>
    e03a:	1909      	adds	r1, r1, r4
    e03c:	f102 33ff 	add.w	r3, r2, #4294967295
    e040:	f080 8084 	bcs.w	e14c <__divdi3+0x2b8>
    e044:	4588      	cmp	r8, r1
    e046:	bf84      	itt	hi
    e048:	3a02      	subhi	r2, #2
    e04a:	1909      	addhi	r1, r1, r4
    e04c:	d97e      	bls.n	e14c <__divdi3+0x2b8>
    e04e:	ebc8 0101 	rsb	r1, r8, r1
    e052:	fbb1 f3f0 	udiv	r3, r1, r0
    e056:	fb00 1713 	mls	r7, r0, r3, r1
    e05a:	fb0c f803 	mul.w	r8, r12, r3
    e05e:	fa1f f989 	uxth.w	r9, r9
    e062:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
    e066:	45b8      	cmp	r8, r7
    e068:	d909      	bls.n	e07e <__divdi3+0x1ea>
    e06a:	193f      	adds	r7, r7, r4
    e06c:	f103 31ff 	add.w	r1, r3, #4294967295
    e070:	d204      	bcs.n	e07c <__divdi3+0x1e8>
    e072:	45b8      	cmp	r8, r7
    e074:	bf84      	itt	hi
    e076:	3b02      	subhi	r3, #2
    e078:	193f      	addhi	r7, r7, r4
    e07a:	d800      	bhi.n	e07e <__divdi3+0x1ea>
    e07c:	460b      	mov	r3, r1
    e07e:	ebc8 0707 	rsb	r7, r8, r7
    e082:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    e086:	e783      	b.n	df90 <__divdi3+0xfc>
    e088:	f1c1 0320 	rsb	r3, r1, #32
    e08c:	fa28 f203 	lsr.w	r2, r8, r3
    e090:	fa0c fc01 	lsl.w	r12, r12, r1
    e094:	fa29 f403 	lsr.w	r4, r9, r3
    e098:	fa20 f303 	lsr.w	r3, r0, r3
    e09c:	fa09 f901 	lsl.w	r9, r9, r1
    e0a0:	ea42 0c0c 	orr.w	r12, r2, r12
    e0a4:	ea4f 4a1c 	mov.w	r10, r12, lsr #16
    e0a8:	fbb4 f7fa 	udiv	r7, r4, r10
    e0ac:	fb0a 4417 	mls	r4, r10, r7, r4
    e0b0:	fa1f fb8c 	uxth.w	r11, r12
    e0b4:	fb0b f007 	mul.w	r0, r11, r7
    e0b8:	ea43 0909 	orr.w	r9, r3, r9
    e0bc:	ea4f 4319 	mov.w	r3, r9, lsr #16
    e0c0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    e0c4:	42a0      	cmp	r0, r4
    e0c6:	fa08 f201 	lsl.w	r2, r8, r1
    e0ca:	d909      	bls.n	e0e0 <__divdi3+0x24c>
    e0cc:	eb14 040c 	adds.w	r4, r4, r12
    e0d0:	f107 33ff 	add.w	r3, r7, #4294967295
    e0d4:	d238      	bcs.n	e148 <__divdi3+0x2b4>
    e0d6:	42a0      	cmp	r0, r4
    e0d8:	bf84      	itt	hi
    e0da:	3f02      	subhi	r7, #2
    e0dc:	4464      	addhi	r4, r12
    e0de:	d933      	bls.n	e148 <__divdi3+0x2b4>
    e0e0:	1a20      	subs	r0, r4, r0
    e0e2:	fbb0 f3fa 	udiv	r3, r0, r10
    e0e6:	fb0a 0013 	mls	r0, r10, r3, r0
    e0ea:	fb0b fb03 	mul.w	r11, r11, r3
    e0ee:	fa1f f989 	uxth.w	r9, r9
    e0f2:	ea49 4000 	orr.w	r0, r9, r0, lsl #16
    e0f6:	4583      	cmp	r11, r0
    e0f8:	d909      	bls.n	e10e <__divdi3+0x27a>
    e0fa:	eb10 000c 	adds.w	r0, r0, r12
    e0fe:	f103 34ff 	add.w	r4, r3, #4294967295
    e102:	d21f      	bcs.n	e144 <__divdi3+0x2b0>
    e104:	4583      	cmp	r11, r0
    e106:	bf84      	itt	hi
    e108:	3b02      	subhi	r3, #2
    e10a:	4460      	addhi	r0, r12
    e10c:	d91a      	bls.n	e144 <__divdi3+0x2b0>
    e10e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
    e112:	fba7 2302 	umull	r2, r3, r7, r2
    e116:	ebcb 0000 	rsb	r0, r11, r0
    e11a:	4298      	cmp	r0, r3
    e11c:	d30d      	bcc.n	e13a <__divdi3+0x2a6>
    e11e:	fa05 f101 	lsl.w	r1, r5, r1
    e122:	bf14      	ite	ne
    e124:	2300      	movne	r3, #0
    e126:	2301      	moveq	r3, #1
    e128:	4291      	cmp	r1, r2
    e12a:	bf2c      	ite	cs
    e12c:	2200      	movcs	r2, #0
    e12e:	f003 0201 	andcc.w	r2, r3, #1
    e132:	463b      	mov	r3, r7
    e134:	2a00      	cmp	r2, #0
    e136:	f43f aeff 	beq.w	df38 <__divdi3+0xa4>
    e13a:	1e7b      	subs	r3, r7, #1
    e13c:	2200      	movs	r2, #0
    e13e:	e6fb      	b.n	df38 <__divdi3+0xa4>
    e140:	4641      	mov	r1, r8
    e142:	e73c      	b.n	dfbe <__divdi3+0x12a>
    e144:	4623      	mov	r3, r4
    e146:	e7e2      	b.n	e10e <__divdi3+0x27a>
    e148:	461f      	mov	r7, r3
    e14a:	e7c9      	b.n	e0e0 <__divdi3+0x24c>
    e14c:	461a      	mov	r2, r3
    e14e:	e77e      	b.n	e04e <__divdi3+0x1ba>

0000e150 <__udivdi3>:
    e150:	e92d 03f0 	stmdb	r13!, {r4, r5, r6, r7, r8, r9}
    e154:	4614      	mov	r4, r2
    e156:	4605      	mov	r5, r0
    e158:	460e      	mov	r6, r1
    e15a:	2b00      	cmp	r3, #0
    e15c:	d142      	bne.n	e1e4 <__udivdi3+0x94>
    e15e:	428a      	cmp	r2, r1
    e160:	d955      	bls.n	e20e <__udivdi3+0xbe>
    e162:	fab2 f382 	clz	r3, r2
    e166:	b14b      	cbz	r3, e17c <__udivdi3+0x2c>
    e168:	f1c3 0620 	rsb	r6, r3, #32
    e16c:	4099      	lsls	r1, r3
    e16e:	fa20 f606 	lsr.w	r6, r0, r6
    e172:	fa02 f403 	lsl.w	r4, r2, r3
    e176:	fa00 f503 	lsl.w	r5, r0, r3
    e17a:	430e      	orrs	r6, r1
    e17c:	0c22      	lsrs	r2, r4, #16
    e17e:	fbb6 f0f2 	udiv	r0, r6, r2
    e182:	fb02 6610 	mls	r6, r2, r0, r6
    e186:	b2a7      	uxth	r7, r4
    e188:	fb07 f300 	mul.w	r3, r7, r0
    e18c:	ea4f 4c15 	mov.w	r12, r5, lsr #16
    e190:	ea4c 4606 	orr.w	r6, r12, r6, lsl #16
    e194:	42b3      	cmp	r3, r6
    e196:	d909      	bls.n	e1ac <__udivdi3+0x5c>
    e198:	1936      	adds	r6, r6, r4
    e19a:	f100 31ff 	add.w	r1, r0, #4294967295
    e19e:	d204      	bcs.n	e1aa <__udivdi3+0x5a>
    e1a0:	42b3      	cmp	r3, r6
    e1a2:	bf84      	itt	hi
    e1a4:	3802      	subhi	r0, #2
    e1a6:	1936      	addhi	r6, r6, r4
    e1a8:	d800      	bhi.n	e1ac <__udivdi3+0x5c>
    e1aa:	4608      	mov	r0, r1
    e1ac:	1af6      	subs	r6, r6, r3
    e1ae:	fbb6 f3f2 	udiv	r3, r6, r2
    e1b2:	fb02 6213 	mls	r2, r2, r3, r6
    e1b6:	fb07 f703 	mul.w	r7, r7, r3
    e1ba:	b2ad      	uxth	r5, r5
    e1bc:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
    e1c0:	4297      	cmp	r7, r2
    e1c2:	d909      	bls.n	e1d8 <__udivdi3+0x88>
    e1c4:	1912      	adds	r2, r2, r4
    e1c6:	f103 31ff 	add.w	r1, r3, #4294967295
    e1ca:	f080 80ed 	bcs.w	e3a8 <__udivdi3+0x258>
    e1ce:	4297      	cmp	r7, r2
    e1d0:	bf88      	it	hi
    e1d2:	3b02      	subhi	r3, #2
    e1d4:	f240 80e8 	bls.w	e3a8 <__udivdi3+0x258>
    e1d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    e1dc:	2100      	movs	r1, #0
    e1de:	e8bd 03f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9}
    e1e2:	4770      	bx	r14
    e1e4:	428b      	cmp	r3, r1
    e1e6:	bf84      	itt	hi
    e1e8:	2100      	movhi	r1, #0
    e1ea:	4608      	movhi	r0, r1
    e1ec:	d8f7      	bhi.n	e1de <__udivdi3+0x8e>
    e1ee:	fab3 f483 	clz	r4, r3
    e1f2:	2c00      	cmp	r4, #0
    e1f4:	d14a      	bne.n	e28c <__udivdi3+0x13c>
    e1f6:	428b      	cmp	r3, r1
    e1f8:	bf28      	it	cs
    e1fa:	4282      	cmpcs	r2, r0
    e1fc:	bf8c      	ite	hi
    e1fe:	2100      	movhi	r1, #0
    e200:	2101      	movls	r1, #1
    e202:	bf9c      	itt	ls
    e204:	2001      	movls	r0, #1
    e206:	4621      	movls	r1, r4
    e208:	d9e9      	bls.n	e1de <__udivdi3+0x8e>
    e20a:	4608      	mov	r0, r1
    e20c:	e7e7      	b.n	e1de <__udivdi3+0x8e>
    e20e:	b912      	cbnz	r2, e216 <__udivdi3+0xc6>
    e210:	2401      	movs	r4, #1
    e212:	fbb4 f4f2 	udiv	r4, r4, r2
    e216:	fab4 f784 	clz	r7, r4
    e21a:	2f00      	cmp	r7, #0
    e21c:	f040 8084 	bne.w	e328 <__udivdi3+0x1d8>
    e220:	1b0b      	subs	r3, r1, r4
    e222:	0c26      	lsrs	r6, r4, #16
    e224:	b2a7      	uxth	r7, r4
    e226:	2101      	movs	r1, #1
    e228:	fbb3 f0f6 	udiv	r0, r3, r6
    e22c:	fb06 3310 	mls	r3, r6, r0, r3
    e230:	fb07 f200 	mul.w	r2, r7, r0
    e234:	ea4f 4c15 	mov.w	r12, r5, lsr #16
    e238:	ea4c 4303 	orr.w	r3, r12, r3, lsl #16
    e23c:	429a      	cmp	r2, r3
    e23e:	d90a      	bls.n	e256 <__udivdi3+0x106>
    e240:	191b      	adds	r3, r3, r4
    e242:	f100 3cff 	add.w	r12, r0, #4294967295
    e246:	f080 80b1 	bcs.w	e3ac <__udivdi3+0x25c>
    e24a:	429a      	cmp	r2, r3
    e24c:	bf84      	itt	hi
    e24e:	3802      	subhi	r0, #2
    e250:	191b      	addhi	r3, r3, r4
    e252:	f240 80ab 	bls.w	e3ac <__udivdi3+0x25c>
    e256:	1a9b      	subs	r3, r3, r2
    e258:	fbb3 f2f6 	udiv	r2, r3, r6
    e25c:	fb06 3312 	mls	r3, r6, r2, r3
    e260:	fb07 f702 	mul.w	r7, r7, r2
    e264:	b2ad      	uxth	r5, r5
    e266:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    e26a:	42af      	cmp	r7, r5
    e26c:	d909      	bls.n	e282 <__udivdi3+0x132>
    e26e:	192c      	adds	r4, r5, r4
    e270:	f102 33ff 	add.w	r3, r2, #4294967295
    e274:	f080 809c 	bcs.w	e3b0 <__udivdi3+0x260>
    e278:	42a7      	cmp	r7, r4
    e27a:	bf88      	it	hi
    e27c:	3a02      	subhi	r2, #2
    e27e:	f240 8097 	bls.w	e3b0 <__udivdi3+0x260>
    e282:	e8bd 03f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9}
    e286:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
    e28a:	4770      	bx	r14
    e28c:	f1c4 0520 	rsb	r5, r4, #32
    e290:	fa22 f705 	lsr.w	r7, r2, r5
    e294:	40a3      	lsls	r3, r4
    e296:	fa21 f605 	lsr.w	r6, r1, r5
    e29a:	fa20 f505 	lsr.w	r5, r0, r5
    e29e:	40a1      	lsls	r1, r4
    e2a0:	433b      	orrs	r3, r7
    e2a2:	ea4f 4813 	mov.w	r8, r3, lsr #16
    e2a6:	fbb6 fcf8 	udiv	r12, r6, r8
    e2aa:	fb08 661c 	mls	r6, r8, r12, r6
    e2ae:	fa1f f983 	uxth.w	r9, r3
    e2b2:	fb09 f70c 	mul.w	r7, r9, r12
    e2b6:	4329      	orrs	r1, r5
    e2b8:	0c0d      	lsrs	r5, r1, #16
    e2ba:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    e2be:	42b7      	cmp	r7, r6
    e2c0:	fa02 f204 	lsl.w	r2, r2, r4
    e2c4:	d904      	bls.n	e2d0 <__udivdi3+0x180>
    e2c6:	18f6      	adds	r6, r6, r3
    e2c8:	f10c 35ff 	add.w	r5, r12, #4294967295
    e2cc:	d378      	bcc.n	e3c0 <__udivdi3+0x270>
    e2ce:	46ac      	mov	r12, r5
    e2d0:	1bf6      	subs	r6, r6, r7
    e2d2:	fbb6 f7f8 	udiv	r7, r6, r8
    e2d6:	fb08 6617 	mls	r6, r8, r7, r6
    e2da:	fb09 f907 	mul.w	r9, r9, r7
    e2de:	b289      	uxth	r1, r1
    e2e0:	ea41 4506 	orr.w	r5, r1, r6, lsl #16
    e2e4:	45a9      	cmp	r9, r5
    e2e6:	d904      	bls.n	e2f2 <__udivdi3+0x1a2>
    e2e8:	18ed      	adds	r5, r5, r3
    e2ea:	f107 31ff 	add.w	r1, r7, #4294967295
    e2ee:	d361      	bcc.n	e3b4 <__udivdi3+0x264>
    e2f0:	460f      	mov	r7, r1
    e2f2:	ea47 470c 	orr.w	r7, r7, r12, lsl #16
    e2f6:	fba7 2302 	umull	r2, r3, r7, r2
    e2fa:	ebc9 0505 	rsb	r5, r9, r5
    e2fe:	429d      	cmp	r5, r3
    e300:	d30d      	bcc.n	e31e <__udivdi3+0x1ce>
    e302:	fa00 f104 	lsl.w	r1, r0, r4
    e306:	bf14      	ite	ne
    e308:	2500      	movne	r5, #0
    e30a:	2501      	moveq	r5, #1
    e30c:	4291      	cmp	r1, r2
    e30e:	bf2c      	ite	cs
    e310:	2100      	movcs	r1, #0
    e312:	f005 0101 	andcc.w	r1, r5, #1
    e316:	4638      	mov	r0, r7
    e318:	2900      	cmp	r1, #0
    e31a:	f43f af60 	beq.w	e1de <__udivdi3+0x8e>
    e31e:	1e78      	subs	r0, r7, #1
    e320:	2100      	movs	r1, #0
    e322:	e8bd 03f0 	ldmia.w	r13!, {r4, r5, r6, r7, r8, r9}
    e326:	4770      	bx	r14
    e328:	40bc      	lsls	r4, r7
    e32a:	f1c7 0320 	rsb	r3, r7, #32
    e32e:	fa21 fc03 	lsr.w	r12, r1, r3
    e332:	fa20 f303 	lsr.w	r3, r0, r3
    e336:	40b9      	lsls	r1, r7
    e338:	0c26      	lsrs	r6, r4, #16
    e33a:	fbbc f8f6 	udiv	r8, r12, r6
    e33e:	fb06 cc18 	mls	r12, r6, r8, r12
    e342:	fa1f f984 	uxth.w	r9, r4
    e346:	fb09 f208 	mul.w	r2, r9, r8
    e34a:	4319      	orrs	r1, r3
    e34c:	0c0b      	lsrs	r3, r1, #16
    e34e:	ea43 4c0c 	orr.w	r12, r3, r12, lsl #16
    e352:	4562      	cmp	r2, r12
    e354:	fa00 f507 	lsl.w	r5, r0, r7
    e358:	d90a      	bls.n	e370 <__udivdi3+0x220>
    e35a:	eb1c 0c04 	adds.w	r12, r12, r4
    e35e:	f108 33ff 	add.w	r3, r8, #4294967295
    e362:	d234      	bcs.n	e3ce <__udivdi3+0x27e>
    e364:	4562      	cmp	r2, r12
    e366:	bf84      	itt	hi
    e368:	f1a8 0802 	subhi.w	r8, r8, #2
    e36c:	44a4      	addhi	r12, r4
    e36e:	d92e      	bls.n	e3ce <__udivdi3+0x27e>
    e370:	ebc2 0c0c 	rsb	r12, r2, r12
    e374:	fbbc f2f6 	udiv	r2, r12, r6
    e378:	fb06 c312 	mls	r3, r6, r2, r12
    e37c:	fb09 f002 	mul.w	r0, r9, r2
    e380:	b289      	uxth	r1, r1
    e382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    e386:	4298      	cmp	r0, r3
    e388:	d909      	bls.n	e39e <__udivdi3+0x24e>
    e38a:	191b      	adds	r3, r3, r4
    e38c:	f102 31ff 	add.w	r1, r2, #4294967295
    e390:	d204      	bcs.n	e39c <__udivdi3+0x24c>
    e392:	4298      	cmp	r0, r3
    e394:	bf84      	itt	hi
    e396:	3a02      	subhi	r2, #2
    e398:	191b      	addhi	r3, r3, r4
    e39a:	d800      	bhi.n	e39e <__udivdi3+0x24e>
    e39c:	460a      	mov	r2, r1
    e39e:	1a1b      	subs	r3, r3, r0
    e3a0:	ea42 4108 	orr.w	r1, r2, r8, lsl #16
    e3a4:	464f      	mov	r7, r9
    e3a6:	e73f      	b.n	e228 <__udivdi3+0xd8>
    e3a8:	460b      	mov	r3, r1
    e3aa:	e715      	b.n	e1d8 <__udivdi3+0x88>
    e3ac:	4660      	mov	r0, r12
    e3ae:	e752      	b.n	e256 <__udivdi3+0x106>
    e3b0:	461a      	mov	r2, r3
    e3b2:	e766      	b.n	e282 <__udivdi3+0x132>
    e3b4:	45a9      	cmp	r9, r5
    e3b6:	bf84      	itt	hi
    e3b8:	3f02      	subhi	r7, #2
    e3ba:	18ed      	addhi	r5, r5, r3
    e3bc:	d899      	bhi.n	e2f2 <__udivdi3+0x1a2>
    e3be:	e797      	b.n	e2f0 <__udivdi3+0x1a0>
    e3c0:	42b7      	cmp	r7, r6
    e3c2:	bf84      	itt	hi
    e3c4:	f1ac 0c02 	subhi.w	r12, r12, #2
    e3c8:	18f6      	addhi	r6, r6, r3
    e3ca:	d881      	bhi.n	e2d0 <__udivdi3+0x180>
    e3cc:	e77f      	b.n	e2ce <__udivdi3+0x17e>
    e3ce:	4698      	mov	r8, r3
    e3d0:	e7ce      	b.n	e370 <__udivdi3+0x220>
    e3d2:	bf00      	nop
